// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Protocol.pb.h"

@implementation ProtocolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ProtocolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL DeviceTypeIsValidValue(DeviceType value) {
  switch (value) {
    case DeviceTypeDesktop:
    case DeviceTypeIpad:
    case DeviceTypeIphone:
    case DeviceTypeAndroid:
    case DeviceTypeBb:
      return YES;
    default:
      return NO;
  }
}
BOOL StatusReturnIsValidValue(StatusReturn value) {
  switch (value) {
    case StatusReturnNoresult:
    case StatusReturnResult:
    case StatusReturnError:
    case StatusReturnSessionexp:
    case StatusReturnDoublelogin:
    case StatusReturnUpdateversion:
    case StatusReturnForcelogout:
      return YES;
    default:
      return NO;
  }
}
BOOL UserLoginStatusIsValidValue(UserLoginStatus value) {
  switch (value) {
    case UserLoginStatusIsLogin:
    case UserLoginStatusIsLogout:
    case UserLoginStatusIsDoubleLogin:
    case UserLoginStatusIsSessionExp:
    case UserLoginStatusIsForceLogoutApp:
    case UserLoginStatusIsForceLogoutPriv:
      return YES;
    default:
      return NO;
  }
}
BOOL ChangePasswordIsValidValue(ChangePassword value) {
  switch (value) {
    case ChangePasswordSuccess:
    case ChangePasswordSessionExpired:
    case ChangePasswordNotCorrect:
      return YES;
    default:
      return NO;
  }
}
BOOL ServerTypeIsValidValue(ServerType value) {
  switch (value) {
    case ServerTypeSystemAdmin:
    case ServerTypeTradingChannel:
    case ServerTypeMarketInfo:
    case ServerTypeOms:
    case ServerTypeRisk:
    case ServerTypeProxy:
    case ServerTypeMartin:
      return YES;
    default:
      return NO;
  }
}
BOOL BoardIsValidValue(Board value) {
  switch (value) {
    case BoardRg:
    case BoardTn:
    case BoardNg:
    case BoardRo:
    case BoardRf:
      return YES;
    default:
      return NO;
  }
}
BOOL InvestorTypeIsValidValue(InvestorType value) {
  switch (value) {
    case InvestorTypeD:
    case InvestorTypeF:
      return YES;
    default:
      return NO;
  }
}
BOOL SortIsValidValue(Sort value) {
  switch (value) {
    case SortOlder:
    case SortNewer:
    case SortNow:
      return YES;
    default:
      return NO;
  }
}
BOOL OrderCommandIsValidValue(OrderCommand value) {
  switch (value) {
    case OrderCommandBid:
    case OrderCommandOffer:
    case OrderCommandCancelAmendBid:
    case OrderCommandCancelAmendOffer:
    case OrderCommandAll:
      return YES;
    default:
      return NO;
  }
}
BOOL TradeCommandIsValidValue(TradeCommand value) {
  switch (value) {
    case TradeCommandMatched:
    case TradeCommandWithdrawn:
      return YES;
    default:
      return NO;
  }
}
BOOL SecurityTypeIsValidValue(SecurityType value) {
  switch (value) {
    case SecurityTypeOrdi:
    case SecurityTypeOrdiPreopen:
    case SecurityTypeRghi:
    case SecurityTypeWari:
    case SecurityTypeMuti:
      return YES;
    default:
      return NO;
  }
}
BOOL StatusIsValidValue(Status value) {
  switch (value) {
    case StatusActive:
    case StatusSuspend:
      return YES;
    default:
      return NO;
  }
}
BOOL OrderStatusIsValidValue(OrderStatus value) {
  switch (value) {
    case OrderStatusOpen:
    case OrderStatusPartial:
    case OrderStatusDone:
    case OrderStatusCancel:
    case OrderStatusAmmend:
      return YES;
    default:
      return NO;
  }
}
BOOL SuspendReleaseStatusIsValidValue(SuspendReleaseStatus value) {
  switch (value) {
    case SuspendReleaseStatusSuspended:
    case SuspendReleaseStatusReleased:
      return YES;
    default:
      return NO;
  }
}
BOOL RequestIsValidValue(Request value) {
  switch (value) {
    case RequestSubscribe:
    case RequestUnsubscribe:
    case RequestGet:
      return YES;
    default:
      return NO;
  }
}
BOOL RecordTypeIsValidValue(RecordType value) {
  switch (value) {
    case RecordTypeIdxTradingStatus:
    case RecordTypeIdxOrder:
    case RecordTypeIdxTrade:
    case RecordTypeIdxStockData:
    case RecordTypeIdxBrokerData:
    case RecordTypeIdxStockSummary:
    case RecordTypeIdxIndices:
    case RecordTypeIdxSuspendReleaseBroker:
    case RecordTypeIdxSuspendReleaseStock:
    case RecordTypeIdxNewsMessage:
    case RecordTypeKiTrade:
    case RecordTypeKiOrder:
    case RecordTypeKiIndices:
    case RecordTypeKiStockData:
    case RecordTypeKiBrokerData:
    case RecordTypeKiIndicesData:
    case RecordTypeKiRegionalIndicesData:
    case RecordTypeKiCurrencyData:
    case RecordTypeKiRegionalIndices:
    case RecordTypeKiCurrency:
    case RecordTypeLevel2:
    case RecordTypeOrderStatus:
    case RecordTypeStockHistory:
    case RecordTypeIndicesHistory:
    case RecordTypeBrokerSummary:
    case RecordTypeStockNetbuysell:
    case RecordTypeBrokerNetbuysell:
    case RecordTypeForeignDomestic:
    case RecordTypeTradeDetail:
    case RecordTypeOrderDetail:
    case RecordTypeKiStockSummary:
    case RecordTypeKiRequest:
    case RecordTypeKiLastTrade:
    case RecordTypeCompareHistory:
    case RecordTypeLevel3:
    case RecordTypeStopSignal:
    case RecordTypeOrderTracking:
    case RecordTypeFutures:
    case RecordTypeComodity:
    case RecordTypeFdSummary:
    case RecordTypeStockHistNetbuysell:
    case RecordTypeBrokerHistNetbuysell:
    case RecordTypeForeignHistory:
    case RecordTypeMarketSummary:
    case RecordTypeKey:
    case RecordTypeWk52104:
    case RecordTypeIdxContractData:
    case RecordTypeIdxContractSummary:
    case RecordTypeIdxMarketDepth:
    case RecordTypeKiContractData:
    case RecordTypeKiContractSummary:
    case RecordTypeKiDerivativeTrade:
    case RecordTypeDerivativeLevel2:
    case RecordTypeDerivativeLevel3:
    case RecordTypeKiLastDerivativeTrade:
    case RecordTypeIdxDerivativeTrade:
    case RecordTypeKiTopBrokerByFreq:
    case RecordTypeKiTopBrokerByVol:
    case RecordTypeKiTopBrokerByVal:
    case RecordTypeKiTopLooser:
    case RecordTypeKiTopGainer:
    case RecordTypeKiTopActive:
    case RecordTypeKiTopValue:
    case RecordTypeRequest:
    case RecordTypeMPrevilleges:
    case RecordTypeMOrderstatus:
    case RecordTypeMOrdertype:
    case RecordTypeMMenu:
    case RecordTypeMarketCapping:
    case RecordTypeSharesInfo:
    case RecordTypeMessageBroadcast:
    case RecordTypeLoginMi:
    case RecordTypeLoginOl:
    case RecordTypeClientList:
    case RecordTypeLogoutMi:
    case RecordTypeLogoutOl:
    case RecordTypeChangePassword:
    case RecordTypeChangePin:
    case RecordTypeGetStatusSession:
    case RecordTypeUpdateSessionTrade:
    case RecordTypeGetStockInHand:
    case RecordTypeGetPrivilegeUser:
    case RecordTypeGetPortfolioOrder:
    case RecordTypeGetOrderPower:
    case RecordTypeGetAvaiableStock:
    case RecordTypeSendSubmitOrder:
    case RecordTypeGetCustomerPosition:
    case RecordTypeGetCustomerExposure:
    case RecordTypeGetOrders:
    case RecordTypeGetTrades:
    case RecordTypeGetOrderLifeCycle:
    case RecordTypeGetTradesDetail:
    case RecordTypeGetAdvList:
    case RecordTypeGetNegoReceived:
    case RecordTypeGetAccountInfo:
    case RecordTypeGetPortfolioList:
    case RecordTypeGetProfitloss:
    case RecordTypeGetOrderGtc:
    case RecordTypeGetMarginAlert:
    case RecordTypeGetCashFlow:
    case RecordTypeGetCashMutation:
    case RecordTypeGetCash:
    case RecordTypeSendCashMutation:
    case RecordTypeGetGroupOrder:
    case RecordTypeGetGroupOrderDetail:
    case RecordTypeGetClientOverdue:
    case RecordTypeGetCustomerPositionPortfolio:
    case RecordTypeLogoutReset:
    case RecordTypeGetHoliday:
    case RecordTypeGetMBranch:
    case RecordTypeGetMUserlist:
    case RecordTypeGetStockInHandCash:
    case RecordTypeGetConditionalOrders:
    case RecordTypeGetTradingTarget:
    case RecordTypeSendMultipleOrder:
    case RecordTypeGetPotonganPajak:
    case RecordTypeGetCustomerPositionAvgpricePortfolio:
    case RecordTypeGetResendOrders:
    case RecordTypeGetOrdersDrc:
    case RecordTypeGetOrderPowerMatrix:
    case RecordTypeGetAvaiableStockMatrix:
    case RecordTypeGetRdnList:
    case RecordTypeGetOrderPowerAndRdn:
    case RecordTypeSubmitCashWithdraw:
    case RecordTypeGetCashWithdraw:
    case RecordTypeGetCashWithdrawList:
    case RecordTypeChangePinPassword:
      return YES;
    default:
      return NO;
  }
}
BOOL CORulesIsValidValue(CORules value) {
  switch (value) {
    case CORulesSimple:
    case CORulesIfDoneOrderSingleOrder:
    case CORulesIfDoneOrderSingleSecurities:
    case CORulesTrailingOrder:
      return YES;
    default:
      return NO;
  }
}
BOOL COWhenIsValidValue(COWhen value) {
  switch (value) {
    case COWhenLastPrice:
    case COWhenBestBidPrice:
    case COWhenBestOfferPrice:
    case COWhenTotalTradeQty:
    case COWhenBestBidQty:
    case COWhenBestOfferQty:
    case COWhenTradeQtyAtPrice:
    case COWhenQuantity:
    case COWhenFullyMatch:
    case COWhenQuantityMoreThan:
      return YES;
    default:
      return NO;
  }
}
BOOL COWhenCompareIsValidValue(COWhenCompare value) {
  switch (value) {
    case COWhenCompareGreaterEqual:
    case COWhenCompareLowerEqual:
      return YES;
    default:
      return NO;
  }
}
BOOL COTrendIsValidValue(COTrend value) {
  switch (value) {
    case COTrendUpTrend:
    case COTrendDownTrend:
      return YES;
    default:
      return NO;
  }
}
BOOL COStatusIsValidValue(COStatus value) {
  switch (value) {
    case COStatusCoActive:
    case COStatusCoNotActive:
      return YES;
    default:
      return NO;
  }
}
@interface IdxRecord ()
@property int32_t date;
@property int32_t time;
@property int32_t sequence;
@property RecordType recordType;
@property (strong) IdxTradingStatus* tradingStatus;
@property (strong) IdxOrder* order;
@property (strong) IdxTrade* trade;
@property (strong) IdxStockData* stockData;
@property (strong) IdxBrokerData* brokerData;
@property (strong) IdxStockSummary* stockSummary;
@property (strong) IdxIndices* indices;
@property (strong) IdxSuspendReleaseBroker* suspendReleaseBroker;
@property (strong) IdxSuspendReleaseStock* suspendReleaseStock;
@property (strong) NS_RETURNS_NOT_RETAINED IdxNewsMessage* newsMessage;
@property (strong) IdxMarketDepth* marketDepth;
@property (strong) IdxTrade* derivativeTrade;
@property (strong) IdxContractData* contractData;
@property (strong) IdxContractSummary* contractSummary;
@end

@implementation IdxRecord

- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasRecordType {
  return !!hasRecordType_;
}
- (void) setHasRecordType:(BOOL) value {
  hasRecordType_ = !!value;
}
@synthesize recordType;
- (BOOL) hasTradingStatus {
  return !!hasTradingStatus_;
}
- (void) setHasTradingStatus:(BOOL) value {
  hasTradingStatus_ = !!value;
}
@synthesize tradingStatus;
- (BOOL) hasOrder {
  return !!hasOrder_;
}
- (void) setHasOrder:(BOOL) value {
  hasOrder_ = !!value;
}
@synthesize order;
- (BOOL) hasTrade {
  return !!hasTrade_;
}
- (void) setHasTrade:(BOOL) value {
  hasTrade_ = !!value;
}
@synthesize trade;
- (BOOL) hasStockData {
  return !!hasStockData_;
}
- (void) setHasStockData:(BOOL) value {
  hasStockData_ = !!value;
}
@synthesize stockData;
- (BOOL) hasBrokerData {
  return !!hasBrokerData_;
}
- (void) setHasBrokerData:(BOOL) value {
  hasBrokerData_ = !!value;
}
@synthesize brokerData;
- (BOOL) hasStockSummary {
  return !!hasStockSummary_;
}
- (void) setHasStockSummary:(BOOL) value {
  hasStockSummary_ = !!value;
}
@synthesize stockSummary;
- (BOOL) hasIndices {
  return !!hasIndices_;
}
- (void) setHasIndices:(BOOL) value {
  hasIndices_ = !!value;
}
@synthesize indices;
- (BOOL) hasSuspendReleaseBroker {
  return !!hasSuspendReleaseBroker_;
}
- (void) setHasSuspendReleaseBroker:(BOOL) value {
  hasSuspendReleaseBroker_ = !!value;
}
@synthesize suspendReleaseBroker;
- (BOOL) hasSuspendReleaseStock {
  return !!hasSuspendReleaseStock_;
}
- (void) setHasSuspendReleaseStock:(BOOL) value {
  hasSuspendReleaseStock_ = !!value;
}
@synthesize suspendReleaseStock;
- (BOOL) hasNewsMessage {
  return !!hasNewsMessage_;
}
- (void) setHasNewsMessage:(BOOL) value {
  hasNewsMessage_ = !!value;
}
@synthesize newsMessage;
- (BOOL) hasMarketDepth {
  return !!hasMarketDepth_;
}
- (void) setHasMarketDepth:(BOOL) value {
  hasMarketDepth_ = !!value;
}
@synthesize marketDepth;
- (BOOL) hasDerivativeTrade {
  return !!hasDerivativeTrade_;
}
- (void) setHasDerivativeTrade:(BOOL) value {
  hasDerivativeTrade_ = !!value;
}
@synthesize derivativeTrade;
- (BOOL) hasContractData {
  return !!hasContractData_;
}
- (void) setHasContractData:(BOOL) value {
  hasContractData_ = !!value;
}
@synthesize contractData;
- (BOOL) hasContractSummary {
  return !!hasContractSummary_;
}
- (void) setHasContractSummary:(BOOL) value {
  hasContractSummary_ = !!value;
}
@synthesize contractSummary;
- (id) init {
  if ((self = [super init])) {
    self.date = 0;
    self.time = 0;
    self.sequence = 0;
    self.recordType = RecordTypeIdxTradingStatus;
    self.tradingStatus = [IdxTradingStatus defaultInstance];
    self.order = [IdxOrder defaultInstance];
    self.trade = [IdxTrade defaultInstance];
    self.stockData = [IdxStockData defaultInstance];
    self.brokerData = [IdxBrokerData defaultInstance];
    self.stockSummary = [IdxStockSummary defaultInstance];
    self.indices = [IdxIndices defaultInstance];
    self.suspendReleaseBroker = [IdxSuspendReleaseBroker defaultInstance];
    self.suspendReleaseStock = [IdxSuspendReleaseStock defaultInstance];
    self.newsMessage = [IdxNewsMessage defaultInstance];
    self.marketDepth = [IdxMarketDepth defaultInstance];
    self.derivativeTrade = [IdxTrade defaultInstance];
    self.contractData = [IdxContractData defaultInstance];
    self.contractSummary = [IdxContractSummary defaultInstance];
  }
  return self;
}
static IdxRecord* defaultIdxRecordInstance = nil;
+ (void) initialize {
  if (self == [IdxRecord class]) {
    defaultIdxRecordInstance = [[IdxRecord alloc] init];
  }
}
+ (IdxRecord*) defaultInstance {
  return defaultIdxRecordInstance;
}
- (IdxRecord*) defaultInstance {
  return defaultIdxRecordInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDate) {
    [output writeInt32:1 value:self.date];
  }
  if (self.hasTime) {
    [output writeInt32:2 value:self.time];
  }
  if (self.hasSequence) {
    [output writeInt32:3 value:self.sequence];
  }
  if (self.hasRecordType) {
    [output writeEnum:4 value:self.recordType];
  }
  if (self.hasTradingStatus) {
    [output writeMessage:5 value:self.tradingStatus];
  }
  if (self.hasOrder) {
    [output writeMessage:6 value:self.order];
  }
  if (self.hasTrade) {
    [output writeMessage:7 value:self.trade];
  }
  if (self.hasStockData) {
    [output writeMessage:8 value:self.stockData];
  }
  if (self.hasBrokerData) {
    [output writeMessage:9 value:self.brokerData];
  }
  if (self.hasStockSummary) {
    [output writeMessage:10 value:self.stockSummary];
  }
  if (self.hasIndices) {
    [output writeMessage:11 value:self.indices];
  }
  if (self.hasSuspendReleaseBroker) {
    [output writeMessage:12 value:self.suspendReleaseBroker];
  }
  if (self.hasSuspendReleaseStock) {
    [output writeMessage:13 value:self.suspendReleaseStock];
  }
  if (self.hasNewsMessage) {
    [output writeMessage:14 value:self.newsMessage];
  }
  if (self.hasMarketDepth) {
    [output writeMessage:15 value:self.marketDepth];
  }
  if (self.hasDerivativeTrade) {
    [output writeMessage:16 value:self.derivativeTrade];
  }
  if (self.hasContractData) {
    [output writeMessage:17 value:self.contractData];
  }
  if (self.hasContractSummary) {
    [output writeMessage:18 value:self.contractSummary];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDate) {
    size += computeInt32Size(1, self.date);
  }
  if (self.hasTime) {
    size += computeInt32Size(2, self.time);
  }
  if (self.hasSequence) {
    size += computeInt32Size(3, self.sequence);
  }
  if (self.hasRecordType) {
    size += computeEnumSize(4, self.recordType);
  }
  if (self.hasTradingStatus) {
    size += computeMessageSize(5, self.tradingStatus);
  }
  if (self.hasOrder) {
    size += computeMessageSize(6, self.order);
  }
  if (self.hasTrade) {
    size += computeMessageSize(7, self.trade);
  }
  if (self.hasStockData) {
    size += computeMessageSize(8, self.stockData);
  }
  if (self.hasBrokerData) {
    size += computeMessageSize(9, self.brokerData);
  }
  if (self.hasStockSummary) {
    size += computeMessageSize(10, self.stockSummary);
  }
  if (self.hasIndices) {
    size += computeMessageSize(11, self.indices);
  }
  if (self.hasSuspendReleaseBroker) {
    size += computeMessageSize(12, self.suspendReleaseBroker);
  }
  if (self.hasSuspendReleaseStock) {
    size += computeMessageSize(13, self.suspendReleaseStock);
  }
  if (self.hasNewsMessage) {
    size += computeMessageSize(14, self.newsMessage);
  }
  if (self.hasMarketDepth) {
    size += computeMessageSize(15, self.marketDepth);
  }
  if (self.hasDerivativeTrade) {
    size += computeMessageSize(16, self.derivativeTrade);
  }
  if (self.hasContractData) {
    size += computeMessageSize(17, self.contractData);
  }
  if (self.hasContractSummary) {
    size += computeMessageSize(18, self.contractSummary);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxRecord*) parseFromData:(NSData*) data {
  return (IdxRecord*)[[[IdxRecord builder] mergeFromData:data] build];
}
+ (IdxRecord*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxRecord*)[[[IdxRecord builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxRecord*) parseFromInputStream:(NSInputStream*) input {
  return (IdxRecord*)[[[IdxRecord builder] mergeFromInputStream:input] build];
}
+ (IdxRecord*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxRecord*)[[[IdxRecord builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxRecord*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxRecord*)[[[IdxRecord builder] mergeFromCodedInputStream:input] build];
}
+ (IdxRecord*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxRecord*)[[[IdxRecord builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxRecord_Builder*) builder {
  return [[IdxRecord_Builder alloc] init];
}
+ (IdxRecord_Builder*) builderWithPrototype:(IdxRecord*) prototype {
  return [[IdxRecord builder] mergeFrom:prototype];
}
- (IdxRecord_Builder*) builder {
  return [IdxRecord builder];
}
- (IdxRecord_Builder*) toBuilder {
  return [IdxRecord builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasRecordType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"recordType", self.recordType];
  }
  if (self.hasTradingStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"tradingStatus"];
    [self.tradingStatus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOrder) {
    [output appendFormat:@"%@%@ {\n", indent, @"order"];
    [self.order writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTrade) {
    [output appendFormat:@"%@%@ {\n", indent, @"trade"];
    [self.trade writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStockData) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockData"];
    [self.stockData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBrokerData) {
    [output appendFormat:@"%@%@ {\n", indent, @"brokerData"];
    [self.brokerData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStockSummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockSummary"];
    [self.stockSummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIndices) {
    [output appendFormat:@"%@%@ {\n", indent, @"indices"];
    [self.indices writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSuspendReleaseBroker) {
    [output appendFormat:@"%@%@ {\n", indent, @"suspendReleaseBroker"];
    [self.suspendReleaseBroker writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSuspendReleaseStock) {
    [output appendFormat:@"%@%@ {\n", indent, @"suspendReleaseStock"];
    [self.suspendReleaseStock writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNewsMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"newsMessage"];
    [self.newsMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMarketDepth) {
    [output appendFormat:@"%@%@ {\n", indent, @"marketDepth"];
    [self.marketDepth writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDerivativeTrade) {
    [output appendFormat:@"%@%@ {\n", indent, @"derivativeTrade"];
    [self.derivativeTrade writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContractData) {
    [output appendFormat:@"%@%@ {\n", indent, @"contractData"];
    [self.contractData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContractSummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"contractSummary"];
    [self.contractSummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxRecord class]]) {
    return NO;
  }
  IdxRecord *otherMessage = other;
  return
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasRecordType == otherMessage.hasRecordType &&
      (!self.hasRecordType || self.recordType != otherMessage.recordType) &&
      self.hasTradingStatus == otherMessage.hasTradingStatus &&
      (!self.hasTradingStatus || [self.tradingStatus isEqual:otherMessage.tradingStatus]) &&
      self.hasOrder == otherMessage.hasOrder &&
      (!self.hasOrder || [self.order isEqual:otherMessage.order]) &&
      self.hasTrade == otherMessage.hasTrade &&
      (!self.hasTrade || [self.trade isEqual:otherMessage.trade]) &&
      self.hasStockData == otherMessage.hasStockData &&
      (!self.hasStockData || [self.stockData isEqual:otherMessage.stockData]) &&
      self.hasBrokerData == otherMessage.hasBrokerData &&
      (!self.hasBrokerData || [self.brokerData isEqual:otherMessage.brokerData]) &&
      self.hasStockSummary == otherMessage.hasStockSummary &&
      (!self.hasStockSummary || [self.stockSummary isEqual:otherMessage.stockSummary]) &&
      self.hasIndices == otherMessage.hasIndices &&
      (!self.hasIndices || [self.indices isEqual:otherMessage.indices]) &&
      self.hasSuspendReleaseBroker == otherMessage.hasSuspendReleaseBroker &&
      (!self.hasSuspendReleaseBroker || [self.suspendReleaseBroker isEqual:otherMessage.suspendReleaseBroker]) &&
      self.hasSuspendReleaseStock == otherMessage.hasSuspendReleaseStock &&
      (!self.hasSuspendReleaseStock || [self.suspendReleaseStock isEqual:otherMessage.suspendReleaseStock]) &&
      self.hasNewsMessage == otherMessage.hasNewsMessage &&
      (!self.hasNewsMessage || [self.newsMessage isEqual:otherMessage.newsMessage]) &&
      self.hasMarketDepth == otherMessage.hasMarketDepth &&
      (!self.hasMarketDepth || [self.marketDepth isEqual:otherMessage.marketDepth]) &&
      self.hasDerivativeTrade == otherMessage.hasDerivativeTrade &&
      (!self.hasDerivativeTrade || [self.derivativeTrade isEqual:otherMessage.derivativeTrade]) &&
      self.hasContractData == otherMessage.hasContractData &&
      (!self.hasContractData || [self.contractData isEqual:otherMessage.contractData]) &&
      self.hasContractSummary == otherMessage.hasContractSummary &&
      (!self.hasContractSummary || [self.contractSummary isEqual:otherMessage.contractSummary]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasRecordType) {
    hashCode = hashCode * 31 + self.recordType;
  }
  if (self.hasTradingStatus) {
    hashCode = hashCode * 31 + [self.tradingStatus hash];
  }
  if (self.hasOrder) {
    hashCode = hashCode * 31 + [self.order hash];
  }
  if (self.hasTrade) {
    hashCode = hashCode * 31 + [self.trade hash];
  }
  if (self.hasStockData) {
    hashCode = hashCode * 31 + [self.stockData hash];
  }
  if (self.hasBrokerData) {
    hashCode = hashCode * 31 + [self.brokerData hash];
  }
  if (self.hasStockSummary) {
    hashCode = hashCode * 31 + [self.stockSummary hash];
  }
  if (self.hasIndices) {
    hashCode = hashCode * 31 + [self.indices hash];
  }
  if (self.hasSuspendReleaseBroker) {
    hashCode = hashCode * 31 + [self.suspendReleaseBroker hash];
  }
  if (self.hasSuspendReleaseStock) {
    hashCode = hashCode * 31 + [self.suspendReleaseStock hash];
  }
  if (self.hasNewsMessage) {
    hashCode = hashCode * 31 + [self.newsMessage hash];
  }
  if (self.hasMarketDepth) {
    hashCode = hashCode * 31 + [self.marketDepth hash];
  }
  if (self.hasDerivativeTrade) {
    hashCode = hashCode * 31 + [self.derivativeTrade hash];
  }
  if (self.hasContractData) {
    hashCode = hashCode * 31 + [self.contractData hash];
  }
  if (self.hasContractSummary) {
    hashCode = hashCode * 31 + [self.contractSummary hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxRecord_Builder()
@property (strong) IdxRecord* result;
@end

@implementation IdxRecord_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxRecord alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxRecord_Builder*) clear {
  self.result = [[IdxRecord alloc] init];
  return self;
}
- (IdxRecord_Builder*) clone {
  return [IdxRecord builderWithPrototype:result];
}
- (IdxRecord*) defaultInstance {
  return [IdxRecord defaultInstance];
}
- (IdxRecord*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxRecord*) buildPartial {
  IdxRecord* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxRecord_Builder*) mergeFrom:(IdxRecord*) other {
  if (other == [IdxRecord defaultInstance]) {
    return self;
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasRecordType) {
    [self setRecordType:other.recordType];
  }
  if (other.hasTradingStatus) {
    [self mergeTradingStatus:other.tradingStatus];
  }
  if (other.hasOrder) {
    [self mergeOrder:other.order];
  }
  if (other.hasTrade) {
    [self mergeTrade:other.trade];
  }
  if (other.hasStockData) {
    [self mergeStockData:other.stockData];
  }
  if (other.hasBrokerData) {
    [self mergeBrokerData:other.brokerData];
  }
  if (other.hasStockSummary) {
    [self mergeStockSummary:other.stockSummary];
  }
  if (other.hasIndices) {
    [self mergeIndices:other.indices];
  }
  if (other.hasSuspendReleaseBroker) {
    [self mergeSuspendReleaseBroker:other.suspendReleaseBroker];
  }
  if (other.hasSuspendReleaseStock) {
    [self mergeSuspendReleaseStock:other.suspendReleaseStock];
  }
  if (other.hasNewsMessage) {
    [self mergeNewsMessage:other.newsMessage];
  }
  if (other.hasMarketDepth) {
    [self mergeMarketDepth:other.marketDepth];
  }
  if (other.hasDerivativeTrade) {
    [self mergeDerivativeTrade:other.derivativeTrade];
  }
  if (other.hasContractData) {
    [self mergeContractData:other.contractData];
  }
  if (other.hasContractSummary) {
    [self mergeContractSummary:other.contractSummary];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxRecord_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxRecord_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDate:[input readInt32]];
        break;
      }
      case 16: {
        [self setTime:[input readInt32]];
        break;
      }
      case 24: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (RecordTypeIsValidValue(value)) {
          [self setRecordType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        IdxTradingStatus_Builder* subBuilder = [IdxTradingStatus builder];
        if (self.hasTradingStatus) {
          [subBuilder mergeFrom:self.tradingStatus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTradingStatus:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        IdxOrder_Builder* subBuilder = [IdxOrder builder];
        if (self.hasOrder) {
          [subBuilder mergeFrom:self.order];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrder:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        IdxTrade_Builder* subBuilder = [IdxTrade builder];
        if (self.hasTrade) {
          [subBuilder mergeFrom:self.trade];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTrade:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        IdxStockData_Builder* subBuilder = [IdxStockData builder];
        if (self.hasStockData) {
          [subBuilder mergeFrom:self.stockData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockData:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        IdxBrokerData_Builder* subBuilder = [IdxBrokerData builder];
        if (self.hasBrokerData) {
          [subBuilder mergeFrom:self.brokerData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBrokerData:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        IdxStockSummary_Builder* subBuilder = [IdxStockSummary builder];
        if (self.hasStockSummary) {
          [subBuilder mergeFrom:self.stockSummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockSummary:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        IdxIndices_Builder* subBuilder = [IdxIndices builder];
        if (self.hasIndices) {
          [subBuilder mergeFrom:self.indices];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIndices:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        IdxSuspendReleaseBroker_Builder* subBuilder = [IdxSuspendReleaseBroker builder];
        if (self.hasSuspendReleaseBroker) {
          [subBuilder mergeFrom:self.suspendReleaseBroker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSuspendReleaseBroker:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        IdxSuspendReleaseStock_Builder* subBuilder = [IdxSuspendReleaseStock builder];
        if (self.hasSuspendReleaseStock) {
          [subBuilder mergeFrom:self.suspendReleaseStock];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSuspendReleaseStock:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        IdxNewsMessage_Builder* subBuilder = [IdxNewsMessage builder];
        if (self.hasNewsMessage) {
          [subBuilder mergeFrom:self.newsMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNewsMessage:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        IdxMarketDepth_Builder* subBuilder = [IdxMarketDepth builder];
        if (self.hasMarketDepth) {
          [subBuilder mergeFrom:self.marketDepth];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMarketDepth:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        IdxTrade_Builder* subBuilder = [IdxTrade builder];
        if (self.hasDerivativeTrade) {
          [subBuilder mergeFrom:self.derivativeTrade];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDerivativeTrade:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        IdxContractData_Builder* subBuilder = [IdxContractData builder];
        if (self.hasContractData) {
          [subBuilder mergeFrom:self.contractData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContractData:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        IdxContractSummary_Builder* subBuilder = [IdxContractSummary builder];
        if (self.hasContractSummary) {
          [subBuilder mergeFrom:self.contractSummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContractSummary:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (IdxRecord_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (IdxRecord_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (IdxRecord_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (IdxRecord_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (IdxRecord_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (IdxRecord_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasRecordType {
  return result.hasRecordType;
}
- (RecordType) recordType {
  return result.recordType;
}
- (IdxRecord_Builder*) setRecordType:(RecordType) value {
  result.hasRecordType = YES;
  result.recordType = value;
  return self;
}
- (IdxRecord_Builder*) clearRecordType {
  result.hasRecordType = NO;
  result.recordType = RecordTypeIdxTradingStatus;
  return self;
}
- (BOOL) hasTradingStatus {
  return result.hasTradingStatus;
}
- (IdxTradingStatus*) tradingStatus {
  return result.tradingStatus;
}
- (IdxRecord_Builder*) setTradingStatus:(IdxTradingStatus*) value {
  result.hasTradingStatus = YES;
  result.tradingStatus = value;
  return self;
}
- (IdxRecord_Builder*) setTradingStatusBuilder:(IdxTradingStatus_Builder*) builderForValue {
  return [self setTradingStatus:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeTradingStatus:(IdxTradingStatus*) value {
  if (result.hasTradingStatus &&
      result.tradingStatus != [IdxTradingStatus defaultInstance]) {
    result.tradingStatus =
      [[[IdxTradingStatus builderWithPrototype:result.tradingStatus] mergeFrom:value] buildPartial];
  } else {
    result.tradingStatus = value;
  }
  result.hasTradingStatus = YES;
  return self;
}
- (IdxRecord_Builder*) clearTradingStatus {
  result.hasTradingStatus = NO;
  result.tradingStatus = [IdxTradingStatus defaultInstance];
  return self;
}
- (BOOL) hasOrder {
  return result.hasOrder;
}
- (IdxOrder*) order {
  return result.order;
}
- (IdxRecord_Builder*) setOrder:(IdxOrder*) value {
  result.hasOrder = YES;
  result.order = value;
  return self;
}
- (IdxRecord_Builder*) setOrderBuilder:(IdxOrder_Builder*) builderForValue {
  return [self setOrder:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeOrder:(IdxOrder*) value {
  if (result.hasOrder &&
      result.order != [IdxOrder defaultInstance]) {
    result.order =
      [[[IdxOrder builderWithPrototype:result.order] mergeFrom:value] buildPartial];
  } else {
    result.order = value;
  }
  result.hasOrder = YES;
  return self;
}
- (IdxRecord_Builder*) clearOrder {
  result.hasOrder = NO;
  result.order = [IdxOrder defaultInstance];
  return self;
}
- (BOOL) hasTrade {
  return result.hasTrade;
}
- (IdxTrade*) trade {
  return result.trade;
}
- (IdxRecord_Builder*) setTrade:(IdxTrade*) value {
  result.hasTrade = YES;
  result.trade = value;
  return self;
}
- (IdxRecord_Builder*) setTradeBuilder:(IdxTrade_Builder*) builderForValue {
  return [self setTrade:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeTrade:(IdxTrade*) value {
  if (result.hasTrade &&
      result.trade != [IdxTrade defaultInstance]) {
    result.trade =
      [[[IdxTrade builderWithPrototype:result.trade] mergeFrom:value] buildPartial];
  } else {
    result.trade = value;
  }
  result.hasTrade = YES;
  return self;
}
- (IdxRecord_Builder*) clearTrade {
  result.hasTrade = NO;
  result.trade = [IdxTrade defaultInstance];
  return self;
}
- (BOOL) hasStockData {
  return result.hasStockData;
}
- (IdxStockData*) stockData {
  return result.stockData;
}
- (IdxRecord_Builder*) setStockData:(IdxStockData*) value {
  result.hasStockData = YES;
  result.stockData = value;
  return self;
}
- (IdxRecord_Builder*) setStockDataBuilder:(IdxStockData_Builder*) builderForValue {
  return [self setStockData:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeStockData:(IdxStockData*) value {
  if (result.hasStockData &&
      result.stockData != [IdxStockData defaultInstance]) {
    result.stockData =
      [[[IdxStockData builderWithPrototype:result.stockData] mergeFrom:value] buildPartial];
  } else {
    result.stockData = value;
  }
  result.hasStockData = YES;
  return self;
}
- (IdxRecord_Builder*) clearStockData {
  result.hasStockData = NO;
  result.stockData = [IdxStockData defaultInstance];
  return self;
}
- (BOOL) hasBrokerData {
  return result.hasBrokerData;
}
- (IdxBrokerData*) brokerData {
  return result.brokerData;
}
- (IdxRecord_Builder*) setBrokerData:(IdxBrokerData*) value {
  result.hasBrokerData = YES;
  result.brokerData = value;
  return self;
}
- (IdxRecord_Builder*) setBrokerDataBuilder:(IdxBrokerData_Builder*) builderForValue {
  return [self setBrokerData:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeBrokerData:(IdxBrokerData*) value {
  if (result.hasBrokerData &&
      result.brokerData != [IdxBrokerData defaultInstance]) {
    result.brokerData =
      [[[IdxBrokerData builderWithPrototype:result.brokerData] mergeFrom:value] buildPartial];
  } else {
    result.brokerData = value;
  }
  result.hasBrokerData = YES;
  return self;
}
- (IdxRecord_Builder*) clearBrokerData {
  result.hasBrokerData = NO;
  result.brokerData = [IdxBrokerData defaultInstance];
  return self;
}
- (BOOL) hasStockSummary {
  return result.hasStockSummary;
}
- (IdxStockSummary*) stockSummary {
  return result.stockSummary;
}
- (IdxRecord_Builder*) setStockSummary:(IdxStockSummary*) value {
  result.hasStockSummary = YES;
  result.stockSummary = value;
  return self;
}
- (IdxRecord_Builder*) setStockSummaryBuilder:(IdxStockSummary_Builder*) builderForValue {
  return [self setStockSummary:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeStockSummary:(IdxStockSummary*) value {
  if (result.hasStockSummary &&
      result.stockSummary != [IdxStockSummary defaultInstance]) {
    result.stockSummary =
      [[[IdxStockSummary builderWithPrototype:result.stockSummary] mergeFrom:value] buildPartial];
  } else {
    result.stockSummary = value;
  }
  result.hasStockSummary = YES;
  return self;
}
- (IdxRecord_Builder*) clearStockSummary {
  result.hasStockSummary = NO;
  result.stockSummary = [IdxStockSummary defaultInstance];
  return self;
}
- (BOOL) hasIndices {
  return result.hasIndices;
}
- (IdxIndices*) indices {
  return result.indices;
}
- (IdxRecord_Builder*) setIndices:(IdxIndices*) value {
  result.hasIndices = YES;
  result.indices = value;
  return self;
}
- (IdxRecord_Builder*) setIndicesBuilder:(IdxIndices_Builder*) builderForValue {
  return [self setIndices:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeIndices:(IdxIndices*) value {
  if (result.hasIndices &&
      result.indices != [IdxIndices defaultInstance]) {
    result.indices =
      [[[IdxIndices builderWithPrototype:result.indices] mergeFrom:value] buildPartial];
  } else {
    result.indices = value;
  }
  result.hasIndices = YES;
  return self;
}
- (IdxRecord_Builder*) clearIndices {
  result.hasIndices = NO;
  result.indices = [IdxIndices defaultInstance];
  return self;
}
- (BOOL) hasSuspendReleaseBroker {
  return result.hasSuspendReleaseBroker;
}
- (IdxSuspendReleaseBroker*) suspendReleaseBroker {
  return result.suspendReleaseBroker;
}
- (IdxRecord_Builder*) setSuspendReleaseBroker:(IdxSuspendReleaseBroker*) value {
  result.hasSuspendReleaseBroker = YES;
  result.suspendReleaseBroker = value;
  return self;
}
- (IdxRecord_Builder*) setSuspendReleaseBrokerBuilder:(IdxSuspendReleaseBroker_Builder*) builderForValue {
  return [self setSuspendReleaseBroker:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeSuspendReleaseBroker:(IdxSuspendReleaseBroker*) value {
  if (result.hasSuspendReleaseBroker &&
      result.suspendReleaseBroker != [IdxSuspendReleaseBroker defaultInstance]) {
    result.suspendReleaseBroker =
      [[[IdxSuspendReleaseBroker builderWithPrototype:result.suspendReleaseBroker] mergeFrom:value] buildPartial];
  } else {
    result.suspendReleaseBroker = value;
  }
  result.hasSuspendReleaseBroker = YES;
  return self;
}
- (IdxRecord_Builder*) clearSuspendReleaseBroker {
  result.hasSuspendReleaseBroker = NO;
  result.suspendReleaseBroker = [IdxSuspendReleaseBroker defaultInstance];
  return self;
}
- (BOOL) hasSuspendReleaseStock {
  return result.hasSuspendReleaseStock;
}
- (IdxSuspendReleaseStock*) suspendReleaseStock {
  return result.suspendReleaseStock;
}
- (IdxRecord_Builder*) setSuspendReleaseStock:(IdxSuspendReleaseStock*) value {
  result.hasSuspendReleaseStock = YES;
  result.suspendReleaseStock = value;
  return self;
}
- (IdxRecord_Builder*) setSuspendReleaseStockBuilder:(IdxSuspendReleaseStock_Builder*) builderForValue {
  return [self setSuspendReleaseStock:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeSuspendReleaseStock:(IdxSuspendReleaseStock*) value {
  if (result.hasSuspendReleaseStock &&
      result.suspendReleaseStock != [IdxSuspendReleaseStock defaultInstance]) {
    result.suspendReleaseStock =
      [[[IdxSuspendReleaseStock builderWithPrototype:result.suspendReleaseStock] mergeFrom:value] buildPartial];
  } else {
    result.suspendReleaseStock = value;
  }
  result.hasSuspendReleaseStock = YES;
  return self;
}
- (IdxRecord_Builder*) clearSuspendReleaseStock {
  result.hasSuspendReleaseStock = NO;
  result.suspendReleaseStock = [IdxSuspendReleaseStock defaultInstance];
  return self;
}
- (BOOL) hasNewsMessage {
  return result.hasNewsMessage;
}
- (IdxNewsMessage*) newsMessage {
  return result.newsMessage;
}
- (IdxRecord_Builder*) setNewsMessage:(IdxNewsMessage*) value {
  result.hasNewsMessage = YES;
  result.newsMessage = value;
  return self;
}
- (IdxRecord_Builder*) setNewsMessageBuilder:(IdxNewsMessage_Builder*) builderForValue {
  return [self setNewsMessage:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeNewsMessage:(IdxNewsMessage*) value {
  if (result.hasNewsMessage &&
      result.newsMessage != [IdxNewsMessage defaultInstance]) {
    result.newsMessage =
      [[[IdxNewsMessage builderWithPrototype:result.newsMessage] mergeFrom:value] buildPartial];
  } else {
    result.newsMessage = value;
  }
  result.hasNewsMessage = YES;
  return self;
}
- (IdxRecord_Builder*) clearNewsMessage {
  result.hasNewsMessage = NO;
  result.newsMessage = [IdxNewsMessage defaultInstance];
  return self;
}
- (BOOL) hasMarketDepth {
  return result.hasMarketDepth;
}
- (IdxMarketDepth*) marketDepth {
  return result.marketDepth;
}
- (IdxRecord_Builder*) setMarketDepth:(IdxMarketDepth*) value {
  result.hasMarketDepth = YES;
  result.marketDepth = value;
  return self;
}
- (IdxRecord_Builder*) setMarketDepthBuilder:(IdxMarketDepth_Builder*) builderForValue {
  return [self setMarketDepth:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeMarketDepth:(IdxMarketDepth*) value {
  if (result.hasMarketDepth &&
      result.marketDepth != [IdxMarketDepth defaultInstance]) {
    result.marketDepth =
      [[[IdxMarketDepth builderWithPrototype:result.marketDepth] mergeFrom:value] buildPartial];
  } else {
    result.marketDepth = value;
  }
  result.hasMarketDepth = YES;
  return self;
}
- (IdxRecord_Builder*) clearMarketDepth {
  result.hasMarketDepth = NO;
  result.marketDepth = [IdxMarketDepth defaultInstance];
  return self;
}
- (BOOL) hasDerivativeTrade {
  return result.hasDerivativeTrade;
}
- (IdxTrade*) derivativeTrade {
  return result.derivativeTrade;
}
- (IdxRecord_Builder*) setDerivativeTrade:(IdxTrade*) value {
  result.hasDerivativeTrade = YES;
  result.derivativeTrade = value;
  return self;
}
- (IdxRecord_Builder*) setDerivativeTradeBuilder:(IdxTrade_Builder*) builderForValue {
  return [self setDerivativeTrade:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeDerivativeTrade:(IdxTrade*) value {
  if (result.hasDerivativeTrade &&
      result.derivativeTrade != [IdxTrade defaultInstance]) {
    result.derivativeTrade =
      [[[IdxTrade builderWithPrototype:result.derivativeTrade] mergeFrom:value] buildPartial];
  } else {
    result.derivativeTrade = value;
  }
  result.hasDerivativeTrade = YES;
  return self;
}
- (IdxRecord_Builder*) clearDerivativeTrade {
  result.hasDerivativeTrade = NO;
  result.derivativeTrade = [IdxTrade defaultInstance];
  return self;
}
- (BOOL) hasContractData {
  return result.hasContractData;
}
- (IdxContractData*) contractData {
  return result.contractData;
}
- (IdxRecord_Builder*) setContractData:(IdxContractData*) value {
  result.hasContractData = YES;
  result.contractData = value;
  return self;
}
- (IdxRecord_Builder*) setContractDataBuilder:(IdxContractData_Builder*) builderForValue {
  return [self setContractData:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeContractData:(IdxContractData*) value {
  if (result.hasContractData &&
      result.contractData != [IdxContractData defaultInstance]) {
    result.contractData =
      [[[IdxContractData builderWithPrototype:result.contractData] mergeFrom:value] buildPartial];
  } else {
    result.contractData = value;
  }
  result.hasContractData = YES;
  return self;
}
- (IdxRecord_Builder*) clearContractData {
  result.hasContractData = NO;
  result.contractData = [IdxContractData defaultInstance];
  return self;
}
- (BOOL) hasContractSummary {
  return result.hasContractSummary;
}
- (IdxContractSummary*) contractSummary {
  return result.contractSummary;
}
- (IdxRecord_Builder*) setContractSummary:(IdxContractSummary*) value {
  result.hasContractSummary = YES;
  result.contractSummary = value;
  return self;
}
- (IdxRecord_Builder*) setContractSummaryBuilder:(IdxContractSummary_Builder*) builderForValue {
  return [self setContractSummary:[builderForValue build]];
}
- (IdxRecord_Builder*) mergeContractSummary:(IdxContractSummary*) value {
  if (result.hasContractSummary &&
      result.contractSummary != [IdxContractSummary defaultInstance]) {
    result.contractSummary =
      [[[IdxContractSummary builderWithPrototype:result.contractSummary] mergeFrom:value] buildPartial];
  } else {
    result.contractSummary = value;
  }
  result.hasContractSummary = YES;
  return self;
}
- (IdxRecord_Builder*) clearContractSummary {
  result.hasContractSummary = NO;
  result.contractSummary = [IdxContractSummary defaultInstance];
  return self;
}
@end

@interface KiRecord ()
@property RecordType recordType;
@property (strong) NSMutableArray * stockSummaryArray;
@property (strong) NSMutableArray * tradeArray;
@property (strong) NSMutableArray * orderArray;
@property (strong) NSMutableArray * indicesArray;
@property (strong) NSMutableArray * level2Array;
@property (strong) NSMutableArray * level3Array;
@property (strong) PBAppendableArray * orderStatusArray;
@property (strong) NSMutableArray * regionalIndicesArray;
@property (strong) NSMutableArray * currencyArray;
@property (strong) NSMutableArray * stockHistoryArray;
@property (strong) NSMutableArray * indicesHistoryArray;
@property (strong) NSMutableArray * brokerSummaryArray;
@property (strong) NetBuySell* stockNetbuysell;
@property (strong) NetBuySell* brokerNetbuysell;
@property (strong) NSMutableArray * foreignDomesticArray;
@property (strong) NSMutableArray * tradeDetailArray;
@property (strong) NSMutableArray * orderDetailArray;
@property (strong) NSMutableArray * stockDataArray;
@property (strong) NSMutableArray * brokerDataArray;
@property (strong) NSMutableArray * indicesDataArray;
@property (strong) NSMutableArray * regionalIndicesDataArray;
@property (strong) NSMutableArray * currencyDataArray;
@property (strong) NSMutableArray * suspendReleaseBrokerArray;
@property (strong) NSMutableArray * suspendReleaseStockArray;
@property (strong) NSMutableArray * tradingStatusArray;
@property (strong) KiRequest* request;
@property (strong) NSMutableArray * lastTradeArray;
@property (strong) NSMutableArray * orderTrackArray;
@property (strong) NSMutableArray * futureArray;
@property (strong) NSMutableArray * comodityArray;
@property (strong) FDSummary* fdsummary;
@property (strong) NetBuySell* stockHistNetbuysell;
@property (strong) NetBuySell* brokerHistNetbuysell;
@property (strong) NSMutableArray * foreignHistoryArray;
@property (strong) MarketSummary* marketSummary;
@property (strong) NSMutableArray * wk52104Array;
@property (strong) NSMutableArray * conditionalOrderArray;
@property (strong) NSMutableArray * contractDataArray;
@property (strong) NSMutableArray * derivativeTradeArray;
@property (strong) NSMutableArray * derivativeLevel2Array;
@property (strong) NSMutableArray * derivativeLevel3Array;
@property (strong) NSMutableArray * contractSummaryArray;
@property (strong) NSMutableArray * derivativeLastTradeArray;
@end

@implementation KiRecord

- (BOOL) hasRecordType {
  return !!hasRecordType_;
}
- (void) setHasRecordType:(BOOL) value {
  hasRecordType_ = !!value;
}
@synthesize recordType;
@synthesize stockSummaryArray;
@dynamic stockSummary;
@synthesize tradeArray;
@dynamic trade;
@synthesize orderArray;
@dynamic order;
@synthesize indicesArray;
@dynamic indices;
@synthesize level2Array;
@dynamic level2;
@synthesize level3Array;
@dynamic level3;
@synthesize orderStatusArray;
@dynamic orderStatus;
@synthesize regionalIndicesArray;
@dynamic regionalIndices;
@synthesize currencyArray;
@dynamic currency;
@synthesize stockHistoryArray;
@dynamic stockHistory;
@synthesize indicesHistoryArray;
@dynamic indicesHistory;
@synthesize brokerSummaryArray;
@dynamic brokerSummary;
- (BOOL) hasStockNetbuysell {
  return !!hasStockNetbuysell_;
}
- (void) setHasStockNetbuysell:(BOOL) value {
  hasStockNetbuysell_ = !!value;
}
@synthesize stockNetbuysell;
- (BOOL) hasBrokerNetbuysell {
  return !!hasBrokerNetbuysell_;
}
- (void) setHasBrokerNetbuysell:(BOOL) value {
  hasBrokerNetbuysell_ = !!value;
}
@synthesize brokerNetbuysell;
@synthesize foreignDomesticArray;
@dynamic foreignDomestic;
@synthesize tradeDetailArray;
@dynamic tradeDetail;
@synthesize orderDetailArray;
@dynamic orderDetail;
@synthesize stockDataArray;
@dynamic stockData;
@synthesize brokerDataArray;
@dynamic brokerData;
@synthesize indicesDataArray;
@dynamic indicesData;
@synthesize regionalIndicesDataArray;
@dynamic regionalIndicesData;
@synthesize currencyDataArray;
@dynamic currencyData;
@synthesize suspendReleaseBrokerArray;
@dynamic suspendReleaseBroker;
@synthesize suspendReleaseStockArray;
@dynamic suspendReleaseStock;
@synthesize tradingStatusArray;
@dynamic tradingStatus;
- (BOOL) hasRequest {
  return !!hasRequest_;
}
- (void) setHasRequest:(BOOL) value {
  hasRequest_ = !!value;
}
@synthesize request;
@synthesize lastTradeArray;
@dynamic lastTrade;
@synthesize orderTrackArray;
@dynamic orderTrack;
@synthesize futureArray;
@dynamic future;
@synthesize comodityArray;
@dynamic comodity;
- (BOOL) hasFdsummary {
  return !!hasFdsummary_;
}
- (void) setHasFdsummary:(BOOL) value {
  hasFdsummary_ = !!value;
}
@synthesize fdsummary;
- (BOOL) hasStockHistNetbuysell {
  return !!hasStockHistNetbuysell_;
}
- (void) setHasStockHistNetbuysell:(BOOL) value {
  hasStockHistNetbuysell_ = !!value;
}
@synthesize stockHistNetbuysell;
- (BOOL) hasBrokerHistNetbuysell {
  return !!hasBrokerHistNetbuysell_;
}
- (void) setHasBrokerHistNetbuysell:(BOOL) value {
  hasBrokerHistNetbuysell_ = !!value;
}
@synthesize brokerHistNetbuysell;
@synthesize foreignHistoryArray;
@dynamic foreignHistory;
- (BOOL) hasMarketSummary {
  return !!hasMarketSummary_;
}
- (void) setHasMarketSummary:(BOOL) value {
  hasMarketSummary_ = !!value;
}
@synthesize marketSummary;
@synthesize wk52104Array;
@dynamic wk52104;
@synthesize conditionalOrderArray;
@dynamic conditionalOrder;
@synthesize contractDataArray;
@dynamic contractData;
@synthesize derivativeTradeArray;
@dynamic derivativeTrade;
@synthesize derivativeLevel2Array;
@dynamic derivativeLevel2;
@synthesize derivativeLevel3Array;
@dynamic derivativeLevel3;
@synthesize contractSummaryArray;
@dynamic contractSummary;
@synthesize derivativeLastTradeArray;
@dynamic derivativeLastTrade;
- (id) init {
  if ((self = [super init])) {
    self.recordType = RecordTypeIdxTradingStatus;
    self.stockNetbuysell = [NetBuySell defaultInstance];
    self.brokerNetbuysell = [NetBuySell defaultInstance];
    self.request = [KiRequest defaultInstance];
    self.fdsummary = [FDSummary defaultInstance];
    self.stockHistNetbuysell = [NetBuySell defaultInstance];
    self.brokerHistNetbuysell = [NetBuySell defaultInstance];
    self.marketSummary = [MarketSummary defaultInstance];
  }
  return self;
}
static KiRecord* defaultKiRecordInstance = nil;
+ (void) initialize {
  if (self == [KiRecord class]) {
    defaultKiRecordInstance = [[KiRecord alloc] init];
  }
}
+ (KiRecord*) defaultInstance {
  return defaultKiRecordInstance;
}
- (KiRecord*) defaultInstance {
  return defaultKiRecordInstance;
}
- (NSArray *)stockSummary {
  return stockSummaryArray;
}
- (KiStockSummary*)stockSummaryAtIndex:(NSUInteger)index {
  return [stockSummaryArray objectAtIndex:index];
}
- (NSArray *)trade {
  return tradeArray;
}
- (KiTrade*)tradeAtIndex:(NSUInteger)index {
  return [tradeArray objectAtIndex:index];
}
- (NSArray *)order {
  return orderArray;
}
- (KiOrder*)orderAtIndex:(NSUInteger)index {
  return [orderArray objectAtIndex:index];
}
- (NSArray *)indices {
  return indicesArray;
}
- (KiIndices*)indicesAtIndex:(NSUInteger)index {
  return [indicesArray objectAtIndex:index];
}
- (NSArray *)level2 {
  return level2Array;
}
- (Level2*)level2AtIndex:(NSUInteger)index {
  return [level2Array objectAtIndex:index];
}
- (NSArray *)level3 {
  return level3Array;
}
- (Level3*)level3AtIndex:(NSUInteger)index {
  return [level3Array objectAtIndex:index];
}
- (PBArray *)orderStatus {
  return orderStatusArray;
}
- (OrderStatus)orderStatusAtIndex:(NSUInteger)index {
  return [orderStatusArray int32AtIndex:index];
}
- (NSArray *)regionalIndices {
  return regionalIndicesArray;
}
- (KiRegionalIndices*)regionalIndicesAtIndex:(NSUInteger)index {
  return [regionalIndicesArray objectAtIndex:index];
}
- (NSArray *)currency {
  return currencyArray;
}
- (KiCurrency*)currencyAtIndex:(NSUInteger)index {
  return [currencyArray objectAtIndex:index];
}
- (NSArray *)stockHistory {
  return stockHistoryArray;
}
- (StockHistory*)stockHistoryAtIndex:(NSUInteger)index {
  return [stockHistoryArray objectAtIndex:index];
}
- (NSArray *)indicesHistory {
  return indicesHistoryArray;
}
- (IndicesHistory*)indicesHistoryAtIndex:(NSUInteger)index {
  return [indicesHistoryArray objectAtIndex:index];
}
- (NSArray *)brokerSummary {
  return brokerSummaryArray;
}
- (Transaction*)brokerSummaryAtIndex:(NSUInteger)index {
  return [brokerSummaryArray objectAtIndex:index];
}
- (NSArray *)foreignDomestic {
  return foreignDomesticArray;
}
- (ForeignDomestic*)foreignDomesticAtIndex:(NSUInteger)index {
  return [foreignDomesticArray objectAtIndex:index];
}
- (NSArray *)tradeDetail {
  return tradeDetailArray;
}
- (KiTradeDetail*)tradeDetailAtIndex:(NSUInteger)index {
  return [tradeDetailArray objectAtIndex:index];
}
- (NSArray *)orderDetail {
  return orderDetailArray;
}
- (KiOrderDetail*)orderDetailAtIndex:(NSUInteger)index {
  return [orderDetailArray objectAtIndex:index];
}
- (NSArray *)stockData {
  return stockDataArray;
}
- (KiStockData*)stockDataAtIndex:(NSUInteger)index {
  return [stockDataArray objectAtIndex:index];
}
- (NSArray *)brokerData {
  return brokerDataArray;
}
- (KiBrokerData*)brokerDataAtIndex:(NSUInteger)index {
  return [brokerDataArray objectAtIndex:index];
}
- (NSArray *)indicesData {
  return indicesDataArray;
}
- (KiIndicesData*)indicesDataAtIndex:(NSUInteger)index {
  return [indicesDataArray objectAtIndex:index];
}
- (NSArray *)regionalIndicesData {
  return regionalIndicesDataArray;
}
- (KiRegionalIndicesData*)regionalIndicesDataAtIndex:(NSUInteger)index {
  return [regionalIndicesDataArray objectAtIndex:index];
}
- (NSArray *)currencyData {
  return currencyDataArray;
}
- (KiCurrencyData*)currencyDataAtIndex:(NSUInteger)index {
  return [currencyDataArray objectAtIndex:index];
}
- (NSArray *)suspendReleaseBroker {
  return suspendReleaseBrokerArray;
}
- (IdxSuspendReleaseBroker*)suspendReleaseBrokerAtIndex:(NSUInteger)index {
  return [suspendReleaseBrokerArray objectAtIndex:index];
}
- (NSArray *)suspendReleaseStock {
  return suspendReleaseStockArray;
}
- (IdxSuspendReleaseStock*)suspendReleaseStockAtIndex:(NSUInteger)index {
  return [suspendReleaseStockArray objectAtIndex:index];
}
- (NSArray *)tradingStatus {
  return tradingStatusArray;
}
- (IdxTradingStatus*)tradingStatusAtIndex:(NSUInteger)index {
  return [tradingStatusArray objectAtIndex:index];
}
- (NSArray *)lastTrade {
  return lastTradeArray;
}
- (KiTrade*)lastTradeAtIndex:(NSUInteger)index {
  return [lastTradeArray objectAtIndex:index];
}
- (NSArray *)orderTrack {
  return orderTrackArray;
}
- (KiOrderDetail*)orderTrackAtIndex:(NSUInteger)index {
  return [orderTrackArray objectAtIndex:index];
}
- (NSArray *)future {
  return futureArray;
}
- (KiFuture*)futureAtIndex:(NSUInteger)index {
  return [futureArray objectAtIndex:index];
}
- (NSArray *)comodity {
  return comodityArray;
}
- (KiComodity*)comodityAtIndex:(NSUInteger)index {
  return [comodityArray objectAtIndex:index];
}
- (NSArray *)foreignHistory {
  return foreignHistoryArray;
}
- (ForeignHistory*)foreignHistoryAtIndex:(NSUInteger)index {
  return [foreignHistoryArray objectAtIndex:index];
}
- (NSArray *)wk52104 {
  return wk52104Array;
}
- (KiWk52104*)wk52104AtIndex:(NSUInteger)index {
  return [wk52104Array objectAtIndex:index];
}
- (NSArray *)conditionalOrder {
  return conditionalOrderArray;
}
- (COMessage*)conditionalOrderAtIndex:(NSUInteger)index {
  return [conditionalOrderArray objectAtIndex:index];
}
- (NSArray *)contractData {
  return contractDataArray;
}
- (KiStockData*)contractDataAtIndex:(NSUInteger)index {
  return [contractDataArray objectAtIndex:index];
}
- (NSArray *)derivativeTrade {
  return derivativeTradeArray;
}
- (KiTrade*)derivativeTradeAtIndex:(NSUInteger)index {
  return [derivativeTradeArray objectAtIndex:index];
}
- (NSArray *)derivativeLevel2 {
  return derivativeLevel2Array;
}
- (Level2*)derivativeLevel2AtIndex:(NSUInteger)index {
  return [derivativeLevel2Array objectAtIndex:index];
}
- (NSArray *)derivativeLevel3 {
  return derivativeLevel3Array;
}
- (Level3*)derivativeLevel3AtIndex:(NSUInteger)index {
  return [derivativeLevel3Array objectAtIndex:index];
}
- (NSArray *)contractSummary {
  return contractSummaryArray;
}
- (KiStockSummary*)contractSummaryAtIndex:(NSUInteger)index {
  return [contractSummaryArray objectAtIndex:index];
}
- (NSArray *)derivativeLastTrade {
  return derivativeLastTradeArray;
}
- (KiTrade*)derivativeLastTradeAtIndex:(NSUInteger)index {
  return [derivativeLastTradeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRecordType) {
    [output writeEnum:1 value:self.recordType];
  }
  for (KiStockSummary *element in self.stockSummaryArray) {
    [output writeMessage:2 value:element];
  }
  for (KiTrade *element in self.tradeArray) {
    [output writeMessage:3 value:element];
  }
  for (KiOrder *element in self.orderArray) {
    [output writeMessage:4 value:element];
  }
  for (KiIndices *element in self.indicesArray) {
    [output writeMessage:5 value:element];
  }
  for (Level2 *element in self.level2Array) {
    [output writeMessage:6 value:element];
  }
  for (Level3 *element in self.level3Array) {
    [output writeMessage:7 value:element];
  }
  const NSUInteger orderStatusArrayCount = self.orderStatusArray.count;
  const OrderStatus *orderStatusArrayValues = (const OrderStatus *)self.orderStatusArray.data;
  for (NSUInteger i = 0; i < orderStatusArrayCount; ++i) {
    [output writeEnum:8 value:orderStatusArrayValues[i]];
  }
  for (KiRegionalIndices *element in self.regionalIndicesArray) {
    [output writeMessage:9 value:element];
  }
  for (KiCurrency *element in self.currencyArray) {
    [output writeMessage:10 value:element];
  }
  for (StockHistory *element in self.stockHistoryArray) {
    [output writeMessage:11 value:element];
  }
  for (IndicesHistory *element in self.indicesHistoryArray) {
    [output writeMessage:12 value:element];
  }
  for (Transaction *element in self.brokerSummaryArray) {
    [output writeMessage:13 value:element];
  }
  if (self.hasStockNetbuysell) {
    [output writeMessage:14 value:self.stockNetbuysell];
  }
  if (self.hasBrokerNetbuysell) {
    [output writeMessage:15 value:self.brokerNetbuysell];
  }
  for (ForeignDomestic *element in self.foreignDomesticArray) {
    [output writeMessage:16 value:element];
  }
  for (KiTradeDetail *element in self.tradeDetailArray) {
    [output writeMessage:17 value:element];
  }
  for (KiOrderDetail *element in self.orderDetailArray) {
    [output writeMessage:18 value:element];
  }
  for (KiStockData *element in self.stockDataArray) {
    [output writeMessage:19 value:element];
  }
  for (KiBrokerData *element in self.brokerDataArray) {
    [output writeMessage:20 value:element];
  }
  for (KiIndicesData *element in self.indicesDataArray) {
    [output writeMessage:21 value:element];
  }
  for (KiRegionalIndicesData *element in self.regionalIndicesDataArray) {
    [output writeMessage:22 value:element];
  }
  for (KiCurrencyData *element in self.currencyDataArray) {
    [output writeMessage:23 value:element];
  }
  for (IdxSuspendReleaseBroker *element in self.suspendReleaseBrokerArray) {
    [output writeMessage:24 value:element];
  }
  for (IdxSuspendReleaseStock *element in self.suspendReleaseStockArray) {
    [output writeMessage:25 value:element];
  }
  for (IdxTradingStatus *element in self.tradingStatusArray) {
    [output writeMessage:26 value:element];
  }
  if (self.hasRequest) {
    [output writeMessage:27 value:self.request];
  }
  for (KiTrade *element in self.lastTradeArray) {
    [output writeMessage:28 value:element];
  }
  for (KiOrderDetail *element in self.orderTrackArray) {
    [output writeMessage:29 value:element];
  }
  for (KiFuture *element in self.futureArray) {
    [output writeMessage:30 value:element];
  }
  for (KiComodity *element in self.comodityArray) {
    [output writeMessage:31 value:element];
  }
  if (self.hasFdsummary) {
    [output writeMessage:32 value:self.fdsummary];
  }
  if (self.hasStockHistNetbuysell) {
    [output writeMessage:33 value:self.stockHistNetbuysell];
  }
  if (self.hasBrokerHistNetbuysell) {
    [output writeMessage:34 value:self.brokerHistNetbuysell];
  }
  for (ForeignHistory *element in self.foreignHistoryArray) {
    [output writeMessage:35 value:element];
  }
  if (self.hasMarketSummary) {
    [output writeMessage:36 value:self.marketSummary];
  }
  for (KiWk52104 *element in self.wk52104Array) {
    [output writeMessage:37 value:element];
  }
  for (COMessage *element in self.conditionalOrderArray) {
    [output writeMessage:38 value:element];
  }
  for (KiStockData *element in self.contractDataArray) {
    [output writeMessage:39 value:element];
  }
  for (KiTrade *element in self.derivativeTradeArray) {
    [output writeMessage:40 value:element];
  }
  for (Level2 *element in self.derivativeLevel2Array) {
    [output writeMessage:41 value:element];
  }
  for (Level3 *element in self.derivativeLevel3Array) {
    [output writeMessage:42 value:element];
  }
  for (KiStockSummary *element in self.contractSummaryArray) {
    [output writeMessage:43 value:element];
  }
  for (KiTrade *element in self.derivativeLastTradeArray) {
    [output writeMessage:44 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRecordType) {
    size += computeEnumSize(1, self.recordType);
  }
  for (KiStockSummary *element in self.stockSummaryArray) {
    size += computeMessageSize(2, element);
  }
  for (KiTrade *element in self.tradeArray) {
    size += computeMessageSize(3, element);
  }
  for (KiOrder *element in self.orderArray) {
    size += computeMessageSize(4, element);
  }
  for (KiIndices *element in self.indicesArray) {
    size += computeMessageSize(5, element);
  }
  for (Level2 *element in self.level2Array) {
    size += computeMessageSize(6, element);
  }
  for (Level3 *element in self.level3Array) {
    size += computeMessageSize(7, element);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.orderStatusArray.count;
    const OrderStatus *values = (const OrderStatus *)self.orderStatusArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  for (KiRegionalIndices *element in self.regionalIndicesArray) {
    size += computeMessageSize(9, element);
  }
  for (KiCurrency *element in self.currencyArray) {
    size += computeMessageSize(10, element);
  }
  for (StockHistory *element in self.stockHistoryArray) {
    size += computeMessageSize(11, element);
  }
  for (IndicesHistory *element in self.indicesHistoryArray) {
    size += computeMessageSize(12, element);
  }
  for (Transaction *element in self.brokerSummaryArray) {
    size += computeMessageSize(13, element);
  }
  if (self.hasStockNetbuysell) {
    size += computeMessageSize(14, self.stockNetbuysell);
  }
  if (self.hasBrokerNetbuysell) {
    size += computeMessageSize(15, self.brokerNetbuysell);
  }
  for (ForeignDomestic *element in self.foreignDomesticArray) {
    size += computeMessageSize(16, element);
  }
  for (KiTradeDetail *element in self.tradeDetailArray) {
    size += computeMessageSize(17, element);
  }
  for (KiOrderDetail *element in self.orderDetailArray) {
    size += computeMessageSize(18, element);
  }
  for (KiStockData *element in self.stockDataArray) {
    size += computeMessageSize(19, element);
  }
  for (KiBrokerData *element in self.brokerDataArray) {
    size += computeMessageSize(20, element);
  }
  for (KiIndicesData *element in self.indicesDataArray) {
    size += computeMessageSize(21, element);
  }
  for (KiRegionalIndicesData *element in self.regionalIndicesDataArray) {
    size += computeMessageSize(22, element);
  }
  for (KiCurrencyData *element in self.currencyDataArray) {
    size += computeMessageSize(23, element);
  }
  for (IdxSuspendReleaseBroker *element in self.suspendReleaseBrokerArray) {
    size += computeMessageSize(24, element);
  }
  for (IdxSuspendReleaseStock *element in self.suspendReleaseStockArray) {
    size += computeMessageSize(25, element);
  }
  for (IdxTradingStatus *element in self.tradingStatusArray) {
    size += computeMessageSize(26, element);
  }
  if (self.hasRequest) {
    size += computeMessageSize(27, self.request);
  }
  for (KiTrade *element in self.lastTradeArray) {
    size += computeMessageSize(28, element);
  }
  for (KiOrderDetail *element in self.orderTrackArray) {
    size += computeMessageSize(29, element);
  }
  for (KiFuture *element in self.futureArray) {
    size += computeMessageSize(30, element);
  }
  for (KiComodity *element in self.comodityArray) {
    size += computeMessageSize(31, element);
  }
  if (self.hasFdsummary) {
    size += computeMessageSize(32, self.fdsummary);
  }
  if (self.hasStockHistNetbuysell) {
    size += computeMessageSize(33, self.stockHistNetbuysell);
  }
  if (self.hasBrokerHistNetbuysell) {
    size += computeMessageSize(34, self.brokerHistNetbuysell);
  }
  for (ForeignHistory *element in self.foreignHistoryArray) {
    size += computeMessageSize(35, element);
  }
  if (self.hasMarketSummary) {
    size += computeMessageSize(36, self.marketSummary);
  }
  for (KiWk52104 *element in self.wk52104Array) {
    size += computeMessageSize(37, element);
  }
  for (COMessage *element in self.conditionalOrderArray) {
    size += computeMessageSize(38, element);
  }
  for (KiStockData *element in self.contractDataArray) {
    size += computeMessageSize(39, element);
  }
  for (KiTrade *element in self.derivativeTradeArray) {
    size += computeMessageSize(40, element);
  }
  for (Level2 *element in self.derivativeLevel2Array) {
    size += computeMessageSize(41, element);
  }
  for (Level3 *element in self.derivativeLevel3Array) {
    size += computeMessageSize(42, element);
  }
  for (KiStockSummary *element in self.contractSummaryArray) {
    size += computeMessageSize(43, element);
  }
  for (KiTrade *element in self.derivativeLastTradeArray) {
    size += computeMessageSize(44, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiRecord*) parseFromData:(NSData*) data {
  return (KiRecord*)[[[KiRecord builder] mergeFromData:data] build];
}
+ (KiRecord*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRecord*)[[[KiRecord builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiRecord*) parseFromInputStream:(NSInputStream*) input {
  return (KiRecord*)[[[KiRecord builder] mergeFromInputStream:input] build];
}
+ (KiRecord*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRecord*)[[[KiRecord builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRecord*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiRecord*)[[[KiRecord builder] mergeFromCodedInputStream:input] build];
}
+ (KiRecord*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRecord*)[[[KiRecord builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRecord_Builder*) builder {
  return [[KiRecord_Builder alloc] init];
}
+ (KiRecord_Builder*) builderWithPrototype:(KiRecord*) prototype {
  return [[KiRecord builder] mergeFrom:prototype];
}
- (KiRecord_Builder*) builder {
  return [KiRecord builder];
}
- (KiRecord_Builder*) toBuilder {
  return [KiRecord builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasRecordType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"recordType", self.recordType];
  }
  for (KiStockSummary* element in self.stockSummaryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockSummary"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiTrade* element in self.tradeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"trade"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiOrder* element in self.orderArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"order"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiIndices* element in self.indicesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"indices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Level2* element in self.level2Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"level2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Level3* element in self.level3Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"level3"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSNumber* element in self.orderStatusArray) {
    [output appendFormat:@"%@%@: %d\n", indent, @"orderStatus", element.intValue];
  }
  for (KiRegionalIndices* element in self.regionalIndicesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"regionalIndices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiCurrency* element in self.currencyArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"currency"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (StockHistory* element in self.stockHistoryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockHistory"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (IndicesHistory* element in self.indicesHistoryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"indicesHistory"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Transaction* element in self.brokerSummaryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"brokerSummary"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStockNetbuysell) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockNetbuysell"];
    [self.stockNetbuysell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBrokerNetbuysell) {
    [output appendFormat:@"%@%@ {\n", indent, @"brokerNetbuysell"];
    [self.brokerNetbuysell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ForeignDomestic* element in self.foreignDomesticArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"foreignDomestic"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiTradeDetail* element in self.tradeDetailArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"tradeDetail"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiOrderDetail* element in self.orderDetailArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderDetail"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiStockData* element in self.stockDataArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiBrokerData* element in self.brokerDataArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"brokerData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiIndicesData* element in self.indicesDataArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"indicesData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiRegionalIndicesData* element in self.regionalIndicesDataArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"regionalIndicesData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiCurrencyData* element in self.currencyDataArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"currencyData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (IdxSuspendReleaseBroker* element in self.suspendReleaseBrokerArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"suspendReleaseBroker"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (IdxSuspendReleaseStock* element in self.suspendReleaseStockArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"suspendReleaseStock"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (IdxTradingStatus* element in self.tradingStatusArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"tradingStatus"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"request"];
    [self.request writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiTrade* element in self.lastTradeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"lastTrade"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiOrderDetail* element in self.orderTrackArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderTrack"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiFuture* element in self.futureArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"future"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiComodity* element in self.comodityArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"comodity"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFdsummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"fdsummary"];
    [self.fdsummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStockHistNetbuysell) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockHistNetbuysell"];
    [self.stockHistNetbuysell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBrokerHistNetbuysell) {
    [output appendFormat:@"%@%@ {\n", indent, @"brokerHistNetbuysell"];
    [self.brokerHistNetbuysell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ForeignHistory* element in self.foreignHistoryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"foreignHistory"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMarketSummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"marketSummary"];
    [self.marketSummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiWk52104* element in self.wk52104Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"wk52104"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (COMessage* element in self.conditionalOrderArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"conditionalOrder"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiStockData* element in self.contractDataArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"contractData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiTrade* element in self.derivativeTradeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"derivativeTrade"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Level2* element in self.derivativeLevel2Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"derivativeLevel2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Level3* element in self.derivativeLevel3Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"derivativeLevel3"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiStockSummary* element in self.contractSummaryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"contractSummary"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (KiTrade* element in self.derivativeLastTradeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"derivativeLastTrade"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiRecord class]]) {
    return NO;
  }
  KiRecord *otherMessage = other;
  return
      self.hasRecordType == otherMessage.hasRecordType &&
      (!self.hasRecordType || self.recordType != otherMessage.recordType) &&
      [self.stockSummaryArray isEqualToArray:otherMessage.stockSummaryArray] &&
      [self.tradeArray isEqualToArray:otherMessage.tradeArray] &&
      [self.orderArray isEqualToArray:otherMessage.orderArray] &&
      [self.indicesArray isEqualToArray:otherMessage.indicesArray] &&
      [self.level2Array isEqualToArray:otherMessage.level2Array] &&
      [self.level3Array isEqualToArray:otherMessage.level3Array] &&
      [self.orderStatusArray isEqualToArray:otherMessage.orderStatusArray] &&
      [self.regionalIndicesArray isEqualToArray:otherMessage.regionalIndicesArray] &&
      [self.currencyArray isEqualToArray:otherMessage.currencyArray] &&
      [self.stockHistoryArray isEqualToArray:otherMessage.stockHistoryArray] &&
      [self.indicesHistoryArray isEqualToArray:otherMessage.indicesHistoryArray] &&
      [self.brokerSummaryArray isEqualToArray:otherMessage.brokerSummaryArray] &&
      self.hasStockNetbuysell == otherMessage.hasStockNetbuysell &&
      (!self.hasStockNetbuysell || [self.stockNetbuysell isEqual:otherMessage.stockNetbuysell]) &&
      self.hasBrokerNetbuysell == otherMessage.hasBrokerNetbuysell &&
      (!self.hasBrokerNetbuysell || [self.brokerNetbuysell isEqual:otherMessage.brokerNetbuysell]) &&
      [self.foreignDomesticArray isEqualToArray:otherMessage.foreignDomesticArray] &&
      [self.tradeDetailArray isEqualToArray:otherMessage.tradeDetailArray] &&
      [self.orderDetailArray isEqualToArray:otherMessage.orderDetailArray] &&
      [self.stockDataArray isEqualToArray:otherMessage.stockDataArray] &&
      [self.brokerDataArray isEqualToArray:otherMessage.brokerDataArray] &&
      [self.indicesDataArray isEqualToArray:otherMessage.indicesDataArray] &&
      [self.regionalIndicesDataArray isEqualToArray:otherMessage.regionalIndicesDataArray] &&
      [self.currencyDataArray isEqualToArray:otherMessage.currencyDataArray] &&
      [self.suspendReleaseBrokerArray isEqualToArray:otherMessage.suspendReleaseBrokerArray] &&
      [self.suspendReleaseStockArray isEqualToArray:otherMessage.suspendReleaseStockArray] &&
      [self.tradingStatusArray isEqualToArray:otherMessage.tradingStatusArray] &&
      self.hasRequest == otherMessage.hasRequest &&
      (!self.hasRequest || [self.request isEqual:otherMessage.request]) &&
      [self.lastTradeArray isEqualToArray:otherMessage.lastTradeArray] &&
      [self.orderTrackArray isEqualToArray:otherMessage.orderTrackArray] &&
      [self.futureArray isEqualToArray:otherMessage.futureArray] &&
      [self.comodityArray isEqualToArray:otherMessage.comodityArray] &&
      self.hasFdsummary == otherMessage.hasFdsummary &&
      (!self.hasFdsummary || [self.fdsummary isEqual:otherMessage.fdsummary]) &&
      self.hasStockHistNetbuysell == otherMessage.hasStockHistNetbuysell &&
      (!self.hasStockHistNetbuysell || [self.stockHistNetbuysell isEqual:otherMessage.stockHistNetbuysell]) &&
      self.hasBrokerHistNetbuysell == otherMessage.hasBrokerHistNetbuysell &&
      (!self.hasBrokerHistNetbuysell || [self.brokerHistNetbuysell isEqual:otherMessage.brokerHistNetbuysell]) &&
      [self.foreignHistoryArray isEqualToArray:otherMessage.foreignHistoryArray] &&
      self.hasMarketSummary == otherMessage.hasMarketSummary &&
      (!self.hasMarketSummary || [self.marketSummary isEqual:otherMessage.marketSummary]) &&
      [self.wk52104Array isEqualToArray:otherMessage.wk52104Array] &&
      [self.conditionalOrderArray isEqualToArray:otherMessage.conditionalOrderArray] &&
      [self.contractDataArray isEqualToArray:otherMessage.contractDataArray] &&
      [self.derivativeTradeArray isEqualToArray:otherMessage.derivativeTradeArray] &&
      [self.derivativeLevel2Array isEqualToArray:otherMessage.derivativeLevel2Array] &&
      [self.derivativeLevel3Array isEqualToArray:otherMessage.derivativeLevel3Array] &&
      [self.contractSummaryArray isEqualToArray:otherMessage.contractSummaryArray] &&
      [self.derivativeLastTradeArray isEqualToArray:otherMessage.derivativeLastTradeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasRecordType) {
    hashCode = hashCode * 31 + self.recordType;
  }
  for (KiStockSummary* element in self.stockSummaryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiTrade* element in self.tradeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiOrder* element in self.orderArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiIndices* element in self.indicesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Level2* element in self.level2Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Level3* element in self.level3Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSNumber* element in self.orderStatusArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  for (KiRegionalIndices* element in self.regionalIndicesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiCurrency* element in self.currencyArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (StockHistory* element in self.stockHistoryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (IndicesHistory* element in self.indicesHistoryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Transaction* element in self.brokerSummaryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStockNetbuysell) {
    hashCode = hashCode * 31 + [self.stockNetbuysell hash];
  }
  if (self.hasBrokerNetbuysell) {
    hashCode = hashCode * 31 + [self.brokerNetbuysell hash];
  }
  for (ForeignDomestic* element in self.foreignDomesticArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiTradeDetail* element in self.tradeDetailArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiOrderDetail* element in self.orderDetailArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiStockData* element in self.stockDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiBrokerData* element in self.brokerDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiIndicesData* element in self.indicesDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiRegionalIndicesData* element in self.regionalIndicesDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiCurrencyData* element in self.currencyDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (IdxSuspendReleaseBroker* element in self.suspendReleaseBrokerArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (IdxSuspendReleaseStock* element in self.suspendReleaseStockArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (IdxTradingStatus* element in self.tradingStatusArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRequest) {
    hashCode = hashCode * 31 + [self.request hash];
  }
  for (KiTrade* element in self.lastTradeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiOrderDetail* element in self.orderTrackArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiFuture* element in self.futureArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiComodity* element in self.comodityArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasFdsummary) {
    hashCode = hashCode * 31 + [self.fdsummary hash];
  }
  if (self.hasStockHistNetbuysell) {
    hashCode = hashCode * 31 + [self.stockHistNetbuysell hash];
  }
  if (self.hasBrokerHistNetbuysell) {
    hashCode = hashCode * 31 + [self.brokerHistNetbuysell hash];
  }
  for (ForeignHistory* element in self.foreignHistoryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasMarketSummary) {
    hashCode = hashCode * 31 + [self.marketSummary hash];
  }
  for (KiWk52104* element in self.wk52104Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (COMessage* element in self.conditionalOrderArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiStockData* element in self.contractDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiTrade* element in self.derivativeTradeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Level2* element in self.derivativeLevel2Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Level3* element in self.derivativeLevel3Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiStockSummary* element in self.contractSummaryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (KiTrade* element in self.derivativeLastTradeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiRecord_Builder()
@property (strong) KiRecord* result;
@end

@implementation KiRecord_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiRecord alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiRecord_Builder*) clear {
  self.result = [[KiRecord alloc] init];
  return self;
}
- (KiRecord_Builder*) clone {
  return [KiRecord builderWithPrototype:result];
}
- (KiRecord*) defaultInstance {
  return [KiRecord defaultInstance];
}
- (KiRecord*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiRecord*) buildPartial {
  KiRecord* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiRecord_Builder*) mergeFrom:(KiRecord*) other {
  if (other == [KiRecord defaultInstance]) {
    return self;
  }
  if (other.hasRecordType) {
    [self setRecordType:other.recordType];
  }
  if (other.stockSummaryArray.count > 0) {
    if (result.stockSummaryArray == nil) {
      result.stockSummaryArray = [[NSMutableArray alloc] initWithArray:other.stockSummaryArray];
    } else {
      [result.stockSummaryArray addObjectsFromArray:other.stockSummaryArray];
    }
  }
  if (other.tradeArray.count > 0) {
    if (result.tradeArray == nil) {
      result.tradeArray = [[NSMutableArray alloc] initWithArray:other.tradeArray];
    } else {
      [result.tradeArray addObjectsFromArray:other.tradeArray];
    }
  }
  if (other.orderArray.count > 0) {
    if (result.orderArray == nil) {
      result.orderArray = [[NSMutableArray alloc] initWithArray:other.orderArray];
    } else {
      [result.orderArray addObjectsFromArray:other.orderArray];
    }
  }
  if (other.indicesArray.count > 0) {
    if (result.indicesArray == nil) {
      result.indicesArray = [[NSMutableArray alloc] initWithArray:other.indicesArray];
    } else {
      [result.indicesArray addObjectsFromArray:other.indicesArray];
    }
  }
  if (other.level2Array.count > 0) {
    if (result.level2Array == nil) {
      result.level2Array = [[NSMutableArray alloc] initWithArray:other.level2Array];
    } else {
      [result.level2Array addObjectsFromArray:other.level2Array];
    }
  }
  if (other.level3Array.count > 0) {
    if (result.level3Array == nil) {
      result.level3Array = [[NSMutableArray alloc] initWithArray:other.level3Array];
    } else {
      [result.level3Array addObjectsFromArray:other.level3Array];
    }
  }
  if (other.orderStatusArray.count > 0) {
    if (result.orderStatusArray == nil) {
      result.orderStatusArray = [other.orderStatusArray copy];
    } else {
      [result.orderStatusArray appendArray:other.orderStatusArray];
    }
  }
  if (other.regionalIndicesArray.count > 0) {
    if (result.regionalIndicesArray == nil) {
      result.regionalIndicesArray = [[NSMutableArray alloc] initWithArray:other.regionalIndicesArray];
    } else {
      [result.regionalIndicesArray addObjectsFromArray:other.regionalIndicesArray];
    }
  }
  if (other.currencyArray.count > 0) {
    if (result.currencyArray == nil) {
      result.currencyArray = [[NSMutableArray alloc] initWithArray:other.currencyArray];
    } else {
      [result.currencyArray addObjectsFromArray:other.currencyArray];
    }
  }
  if (other.stockHistoryArray.count > 0) {
    if (result.stockHistoryArray == nil) {
      result.stockHistoryArray = [[NSMutableArray alloc] initWithArray:other.stockHistoryArray];
    } else {
      [result.stockHistoryArray addObjectsFromArray:other.stockHistoryArray];
    }
  }
  if (other.indicesHistoryArray.count > 0) {
    if (result.indicesHistoryArray == nil) {
      result.indicesHistoryArray = [[NSMutableArray alloc] initWithArray:other.indicesHistoryArray];
    } else {
      [result.indicesHistoryArray addObjectsFromArray:other.indicesHistoryArray];
    }
  }
  if (other.brokerSummaryArray.count > 0) {
    if (result.brokerSummaryArray == nil) {
      result.brokerSummaryArray = [[NSMutableArray alloc] initWithArray:other.brokerSummaryArray];
    } else {
      [result.brokerSummaryArray addObjectsFromArray:other.brokerSummaryArray];
    }
  }
  if (other.hasStockNetbuysell) {
    [self mergeStockNetbuysell:other.stockNetbuysell];
  }
  if (other.hasBrokerNetbuysell) {
    [self mergeBrokerNetbuysell:other.brokerNetbuysell];
  }
  if (other.foreignDomesticArray.count > 0) {
    if (result.foreignDomesticArray == nil) {
      result.foreignDomesticArray = [[NSMutableArray alloc] initWithArray:other.foreignDomesticArray];
    } else {
      [result.foreignDomesticArray addObjectsFromArray:other.foreignDomesticArray];
    }
  }
  if (other.tradeDetailArray.count > 0) {
    if (result.tradeDetailArray == nil) {
      result.tradeDetailArray = [[NSMutableArray alloc] initWithArray:other.tradeDetailArray];
    } else {
      [result.tradeDetailArray addObjectsFromArray:other.tradeDetailArray];
    }
  }
  if (other.orderDetailArray.count > 0) {
    if (result.orderDetailArray == nil) {
      result.orderDetailArray = [[NSMutableArray alloc] initWithArray:other.orderDetailArray];
    } else {
      [result.orderDetailArray addObjectsFromArray:other.orderDetailArray];
    }
  }
  if (other.stockDataArray.count > 0) {
    if (result.stockDataArray == nil) {
      result.stockDataArray = [[NSMutableArray alloc] initWithArray:other.stockDataArray];
    } else {
      [result.stockDataArray addObjectsFromArray:other.stockDataArray];
    }
  }
  if (other.brokerDataArray.count > 0) {
    if (result.brokerDataArray == nil) {
      result.brokerDataArray = [[NSMutableArray alloc] initWithArray:other.brokerDataArray];
    } else {
      [result.brokerDataArray addObjectsFromArray:other.brokerDataArray];
    }
  }
  if (other.indicesDataArray.count > 0) {
    if (result.indicesDataArray == nil) {
      result.indicesDataArray = [[NSMutableArray alloc] initWithArray:other.indicesDataArray];
    } else {
      [result.indicesDataArray addObjectsFromArray:other.indicesDataArray];
    }
  }
  if (other.regionalIndicesDataArray.count > 0) {
    if (result.regionalIndicesDataArray == nil) {
      result.regionalIndicesDataArray = [[NSMutableArray alloc] initWithArray:other.regionalIndicesDataArray];
    } else {
      [result.regionalIndicesDataArray addObjectsFromArray:other.regionalIndicesDataArray];
    }
  }
  if (other.currencyDataArray.count > 0) {
    if (result.currencyDataArray == nil) {
      result.currencyDataArray = [[NSMutableArray alloc] initWithArray:other.currencyDataArray];
    } else {
      [result.currencyDataArray addObjectsFromArray:other.currencyDataArray];
    }
  }
  if (other.suspendReleaseBrokerArray.count > 0) {
    if (result.suspendReleaseBrokerArray == nil) {
      result.suspendReleaseBrokerArray = [[NSMutableArray alloc] initWithArray:other.suspendReleaseBrokerArray];
    } else {
      [result.suspendReleaseBrokerArray addObjectsFromArray:other.suspendReleaseBrokerArray];
    }
  }
  if (other.suspendReleaseStockArray.count > 0) {
    if (result.suspendReleaseStockArray == nil) {
      result.suspendReleaseStockArray = [[NSMutableArray alloc] initWithArray:other.suspendReleaseStockArray];
    } else {
      [result.suspendReleaseStockArray addObjectsFromArray:other.suspendReleaseStockArray];
    }
  }
  if (other.tradingStatusArray.count > 0) {
    if (result.tradingStatusArray == nil) {
      result.tradingStatusArray = [[NSMutableArray alloc] initWithArray:other.tradingStatusArray];
    } else {
      [result.tradingStatusArray addObjectsFromArray:other.tradingStatusArray];
    }
  }
  if (other.hasRequest) {
    [self mergeRequest:other.request];
  }
  if (other.lastTradeArray.count > 0) {
    if (result.lastTradeArray == nil) {
      result.lastTradeArray = [[NSMutableArray alloc] initWithArray:other.lastTradeArray];
    } else {
      [result.lastTradeArray addObjectsFromArray:other.lastTradeArray];
    }
  }
  if (other.orderTrackArray.count > 0) {
    if (result.orderTrackArray == nil) {
      result.orderTrackArray = [[NSMutableArray alloc] initWithArray:other.orderTrackArray];
    } else {
      [result.orderTrackArray addObjectsFromArray:other.orderTrackArray];
    }
  }
  if (other.futureArray.count > 0) {
    if (result.futureArray == nil) {
      result.futureArray = [[NSMutableArray alloc] initWithArray:other.futureArray];
    } else {
      [result.futureArray addObjectsFromArray:other.futureArray];
    }
  }
  if (other.comodityArray.count > 0) {
    if (result.comodityArray == nil) {
      result.comodityArray = [[NSMutableArray alloc] initWithArray:other.comodityArray];
    } else {
      [result.comodityArray addObjectsFromArray:other.comodityArray];
    }
  }
  if (other.hasFdsummary) {
    [self mergeFdsummary:other.fdsummary];
  }
  if (other.hasStockHistNetbuysell) {
    [self mergeStockHistNetbuysell:other.stockHistNetbuysell];
  }
  if (other.hasBrokerHistNetbuysell) {
    [self mergeBrokerHistNetbuysell:other.brokerHistNetbuysell];
  }
  if (other.foreignHistoryArray.count > 0) {
    if (result.foreignHistoryArray == nil) {
      result.foreignHistoryArray = [[NSMutableArray alloc] initWithArray:other.foreignHistoryArray];
    } else {
      [result.foreignHistoryArray addObjectsFromArray:other.foreignHistoryArray];
    }
  }
  if (other.hasMarketSummary) {
    [self mergeMarketSummary:other.marketSummary];
  }
  if (other.wk52104Array.count > 0) {
    if (result.wk52104Array == nil) {
      result.wk52104Array = [[NSMutableArray alloc] initWithArray:other.wk52104Array];
    } else {
      [result.wk52104Array addObjectsFromArray:other.wk52104Array];
    }
  }
  if (other.conditionalOrderArray.count > 0) {
    if (result.conditionalOrderArray == nil) {
      result.conditionalOrderArray = [[NSMutableArray alloc] initWithArray:other.conditionalOrderArray];
    } else {
      [result.conditionalOrderArray addObjectsFromArray:other.conditionalOrderArray];
    }
  }
  if (other.contractDataArray.count > 0) {
    if (result.contractDataArray == nil) {
      result.contractDataArray = [[NSMutableArray alloc] initWithArray:other.contractDataArray];
    } else {
      [result.contractDataArray addObjectsFromArray:other.contractDataArray];
    }
  }
  if (other.derivativeTradeArray.count > 0) {
    if (result.derivativeTradeArray == nil) {
      result.derivativeTradeArray = [[NSMutableArray alloc] initWithArray:other.derivativeTradeArray];
    } else {
      [result.derivativeTradeArray addObjectsFromArray:other.derivativeTradeArray];
    }
  }
  if (other.derivativeLevel2Array.count > 0) {
    if (result.derivativeLevel2Array == nil) {
      result.derivativeLevel2Array = [[NSMutableArray alloc] initWithArray:other.derivativeLevel2Array];
    } else {
      [result.derivativeLevel2Array addObjectsFromArray:other.derivativeLevel2Array];
    }
  }
  if (other.derivativeLevel3Array.count > 0) {
    if (result.derivativeLevel3Array == nil) {
      result.derivativeLevel3Array = [[NSMutableArray alloc] initWithArray:other.derivativeLevel3Array];
    } else {
      [result.derivativeLevel3Array addObjectsFromArray:other.derivativeLevel3Array];
    }
  }
  if (other.contractSummaryArray.count > 0) {
    if (result.contractSummaryArray == nil) {
      result.contractSummaryArray = [[NSMutableArray alloc] initWithArray:other.contractSummaryArray];
    } else {
      [result.contractSummaryArray addObjectsFromArray:other.contractSummaryArray];
    }
  }
  if (other.derivativeLastTradeArray.count > 0) {
    if (result.derivativeLastTradeArray == nil) {
      result.derivativeLastTradeArray = [[NSMutableArray alloc] initWithArray:other.derivativeLastTradeArray];
    } else {
      [result.derivativeLastTradeArray addObjectsFromArray:other.derivativeLastTradeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiRecord_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiRecord_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (RecordTypeIsValidValue(value)) {
          [self setRecordType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        KiStockSummary_Builder* subBuilder = [KiStockSummary builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStockSummary:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        KiTrade_Builder* subBuilder = [KiTrade builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTrade:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        KiOrder_Builder* subBuilder = [KiOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOrder:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        KiIndices_Builder* subBuilder = [KiIndices builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndices:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Level2_Builder* subBuilder = [Level2 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLevel2:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Level3_Builder* subBuilder = [Level3 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLevel3:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        int32_t value = [input readEnum];
        if (OrderStatusIsValidValue(value)) {
          [self addOrderStatus:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 74: {
        KiRegionalIndices_Builder* subBuilder = [KiRegionalIndices builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRegionalIndices:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        KiCurrency_Builder* subBuilder = [KiCurrency builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCurrency:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        StockHistory_Builder* subBuilder = [StockHistory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStockHistory:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        IndicesHistory_Builder* subBuilder = [IndicesHistory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndicesHistory:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        Transaction_Builder* subBuilder = [Transaction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBrokerSummary:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        NetBuySell_Builder* subBuilder = [NetBuySell builder];
        if (self.hasStockNetbuysell) {
          [subBuilder mergeFrom:self.stockNetbuysell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockNetbuysell:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        NetBuySell_Builder* subBuilder = [NetBuySell builder];
        if (self.hasBrokerNetbuysell) {
          [subBuilder mergeFrom:self.brokerNetbuysell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBrokerNetbuysell:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        ForeignDomestic_Builder* subBuilder = [ForeignDomestic builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addForeignDomestic:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        KiTradeDetail_Builder* subBuilder = [KiTradeDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTradeDetail:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        KiOrderDetail_Builder* subBuilder = [KiOrderDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOrderDetail:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        KiStockData_Builder* subBuilder = [KiStockData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStockData:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        KiBrokerData_Builder* subBuilder = [KiBrokerData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBrokerData:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        KiIndicesData_Builder* subBuilder = [KiIndicesData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndicesData:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        KiRegionalIndicesData_Builder* subBuilder = [KiRegionalIndicesData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRegionalIndicesData:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        KiCurrencyData_Builder* subBuilder = [KiCurrencyData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCurrencyData:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        IdxSuspendReleaseBroker_Builder* subBuilder = [IdxSuspendReleaseBroker builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSuspendReleaseBroker:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        IdxSuspendReleaseStock_Builder* subBuilder = [IdxSuspendReleaseStock builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSuspendReleaseStock:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        IdxTradingStatus_Builder* subBuilder = [IdxTradingStatus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTradingStatus:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        KiRequest_Builder* subBuilder = [KiRequest builder];
        if (self.hasRequest) {
          [subBuilder mergeFrom:self.request];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequest:[subBuilder buildPartial]];
        break;
      }
      case 226: {
        KiTrade_Builder* subBuilder = [KiTrade builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLastTrade:[subBuilder buildPartial]];
        break;
      }
      case 234: {
        KiOrderDetail_Builder* subBuilder = [KiOrderDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOrderTrack:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        KiFuture_Builder* subBuilder = [KiFuture builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFuture:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        KiComodity_Builder* subBuilder = [KiComodity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComodity:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        FDSummary_Builder* subBuilder = [FDSummary builder];
        if (self.hasFdsummary) {
          [subBuilder mergeFrom:self.fdsummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFdsummary:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        NetBuySell_Builder* subBuilder = [NetBuySell builder];
        if (self.hasStockHistNetbuysell) {
          [subBuilder mergeFrom:self.stockHistNetbuysell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockHistNetbuysell:[subBuilder buildPartial]];
        break;
      }
      case 274: {
        NetBuySell_Builder* subBuilder = [NetBuySell builder];
        if (self.hasBrokerHistNetbuysell) {
          [subBuilder mergeFrom:self.brokerHistNetbuysell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBrokerHistNetbuysell:[subBuilder buildPartial]];
        break;
      }
      case 282: {
        ForeignHistory_Builder* subBuilder = [ForeignHistory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addForeignHistory:[subBuilder buildPartial]];
        break;
      }
      case 290: {
        MarketSummary_Builder* subBuilder = [MarketSummary builder];
        if (self.hasMarketSummary) {
          [subBuilder mergeFrom:self.marketSummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMarketSummary:[subBuilder buildPartial]];
        break;
      }
      case 298: {
        KiWk52104_Builder* subBuilder = [KiWk52104 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWk52104:[subBuilder buildPartial]];
        break;
      }
      case 306: {
        COMessage_Builder* subBuilder = [COMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConditionalOrder:[subBuilder buildPartial]];
        break;
      }
      case 314: {
        KiStockData_Builder* subBuilder = [KiStockData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContractData:[subBuilder buildPartial]];
        break;
      }
      case 322: {
        KiTrade_Builder* subBuilder = [KiTrade builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDerivativeTrade:[subBuilder buildPartial]];
        break;
      }
      case 330: {
        Level2_Builder* subBuilder = [Level2 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDerivativeLevel2:[subBuilder buildPartial]];
        break;
      }
      case 338: {
        Level3_Builder* subBuilder = [Level3 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDerivativeLevel3:[subBuilder buildPartial]];
        break;
      }
      case 346: {
        KiStockSummary_Builder* subBuilder = [KiStockSummary builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContractSummary:[subBuilder buildPartial]];
        break;
      }
      case 354: {
        KiTrade_Builder* subBuilder = [KiTrade builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDerivativeLastTrade:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRecordType {
  return result.hasRecordType;
}
- (RecordType) recordType {
  return result.recordType;
}
- (KiRecord_Builder*) setRecordType:(RecordType) value {
  result.hasRecordType = YES;
  result.recordType = value;
  return self;
}
- (KiRecord_Builder*) clearRecordType {
  result.hasRecordType = NO;
  result.recordType = RecordTypeIdxTradingStatus;
  return self;
}
- (NSMutableArray *)stockSummary {
  return result.stockSummaryArray;
}
- (KiStockSummary*)stockSummaryAtIndex:(NSUInteger)index {
  return [result stockSummaryAtIndex:index];
}
- (KiRecord_Builder *)addStockSummary:(KiStockSummary*)value {
  if (result.stockSummaryArray == nil) {
    result.stockSummaryArray = [[NSMutableArray alloc]init];
  }
  [result.stockSummaryArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setStockSummaryArray:(NSArray *)array {
  result.stockSummaryArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearStockSummary {
  result.stockSummaryArray = nil;
  return self;
}
- (NSMutableArray *)trade {
  return result.tradeArray;
}
- (KiTrade*)tradeAtIndex:(NSUInteger)index {
  return [result tradeAtIndex:index];
}
- (KiRecord_Builder *)addTrade:(KiTrade*)value {
  if (result.tradeArray == nil) {
    result.tradeArray = [[NSMutableArray alloc]init];
  }
  [result.tradeArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setTradeArray:(NSArray *)array {
  result.tradeArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearTrade {
  result.tradeArray = nil;
  return self;
}
- (NSMutableArray *)order {
  return result.orderArray;
}
- (KiOrder*)orderAtIndex:(NSUInteger)index {
  return [result orderAtIndex:index];
}
- (KiRecord_Builder *)addOrder:(KiOrder*)value {
  if (result.orderArray == nil) {
    result.orderArray = [[NSMutableArray alloc]init];
  }
  [result.orderArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setOrderArray:(NSArray *)array {
  result.orderArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearOrder {
  result.orderArray = nil;
  return self;
}
- (NSMutableArray *)indices {
  return result.indicesArray;
}
- (KiIndices*)indicesAtIndex:(NSUInteger)index {
  return [result indicesAtIndex:index];
}
- (KiRecord_Builder *)addIndices:(KiIndices*)value {
  if (result.indicesArray == nil) {
    result.indicesArray = [[NSMutableArray alloc]init];
  }
  [result.indicesArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setIndicesArray:(NSArray *)array {
  result.indicesArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearIndices {
  result.indicesArray = nil;
  return self;
}
- (NSMutableArray *)level2 {
  return result.level2Array;
}
- (Level2*)level2AtIndex:(NSUInteger)index {
  return [result level2AtIndex:index];
}
- (KiRecord_Builder *)addLevel2:(Level2*)value {
  if (result.level2Array == nil) {
    result.level2Array = [[NSMutableArray alloc]init];
  }
  [result.level2Array addObject:value];
  return self;
}
- (KiRecord_Builder *)setLevel2Array:(NSArray *)array {
  result.level2Array = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearLevel2 {
  result.level2Array = nil;
  return self;
}
- (NSMutableArray *)level3 {
  return result.level3Array;
}
- (Level3*)level3AtIndex:(NSUInteger)index {
  return [result level3AtIndex:index];
}
- (KiRecord_Builder *)addLevel3:(Level3*)value {
  if (result.level3Array == nil) {
    result.level3Array = [[NSMutableArray alloc]init];
  }
  [result.level3Array addObject:value];
  return self;
}
- (KiRecord_Builder *)setLevel3Array:(NSArray *)array {
  result.level3Array = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearLevel3 {
  result.level3Array = nil;
  return self;
}
- (PBAppendableArray *)orderStatus {
  return result.orderStatusArray;
}
- (OrderStatus)orderStatusAtIndex:(NSUInteger)index {
  return [result orderStatusAtIndex:index];
}
- (KiRecord_Builder *)addOrderStatus:(OrderStatus)value {
  if (result.orderStatusArray == nil) {
    result.orderStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.orderStatusArray addInt32:value];
  return self;
}
- (KiRecord_Builder *)setOrderStatusArray:(NSArray *)array {
  result.orderStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (KiRecord_Builder *)setOrderStatusValues:(const OrderStatus *)values count:(NSUInteger)count {
  result.orderStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (KiRecord_Builder *)clearOrderStatus {
  result.orderStatusArray = nil;
  return self;
}
- (NSMutableArray *)regionalIndices {
  return result.regionalIndicesArray;
}
- (KiRegionalIndices*)regionalIndicesAtIndex:(NSUInteger)index {
  return [result regionalIndicesAtIndex:index];
}
- (KiRecord_Builder *)addRegionalIndices:(KiRegionalIndices*)value {
  if (result.regionalIndicesArray == nil) {
    result.regionalIndicesArray = [[NSMutableArray alloc]init];
  }
  [result.regionalIndicesArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setRegionalIndicesArray:(NSArray *)array {
  result.regionalIndicesArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearRegionalIndices {
  result.regionalIndicesArray = nil;
  return self;
}
- (NSMutableArray *)currency {
  return result.currencyArray;
}
- (KiCurrency*)currencyAtIndex:(NSUInteger)index {
  return [result currencyAtIndex:index];
}
- (KiRecord_Builder *)addCurrency:(KiCurrency*)value {
  if (result.currencyArray == nil) {
    result.currencyArray = [[NSMutableArray alloc]init];
  }
  [result.currencyArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setCurrencyArray:(NSArray *)array {
  result.currencyArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearCurrency {
  result.currencyArray = nil;
  return self;
}
- (NSMutableArray *)stockHistory {
  return result.stockHistoryArray;
}
- (StockHistory*)stockHistoryAtIndex:(NSUInteger)index {
  return [result stockHistoryAtIndex:index];
}
- (KiRecord_Builder *)addStockHistory:(StockHistory*)value {
  if (result.stockHistoryArray == nil) {
    result.stockHistoryArray = [[NSMutableArray alloc]init];
  }
  [result.stockHistoryArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setStockHistoryArray:(NSArray *)array {
  result.stockHistoryArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearStockHistory {
  result.stockHistoryArray = nil;
  return self;
}
- (NSMutableArray *)indicesHistory {
  return result.indicesHistoryArray;
}
- (IndicesHistory*)indicesHistoryAtIndex:(NSUInteger)index {
  return [result indicesHistoryAtIndex:index];
}
- (KiRecord_Builder *)addIndicesHistory:(IndicesHistory*)value {
  if (result.indicesHistoryArray == nil) {
    result.indicesHistoryArray = [[NSMutableArray alloc]init];
  }
  [result.indicesHistoryArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setIndicesHistoryArray:(NSArray *)array {
  result.indicesHistoryArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearIndicesHistory {
  result.indicesHistoryArray = nil;
  return self;
}
- (NSMutableArray *)brokerSummary {
  return result.brokerSummaryArray;
}
- (Transaction*)brokerSummaryAtIndex:(NSUInteger)index {
  return [result brokerSummaryAtIndex:index];
}
- (KiRecord_Builder *)addBrokerSummary:(Transaction*)value {
  if (result.brokerSummaryArray == nil) {
    result.brokerSummaryArray = [[NSMutableArray alloc]init];
  }
  [result.brokerSummaryArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setBrokerSummaryArray:(NSArray *)array {
  result.brokerSummaryArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearBrokerSummary {
  result.brokerSummaryArray = nil;
  return self;
}
- (BOOL) hasStockNetbuysell {
  return result.hasStockNetbuysell;
}
- (NetBuySell*) stockNetbuysell {
  return result.stockNetbuysell;
}
- (KiRecord_Builder*) setStockNetbuysell:(NetBuySell*) value {
  result.hasStockNetbuysell = YES;
  result.stockNetbuysell = value;
  return self;
}
- (KiRecord_Builder*) setStockNetbuysellBuilder:(NetBuySell_Builder*) builderForValue {
  return [self setStockNetbuysell:[builderForValue build]];
}
- (KiRecord_Builder*) mergeStockNetbuysell:(NetBuySell*) value {
  if (result.hasStockNetbuysell &&
      result.stockNetbuysell != [NetBuySell defaultInstance]) {
    result.stockNetbuysell =
      [[[NetBuySell builderWithPrototype:result.stockNetbuysell] mergeFrom:value] buildPartial];
  } else {
    result.stockNetbuysell = value;
  }
  result.hasStockNetbuysell = YES;
  return self;
}
- (KiRecord_Builder*) clearStockNetbuysell {
  result.hasStockNetbuysell = NO;
  result.stockNetbuysell = [NetBuySell defaultInstance];
  return self;
}
- (BOOL) hasBrokerNetbuysell {
  return result.hasBrokerNetbuysell;
}
- (NetBuySell*) brokerNetbuysell {
  return result.brokerNetbuysell;
}
- (KiRecord_Builder*) setBrokerNetbuysell:(NetBuySell*) value {
  result.hasBrokerNetbuysell = YES;
  result.brokerNetbuysell = value;
  return self;
}
- (KiRecord_Builder*) setBrokerNetbuysellBuilder:(NetBuySell_Builder*) builderForValue {
  return [self setBrokerNetbuysell:[builderForValue build]];
}
- (KiRecord_Builder*) mergeBrokerNetbuysell:(NetBuySell*) value {
  if (result.hasBrokerNetbuysell &&
      result.brokerNetbuysell != [NetBuySell defaultInstance]) {
    result.brokerNetbuysell =
      [[[NetBuySell builderWithPrototype:result.brokerNetbuysell] mergeFrom:value] buildPartial];
  } else {
    result.brokerNetbuysell = value;
  }
  result.hasBrokerNetbuysell = YES;
  return self;
}
- (KiRecord_Builder*) clearBrokerNetbuysell {
  result.hasBrokerNetbuysell = NO;
  result.brokerNetbuysell = [NetBuySell defaultInstance];
  return self;
}
- (NSMutableArray *)foreignDomestic {
  return result.foreignDomesticArray;
}
- (ForeignDomestic*)foreignDomesticAtIndex:(NSUInteger)index {
  return [result foreignDomesticAtIndex:index];
}
- (KiRecord_Builder *)addForeignDomestic:(ForeignDomestic*)value {
  if (result.foreignDomesticArray == nil) {
    result.foreignDomesticArray = [[NSMutableArray alloc]init];
  }
  [result.foreignDomesticArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setForeignDomesticArray:(NSArray *)array {
  result.foreignDomesticArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearForeignDomestic {
  result.foreignDomesticArray = nil;
  return self;
}
- (NSMutableArray *)tradeDetail {
  return result.tradeDetailArray;
}
- (KiTradeDetail*)tradeDetailAtIndex:(NSUInteger)index {
  return [result tradeDetailAtIndex:index];
}
- (KiRecord_Builder *)addTradeDetail:(KiTradeDetail*)value {
  if (result.tradeDetailArray == nil) {
    result.tradeDetailArray = [[NSMutableArray alloc]init];
  }
  [result.tradeDetailArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setTradeDetailArray:(NSArray *)array {
  result.tradeDetailArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearTradeDetail {
  result.tradeDetailArray = nil;
  return self;
}
- (NSMutableArray *)orderDetail {
  return result.orderDetailArray;
}
- (KiOrderDetail*)orderDetailAtIndex:(NSUInteger)index {
  return [result orderDetailAtIndex:index];
}
- (KiRecord_Builder *)addOrderDetail:(KiOrderDetail*)value {
  if (result.orderDetailArray == nil) {
    result.orderDetailArray = [[NSMutableArray alloc]init];
  }
  [result.orderDetailArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setOrderDetailArray:(NSArray *)array {
  result.orderDetailArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearOrderDetail {
  result.orderDetailArray = nil;
  return self;
}
- (NSMutableArray *)stockData {
  return result.stockDataArray;
}
- (KiStockData*)stockDataAtIndex:(NSUInteger)index {
  return [result stockDataAtIndex:index];
}
- (KiRecord_Builder *)addStockData:(KiStockData*)value {
  if (result.stockDataArray == nil) {
    result.stockDataArray = [[NSMutableArray alloc]init];
  }
  [result.stockDataArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setStockDataArray:(NSArray *)array {
  result.stockDataArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearStockData {
  result.stockDataArray = nil;
  return self;
}
- (NSMutableArray *)brokerData {
  return result.brokerDataArray;
}
- (KiBrokerData*)brokerDataAtIndex:(NSUInteger)index {
  return [result brokerDataAtIndex:index];
}
- (KiRecord_Builder *)addBrokerData:(KiBrokerData*)value {
  if (result.brokerDataArray == nil) {
    result.brokerDataArray = [[NSMutableArray alloc]init];
  }
  [result.brokerDataArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setBrokerDataArray:(NSArray *)array {
  result.brokerDataArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearBrokerData {
  result.brokerDataArray = nil;
  return self;
}
- (NSMutableArray *)indicesData {
  return result.indicesDataArray;
}
- (KiIndicesData*)indicesDataAtIndex:(NSUInteger)index {
  return [result indicesDataAtIndex:index];
}
- (KiRecord_Builder *)addIndicesData:(KiIndicesData*)value {
  if (result.indicesDataArray == nil) {
    result.indicesDataArray = [[NSMutableArray alloc]init];
  }
  [result.indicesDataArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setIndicesDataArray:(NSArray *)array {
  result.indicesDataArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearIndicesData {
  result.indicesDataArray = nil;
  return self;
}
- (NSMutableArray *)regionalIndicesData {
  return result.regionalIndicesDataArray;
}
- (KiRegionalIndicesData*)regionalIndicesDataAtIndex:(NSUInteger)index {
  return [result regionalIndicesDataAtIndex:index];
}
- (KiRecord_Builder *)addRegionalIndicesData:(KiRegionalIndicesData*)value {
  if (result.regionalIndicesDataArray == nil) {
    result.regionalIndicesDataArray = [[NSMutableArray alloc]init];
  }
  [result.regionalIndicesDataArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setRegionalIndicesDataArray:(NSArray *)array {
  result.regionalIndicesDataArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearRegionalIndicesData {
  result.regionalIndicesDataArray = nil;
  return self;
}
- (NSMutableArray *)currencyData {
  return result.currencyDataArray;
}
- (KiCurrencyData*)currencyDataAtIndex:(NSUInteger)index {
  return [result currencyDataAtIndex:index];
}
- (KiRecord_Builder *)addCurrencyData:(KiCurrencyData*)value {
  if (result.currencyDataArray == nil) {
    result.currencyDataArray = [[NSMutableArray alloc]init];
  }
  [result.currencyDataArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setCurrencyDataArray:(NSArray *)array {
  result.currencyDataArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearCurrencyData {
  result.currencyDataArray = nil;
  return self;
}
- (NSMutableArray *)suspendReleaseBroker {
  return result.suspendReleaseBrokerArray;
}
- (IdxSuspendReleaseBroker*)suspendReleaseBrokerAtIndex:(NSUInteger)index {
  return [result suspendReleaseBrokerAtIndex:index];
}
- (KiRecord_Builder *)addSuspendReleaseBroker:(IdxSuspendReleaseBroker*)value {
  if (result.suspendReleaseBrokerArray == nil) {
    result.suspendReleaseBrokerArray = [[NSMutableArray alloc]init];
  }
  [result.suspendReleaseBrokerArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setSuspendReleaseBrokerArray:(NSArray *)array {
  result.suspendReleaseBrokerArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearSuspendReleaseBroker {
  result.suspendReleaseBrokerArray = nil;
  return self;
}
- (NSMutableArray *)suspendReleaseStock {
  return result.suspendReleaseStockArray;
}
- (IdxSuspendReleaseStock*)suspendReleaseStockAtIndex:(NSUInteger)index {
  return [result suspendReleaseStockAtIndex:index];
}
- (KiRecord_Builder *)addSuspendReleaseStock:(IdxSuspendReleaseStock*)value {
  if (result.suspendReleaseStockArray == nil) {
    result.suspendReleaseStockArray = [[NSMutableArray alloc]init];
  }
  [result.suspendReleaseStockArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setSuspendReleaseStockArray:(NSArray *)array {
  result.suspendReleaseStockArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearSuspendReleaseStock {
  result.suspendReleaseStockArray = nil;
  return self;
}
- (NSMutableArray *)tradingStatus {
  return result.tradingStatusArray;
}
- (IdxTradingStatus*)tradingStatusAtIndex:(NSUInteger)index {
  return [result tradingStatusAtIndex:index];
}
- (KiRecord_Builder *)addTradingStatus:(IdxTradingStatus*)value {
  if (result.tradingStatusArray == nil) {
    result.tradingStatusArray = [[NSMutableArray alloc]init];
  }
  [result.tradingStatusArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setTradingStatusArray:(NSArray *)array {
  result.tradingStatusArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearTradingStatus {
  result.tradingStatusArray = nil;
  return self;
}
- (BOOL) hasRequest {
  return result.hasRequest;
}
- (KiRequest*) request {
  return result.request;
}
- (KiRecord_Builder*) setRequest:(KiRequest*) value {
  result.hasRequest = YES;
  result.request = value;
  return self;
}
- (KiRecord_Builder*) setRequestBuilder:(KiRequest_Builder*) builderForValue {
  return [self setRequest:[builderForValue build]];
}
- (KiRecord_Builder*) mergeRequest:(KiRequest*) value {
  if (result.hasRequest &&
      result.request != [KiRequest defaultInstance]) {
    result.request =
      [[[KiRequest builderWithPrototype:result.request] mergeFrom:value] buildPartial];
  } else {
    result.request = value;
  }
  result.hasRequest = YES;
  return self;
}
- (KiRecord_Builder*) clearRequest {
  result.hasRequest = NO;
  result.request = [KiRequest defaultInstance];
  return self;
}
- (NSMutableArray *)lastTrade {
  return result.lastTradeArray;
}
- (KiTrade*)lastTradeAtIndex:(NSUInteger)index {
  return [result lastTradeAtIndex:index];
}
- (KiRecord_Builder *)addLastTrade:(KiTrade*)value {
  if (result.lastTradeArray == nil) {
    result.lastTradeArray = [[NSMutableArray alloc]init];
  }
  [result.lastTradeArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setLastTradeArray:(NSArray *)array {
  result.lastTradeArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearLastTrade {
  result.lastTradeArray = nil;
  return self;
}
- (NSMutableArray *)orderTrack {
  return result.orderTrackArray;
}
- (KiOrderDetail*)orderTrackAtIndex:(NSUInteger)index {
  return [result orderTrackAtIndex:index];
}
- (KiRecord_Builder *)addOrderTrack:(KiOrderDetail*)value {
  if (result.orderTrackArray == nil) {
    result.orderTrackArray = [[NSMutableArray alloc]init];
  }
  [result.orderTrackArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setOrderTrackArray:(NSArray *)array {
  result.orderTrackArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearOrderTrack {
  result.orderTrackArray = nil;
  return self;
}
- (NSMutableArray *)future {
  return result.futureArray;
}
- (KiFuture*)futureAtIndex:(NSUInteger)index {
  return [result futureAtIndex:index];
}
- (KiRecord_Builder *)addFuture:(KiFuture*)value {
  if (result.futureArray == nil) {
    result.futureArray = [[NSMutableArray alloc]init];
  }
  [result.futureArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setFutureArray:(NSArray *)array {
  result.futureArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearFuture {
  result.futureArray = nil;
  return self;
}
- (NSMutableArray *)comodity {
  return result.comodityArray;
}
- (KiComodity*)comodityAtIndex:(NSUInteger)index {
  return [result comodityAtIndex:index];
}
- (KiRecord_Builder *)addComodity:(KiComodity*)value {
  if (result.comodityArray == nil) {
    result.comodityArray = [[NSMutableArray alloc]init];
  }
  [result.comodityArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setComodityArray:(NSArray *)array {
  result.comodityArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearComodity {
  result.comodityArray = nil;
  return self;
}
- (BOOL) hasFdsummary {
  return result.hasFdsummary;
}
- (FDSummary*) fdsummary {
  return result.fdsummary;
}
- (KiRecord_Builder*) setFdsummary:(FDSummary*) value {
  result.hasFdsummary = YES;
  result.fdsummary = value;
  return self;
}
- (KiRecord_Builder*) setFdsummaryBuilder:(FDSummary_Builder*) builderForValue {
  return [self setFdsummary:[builderForValue build]];
}
- (KiRecord_Builder*) mergeFdsummary:(FDSummary*) value {
  if (result.hasFdsummary &&
      result.fdsummary != [FDSummary defaultInstance]) {
    result.fdsummary =
      [[[FDSummary builderWithPrototype:result.fdsummary] mergeFrom:value] buildPartial];
  } else {
    result.fdsummary = value;
  }
  result.hasFdsummary = YES;
  return self;
}
- (KiRecord_Builder*) clearFdsummary {
  result.hasFdsummary = NO;
  result.fdsummary = [FDSummary defaultInstance];
  return self;
}
- (BOOL) hasStockHistNetbuysell {
  return result.hasStockHistNetbuysell;
}
- (NetBuySell*) stockHistNetbuysell {
  return result.stockHistNetbuysell;
}
- (KiRecord_Builder*) setStockHistNetbuysell:(NetBuySell*) value {
  result.hasStockHistNetbuysell = YES;
  result.stockHistNetbuysell = value;
  return self;
}
- (KiRecord_Builder*) setStockHistNetbuysellBuilder:(NetBuySell_Builder*) builderForValue {
  return [self setStockHistNetbuysell:[builderForValue build]];
}
- (KiRecord_Builder*) mergeStockHistNetbuysell:(NetBuySell*) value {
  if (result.hasStockHistNetbuysell &&
      result.stockHistNetbuysell != [NetBuySell defaultInstance]) {
    result.stockHistNetbuysell =
      [[[NetBuySell builderWithPrototype:result.stockHistNetbuysell] mergeFrom:value] buildPartial];
  } else {
    result.stockHistNetbuysell = value;
  }
  result.hasStockHistNetbuysell = YES;
  return self;
}
- (KiRecord_Builder*) clearStockHistNetbuysell {
  result.hasStockHistNetbuysell = NO;
  result.stockHistNetbuysell = [NetBuySell defaultInstance];
  return self;
}
- (BOOL) hasBrokerHistNetbuysell {
  return result.hasBrokerHistNetbuysell;
}
- (NetBuySell*) brokerHistNetbuysell {
  return result.brokerHistNetbuysell;
}
- (KiRecord_Builder*) setBrokerHistNetbuysell:(NetBuySell*) value {
  result.hasBrokerHistNetbuysell = YES;
  result.brokerHistNetbuysell = value;
  return self;
}
- (KiRecord_Builder*) setBrokerHistNetbuysellBuilder:(NetBuySell_Builder*) builderForValue {
  return [self setBrokerHistNetbuysell:[builderForValue build]];
}
- (KiRecord_Builder*) mergeBrokerHistNetbuysell:(NetBuySell*) value {
  if (result.hasBrokerHistNetbuysell &&
      result.brokerHistNetbuysell != [NetBuySell defaultInstance]) {
    result.brokerHistNetbuysell =
      [[[NetBuySell builderWithPrototype:result.brokerHistNetbuysell] mergeFrom:value] buildPartial];
  } else {
    result.brokerHistNetbuysell = value;
  }
  result.hasBrokerHistNetbuysell = YES;
  return self;
}
- (KiRecord_Builder*) clearBrokerHistNetbuysell {
  result.hasBrokerHistNetbuysell = NO;
  result.brokerHistNetbuysell = [NetBuySell defaultInstance];
  return self;
}
- (NSMutableArray *)foreignHistory {
  return result.foreignHistoryArray;
}
- (ForeignHistory*)foreignHistoryAtIndex:(NSUInteger)index {
  return [result foreignHistoryAtIndex:index];
}
- (KiRecord_Builder *)addForeignHistory:(ForeignHistory*)value {
  if (result.foreignHistoryArray == nil) {
    result.foreignHistoryArray = [[NSMutableArray alloc]init];
  }
  [result.foreignHistoryArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setForeignHistoryArray:(NSArray *)array {
  result.foreignHistoryArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearForeignHistory {
  result.foreignHistoryArray = nil;
  return self;
}
- (BOOL) hasMarketSummary {
  return result.hasMarketSummary;
}
- (MarketSummary*) marketSummary {
  return result.marketSummary;
}
- (KiRecord_Builder*) setMarketSummary:(MarketSummary*) value {
  result.hasMarketSummary = YES;
  result.marketSummary = value;
  return self;
}
- (KiRecord_Builder*) setMarketSummaryBuilder:(MarketSummary_Builder*) builderForValue {
  return [self setMarketSummary:[builderForValue build]];
}
- (KiRecord_Builder*) mergeMarketSummary:(MarketSummary*) value {
  if (result.hasMarketSummary &&
      result.marketSummary != [MarketSummary defaultInstance]) {
    result.marketSummary =
      [[[MarketSummary builderWithPrototype:result.marketSummary] mergeFrom:value] buildPartial];
  } else {
    result.marketSummary = value;
  }
  result.hasMarketSummary = YES;
  return self;
}
- (KiRecord_Builder*) clearMarketSummary {
  result.hasMarketSummary = NO;
  result.marketSummary = [MarketSummary defaultInstance];
  return self;
}
- (NSMutableArray *)wk52104 {
  return result.wk52104Array;
}
- (KiWk52104*)wk52104AtIndex:(NSUInteger)index {
  return [result wk52104AtIndex:index];
}
- (KiRecord_Builder *)addWk52104:(KiWk52104*)value {
  if (result.wk52104Array == nil) {
    result.wk52104Array = [[NSMutableArray alloc]init];
  }
  [result.wk52104Array addObject:value];
  return self;
}
- (KiRecord_Builder *)setWk52104Array:(NSArray *)array {
  result.wk52104Array = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearWk52104 {
  result.wk52104Array = nil;
  return self;
}
- (NSMutableArray *)conditionalOrder {
  return result.conditionalOrderArray;
}
- (COMessage*)conditionalOrderAtIndex:(NSUInteger)index {
  return [result conditionalOrderAtIndex:index];
}
- (KiRecord_Builder *)addConditionalOrder:(COMessage*)value {
  if (result.conditionalOrderArray == nil) {
    result.conditionalOrderArray = [[NSMutableArray alloc]init];
  }
  [result.conditionalOrderArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setConditionalOrderArray:(NSArray *)array {
  result.conditionalOrderArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearConditionalOrder {
  result.conditionalOrderArray = nil;
  return self;
}
- (NSMutableArray *)contractData {
  return result.contractDataArray;
}
- (KiStockData*)contractDataAtIndex:(NSUInteger)index {
  return [result contractDataAtIndex:index];
}
- (KiRecord_Builder *)addContractData:(KiStockData*)value {
  if (result.contractDataArray == nil) {
    result.contractDataArray = [[NSMutableArray alloc]init];
  }
  [result.contractDataArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setContractDataArray:(NSArray *)array {
  result.contractDataArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearContractData {
  result.contractDataArray = nil;
  return self;
}
- (NSMutableArray *)derivativeTrade {
  return result.derivativeTradeArray;
}
- (KiTrade*)derivativeTradeAtIndex:(NSUInteger)index {
  return [result derivativeTradeAtIndex:index];
}
- (KiRecord_Builder *)addDerivativeTrade:(KiTrade*)value {
  if (result.derivativeTradeArray == nil) {
    result.derivativeTradeArray = [[NSMutableArray alloc]init];
  }
  [result.derivativeTradeArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setDerivativeTradeArray:(NSArray *)array {
  result.derivativeTradeArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearDerivativeTrade {
  result.derivativeTradeArray = nil;
  return self;
}
- (NSMutableArray *)derivativeLevel2 {
  return result.derivativeLevel2Array;
}
- (Level2*)derivativeLevel2AtIndex:(NSUInteger)index {
  return [result derivativeLevel2AtIndex:index];
}
- (KiRecord_Builder *)addDerivativeLevel2:(Level2*)value {
  if (result.derivativeLevel2Array == nil) {
    result.derivativeLevel2Array = [[NSMutableArray alloc]init];
  }
  [result.derivativeLevel2Array addObject:value];
  return self;
}
- (KiRecord_Builder *)setDerivativeLevel2Array:(NSArray *)array {
  result.derivativeLevel2Array = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearDerivativeLevel2 {
  result.derivativeLevel2Array = nil;
  return self;
}
- (NSMutableArray *)derivativeLevel3 {
  return result.derivativeLevel3Array;
}
- (Level3*)derivativeLevel3AtIndex:(NSUInteger)index {
  return [result derivativeLevel3AtIndex:index];
}
- (KiRecord_Builder *)addDerivativeLevel3:(Level3*)value {
  if (result.derivativeLevel3Array == nil) {
    result.derivativeLevel3Array = [[NSMutableArray alloc]init];
  }
  [result.derivativeLevel3Array addObject:value];
  return self;
}
- (KiRecord_Builder *)setDerivativeLevel3Array:(NSArray *)array {
  result.derivativeLevel3Array = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearDerivativeLevel3 {
  result.derivativeLevel3Array = nil;
  return self;
}
- (NSMutableArray *)contractSummary {
  return result.contractSummaryArray;
}
- (KiStockSummary*)contractSummaryAtIndex:(NSUInteger)index {
  return [result contractSummaryAtIndex:index];
}
- (KiRecord_Builder *)addContractSummary:(KiStockSummary*)value {
  if (result.contractSummaryArray == nil) {
    result.contractSummaryArray = [[NSMutableArray alloc]init];
  }
  [result.contractSummaryArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setContractSummaryArray:(NSArray *)array {
  result.contractSummaryArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearContractSummary {
  result.contractSummaryArray = nil;
  return self;
}
- (NSMutableArray *)derivativeLastTrade {
  return result.derivativeLastTradeArray;
}
- (KiTrade*)derivativeLastTradeAtIndex:(NSUInteger)index {
  return [result derivativeLastTradeAtIndex:index];
}
- (KiRecord_Builder *)addDerivativeLastTrade:(KiTrade*)value {
  if (result.derivativeLastTradeArray == nil) {
    result.derivativeLastTradeArray = [[NSMutableArray alloc]init];
  }
  [result.derivativeLastTradeArray addObject:value];
  return self;
}
- (KiRecord_Builder *)setDerivativeLastTradeArray:(NSArray *)array {
  result.derivativeLastTradeArray = [[NSMutableArray alloc]init];
  return self;
}
- (KiRecord_Builder *)clearDerivativeLastTrade {
  result.derivativeLastTradeArray = nil;
  return self;
}
@end

@interface KiRequest ()
@property RecordType type;
@property Request status;
@property (strong) NSString* code;
@property Board board;
@property int32_t page;
@property int32_t range1;
@property int32_t range2;
@property int32_t number;
@property int32_t price;
@property Sort sort;
@property (strong) NSString* broker;
@property int32_t max;
@property OrderCommand command;
@property (strong) NSString* key;
@end

@implementation KiRequest

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value {
  hasPage_ = !!value;
}
@synthesize page;
- (BOOL) hasRange1 {
  return !!hasRange1_;
}
- (void) setHasRange1:(BOOL) value {
  hasRange1_ = !!value;
}
@synthesize range1;
- (BOOL) hasRange2 {
  return !!hasRange2_;
}
- (void) setHasRange2:(BOOL) value {
  hasRange2_ = !!value;
}
@synthesize range2;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) value {
  hasNumber_ = !!value;
}
@synthesize number;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasSort {
  return !!hasSort_;
}
- (void) setHasSort:(BOOL) value {
  hasSort_ = !!value;
}
@synthesize sort;
- (BOOL) hasBroker {
  return !!hasBroker_;
}
- (void) setHasBroker:(BOOL) value {
  hasBroker_ = !!value;
}
@synthesize broker;
- (BOOL) hasMax {
  return !!hasMax_;
}
- (void) setHasMax:(BOOL) value {
  hasMax_ = !!value;
}
@synthesize max;
- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) value {
  hasCommand_ = !!value;
}
@synthesize command;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) value {
  hasKey_ = !!value;
}
@synthesize key;
- (id) init {
  if ((self = [super init])) {
    self.type = RecordTypeIdxTradingStatus;
    self.status = RequestSubscribe;
    self.code = @"";
    self.board = BoardRg;
    self.page = 0;
    self.range1 = 0;
    self.range2 = 0;
    self.number = 0;
    self.price = 0;
    self.sort = SortOlder;
    self.broker = @"";
    self.max = 0;
    self.command = OrderCommandBid;
    self.key = @"";
  }
  return self;
}
static KiRequest* defaultKiRequestInstance = nil;
+ (void) initialize {
  if (self == [KiRequest class]) {
    defaultKiRequestInstance = [[KiRequest alloc] init];
  }
}
+ (KiRequest*) defaultInstance {
  return defaultKiRequestInstance;
}
- (KiRequest*) defaultInstance {
  return defaultKiRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasStatus) {
    [output writeEnum:2 value:self.status];
  }
  if (self.hasCode) {
    [output writeString:3 value:self.code];
  }
  if (self.hasBoard) {
    [output writeEnum:4 value:self.board];
  }
  if (self.hasPage) {
    [output writeInt32:5 value:self.page];
  }
  if (self.hasRange1) {
    [output writeInt32:6 value:self.range1];
  }
  if (self.hasRange2) {
    [output writeInt32:7 value:self.range2];
  }
  if (self.hasNumber) {
    [output writeInt32:8 value:self.number];
  }
  if (self.hasPrice) {
    [output writeInt32:9 value:self.price];
  }
  if (self.hasSort) {
    [output writeEnum:10 value:self.sort];
  }
  if (self.hasBroker) {
    [output writeString:11 value:self.broker];
  }
  if (self.hasMax) {
    [output writeInt32:12 value:self.max];
  }
  if (self.hasCommand) {
    [output writeEnum:13 value:self.command];
  }
  if (self.hasKey) {
    [output writeString:14 value:self.key];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeEnumSize(1, self.type);
  }
  if (self.hasStatus) {
    size += computeEnumSize(2, self.status);
  }
  if (self.hasCode) {
    size += computeStringSize(3, self.code);
  }
  if (self.hasBoard) {
    size += computeEnumSize(4, self.board);
  }
  if (self.hasPage) {
    size += computeInt32Size(5, self.page);
  }
  if (self.hasRange1) {
    size += computeInt32Size(6, self.range1);
  }
  if (self.hasRange2) {
    size += computeInt32Size(7, self.range2);
  }
  if (self.hasNumber) {
    size += computeInt32Size(8, self.number);
  }
  if (self.hasPrice) {
    size += computeInt32Size(9, self.price);
  }
  if (self.hasSort) {
    size += computeEnumSize(10, self.sort);
  }
  if (self.hasBroker) {
    size += computeStringSize(11, self.broker);
  }
  if (self.hasMax) {
    size += computeInt32Size(12, self.max);
  }
  if (self.hasCommand) {
    size += computeEnumSize(13, self.command);
  }
  if (self.hasKey) {
    size += computeStringSize(14, self.key);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiRequest*) parseFromData:(NSData*) data {
  return (KiRequest*)[[[KiRequest builder] mergeFromData:data] build];
}
+ (KiRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRequest*)[[[KiRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiRequest*) parseFromInputStream:(NSInputStream*) input {
  return (KiRequest*)[[[KiRequest builder] mergeFromInputStream:input] build];
}
+ (KiRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRequest*)[[[KiRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiRequest*)[[[KiRequest builder] mergeFromCodedInputStream:input] build];
}
+ (KiRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRequest*)[[[KiRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRequest_Builder*) builder {
  return [[KiRequest_Builder alloc] init];
}
+ (KiRequest_Builder*) builderWithPrototype:(KiRequest*) prototype {
  return [[KiRequest builder] mergeFrom:prototype];
}
- (KiRequest_Builder*) builder {
  return [KiRequest builder];
}
- (KiRequest_Builder*) toBuilder {
  return [KiRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  if (self.hasRange1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"range1", [NSNumber numberWithInt:self.range1]];
  }
  if (self.hasRange2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"range2", [NSNumber numberWithInt:self.range2]];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithInt:self.number]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %d\n", indent, @"sort", self.sort];
  }
  if (self.hasBroker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"broker", self.broker];
  }
  if (self.hasMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"max", [NSNumber numberWithInt:self.max]];
  }
  if (self.hasCommand) {
    [output appendFormat:@"%@%@: %d\n", indent, @"command", self.command];
  }
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiRequest class]]) {
    return NO;
  }
  KiRequest *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type != otherMessage.type) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasRange1 == otherMessage.hasRange1 &&
      (!self.hasRange1 || self.range1 == otherMessage.range1) &&
      self.hasRange2 == otherMessage.hasRange2 &&
      (!self.hasRange2 || self.range2 == otherMessage.range2) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasSort == otherMessage.hasSort &&
      (!self.hasSort || self.sort != otherMessage.sort) &&
      self.hasBroker == otherMessage.hasBroker &&
      (!self.hasBroker || [self.broker isEqual:otherMessage.broker]) &&
      self.hasMax == otherMessage.hasMax &&
      (!self.hasMax || self.max == otherMessage.max) &&
      self.hasCommand == otherMessage.hasCommand &&
      (!self.hasCommand || self.command != otherMessage.command) &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  if (self.hasRange1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.range1] hash];
  }
  if (self.hasRange2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.range2] hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.number] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasSort) {
    hashCode = hashCode * 31 + self.sort;
  }
  if (self.hasBroker) {
    hashCode = hashCode * 31 + [self.broker hash];
  }
  if (self.hasMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.max] hash];
  }
  if (self.hasCommand) {
    hashCode = hashCode * 31 + self.command;
  }
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiRequest_Builder()
@property (strong) KiRequest* result;
@end

@implementation KiRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiRequest_Builder*) clear {
  self.result = [[KiRequest alloc] init];
  return self;
}
- (KiRequest_Builder*) clone {
  return [KiRequest builderWithPrototype:result];
}
- (KiRequest*) defaultInstance {
  return [KiRequest defaultInstance];
}
- (KiRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiRequest*) buildPartial {
  KiRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiRequest_Builder*) mergeFrom:(KiRequest*) other {
  if (other == [KiRequest defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasRange1) {
    [self setRange1:other.range1];
  }
  if (other.hasRange2) {
    [self setRange2:other.range2];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasSort) {
    [self setSort:other.sort];
  }
  if (other.hasBroker) {
    [self setBroker:other.broker];
  }
  if (other.hasMax) {
    [self setMax:other.max];
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (RecordTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (RequestIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setCode:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setPage:[input readInt32]];
        break;
      }
      case 48: {
        [self setRange1:[input readInt32]];
        break;
      }
      case 56: {
        [self setRange2:[input readInt32]];
        break;
      }
      case 64: {
        [self setNumber:[input readInt32]];
        break;
      }
      case 72: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 80: {
        int32_t value = [input readEnum];
        if (SortIsValidValue(value)) {
          [self setSort:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 90: {
        [self setBroker:[input readString]];
        break;
      }
      case 96: {
        [self setMax:[input readInt32]];
        break;
      }
      case 104: {
        int32_t value = [input readEnum];
        if (OrderCommandIsValidValue(value)) {
          [self setCommand:value];
        } else {
          [unknownFields mergeVarintField:13 value:value];
        }
        break;
      }
      case 114: {
        [self setKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (RecordType) type {
  return result.type;
}
- (KiRequest_Builder*) setType:(RecordType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (KiRequest_Builder*) clearType {
  result.hasType = NO;
  result.type = RecordTypeIdxTradingStatus;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (Request) status {
  return result.status;
}
- (KiRequest_Builder*) setStatus:(Request) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (KiRequest_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = RequestSubscribe;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (KiRequest_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (KiRequest_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (KiRequest_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (KiRequest_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (KiRequest_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (KiRequest_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasRange1 {
  return result.hasRange1;
}
- (int32_t) range1 {
  return result.range1;
}
- (KiRequest_Builder*) setRange1:(int32_t) value {
  result.hasRange1 = YES;
  result.range1 = value;
  return self;
}
- (KiRequest_Builder*) clearRange1 {
  result.hasRange1 = NO;
  result.range1 = 0;
  return self;
}
- (BOOL) hasRange2 {
  return result.hasRange2;
}
- (int32_t) range2 {
  return result.range2;
}
- (KiRequest_Builder*) setRange2:(int32_t) value {
  result.hasRange2 = YES;
  result.range2 = value;
  return self;
}
- (KiRequest_Builder*) clearRange2 {
  result.hasRange2 = NO;
  result.range2 = 0;
  return self;
}
- (BOOL) hasNumber {
  return result.hasNumber;
}
- (int32_t) number {
  return result.number;
}
- (KiRequest_Builder*) setNumber:(int32_t) value {
  result.hasNumber = YES;
  result.number = value;
  return self;
}
- (KiRequest_Builder*) clearNumber {
  result.hasNumber = NO;
  result.number = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (KiRequest_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (KiRequest_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasSort {
  return result.hasSort;
}
- (Sort) sort {
  return result.sort;
}
- (KiRequest_Builder*) setSort:(Sort) value {
  result.hasSort = YES;
  result.sort = value;
  return self;
}
- (KiRequest_Builder*) clearSort {
  result.hasSort = NO;
  result.sort = SortOlder;
  return self;
}
- (BOOL) hasBroker {
  return result.hasBroker;
}
- (NSString*) broker {
  return result.broker;
}
- (KiRequest_Builder*) setBroker:(NSString*) value {
  result.hasBroker = YES;
  result.broker = value;
  return self;
}
- (KiRequest_Builder*) clearBroker {
  result.hasBroker = NO;
  result.broker = @"";
  return self;
}
- (BOOL) hasMax {
  return result.hasMax;
}
- (int32_t) max {
  return result.max;
}
- (KiRequest_Builder*) setMax:(int32_t) value {
  result.hasMax = YES;
  result.max = value;
  return self;
}
- (KiRequest_Builder*) clearMax {
  result.hasMax = NO;
  result.max = 0;
  return self;
}
- (BOOL) hasCommand {
  return result.hasCommand;
}
- (OrderCommand) command {
  return result.command;
}
- (KiRequest_Builder*) setCommand:(OrderCommand) value {
  result.hasCommand = YES;
  result.command = value;
  return self;
}
- (KiRequest_Builder*) clearCommand {
  result.hasCommand = NO;
  result.command = OrderCommandBid;
  return self;
}
- (BOOL) hasKey {
  return result.hasKey;
}
- (NSString*) key {
  return result.key;
}
- (KiRequest_Builder*) setKey:(NSString*) value {
  result.hasKey = YES;
  result.key = value;
  return self;
}
- (KiRequest_Builder*) clearKey {
  result.hasKey = NO;
  result.key = @"";
  return self;
}
@end

@interface COMessage ()
@property int32_t ocid;
@property (strong) NSString* code;
@property CORules rulesCo;
@property COWhen when1;
@property COWhenCompare whcomp;
@property int32_t price;
@property COWhen when2;
@property COWhenCompare whcomp2;
@property int32_t qty;
@property COStatus status;
@property COTrend trend;
@property int32_t diffFromTop;
@property int32_t side;
@property BOOL trigered;
@property int32_t tickPrice;
@property (strong) NSString* ownerId;
@end

@implementation COMessage

- (BOOL) hasOcid {
  return !!hasOcid_;
}
- (void) setHasOcid:(BOOL) value {
  hasOcid_ = !!value;
}
@synthesize ocid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasRulesCo {
  return !!hasRulesCo_;
}
- (void) setHasRulesCo:(BOOL) value {
  hasRulesCo_ = !!value;
}
@synthesize rulesCo;
- (BOOL) hasWhen1 {
  return !!hasWhen1_;
}
- (void) setHasWhen1:(BOOL) value {
  hasWhen1_ = !!value;
}
@synthesize when1;
- (BOOL) hasWhcomp {
  return !!hasWhcomp_;
}
- (void) setHasWhcomp:(BOOL) value {
  hasWhcomp_ = !!value;
}
@synthesize whcomp;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasWhen2 {
  return !!hasWhen2_;
}
- (void) setHasWhen2:(BOOL) value {
  hasWhen2_ = !!value;
}
@synthesize when2;
- (BOOL) hasWhcomp2 {
  return !!hasWhcomp2_;
}
- (void) setHasWhcomp2:(BOOL) value {
  hasWhcomp2_ = !!value;
}
@synthesize whcomp2;
- (BOOL) hasQty {
  return !!hasQty_;
}
- (void) setHasQty:(BOOL) value {
  hasQty_ = !!value;
}
@synthesize qty;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasTrend {
  return !!hasTrend_;
}
- (void) setHasTrend:(BOOL) value {
  hasTrend_ = !!value;
}
@synthesize trend;
- (BOOL) hasDiffFromTop {
  return !!hasDiffFromTop_;
}
- (void) setHasDiffFromTop:(BOOL) value {
  hasDiffFromTop_ = !!value;
}
@synthesize diffFromTop;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasTrigered {
  return !!hasTrigered_;
}
- (void) setHasTrigered:(BOOL) value {
  hasTrigered_ = !!value;
}
- (BOOL) trigered {
  return !!trigered_;
}
- (void) setTrigered:(BOOL) value {
  trigered_ = !!value;
}
- (BOOL) hasTickPrice {
  return !!hasTickPrice_;
}
- (void) setHasTickPrice:(BOOL) value {
  hasTickPrice_ = !!value;
}
@synthesize tickPrice;
- (BOOL) hasOwnerId {
  return !!hasOwnerId_;
}
- (void) setHasOwnerId:(BOOL) value {
  hasOwnerId_ = !!value;
}
@synthesize ownerId;
- (id) init {
  if ((self = [super init])) {
    self.ocid = 0;
    self.code = @"";
    self.rulesCo = CORulesSimple;
    self.when1 = COWhenLastPrice;
    self.whcomp = COWhenCompareGreaterEqual;
    self.price = 0;
    self.when2 = COWhenLastPrice;
    self.whcomp2 = COWhenCompareGreaterEqual;
    self.qty = 0;
    self.status = COStatusCoActive;
    self.trend = COTrendUpTrend;
    self.diffFromTop = 0;
    self.side = 0;
    self.trigered = NO;
    self.tickPrice = 0;
    self.ownerId = @"";
  }
  return self;
}
static COMessage* defaultCOMessageInstance = nil;
+ (void) initialize {
  if (self == [COMessage class]) {
    defaultCOMessageInstance = [[COMessage alloc] init];
  }
}
+ (COMessage*) defaultInstance {
  return defaultCOMessageInstance;
}
- (COMessage*) defaultInstance {
  return defaultCOMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOcid) {
    [output writeInt32:1 value:self.ocid];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasRulesCo) {
    [output writeEnum:3 value:self.rulesCo];
  }
  if (self.hasWhen1) {
    [output writeEnum:4 value:self.when1];
  }
  if (self.hasWhcomp) {
    [output writeEnum:5 value:self.whcomp];
  }
  if (self.hasPrice) {
    [output writeInt32:6 value:self.price];
  }
  if (self.hasWhen2) {
    [output writeEnum:7 value:self.when2];
  }
  if (self.hasWhcomp2) {
    [output writeEnum:8 value:self.whcomp2];
  }
  if (self.hasQty) {
    [output writeInt32:9 value:self.qty];
  }
  if (self.hasStatus) {
    [output writeEnum:10 value:self.status];
  }
  if (self.hasTrend) {
    [output writeEnum:11 value:self.trend];
  }
  if (self.hasDiffFromTop) {
    [output writeInt32:12 value:self.diffFromTop];
  }
  if (self.hasSide) {
    [output writeInt32:13 value:self.side];
  }
  if (self.hasTrigered) {
    [output writeBool:14 value:self.trigered];
  }
  if (self.hasTickPrice) {
    [output writeInt32:15 value:self.tickPrice];
  }
  if (self.hasOwnerId) {
    [output writeString:16 value:self.ownerId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOcid) {
    size += computeInt32Size(1, self.ocid);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasRulesCo) {
    size += computeEnumSize(3, self.rulesCo);
  }
  if (self.hasWhen1) {
    size += computeEnumSize(4, self.when1);
  }
  if (self.hasWhcomp) {
    size += computeEnumSize(5, self.whcomp);
  }
  if (self.hasPrice) {
    size += computeInt32Size(6, self.price);
  }
  if (self.hasWhen2) {
    size += computeEnumSize(7, self.when2);
  }
  if (self.hasWhcomp2) {
    size += computeEnumSize(8, self.whcomp2);
  }
  if (self.hasQty) {
    size += computeInt32Size(9, self.qty);
  }
  if (self.hasStatus) {
    size += computeEnumSize(10, self.status);
  }
  if (self.hasTrend) {
    size += computeEnumSize(11, self.trend);
  }
  if (self.hasDiffFromTop) {
    size += computeInt32Size(12, self.diffFromTop);
  }
  if (self.hasSide) {
    size += computeInt32Size(13, self.side);
  }
  if (self.hasTrigered) {
    size += computeBoolSize(14, self.trigered);
  }
  if (self.hasTickPrice) {
    size += computeInt32Size(15, self.tickPrice);
  }
  if (self.hasOwnerId) {
    size += computeStringSize(16, self.ownerId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (COMessage*) parseFromData:(NSData*) data {
  return (COMessage*)[[[COMessage builder] mergeFromData:data] build];
}
+ (COMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (COMessage*)[[[COMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (COMessage*) parseFromInputStream:(NSInputStream*) input {
  return (COMessage*)[[[COMessage builder] mergeFromInputStream:input] build];
}
+ (COMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (COMessage*)[[[COMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (COMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (COMessage*)[[[COMessage builder] mergeFromCodedInputStream:input] build];
}
+ (COMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (COMessage*)[[[COMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (COMessage_Builder*) builder {
  return [[COMessage_Builder alloc] init];
}
+ (COMessage_Builder*) builderWithPrototype:(COMessage*) prototype {
  return [[COMessage builder] mergeFrom:prototype];
}
- (COMessage_Builder*) builder {
  return [COMessage builder];
}
- (COMessage_Builder*) toBuilder {
  return [COMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasOcid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ocid", [NSNumber numberWithInt:self.ocid]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasRulesCo) {
    [output appendFormat:@"%@%@: %d\n", indent, @"rulesCo", self.rulesCo];
  }
  if (self.hasWhen1) {
    [output appendFormat:@"%@%@: %d\n", indent, @"when1", self.when1];
  }
  if (self.hasWhcomp) {
    [output appendFormat:@"%@%@: %d\n", indent, @"whcomp", self.whcomp];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasWhen2) {
    [output appendFormat:@"%@%@: %d\n", indent, @"when2", self.when2];
  }
  if (self.hasWhcomp2) {
    [output appendFormat:@"%@%@: %d\n", indent, @"whcomp2", self.whcomp2];
  }
  if (self.hasQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qty", [NSNumber numberWithInt:self.qty]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasTrend) {
    [output appendFormat:@"%@%@: %d\n", indent, @"trend", self.trend];
  }
  if (self.hasDiffFromTop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diffFromTop", [NSNumber numberWithInt:self.diffFromTop]];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasTrigered) {
    [output appendFormat:@"%@%@: %@\n", indent, @"trigered", [NSNumber numberWithBool:self.trigered]];
  }
  if (self.hasTickPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tickPrice", [NSNumber numberWithInt:self.tickPrice]];
  }
  if (self.hasOwnerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerId", self.ownerId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[COMessage class]]) {
    return NO;
  }
  COMessage *otherMessage = other;
  return
      self.hasOcid == otherMessage.hasOcid &&
      (!self.hasOcid || self.ocid == otherMessage.ocid) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasRulesCo == otherMessage.hasRulesCo &&
      (!self.hasRulesCo || self.rulesCo != otherMessage.rulesCo) &&
      self.hasWhen1 == otherMessage.hasWhen1 &&
      (!self.hasWhen1 || self.when1 != otherMessage.when1) &&
      self.hasWhcomp == otherMessage.hasWhcomp &&
      (!self.hasWhcomp || self.whcomp != otherMessage.whcomp) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasWhen2 == otherMessage.hasWhen2 &&
      (!self.hasWhen2 || self.when2 != otherMessage.when2) &&
      self.hasWhcomp2 == otherMessage.hasWhcomp2 &&
      (!self.hasWhcomp2 || self.whcomp2 != otherMessage.whcomp2) &&
      self.hasQty == otherMessage.hasQty &&
      (!self.hasQty || self.qty == otherMessage.qty) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      self.hasTrend == otherMessage.hasTrend &&
      (!self.hasTrend || self.trend != otherMessage.trend) &&
      self.hasDiffFromTop == otherMessage.hasDiffFromTop &&
      (!self.hasDiffFromTop || self.diffFromTop == otherMessage.diffFromTop) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasTrigered == otherMessage.hasTrigered &&
      (!self.hasTrigered || self.trigered == otherMessage.trigered) &&
      self.hasTickPrice == otherMessage.hasTickPrice &&
      (!self.hasTickPrice || self.tickPrice == otherMessage.tickPrice) &&
      self.hasOwnerId == otherMessage.hasOwnerId &&
      (!self.hasOwnerId || [self.ownerId isEqual:otherMessage.ownerId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasOcid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.ocid] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasRulesCo) {
    hashCode = hashCode * 31 + self.rulesCo;
  }
  if (self.hasWhen1) {
    hashCode = hashCode * 31 + self.when1;
  }
  if (self.hasWhcomp) {
    hashCode = hashCode * 31 + self.whcomp;
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasWhen2) {
    hashCode = hashCode * 31 + self.when2;
  }
  if (self.hasWhcomp2) {
    hashCode = hashCode * 31 + self.whcomp2;
  }
  if (self.hasQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.qty] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasTrend) {
    hashCode = hashCode * 31 + self.trend;
  }
  if (self.hasDiffFromTop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.diffFromTop] hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasTrigered) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.trigered] hash];
  }
  if (self.hasTickPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tickPrice] hash];
  }
  if (self.hasOwnerId) {
    hashCode = hashCode * 31 + [self.ownerId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface COMessage_Builder()
@property (strong) COMessage* result;
@end

@implementation COMessage_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[COMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (COMessage_Builder*) clear {
  self.result = [[COMessage alloc] init];
  return self;
}
- (COMessage_Builder*) clone {
  return [COMessage builderWithPrototype:result];
}
- (COMessage*) defaultInstance {
  return [COMessage defaultInstance];
}
- (COMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (COMessage*) buildPartial {
  COMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (COMessage_Builder*) mergeFrom:(COMessage*) other {
  if (other == [COMessage defaultInstance]) {
    return self;
  }
  if (other.hasOcid) {
    [self setOcid:other.ocid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasRulesCo) {
    [self setRulesCo:other.rulesCo];
  }
  if (other.hasWhen1) {
    [self setWhen1:other.when1];
  }
  if (other.hasWhcomp) {
    [self setWhcomp:other.whcomp];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasWhen2) {
    [self setWhen2:other.when2];
  }
  if (other.hasWhcomp2) {
    [self setWhcomp2:other.whcomp2];
  }
  if (other.hasQty) {
    [self setQty:other.qty];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasTrend) {
    [self setTrend:other.trend];
  }
  if (other.hasDiffFromTop) {
    [self setDiffFromTop:other.diffFromTop];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasTrigered) {
    [self setTrigered:other.trigered];
  }
  if (other.hasTickPrice) {
    [self setTickPrice:other.tickPrice];
  }
  if (other.hasOwnerId) {
    [self setOwnerId:other.ownerId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (COMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (COMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOcid:[input readInt32]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (CORulesIsValidValue(value)) {
          [self setRulesCo:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (COWhenIsValidValue(value)) {
          [self setWhen1:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (COWhenCompareIsValidValue(value)) {
          [self setWhcomp:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (COWhenIsValidValue(value)) {
          [self setWhen2:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        int32_t value = [input readEnum];
        if (COWhenCompareIsValidValue(value)) {
          [self setWhcomp2:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        [self setQty:[input readInt32]];
        break;
      }
      case 80: {
        int32_t value = [input readEnum];
        if (COStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        int32_t value = [input readEnum];
        if (COTrendIsValidValue(value)) {
          [self setTrend:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
      case 96: {
        [self setDiffFromTop:[input readInt32]];
        break;
      }
      case 104: {
        [self setSide:[input readInt32]];
        break;
      }
      case 112: {
        [self setTrigered:[input readBool]];
        break;
      }
      case 120: {
        [self setTickPrice:[input readInt32]];
        break;
      }
      case 130: {
        [self setOwnerId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOcid {
  return result.hasOcid;
}
- (int32_t) ocid {
  return result.ocid;
}
- (COMessage_Builder*) setOcid:(int32_t) value {
  result.hasOcid = YES;
  result.ocid = value;
  return self;
}
- (COMessage_Builder*) clearOcid {
  result.hasOcid = NO;
  result.ocid = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (COMessage_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (COMessage_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasRulesCo {
  return result.hasRulesCo;
}
- (CORules) rulesCo {
  return result.rulesCo;
}
- (COMessage_Builder*) setRulesCo:(CORules) value {
  result.hasRulesCo = YES;
  result.rulesCo = value;
  return self;
}
- (COMessage_Builder*) clearRulesCo {
  result.hasRulesCo = NO;
  result.rulesCo = CORulesSimple;
  return self;
}
- (BOOL) hasWhen1 {
  return result.hasWhen1;
}
- (COWhen) when1 {
  return result.when1;
}
- (COMessage_Builder*) setWhen1:(COWhen) value {
  result.hasWhen1 = YES;
  result.when1 = value;
  return self;
}
- (COMessage_Builder*) clearWhen1 {
  result.hasWhen1 = NO;
  result.when1 = COWhenLastPrice;
  return self;
}
- (BOOL) hasWhcomp {
  return result.hasWhcomp;
}
- (COWhenCompare) whcomp {
  return result.whcomp;
}
- (COMessage_Builder*) setWhcomp:(COWhenCompare) value {
  result.hasWhcomp = YES;
  result.whcomp = value;
  return self;
}
- (COMessage_Builder*) clearWhcomp {
  result.hasWhcomp = NO;
  result.whcomp = COWhenCompareGreaterEqual;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (COMessage_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (COMessage_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasWhen2 {
  return result.hasWhen2;
}
- (COWhen) when2 {
  return result.when2;
}
- (COMessage_Builder*) setWhen2:(COWhen) value {
  result.hasWhen2 = YES;
  result.when2 = value;
  return self;
}
- (COMessage_Builder*) clearWhen2 {
  result.hasWhen2 = NO;
  result.when2 = COWhenLastPrice;
  return self;
}
- (BOOL) hasWhcomp2 {
  return result.hasWhcomp2;
}
- (COWhenCompare) whcomp2 {
  return result.whcomp2;
}
- (COMessage_Builder*) setWhcomp2:(COWhenCompare) value {
  result.hasWhcomp2 = YES;
  result.whcomp2 = value;
  return self;
}
- (COMessage_Builder*) clearWhcomp2 {
  result.hasWhcomp2 = NO;
  result.whcomp2 = COWhenCompareGreaterEqual;
  return self;
}
- (BOOL) hasQty {
  return result.hasQty;
}
- (int32_t) qty {
  return result.qty;
}
- (COMessage_Builder*) setQty:(int32_t) value {
  result.hasQty = YES;
  result.qty = value;
  return self;
}
- (COMessage_Builder*) clearQty {
  result.hasQty = NO;
  result.qty = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (COStatus) status {
  return result.status;
}
- (COMessage_Builder*) setStatus:(COStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (COMessage_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = COStatusCoActive;
  return self;
}
- (BOOL) hasTrend {
  return result.hasTrend;
}
- (COTrend) trend {
  return result.trend;
}
- (COMessage_Builder*) setTrend:(COTrend) value {
  result.hasTrend = YES;
  result.trend = value;
  return self;
}
- (COMessage_Builder*) clearTrend {
  result.hasTrend = NO;
  result.trend = COTrendUpTrend;
  return self;
}
- (BOOL) hasDiffFromTop {
  return result.hasDiffFromTop;
}
- (int32_t) diffFromTop {
  return result.diffFromTop;
}
- (COMessage_Builder*) setDiffFromTop:(int32_t) value {
  result.hasDiffFromTop = YES;
  result.diffFromTop = value;
  return self;
}
- (COMessage_Builder*) clearDiffFromTop {
  result.hasDiffFromTop = NO;
  result.diffFromTop = 0;
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (COMessage_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (COMessage_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasTrigered {
  return result.hasTrigered;
}
- (BOOL) trigered {
  return result.trigered;
}
- (COMessage_Builder*) setTrigered:(BOOL) value {
  result.hasTrigered = YES;
  result.trigered = value;
  return self;
}
- (COMessage_Builder*) clearTrigered {
  result.hasTrigered = NO;
  result.trigered = NO;
  return self;
}
- (BOOL) hasTickPrice {
  return result.hasTickPrice;
}
- (int32_t) tickPrice {
  return result.tickPrice;
}
- (COMessage_Builder*) setTickPrice:(int32_t) value {
  result.hasTickPrice = YES;
  result.tickPrice = value;
  return self;
}
- (COMessage_Builder*) clearTickPrice {
  result.hasTickPrice = NO;
  result.tickPrice = 0;
  return self;
}
- (BOOL) hasOwnerId {
  return result.hasOwnerId;
}
- (NSString*) ownerId {
  return result.ownerId;
}
- (COMessage_Builder*) setOwnerId:(NSString*) value {
  result.hasOwnerId = YES;
  result.ownerId = value;
  return self;
}
- (COMessage_Builder*) clearOwnerId {
  result.hasOwnerId = NO;
  result.ownerId = @"";
  return self;
}
@end

@interface IdxNewsMessage ()
@property int32_t messageId;
@property (strong) NSString* subject;
@property (strong) NSString* title;
@property (strong) NSString* content;
@end

@implementation IdxNewsMessage

- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasSubject {
  return !!hasSubject_;
}
- (void) setHasSubject:(BOOL) value {
  hasSubject_ = !!value;
}
@synthesize subject;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (id) init {
  if ((self = [super init])) {
    self.messageId = 0;
    self.subject = @"";
    self.title = @"";
    self.content = @"";
  }
  return self;
}
static IdxNewsMessage* defaultIdxNewsMessageInstance = nil;
+ (void) initialize {
  if (self == [IdxNewsMessage class]) {
    defaultIdxNewsMessageInstance = [[IdxNewsMessage alloc] init];
  }
}
+ (IdxNewsMessage*) defaultInstance {
  return defaultIdxNewsMessageInstance;
}
- (IdxNewsMessage*) defaultInstance {
  return defaultIdxNewsMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessageId) {
    [output writeInt32:2 value:self.messageId];
  }
  if (self.hasSubject) {
    [output writeString:3 value:self.subject];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMessageId) {
    size += computeInt32Size(2, self.messageId);
  }
  if (self.hasSubject) {
    size += computeStringSize(3, self.subject);
  }
  if (self.hasTitle) {
    size += computeStringSize(4, self.title);
  }
  if (self.hasContent) {
    size += computeStringSize(5, self.content);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxNewsMessage*) parseFromData:(NSData*) data {
  return (IdxNewsMessage*)[[[IdxNewsMessage builder] mergeFromData:data] build];
}
+ (IdxNewsMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxNewsMessage*)[[[IdxNewsMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxNewsMessage*) parseFromInputStream:(NSInputStream*) input {
  return (IdxNewsMessage*)[[[IdxNewsMessage builder] mergeFromInputStream:input] build];
}
+ (IdxNewsMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxNewsMessage*)[[[IdxNewsMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxNewsMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxNewsMessage*)[[[IdxNewsMessage builder] mergeFromCodedInputStream:input] build];
}
+ (IdxNewsMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxNewsMessage*)[[[IdxNewsMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxNewsMessage_Builder*) builder {
  return [[IdxNewsMessage_Builder alloc] init];
}
+ (IdxNewsMessage_Builder*) builderWithPrototype:(IdxNewsMessage*) prototype {
  return [[IdxNewsMessage builder] mergeFrom:prototype];
}
- (IdxNewsMessage_Builder*) builder {
  return [IdxNewsMessage builder];
}
- (IdxNewsMessage_Builder*) toBuilder {
  return [IdxNewsMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", [NSNumber numberWithInt:self.messageId]];
  }
  if (self.hasSubject) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subject", self.subject];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxNewsMessage class]]) {
    return NO;
  }
  IdxNewsMessage *otherMessage = other;
  return
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || self.messageId == otherMessage.messageId) &&
      self.hasSubject == otherMessage.hasSubject &&
      (!self.hasSubject || [self.subject isEqual:otherMessage.subject]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.messageId] hash];
  }
  if (self.hasSubject) {
    hashCode = hashCode * 31 + [self.subject hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxNewsMessage_Builder()
@property (strong) IdxNewsMessage* result;
@end

@implementation IdxNewsMessage_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxNewsMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxNewsMessage_Builder*) clear {
  self.result = [[IdxNewsMessage alloc] init];
  return self;
}
- (IdxNewsMessage_Builder*) clone {
  return [IdxNewsMessage builderWithPrototype:result];
}
- (IdxNewsMessage*) defaultInstance {
  return [IdxNewsMessage defaultInstance];
}
- (IdxNewsMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxNewsMessage*) buildPartial {
  IdxNewsMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxNewsMessage_Builder*) mergeFrom:(IdxNewsMessage*) other {
  if (other == [IdxNewsMessage defaultInstance]) {
    return self;
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasSubject) {
    [self setSubject:other.subject];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxNewsMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxNewsMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16: {
        [self setMessageId:[input readInt32]];
        break;
      }
      case 26: {
        [self setSubject:[input readString]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (int32_t) messageId {
  return result.messageId;
}
- (IdxNewsMessage_Builder*) setMessageId:(int32_t) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (IdxNewsMessage_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = 0;
  return self;
}
- (BOOL) hasSubject {
  return result.hasSubject;
}
- (NSString*) subject {
  return result.subject;
}
- (IdxNewsMessage_Builder*) setSubject:(NSString*) value {
  result.hasSubject = YES;
  result.subject = value;
  return self;
}
- (IdxNewsMessage_Builder*) clearSubject {
  result.hasSubject = NO;
  result.subject = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (IdxNewsMessage_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (IdxNewsMessage_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (IdxNewsMessage_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (IdxNewsMessage_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
@end

@interface IdxTradingStatus ()
@property (strong) NSString* status;
@property (strong) NSString* message;
@end

@implementation IdxTradingStatus

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value {
  hasMessage_ = !!value;
}
@synthesize message;
- (id) init {
  if ((self = [super init])) {
    self.status = @"";
    self.message = @"";
  }
  return self;
}
static IdxTradingStatus* defaultIdxTradingStatusInstance = nil;
+ (void) initialize {
  if (self == [IdxTradingStatus class]) {
    defaultIdxTradingStatusInstance = [[IdxTradingStatus alloc] init];
  }
}
+ (IdxTradingStatus*) defaultInstance {
  return defaultIdxTradingStatusInstance;
}
- (IdxTradingStatus*) defaultInstance {
  return defaultIdxTradingStatusInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeString:2 value:self.status];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasStatus) {
    size += computeStringSize(2, self.status);
  }
  if (self.hasMessage) {
    size += computeStringSize(3, self.message);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxTradingStatus*) parseFromData:(NSData*) data {
  return (IdxTradingStatus*)[[[IdxTradingStatus builder] mergeFromData:data] build];
}
+ (IdxTradingStatus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxTradingStatus*)[[[IdxTradingStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxTradingStatus*) parseFromInputStream:(NSInputStream*) input {
  return (IdxTradingStatus*)[[[IdxTradingStatus builder] mergeFromInputStream:input] build];
}
+ (IdxTradingStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxTradingStatus*)[[[IdxTradingStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxTradingStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxTradingStatus*)[[[IdxTradingStatus builder] mergeFromCodedInputStream:input] build];
}
+ (IdxTradingStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxTradingStatus*)[[[IdxTradingStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxTradingStatus_Builder*) builder {
  return [[IdxTradingStatus_Builder alloc] init];
}
+ (IdxTradingStatus_Builder*) builderWithPrototype:(IdxTradingStatus*) prototype {
  return [[IdxTradingStatus builder] mergeFrom:prototype];
}
- (IdxTradingStatus_Builder*) builder {
  return [IdxTradingStatus builder];
}
- (IdxTradingStatus_Builder*) toBuilder {
  return [IdxTradingStatus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxTradingStatus class]]) {
    return NO;
  }
  IdxTradingStatus *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxTradingStatus_Builder()
@property (strong) IdxTradingStatus* result;
@end

@implementation IdxTradingStatus_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxTradingStatus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxTradingStatus_Builder*) clear {
  self.result = [[IdxTradingStatus alloc] init];
  return self;
}
- (IdxTradingStatus_Builder*) clone {
  return [IdxTradingStatus builderWithPrototype:result];
}
- (IdxTradingStatus*) defaultInstance {
  return [IdxTradingStatus defaultInstance];
}
- (IdxTradingStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxTradingStatus*) buildPartial {
  IdxTradingStatus* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxTradingStatus_Builder*) mergeFrom:(IdxTradingStatus*) other {
  if (other == [IdxTradingStatus defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxTradingStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxTradingStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setStatus:[input readString]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (NSString*) status {
  return result.status;
}
- (IdxTradingStatus_Builder*) setStatus:(NSString*) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (IdxTradingStatus_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = @"";
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (IdxTradingStatus_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (IdxTradingStatus_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
@end

@interface IdxSuspendReleaseBroker ()
@property (strong) NSString* code;
@property SuspendReleaseStatus status;
@end

@implementation IdxSuspendReleaseBroker

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.status = SuspendReleaseStatusSuspended;
  }
  return self;
}
static IdxSuspendReleaseBroker* defaultIdxSuspendReleaseBrokerInstance = nil;
+ (void) initialize {
  if (self == [IdxSuspendReleaseBroker class]) {
    defaultIdxSuspendReleaseBrokerInstance = [[IdxSuspendReleaseBroker alloc] init];
  }
}
+ (IdxSuspendReleaseBroker*) defaultInstance {
  return defaultIdxSuspendReleaseBrokerInstance;
}
- (IdxSuspendReleaseBroker*) defaultInstance {
  return defaultIdxSuspendReleaseBrokerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasStatus) {
    size += computeEnumSize(3, self.status);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxSuspendReleaseBroker*) parseFromData:(NSData*) data {
  return (IdxSuspendReleaseBroker*)[[[IdxSuspendReleaseBroker builder] mergeFromData:data] build];
}
+ (IdxSuspendReleaseBroker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxSuspendReleaseBroker*)[[[IdxSuspendReleaseBroker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxSuspendReleaseBroker*) parseFromInputStream:(NSInputStream*) input {
  return (IdxSuspendReleaseBroker*)[[[IdxSuspendReleaseBroker builder] mergeFromInputStream:input] build];
}
+ (IdxSuspendReleaseBroker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxSuspendReleaseBroker*)[[[IdxSuspendReleaseBroker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxSuspendReleaseBroker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxSuspendReleaseBroker*)[[[IdxSuspendReleaseBroker builder] mergeFromCodedInputStream:input] build];
}
+ (IdxSuspendReleaseBroker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxSuspendReleaseBroker*)[[[IdxSuspendReleaseBroker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxSuspendReleaseBroker_Builder*) builder {
  return [[IdxSuspendReleaseBroker_Builder alloc] init];
}
+ (IdxSuspendReleaseBroker_Builder*) builderWithPrototype:(IdxSuspendReleaseBroker*) prototype {
  return [[IdxSuspendReleaseBroker builder] mergeFrom:prototype];
}
- (IdxSuspendReleaseBroker_Builder*) builder {
  return [IdxSuspendReleaseBroker builder];
}
- (IdxSuspendReleaseBroker_Builder*) toBuilder {
  return [IdxSuspendReleaseBroker builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxSuspendReleaseBroker class]]) {
    return NO;
  }
  IdxSuspendReleaseBroker *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxSuspendReleaseBroker_Builder()
@property (strong) IdxSuspendReleaseBroker* result;
@end

@implementation IdxSuspendReleaseBroker_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxSuspendReleaseBroker alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxSuspendReleaseBroker_Builder*) clear {
  self.result = [[IdxSuspendReleaseBroker alloc] init];
  return self;
}
- (IdxSuspendReleaseBroker_Builder*) clone {
  return [IdxSuspendReleaseBroker builderWithPrototype:result];
}
- (IdxSuspendReleaseBroker*) defaultInstance {
  return [IdxSuspendReleaseBroker defaultInstance];
}
- (IdxSuspendReleaseBroker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxSuspendReleaseBroker*) buildPartial {
  IdxSuspendReleaseBroker* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxSuspendReleaseBroker_Builder*) mergeFrom:(IdxSuspendReleaseBroker*) other {
  if (other == [IdxSuspendReleaseBroker defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxSuspendReleaseBroker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxSuspendReleaseBroker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (SuspendReleaseStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxSuspendReleaseBroker_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxSuspendReleaseBroker_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (SuspendReleaseStatus) status {
  return result.status;
}
- (IdxSuspendReleaseBroker_Builder*) setStatus:(SuspendReleaseStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (IdxSuspendReleaseBroker_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = SuspendReleaseStatusSuspended;
  return self;
}
@end

@interface IdxSuspendReleaseStock ()
@property (strong) NSString* code;
@property SuspendReleaseStatus status;
@property Board board;
@end

@implementation IdxSuspendReleaseStock

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.status = SuspendReleaseStatusSuspended;
    self.board = BoardRg;
  }
  return self;
}
static IdxSuspendReleaseStock* defaultIdxSuspendReleaseStockInstance = nil;
+ (void) initialize {
  if (self == [IdxSuspendReleaseStock class]) {
    defaultIdxSuspendReleaseStockInstance = [[IdxSuspendReleaseStock alloc] init];
  }
}
+ (IdxSuspendReleaseStock*) defaultInstance {
  return defaultIdxSuspendReleaseStockInstance;
}
- (IdxSuspendReleaseStock*) defaultInstance {
  return defaultIdxSuspendReleaseStockInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  if (self.hasBoard) {
    [output writeEnum:4 value:self.board];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasStatus) {
    size += computeEnumSize(3, self.status);
  }
  if (self.hasBoard) {
    size += computeEnumSize(4, self.board);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxSuspendReleaseStock*) parseFromData:(NSData*) data {
  return (IdxSuspendReleaseStock*)[[[IdxSuspendReleaseStock builder] mergeFromData:data] build];
}
+ (IdxSuspendReleaseStock*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxSuspendReleaseStock*)[[[IdxSuspendReleaseStock builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxSuspendReleaseStock*) parseFromInputStream:(NSInputStream*) input {
  return (IdxSuspendReleaseStock*)[[[IdxSuspendReleaseStock builder] mergeFromInputStream:input] build];
}
+ (IdxSuspendReleaseStock*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxSuspendReleaseStock*)[[[IdxSuspendReleaseStock builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxSuspendReleaseStock*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxSuspendReleaseStock*)[[[IdxSuspendReleaseStock builder] mergeFromCodedInputStream:input] build];
}
+ (IdxSuspendReleaseStock*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxSuspendReleaseStock*)[[[IdxSuspendReleaseStock builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxSuspendReleaseStock_Builder*) builder {
  return [[IdxSuspendReleaseStock_Builder alloc] init];
}
+ (IdxSuspendReleaseStock_Builder*) builderWithPrototype:(IdxSuspendReleaseStock*) prototype {
  return [[IdxSuspendReleaseStock builder] mergeFrom:prototype];
}
- (IdxSuspendReleaseStock_Builder*) builder {
  return [IdxSuspendReleaseStock builder];
}
- (IdxSuspendReleaseStock_Builder*) toBuilder {
  return [IdxSuspendReleaseStock builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxSuspendReleaseStock class]]) {
    return NO;
  }
  IdxSuspendReleaseStock *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxSuspendReleaseStock_Builder()
@property (strong) IdxSuspendReleaseStock* result;
@end

@implementation IdxSuspendReleaseStock_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxSuspendReleaseStock alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxSuspendReleaseStock_Builder*) clear {
  self.result = [[IdxSuspendReleaseStock alloc] init];
  return self;
}
- (IdxSuspendReleaseStock_Builder*) clone {
  return [IdxSuspendReleaseStock builderWithPrototype:result];
}
- (IdxSuspendReleaseStock*) defaultInstance {
  return [IdxSuspendReleaseStock defaultInstance];
}
- (IdxSuspendReleaseStock*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxSuspendReleaseStock*) buildPartial {
  IdxSuspendReleaseStock* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxSuspendReleaseStock_Builder*) mergeFrom:(IdxSuspendReleaseStock*) other {
  if (other == [IdxSuspendReleaseStock defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxSuspendReleaseStock_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxSuspendReleaseStock_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (SuspendReleaseStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxSuspendReleaseStock_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxSuspendReleaseStock_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (SuspendReleaseStatus) status {
  return result.status;
}
- (IdxSuspendReleaseStock_Builder*) setStatus:(SuspendReleaseStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (IdxSuspendReleaseStock_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = SuspendReleaseStatusSuspended;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (IdxSuspendReleaseStock_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (IdxSuspendReleaseStock_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
@end

@interface KiRegionalIndicesData ()
@property int32_t id;
@property (strong) NSString* code;
@property (strong) NSString* name;
@property (strong) NSString* fullname;
@property (strong) NSString* market;
@end

@implementation KiRegionalIndicesData

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasFullname {
  return !!hasFullname_;
}
- (void) setHasFullname:(BOOL) value {
  hasFullname_ = !!value;
}
@synthesize fullname;
- (BOOL) hasMarket {
  return !!hasMarket_;
}
- (void) setHasMarket:(BOOL) value {
  hasMarket_ = !!value;
}
@synthesize market;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.code = @"";
    self.name = @"";
    self.fullname = @"";
    self.market = @"";
  }
  return self;
}
static KiRegionalIndicesData* defaultKiRegionalIndicesDataInstance = nil;
+ (void) initialize {
  if (self == [KiRegionalIndicesData class]) {
    defaultKiRegionalIndicesDataInstance = [[KiRegionalIndicesData alloc] init];
  }
}
+ (KiRegionalIndicesData*) defaultInstance {
  return defaultKiRegionalIndicesDataInstance;
}
- (KiRegionalIndicesData*) defaultInstance {
  return defaultKiRegionalIndicesDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasFullname) {
    [output writeString:4 value:self.fullname];
  }
  if (self.hasMarket) {
    [output writeString:5 value:self.market];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasFullname) {
    size += computeStringSize(4, self.fullname);
  }
  if (self.hasMarket) {
    size += computeStringSize(5, self.market);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiRegionalIndicesData*) parseFromData:(NSData*) data {
  return (KiRegionalIndicesData*)[[[KiRegionalIndicesData builder] mergeFromData:data] build];
}
+ (KiRegionalIndicesData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRegionalIndicesData*)[[[KiRegionalIndicesData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiRegionalIndicesData*) parseFromInputStream:(NSInputStream*) input {
  return (KiRegionalIndicesData*)[[[KiRegionalIndicesData builder] mergeFromInputStream:input] build];
}
+ (KiRegionalIndicesData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRegionalIndicesData*)[[[KiRegionalIndicesData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRegionalIndicesData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiRegionalIndicesData*)[[[KiRegionalIndicesData builder] mergeFromCodedInputStream:input] build];
}
+ (KiRegionalIndicesData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRegionalIndicesData*)[[[KiRegionalIndicesData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRegionalIndicesData_Builder*) builder {
  return [[KiRegionalIndicesData_Builder alloc] init];
}
+ (KiRegionalIndicesData_Builder*) builderWithPrototype:(KiRegionalIndicesData*) prototype {
  return [[KiRegionalIndicesData builder] mergeFrom:prototype];
}
- (KiRegionalIndicesData_Builder*) builder {
  return [KiRegionalIndicesData builder];
}
- (KiRegionalIndicesData_Builder*) toBuilder {
  return [KiRegionalIndicesData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasFullname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fullname", self.fullname];
  }
  if (self.hasMarket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"market", self.market];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiRegionalIndicesData class]]) {
    return NO;
  }
  KiRegionalIndicesData *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasFullname == otherMessage.hasFullname &&
      (!self.hasFullname || [self.fullname isEqual:otherMessage.fullname]) &&
      self.hasMarket == otherMessage.hasMarket &&
      (!self.hasMarket || [self.market isEqual:otherMessage.market]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasFullname) {
    hashCode = hashCode * 31 + [self.fullname hash];
  }
  if (self.hasMarket) {
    hashCode = hashCode * 31 + [self.market hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiRegionalIndicesData_Builder()
@property (strong) KiRegionalIndicesData* result;
@end

@implementation KiRegionalIndicesData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiRegionalIndicesData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiRegionalIndicesData_Builder*) clear {
  self.result = [[KiRegionalIndicesData alloc] init];
  return self;
}
- (KiRegionalIndicesData_Builder*) clone {
  return [KiRegionalIndicesData builderWithPrototype:result];
}
- (KiRegionalIndicesData*) defaultInstance {
  return [KiRegionalIndicesData defaultInstance];
}
- (KiRegionalIndicesData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiRegionalIndicesData*) buildPartial {
  KiRegionalIndicesData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiRegionalIndicesData_Builder*) mergeFrom:(KiRegionalIndicesData*) other {
  if (other == [KiRegionalIndicesData defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasFullname) {
    [self setFullname:other.fullname];
  }
  if (other.hasMarket) {
    [self setMarket:other.market];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiRegionalIndicesData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiRegionalIndicesData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setFullname:[input readString]];
        break;
      }
      case 42: {
        [self setMarket:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (KiRegionalIndicesData_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (KiRegionalIndicesData_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (KiRegionalIndicesData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (KiRegionalIndicesData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (KiRegionalIndicesData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (KiRegionalIndicesData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasFullname {
  return result.hasFullname;
}
- (NSString*) fullname {
  return result.fullname;
}
- (KiRegionalIndicesData_Builder*) setFullname:(NSString*) value {
  result.hasFullname = YES;
  result.fullname = value;
  return self;
}
- (KiRegionalIndicesData_Builder*) clearFullname {
  result.hasFullname = NO;
  result.fullname = @"";
  return self;
}
- (BOOL) hasMarket {
  return result.hasMarket;
}
- (NSString*) market {
  return result.market;
}
- (KiRegionalIndicesData_Builder*) setMarket:(NSString*) value {
  result.hasMarket = YES;
  result.market = value;
  return self;
}
- (KiRegionalIndicesData_Builder*) clearMarket {
  result.hasMarket = NO;
  result.market = @"";
  return self;
}
@end

@interface KiRegionalIndices ()
@property int32_t sequence;
@property int32_t codeId;
@property Float32 change;
@property Float32 previous;
@property (strong) OHLCFloat* ohlc;
@property int32_t date;
@property int32_t time;
@end

@implementation KiRegionalIndices

- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasChange {
  return !!hasChange_;
}
- (void) setHasChange:(BOOL) value {
  hasChange_ = !!value;
}
@synthesize change;
- (BOOL) hasPrevious {
  return !!hasPrevious_;
}
- (void) setHasPrevious:(BOOL) value {
  hasPrevious_ = !!value;
}
@synthesize previous;
- (BOOL) hasOhlc {
  return !!hasOhlc_;
}
- (void) setHasOhlc:(BOOL) value {
  hasOhlc_ = !!value;
}
@synthesize ohlc;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (id) init {
  if ((self = [super init])) {
    self.sequence = 0;
    self.codeId = 0;
    self.change = 0;
    self.previous = 0;
    self.ohlc = [OHLCFloat defaultInstance];
    self.date = 0;
    self.time = 0;
  }
  return self;
}
static KiRegionalIndices* defaultKiRegionalIndicesInstance = nil;
+ (void) initialize {
  if (self == [KiRegionalIndices class]) {
    defaultKiRegionalIndicesInstance = [[KiRegionalIndices alloc] init];
  }
}
+ (KiRegionalIndices*) defaultInstance {
  return defaultKiRegionalIndicesInstance;
}
- (KiRegionalIndices*) defaultInstance {
  return defaultKiRegionalIndicesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequence) {
    [output writeInt32:1 value:self.sequence];
  }
  if (self.hasCodeId) {
    [output writeInt32:2 value:self.codeId];
  }
  if (self.hasChange) {
    [output writeFloat:3 value:self.change];
  }
  if (self.hasPrevious) {
    [output writeFloat:4 value:self.previous];
  }
  if (self.hasOhlc) {
    [output writeMessage:5 value:self.ohlc];
  }
  if (self.hasDate) {
    [output writeInt32:6 value:self.date];
  }
  if (self.hasTime) {
    [output writeInt32:7 value:self.time];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequence) {
    size += computeInt32Size(1, self.sequence);
  }
  if (self.hasCodeId) {
    size += computeInt32Size(2, self.codeId);
  }
  if (self.hasChange) {
    size += computeFloatSize(3, self.change);
  }
  if (self.hasPrevious) {
    size += computeFloatSize(4, self.previous);
  }
  if (self.hasOhlc) {
    size += computeMessageSize(5, self.ohlc);
  }
  if (self.hasDate) {
    size += computeInt32Size(6, self.date);
  }
  if (self.hasTime) {
    size += computeInt32Size(7, self.time);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiRegionalIndices*) parseFromData:(NSData*) data {
  return (KiRegionalIndices*)[[[KiRegionalIndices builder] mergeFromData:data] build];
}
+ (KiRegionalIndices*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRegionalIndices*)[[[KiRegionalIndices builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiRegionalIndices*) parseFromInputStream:(NSInputStream*) input {
  return (KiRegionalIndices*)[[[KiRegionalIndices builder] mergeFromInputStream:input] build];
}
+ (KiRegionalIndices*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRegionalIndices*)[[[KiRegionalIndices builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRegionalIndices*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiRegionalIndices*)[[[KiRegionalIndices builder] mergeFromCodedInputStream:input] build];
}
+ (KiRegionalIndices*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiRegionalIndices*)[[[KiRegionalIndices builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiRegionalIndices_Builder*) builder {
  return [[KiRegionalIndices_Builder alloc] init];
}
+ (KiRegionalIndices_Builder*) builderWithPrototype:(KiRegionalIndices*) prototype {
  return [[KiRegionalIndices builder] mergeFrom:prototype];
}
- (KiRegionalIndices_Builder*) builder {
  return [KiRegionalIndices builder];
}
- (KiRegionalIndices_Builder*) toBuilder {
  return [KiRegionalIndices builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"change", [NSNumber numberWithFloat:self.change]];
  }
  if (self.hasPrevious) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previous", [NSNumber numberWithFloat:self.previous]];
  }
  if (self.hasOhlc) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [self.ohlc writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiRegionalIndices class]]) {
    return NO;
  }
  KiRegionalIndices *otherMessage = other;
  return
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasChange == otherMessage.hasChange &&
      (!self.hasChange || self.change == otherMessage.change) &&
      self.hasPrevious == otherMessage.hasPrevious &&
      (!self.hasPrevious || self.previous == otherMessage.previous) &&
      self.hasOhlc == otherMessage.hasOhlc &&
      (!self.hasOhlc || [self.ohlc isEqual:otherMessage.ohlc]) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.change] hash];
  }
  if (self.hasPrevious) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.previous] hash];
  }
  if (self.hasOhlc) {
    hashCode = hashCode * 31 + [self.ohlc hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiRegionalIndices_Builder()
@property (strong) KiRegionalIndices* result;
@end

@implementation KiRegionalIndices_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiRegionalIndices alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiRegionalIndices_Builder*) clear {
  self.result = [[KiRegionalIndices alloc] init];
  return self;
}
- (KiRegionalIndices_Builder*) clone {
  return [KiRegionalIndices builderWithPrototype:result];
}
- (KiRegionalIndices*) defaultInstance {
  return [KiRegionalIndices defaultInstance];
}
- (KiRegionalIndices*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiRegionalIndices*) buildPartial {
  KiRegionalIndices* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiRegionalIndices_Builder*) mergeFrom:(KiRegionalIndices*) other {
  if (other == [KiRegionalIndices defaultInstance]) {
    return self;
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasChange) {
    [self setChange:other.change];
  }
  if (other.hasPrevious) {
    [self setPrevious:other.previous];
  }
  if (other.hasOhlc) {
    [self mergeOhlc:other.ohlc];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiRegionalIndices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiRegionalIndices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 16: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 29: {
        [self setChange:[input readFloat]];
        break;
      }
      case 37: {
        [self setPrevious:[input readFloat]];
        break;
      }
      case 42: {
        OHLCFloat_Builder* subBuilder = [OHLCFloat builder];
        if (self.hasOhlc) {
          [subBuilder mergeFrom:self.ohlc];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOhlc:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (KiRegionalIndices_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (KiRegionalIndices_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiRegionalIndices_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiRegionalIndices_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasChange {
  return result.hasChange;
}
- (Float32) change {
  return result.change;
}
- (KiRegionalIndices_Builder*) setChange:(Float32) value {
  result.hasChange = YES;
  result.change = value;
  return self;
}
- (KiRegionalIndices_Builder*) clearChange {
  result.hasChange = NO;
  result.change = 0;
  return self;
}
- (BOOL) hasPrevious {
  return result.hasPrevious;
}
- (Float32) previous {
  return result.previous;
}
- (KiRegionalIndices_Builder*) setPrevious:(Float32) value {
  result.hasPrevious = YES;
  result.previous = value;
  return self;
}
- (KiRegionalIndices_Builder*) clearPrevious {
  result.hasPrevious = NO;
  result.previous = 0;
  return self;
}
- (BOOL) hasOhlc {
  return result.hasOhlc;
}
- (OHLCFloat*) ohlc {
  return result.ohlc;
}
- (KiRegionalIndices_Builder*) setOhlc:(OHLCFloat*) value {
  result.hasOhlc = YES;
  result.ohlc = value;
  return self;
}
- (KiRegionalIndices_Builder*) setOhlcBuilder:(OHLCFloat_Builder*) builderForValue {
  return [self setOhlc:[builderForValue build]];
}
- (KiRegionalIndices_Builder*) mergeOhlc:(OHLCFloat*) value {
  if (result.hasOhlc &&
      result.ohlc != [OHLCFloat defaultInstance]) {
    result.ohlc =
      [[[OHLCFloat builderWithPrototype:result.ohlc] mergeFrom:value] buildPartial];
  } else {
    result.ohlc = value;
  }
  result.hasOhlc = YES;
  return self;
}
- (KiRegionalIndices_Builder*) clearOhlc {
  result.hasOhlc = NO;
  result.ohlc = [OHLCFloat defaultInstance];
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (KiRegionalIndices_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (KiRegionalIndices_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (KiRegionalIndices_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (KiRegionalIndices_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
@end

@interface KiFuture ()
@property int32_t sequence;
@property int32_t codeId;
@property Float32 previous;
@property (strong) OHLCFloat* ohlc;
@property int32_t date;
@property int32_t time;
@property Float32 mid;
@property Float32 bid;
@property Float32 offer;
@property Float32 vol;
@end

@implementation KiFuture

- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasPrevious {
  return !!hasPrevious_;
}
- (void) setHasPrevious:(BOOL) value {
  hasPrevious_ = !!value;
}
@synthesize previous;
- (BOOL) hasOhlc {
  return !!hasOhlc_;
}
- (void) setHasOhlc:(BOOL) value {
  hasOhlc_ = !!value;
}
@synthesize ohlc;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) value {
  hasMid_ = !!value;
}
@synthesize mid;
- (BOOL) hasBid {
  return !!hasBid_;
}
- (void) setHasBid:(BOOL) value {
  hasBid_ = !!value;
}
@synthesize bid;
- (BOOL) hasOffer {
  return !!hasOffer_;
}
- (void) setHasOffer:(BOOL) value {
  hasOffer_ = !!value;
}
@synthesize offer;
- (BOOL) hasVol {
  return !!hasVol_;
}
- (void) setHasVol:(BOOL) value {
  hasVol_ = !!value;
}
@synthesize vol;
- (id) init {
  if ((self = [super init])) {
    self.sequence = 0;
    self.codeId = 0;
    self.previous = 0;
    self.ohlc = [OHLCFloat defaultInstance];
    self.date = 0;
    self.time = 0;
    self.mid = 0;
    self.bid = 0;
    self.offer = 0;
    self.vol = 0;
  }
  return self;
}
static KiFuture* defaultKiFutureInstance = nil;
+ (void) initialize {
  if (self == [KiFuture class]) {
    defaultKiFutureInstance = [[KiFuture alloc] init];
  }
}
+ (KiFuture*) defaultInstance {
  return defaultKiFutureInstance;
}
- (KiFuture*) defaultInstance {
  return defaultKiFutureInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequence) {
    [output writeInt32:1 value:self.sequence];
  }
  if (self.hasCodeId) {
    [output writeInt32:2 value:self.codeId];
  }
  if (self.hasPrevious) {
    [output writeFloat:4 value:self.previous];
  }
  if (self.hasOhlc) {
    [output writeMessage:5 value:self.ohlc];
  }
  if (self.hasDate) {
    [output writeInt32:6 value:self.date];
  }
  if (self.hasTime) {
    [output writeInt32:7 value:self.time];
  }
  if (self.hasMid) {
    [output writeFloat:8 value:self.mid];
  }
  if (self.hasBid) {
    [output writeFloat:9 value:self.bid];
  }
  if (self.hasOffer) {
    [output writeFloat:10 value:self.offer];
  }
  if (self.hasVol) {
    [output writeFloat:11 value:self.vol];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequence) {
    size += computeInt32Size(1, self.sequence);
  }
  if (self.hasCodeId) {
    size += computeInt32Size(2, self.codeId);
  }
  if (self.hasPrevious) {
    size += computeFloatSize(4, self.previous);
  }
  if (self.hasOhlc) {
    size += computeMessageSize(5, self.ohlc);
  }
  if (self.hasDate) {
    size += computeInt32Size(6, self.date);
  }
  if (self.hasTime) {
    size += computeInt32Size(7, self.time);
  }
  if (self.hasMid) {
    size += computeFloatSize(8, self.mid);
  }
  if (self.hasBid) {
    size += computeFloatSize(9, self.bid);
  }
  if (self.hasOffer) {
    size += computeFloatSize(10, self.offer);
  }
  if (self.hasVol) {
    size += computeFloatSize(11, self.vol);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiFuture*) parseFromData:(NSData*) data {
  return (KiFuture*)[[[KiFuture builder] mergeFromData:data] build];
}
+ (KiFuture*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiFuture*)[[[KiFuture builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiFuture*) parseFromInputStream:(NSInputStream*) input {
  return (KiFuture*)[[[KiFuture builder] mergeFromInputStream:input] build];
}
+ (KiFuture*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiFuture*)[[[KiFuture builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiFuture*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiFuture*)[[[KiFuture builder] mergeFromCodedInputStream:input] build];
}
+ (KiFuture*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiFuture*)[[[KiFuture builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiFuture_Builder*) builder {
  return [[KiFuture_Builder alloc] init];
}
+ (KiFuture_Builder*) builderWithPrototype:(KiFuture*) prototype {
  return [[KiFuture builder] mergeFrom:prototype];
}
- (KiFuture_Builder*) builder {
  return [KiFuture builder];
}
- (KiFuture_Builder*) toBuilder {
  return [KiFuture builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasPrevious) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previous", [NSNumber numberWithFloat:self.previous]];
  }
  if (self.hasOhlc) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [self.ohlc writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", [NSNumber numberWithFloat:self.mid]];
  }
  if (self.hasBid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bid", [NSNumber numberWithFloat:self.bid]];
  }
  if (self.hasOffer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offer", [NSNumber numberWithFloat:self.offer]];
  }
  if (self.hasVol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vol", [NSNumber numberWithFloat:self.vol]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiFuture class]]) {
    return NO;
  }
  KiFuture *otherMessage = other;
  return
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasPrevious == otherMessage.hasPrevious &&
      (!self.hasPrevious || self.previous == otherMessage.previous) &&
      self.hasOhlc == otherMessage.hasOhlc &&
      (!self.hasOhlc || [self.ohlc isEqual:otherMessage.ohlc]) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || self.mid == otherMessage.mid) &&
      self.hasBid == otherMessage.hasBid &&
      (!self.hasBid || self.bid == otherMessage.bid) &&
      self.hasOffer == otherMessage.hasOffer &&
      (!self.hasOffer || self.offer == otherMessage.offer) &&
      self.hasVol == otherMessage.hasVol &&
      (!self.hasVol || self.vol == otherMessage.vol) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasPrevious) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.previous] hash];
  }
  if (self.hasOhlc) {
    hashCode = hashCode * 31 + [self.ohlc hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.mid] hash];
  }
  if (self.hasBid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bid] hash];
  }
  if (self.hasOffer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.offer] hash];
  }
  if (self.hasVol) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.vol] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiFuture_Builder()
@property (strong) KiFuture* result;
@end

@implementation KiFuture_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiFuture alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiFuture_Builder*) clear {
  self.result = [[KiFuture alloc] init];
  return self;
}
- (KiFuture_Builder*) clone {
  return [KiFuture builderWithPrototype:result];
}
- (KiFuture*) defaultInstance {
  return [KiFuture defaultInstance];
}
- (KiFuture*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiFuture*) buildPartial {
  KiFuture* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiFuture_Builder*) mergeFrom:(KiFuture*) other {
  if (other == [KiFuture defaultInstance]) {
    return self;
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasPrevious) {
    [self setPrevious:other.previous];
  }
  if (other.hasOhlc) {
    [self mergeOhlc:other.ohlc];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasBid) {
    [self setBid:other.bid];
  }
  if (other.hasOffer) {
    [self setOffer:other.offer];
  }
  if (other.hasVol) {
    [self setVol:other.vol];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiFuture_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiFuture_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 16: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 37: {
        [self setPrevious:[input readFloat]];
        break;
      }
      case 42: {
        OHLCFloat_Builder* subBuilder = [OHLCFloat builder];
        if (self.hasOhlc) {
          [subBuilder mergeFrom:self.ohlc];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOhlc:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setTime:[input readInt32]];
        break;
      }
      case 69: {
        [self setMid:[input readFloat]];
        break;
      }
      case 77: {
        [self setBid:[input readFloat]];
        break;
      }
      case 85: {
        [self setOffer:[input readFloat]];
        break;
      }
      case 93: {
        [self setVol:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (KiFuture_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (KiFuture_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiFuture_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiFuture_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasPrevious {
  return result.hasPrevious;
}
- (Float32) previous {
  return result.previous;
}
- (KiFuture_Builder*) setPrevious:(Float32) value {
  result.hasPrevious = YES;
  result.previous = value;
  return self;
}
- (KiFuture_Builder*) clearPrevious {
  result.hasPrevious = NO;
  result.previous = 0;
  return self;
}
- (BOOL) hasOhlc {
  return result.hasOhlc;
}
- (OHLCFloat*) ohlc {
  return result.ohlc;
}
- (KiFuture_Builder*) setOhlc:(OHLCFloat*) value {
  result.hasOhlc = YES;
  result.ohlc = value;
  return self;
}
- (KiFuture_Builder*) setOhlcBuilder:(OHLCFloat_Builder*) builderForValue {
  return [self setOhlc:[builderForValue build]];
}
- (KiFuture_Builder*) mergeOhlc:(OHLCFloat*) value {
  if (result.hasOhlc &&
      result.ohlc != [OHLCFloat defaultInstance]) {
    result.ohlc =
      [[[OHLCFloat builderWithPrototype:result.ohlc] mergeFrom:value] buildPartial];
  } else {
    result.ohlc = value;
  }
  result.hasOhlc = YES;
  return self;
}
- (KiFuture_Builder*) clearOhlc {
  result.hasOhlc = NO;
  result.ohlc = [OHLCFloat defaultInstance];
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (KiFuture_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (KiFuture_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (KiFuture_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (KiFuture_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
- (BOOL) hasMid {
  return result.hasMid;
}
- (Float32) mid {
  return result.mid;
}
- (KiFuture_Builder*) setMid:(Float32) value {
  result.hasMid = YES;
  result.mid = value;
  return self;
}
- (KiFuture_Builder*) clearMid {
  result.hasMid = NO;
  result.mid = 0;
  return self;
}
- (BOOL) hasBid {
  return result.hasBid;
}
- (Float32) bid {
  return result.bid;
}
- (KiFuture_Builder*) setBid:(Float32) value {
  result.hasBid = YES;
  result.bid = value;
  return self;
}
- (KiFuture_Builder*) clearBid {
  result.hasBid = NO;
  result.bid = 0;
  return self;
}
- (BOOL) hasOffer {
  return result.hasOffer;
}
- (Float32) offer {
  return result.offer;
}
- (KiFuture_Builder*) setOffer:(Float32) value {
  result.hasOffer = YES;
  result.offer = value;
  return self;
}
- (KiFuture_Builder*) clearOffer {
  result.hasOffer = NO;
  result.offer = 0;
  return self;
}
- (BOOL) hasVol {
  return result.hasVol;
}
- (Float32) vol {
  return result.vol;
}
- (KiFuture_Builder*) setVol:(Float32) value {
  result.hasVol = YES;
  result.vol = value;
  return self;
}
- (KiFuture_Builder*) clearVol {
  result.hasVol = NO;
  result.vol = 0;
  return self;
}
@end

@interface KiComodity ()
@property int32_t sequence;
@property int32_t codeId;
@property Float32 previous;
@property (strong) OHLCFloat* ohlc;
@property int32_t date;
@property int32_t time;
@property Float32 mid;
@property Float32 bid;
@property Float32 offer;
@property Float32 vol;
@end

@implementation KiComodity

- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasPrevious {
  return !!hasPrevious_;
}
- (void) setHasPrevious:(BOOL) value {
  hasPrevious_ = !!value;
}
@synthesize previous;
- (BOOL) hasOhlc {
  return !!hasOhlc_;
}
- (void) setHasOhlc:(BOOL) value {
  hasOhlc_ = !!value;
}
@synthesize ohlc;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) value {
  hasMid_ = !!value;
}
@synthesize mid;
- (BOOL) hasBid {
  return !!hasBid_;
}
- (void) setHasBid:(BOOL) value {
  hasBid_ = !!value;
}
@synthesize bid;
- (BOOL) hasOffer {
  return !!hasOffer_;
}
- (void) setHasOffer:(BOOL) value {
  hasOffer_ = !!value;
}
@synthesize offer;
- (BOOL) hasVol {
  return !!hasVol_;
}
- (void) setHasVol:(BOOL) value {
  hasVol_ = !!value;
}
@synthesize vol;
- (id) init {
  if ((self = [super init])) {
    self.sequence = 0;
    self.codeId = 0;
    self.previous = 0;
    self.ohlc = [OHLCFloat defaultInstance];
    self.date = 0;
    self.time = 0;
    self.mid = 0;
    self.bid = 0;
    self.offer = 0;
    self.vol = 0;
  }
  return self;
}
static KiComodity* defaultKiComodityInstance = nil;
+ (void) initialize {
  if (self == [KiComodity class]) {
    defaultKiComodityInstance = [[KiComodity alloc] init];
  }
}
+ (KiComodity*) defaultInstance {
  return defaultKiComodityInstance;
}
- (KiComodity*) defaultInstance {
  return defaultKiComodityInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequence) {
    [output writeInt32:1 value:self.sequence];
  }
  if (self.hasCodeId) {
    [output writeInt32:2 value:self.codeId];
  }
  if (self.hasPrevious) {
    [output writeFloat:4 value:self.previous];
  }
  if (self.hasOhlc) {
    [output writeMessage:5 value:self.ohlc];
  }
  if (self.hasDate) {
    [output writeInt32:6 value:self.date];
  }
  if (self.hasTime) {
    [output writeInt32:7 value:self.time];
  }
  if (self.hasMid) {
    [output writeFloat:8 value:self.mid];
  }
  if (self.hasBid) {
    [output writeFloat:9 value:self.bid];
  }
  if (self.hasOffer) {
    [output writeFloat:10 value:self.offer];
  }
  if (self.hasVol) {
    [output writeFloat:11 value:self.vol];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequence) {
    size += computeInt32Size(1, self.sequence);
  }
  if (self.hasCodeId) {
    size += computeInt32Size(2, self.codeId);
  }
  if (self.hasPrevious) {
    size += computeFloatSize(4, self.previous);
  }
  if (self.hasOhlc) {
    size += computeMessageSize(5, self.ohlc);
  }
  if (self.hasDate) {
    size += computeInt32Size(6, self.date);
  }
  if (self.hasTime) {
    size += computeInt32Size(7, self.time);
  }
  if (self.hasMid) {
    size += computeFloatSize(8, self.mid);
  }
  if (self.hasBid) {
    size += computeFloatSize(9, self.bid);
  }
  if (self.hasOffer) {
    size += computeFloatSize(10, self.offer);
  }
  if (self.hasVol) {
    size += computeFloatSize(11, self.vol);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiComodity*) parseFromData:(NSData*) data {
  return (KiComodity*)[[[KiComodity builder] mergeFromData:data] build];
}
+ (KiComodity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiComodity*)[[[KiComodity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiComodity*) parseFromInputStream:(NSInputStream*) input {
  return (KiComodity*)[[[KiComodity builder] mergeFromInputStream:input] build];
}
+ (KiComodity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiComodity*)[[[KiComodity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiComodity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiComodity*)[[[KiComodity builder] mergeFromCodedInputStream:input] build];
}
+ (KiComodity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiComodity*)[[[KiComodity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiComodity_Builder*) builder {
  return [[KiComodity_Builder alloc] init];
}
+ (KiComodity_Builder*) builderWithPrototype:(KiComodity*) prototype {
  return [[KiComodity builder] mergeFrom:prototype];
}
- (KiComodity_Builder*) builder {
  return [KiComodity builder];
}
- (KiComodity_Builder*) toBuilder {
  return [KiComodity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasPrevious) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previous", [NSNumber numberWithFloat:self.previous]];
  }
  if (self.hasOhlc) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [self.ohlc writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", [NSNumber numberWithFloat:self.mid]];
  }
  if (self.hasBid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bid", [NSNumber numberWithFloat:self.bid]];
  }
  if (self.hasOffer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offer", [NSNumber numberWithFloat:self.offer]];
  }
  if (self.hasVol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vol", [NSNumber numberWithFloat:self.vol]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiComodity class]]) {
    return NO;
  }
  KiComodity *otherMessage = other;
  return
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasPrevious == otherMessage.hasPrevious &&
      (!self.hasPrevious || self.previous == otherMessage.previous) &&
      self.hasOhlc == otherMessage.hasOhlc &&
      (!self.hasOhlc || [self.ohlc isEqual:otherMessage.ohlc]) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || self.mid == otherMessage.mid) &&
      self.hasBid == otherMessage.hasBid &&
      (!self.hasBid || self.bid == otherMessage.bid) &&
      self.hasOffer == otherMessage.hasOffer &&
      (!self.hasOffer || self.offer == otherMessage.offer) &&
      self.hasVol == otherMessage.hasVol &&
      (!self.hasVol || self.vol == otherMessage.vol) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasPrevious) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.previous] hash];
  }
  if (self.hasOhlc) {
    hashCode = hashCode * 31 + [self.ohlc hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.mid] hash];
  }
  if (self.hasBid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bid] hash];
  }
  if (self.hasOffer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.offer] hash];
  }
  if (self.hasVol) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.vol] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiComodity_Builder()
@property (strong) KiComodity* result;
@end

@implementation KiComodity_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiComodity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiComodity_Builder*) clear {
  self.result = [[KiComodity alloc] init];
  return self;
}
- (KiComodity_Builder*) clone {
  return [KiComodity builderWithPrototype:result];
}
- (KiComodity*) defaultInstance {
  return [KiComodity defaultInstance];
}
- (KiComodity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiComodity*) buildPartial {
  KiComodity* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiComodity_Builder*) mergeFrom:(KiComodity*) other {
  if (other == [KiComodity defaultInstance]) {
    return self;
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasPrevious) {
    [self setPrevious:other.previous];
  }
  if (other.hasOhlc) {
    [self mergeOhlc:other.ohlc];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasBid) {
    [self setBid:other.bid];
  }
  if (other.hasOffer) {
    [self setOffer:other.offer];
  }
  if (other.hasVol) {
    [self setVol:other.vol];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiComodity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiComodity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 16: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 37: {
        [self setPrevious:[input readFloat]];
        break;
      }
      case 42: {
        OHLCFloat_Builder* subBuilder = [OHLCFloat builder];
        if (self.hasOhlc) {
          [subBuilder mergeFrom:self.ohlc];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOhlc:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setTime:[input readInt32]];
        break;
      }
      case 69: {
        [self setMid:[input readFloat]];
        break;
      }
      case 77: {
        [self setBid:[input readFloat]];
        break;
      }
      case 85: {
        [self setOffer:[input readFloat]];
        break;
      }
      case 93: {
        [self setVol:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (KiComodity_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (KiComodity_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiComodity_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiComodity_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasPrevious {
  return result.hasPrevious;
}
- (Float32) previous {
  return result.previous;
}
- (KiComodity_Builder*) setPrevious:(Float32) value {
  result.hasPrevious = YES;
  result.previous = value;
  return self;
}
- (KiComodity_Builder*) clearPrevious {
  result.hasPrevious = NO;
  result.previous = 0;
  return self;
}
- (BOOL) hasOhlc {
  return result.hasOhlc;
}
- (OHLCFloat*) ohlc {
  return result.ohlc;
}
- (KiComodity_Builder*) setOhlc:(OHLCFloat*) value {
  result.hasOhlc = YES;
  result.ohlc = value;
  return self;
}
- (KiComodity_Builder*) setOhlcBuilder:(OHLCFloat_Builder*) builderForValue {
  return [self setOhlc:[builderForValue build]];
}
- (KiComodity_Builder*) mergeOhlc:(OHLCFloat*) value {
  if (result.hasOhlc &&
      result.ohlc != [OHLCFloat defaultInstance]) {
    result.ohlc =
      [[[OHLCFloat builderWithPrototype:result.ohlc] mergeFrom:value] buildPartial];
  } else {
    result.ohlc = value;
  }
  result.hasOhlc = YES;
  return self;
}
- (KiComodity_Builder*) clearOhlc {
  result.hasOhlc = NO;
  result.ohlc = [OHLCFloat defaultInstance];
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (KiComodity_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (KiComodity_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (KiComodity_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (KiComodity_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
- (BOOL) hasMid {
  return result.hasMid;
}
- (Float32) mid {
  return result.mid;
}
- (KiComodity_Builder*) setMid:(Float32) value {
  result.hasMid = YES;
  result.mid = value;
  return self;
}
- (KiComodity_Builder*) clearMid {
  result.hasMid = NO;
  result.mid = 0;
  return self;
}
- (BOOL) hasBid {
  return result.hasBid;
}
- (Float32) bid {
  return result.bid;
}
- (KiComodity_Builder*) setBid:(Float32) value {
  result.hasBid = YES;
  result.bid = value;
  return self;
}
- (KiComodity_Builder*) clearBid {
  result.hasBid = NO;
  result.bid = 0;
  return self;
}
- (BOOL) hasOffer {
  return result.hasOffer;
}
- (Float32) offer {
  return result.offer;
}
- (KiComodity_Builder*) setOffer:(Float32) value {
  result.hasOffer = YES;
  result.offer = value;
  return self;
}
- (KiComodity_Builder*) clearOffer {
  result.hasOffer = NO;
  result.offer = 0;
  return self;
}
- (BOOL) hasVol {
  return result.hasVol;
}
- (Float32) vol {
  return result.vol;
}
- (KiComodity_Builder*) setVol:(Float32) value {
  result.hasVol = YES;
  result.vol = value;
  return self;
}
- (KiComodity_Builder*) clearVol {
  result.hasVol = NO;
  result.vol = 0;
  return self;
}
@end

@interface KiCurrencyData ()
@property int32_t id;
@property (strong) NSString* code;
@property (strong) NSString* name;
@end

@implementation KiCurrencyData

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.code = @"";
    self.name = @"";
  }
  return self;
}
static KiCurrencyData* defaultKiCurrencyDataInstance = nil;
+ (void) initialize {
  if (self == [KiCurrencyData class]) {
    defaultKiCurrencyDataInstance = [[KiCurrencyData alloc] init];
  }
}
+ (KiCurrencyData*) defaultInstance {
  return defaultKiCurrencyDataInstance;
}
- (KiCurrencyData*) defaultInstance {
  return defaultKiCurrencyDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiCurrencyData*) parseFromData:(NSData*) data {
  return (KiCurrencyData*)[[[KiCurrencyData builder] mergeFromData:data] build];
}
+ (KiCurrencyData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiCurrencyData*)[[[KiCurrencyData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiCurrencyData*) parseFromInputStream:(NSInputStream*) input {
  return (KiCurrencyData*)[[[KiCurrencyData builder] mergeFromInputStream:input] build];
}
+ (KiCurrencyData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiCurrencyData*)[[[KiCurrencyData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiCurrencyData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiCurrencyData*)[[[KiCurrencyData builder] mergeFromCodedInputStream:input] build];
}
+ (KiCurrencyData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiCurrencyData*)[[[KiCurrencyData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiCurrencyData_Builder*) builder {
  return [[KiCurrencyData_Builder alloc] init];
}
+ (KiCurrencyData_Builder*) builderWithPrototype:(KiCurrencyData*) prototype {
  return [[KiCurrencyData builder] mergeFrom:prototype];
}
- (KiCurrencyData_Builder*) builder {
  return [KiCurrencyData builder];
}
- (KiCurrencyData_Builder*) toBuilder {
  return [KiCurrencyData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiCurrencyData class]]) {
    return NO;
  }
  KiCurrencyData *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiCurrencyData_Builder()
@property (strong) KiCurrencyData* result;
@end

@implementation KiCurrencyData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiCurrencyData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiCurrencyData_Builder*) clear {
  self.result = [[KiCurrencyData alloc] init];
  return self;
}
- (KiCurrencyData_Builder*) clone {
  return [KiCurrencyData builderWithPrototype:result];
}
- (KiCurrencyData*) defaultInstance {
  return [KiCurrencyData defaultInstance];
}
- (KiCurrencyData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiCurrencyData*) buildPartial {
  KiCurrencyData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiCurrencyData_Builder*) mergeFrom:(KiCurrencyData*) other {
  if (other == [KiCurrencyData defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiCurrencyData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiCurrencyData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (KiCurrencyData_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (KiCurrencyData_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (KiCurrencyData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (KiCurrencyData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (KiCurrencyData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (KiCurrencyData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface KiCurrency ()
@property int32_t sequence;
@property int32_t currCode;
@property int32_t currAgainst;
@property Float32 price;
@property Float32 change;
@property Float32 range1;
@property Float32 range2;
@property Float32 last;
@property Float32 open;
@property Float32 high;
@property Float32 low;
@property Float32 prev;
@property Float32 mid;
@property Float32 bid;
@property Float32 offer;
@property int32_t date;
@property int32_t time;
@end

@implementation KiCurrency

- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasCurrCode {
  return !!hasCurrCode_;
}
- (void) setHasCurrCode:(BOOL) value {
  hasCurrCode_ = !!value;
}
@synthesize currCode;
- (BOOL) hasCurrAgainst {
  return !!hasCurrAgainst_;
}
- (void) setHasCurrAgainst:(BOOL) value {
  hasCurrAgainst_ = !!value;
}
@synthesize currAgainst;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasChange {
  return !!hasChange_;
}
- (void) setHasChange:(BOOL) value {
  hasChange_ = !!value;
}
@synthesize change;
- (BOOL) hasRange1 {
  return !!hasRange1_;
}
- (void) setHasRange1:(BOOL) value {
  hasRange1_ = !!value;
}
@synthesize range1;
- (BOOL) hasRange2 {
  return !!hasRange2_;
}
- (void) setHasRange2:(BOOL) value {
  hasRange2_ = !!value;
}
@synthesize range2;
- (BOOL) hasLast {
  return !!hasLast_;
}
- (void) setHasLast:(BOOL) value {
  hasLast_ = !!value;
}
@synthesize last;
- (BOOL) hasOpen {
  return !!hasOpen_;
}
- (void) setHasOpen:(BOOL) value {
  hasOpen_ = !!value;
}
@synthesize open;
- (BOOL) hasHigh {
  return !!hasHigh_;
}
- (void) setHasHigh:(BOOL) value {
  hasHigh_ = !!value;
}
@synthesize high;
- (BOOL) hasLow {
  return !!hasLow_;
}
- (void) setHasLow:(BOOL) value {
  hasLow_ = !!value;
}
@synthesize low;
- (BOOL) hasPrev {
  return !!hasPrev_;
}
- (void) setHasPrev:(BOOL) value {
  hasPrev_ = !!value;
}
@synthesize prev;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) value {
  hasMid_ = !!value;
}
@synthesize mid;
- (BOOL) hasBid {
  return !!hasBid_;
}
- (void) setHasBid:(BOOL) value {
  hasBid_ = !!value;
}
@synthesize bid;
- (BOOL) hasOffer {
  return !!hasOffer_;
}
- (void) setHasOffer:(BOOL) value {
  hasOffer_ = !!value;
}
@synthesize offer;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (id) init {
  if ((self = [super init])) {
    self.sequence = 0;
    self.currCode = 0;
    self.currAgainst = 0;
    self.price = 0;
    self.change = 0;
    self.range1 = 0;
    self.range2 = 0;
    self.last = 0;
    self.open = 0;
    self.high = 0;
    self.low = 0;
    self.prev = 0;
    self.mid = 0;
    self.bid = 0;
    self.offer = 0;
    self.date = 0;
    self.time = 0;
  }
  return self;
}
static KiCurrency* defaultKiCurrencyInstance = nil;
+ (void) initialize {
  if (self == [KiCurrency class]) {
    defaultKiCurrencyInstance = [[KiCurrency alloc] init];
  }
}
+ (KiCurrency*) defaultInstance {
  return defaultKiCurrencyInstance;
}
- (KiCurrency*) defaultInstance {
  return defaultKiCurrencyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequence) {
    [output writeInt32:1 value:self.sequence];
  }
  if (self.hasCurrCode) {
    [output writeInt32:2 value:self.currCode];
  }
  if (self.hasCurrAgainst) {
    [output writeInt32:3 value:self.currAgainst];
  }
  if (self.hasPrice) {
    [output writeFloat:4 value:self.price];
  }
  if (self.hasChange) {
    [output writeFloat:5 value:self.change];
  }
  if (self.hasRange1) {
    [output writeFloat:7 value:self.range1];
  }
  if (self.hasRange2) {
    [output writeFloat:8 value:self.range2];
  }
  if (self.hasLast) {
    [output writeFloat:9 value:self.last];
  }
  if (self.hasOpen) {
    [output writeFloat:10 value:self.open];
  }
  if (self.hasHigh) {
    [output writeFloat:11 value:self.high];
  }
  if (self.hasLow) {
    [output writeFloat:12 value:self.low];
  }
  if (self.hasPrev) {
    [output writeFloat:13 value:self.prev];
  }
  if (self.hasMid) {
    [output writeFloat:14 value:self.mid];
  }
  if (self.hasBid) {
    [output writeFloat:15 value:self.bid];
  }
  if (self.hasOffer) {
    [output writeFloat:16 value:self.offer];
  }
  if (self.hasDate) {
    [output writeInt32:17 value:self.date];
  }
  if (self.hasTime) {
    [output writeInt32:18 value:self.time];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequence) {
    size += computeInt32Size(1, self.sequence);
  }
  if (self.hasCurrCode) {
    size += computeInt32Size(2, self.currCode);
  }
  if (self.hasCurrAgainst) {
    size += computeInt32Size(3, self.currAgainst);
  }
  if (self.hasPrice) {
    size += computeFloatSize(4, self.price);
  }
  if (self.hasChange) {
    size += computeFloatSize(5, self.change);
  }
  if (self.hasRange1) {
    size += computeFloatSize(7, self.range1);
  }
  if (self.hasRange2) {
    size += computeFloatSize(8, self.range2);
  }
  if (self.hasLast) {
    size += computeFloatSize(9, self.last);
  }
  if (self.hasOpen) {
    size += computeFloatSize(10, self.open);
  }
  if (self.hasHigh) {
    size += computeFloatSize(11, self.high);
  }
  if (self.hasLow) {
    size += computeFloatSize(12, self.low);
  }
  if (self.hasPrev) {
    size += computeFloatSize(13, self.prev);
  }
  if (self.hasMid) {
    size += computeFloatSize(14, self.mid);
  }
  if (self.hasBid) {
    size += computeFloatSize(15, self.bid);
  }
  if (self.hasOffer) {
    size += computeFloatSize(16, self.offer);
  }
  if (self.hasDate) {
    size += computeInt32Size(17, self.date);
  }
  if (self.hasTime) {
    size += computeInt32Size(18, self.time);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiCurrency*) parseFromData:(NSData*) data {
  return (KiCurrency*)[[[KiCurrency builder] mergeFromData:data] build];
}
+ (KiCurrency*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiCurrency*)[[[KiCurrency builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiCurrency*) parseFromInputStream:(NSInputStream*) input {
  return (KiCurrency*)[[[KiCurrency builder] mergeFromInputStream:input] build];
}
+ (KiCurrency*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiCurrency*)[[[KiCurrency builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiCurrency*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiCurrency*)[[[KiCurrency builder] mergeFromCodedInputStream:input] build];
}
+ (KiCurrency*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiCurrency*)[[[KiCurrency builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiCurrency_Builder*) builder {
  return [[KiCurrency_Builder alloc] init];
}
+ (KiCurrency_Builder*) builderWithPrototype:(KiCurrency*) prototype {
  return [[KiCurrency builder] mergeFrom:prototype];
}
- (KiCurrency_Builder*) builder {
  return [KiCurrency builder];
}
- (KiCurrency_Builder*) toBuilder {
  return [KiCurrency builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasCurrCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currCode", [NSNumber numberWithInt:self.currCode]];
  }
  if (self.hasCurrAgainst) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currAgainst", [NSNumber numberWithInt:self.currAgainst]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithFloat:self.price]];
  }
  if (self.hasChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"change", [NSNumber numberWithFloat:self.change]];
  }
  if (self.hasRange1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"range1", [NSNumber numberWithFloat:self.range1]];
  }
  if (self.hasRange2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"range2", [NSNumber numberWithFloat:self.range2]];
  }
  if (self.hasLast) {
    [output appendFormat:@"%@%@: %@\n", indent, @"last", [NSNumber numberWithFloat:self.last]];
  }
  if (self.hasOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"open", [NSNumber numberWithFloat:self.open]];
  }
  if (self.hasHigh) {
    [output appendFormat:@"%@%@: %@\n", indent, @"high", [NSNumber numberWithFloat:self.high]];
  }
  if (self.hasLow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"low", [NSNumber numberWithFloat:self.low]];
  }
  if (self.hasPrev) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prev", [NSNumber numberWithFloat:self.prev]];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", [NSNumber numberWithFloat:self.mid]];
  }
  if (self.hasBid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bid", [NSNumber numberWithFloat:self.bid]];
  }
  if (self.hasOffer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offer", [NSNumber numberWithFloat:self.offer]];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiCurrency class]]) {
    return NO;
  }
  KiCurrency *otherMessage = other;
  return
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasCurrCode == otherMessage.hasCurrCode &&
      (!self.hasCurrCode || self.currCode == otherMessage.currCode) &&
      self.hasCurrAgainst == otherMessage.hasCurrAgainst &&
      (!self.hasCurrAgainst || self.currAgainst == otherMessage.currAgainst) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasChange == otherMessage.hasChange &&
      (!self.hasChange || self.change == otherMessage.change) &&
      self.hasRange1 == otherMessage.hasRange1 &&
      (!self.hasRange1 || self.range1 == otherMessage.range1) &&
      self.hasRange2 == otherMessage.hasRange2 &&
      (!self.hasRange2 || self.range2 == otherMessage.range2) &&
      self.hasLast == otherMessage.hasLast &&
      (!self.hasLast || self.last == otherMessage.last) &&
      self.hasOpen == otherMessage.hasOpen &&
      (!self.hasOpen || self.open == otherMessage.open) &&
      self.hasHigh == otherMessage.hasHigh &&
      (!self.hasHigh || self.high == otherMessage.high) &&
      self.hasLow == otherMessage.hasLow &&
      (!self.hasLow || self.low == otherMessage.low) &&
      self.hasPrev == otherMessage.hasPrev &&
      (!self.hasPrev || self.prev == otherMessage.prev) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || self.mid == otherMessage.mid) &&
      self.hasBid == otherMessage.hasBid &&
      (!self.hasBid || self.bid == otherMessage.bid) &&
      self.hasOffer == otherMessage.hasOffer &&
      (!self.hasOffer || self.offer == otherMessage.offer) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasCurrCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.currCode] hash];
  }
  if (self.hasCurrAgainst) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.currAgainst] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.price] hash];
  }
  if (self.hasChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.change] hash];
  }
  if (self.hasRange1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.range1] hash];
  }
  if (self.hasRange2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.range2] hash];
  }
  if (self.hasLast) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.last] hash];
  }
  if (self.hasOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.open] hash];
  }
  if (self.hasHigh) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.high] hash];
  }
  if (self.hasLow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.low] hash];
  }
  if (self.hasPrev) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.prev] hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.mid] hash];
  }
  if (self.hasBid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bid] hash];
  }
  if (self.hasOffer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.offer] hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiCurrency_Builder()
@property (strong) KiCurrency* result;
@end

@implementation KiCurrency_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiCurrency alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiCurrency_Builder*) clear {
  self.result = [[KiCurrency alloc] init];
  return self;
}
- (KiCurrency_Builder*) clone {
  return [KiCurrency builderWithPrototype:result];
}
- (KiCurrency*) defaultInstance {
  return [KiCurrency defaultInstance];
}
- (KiCurrency*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiCurrency*) buildPartial {
  KiCurrency* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiCurrency_Builder*) mergeFrom:(KiCurrency*) other {
  if (other == [KiCurrency defaultInstance]) {
    return self;
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasCurrCode) {
    [self setCurrCode:other.currCode];
  }
  if (other.hasCurrAgainst) {
    [self setCurrAgainst:other.currAgainst];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasChange) {
    [self setChange:other.change];
  }
  if (other.hasRange1) {
    [self setRange1:other.range1];
  }
  if (other.hasRange2) {
    [self setRange2:other.range2];
  }
  if (other.hasLast) {
    [self setLast:other.last];
  }
  if (other.hasOpen) {
    [self setOpen:other.open];
  }
  if (other.hasHigh) {
    [self setHigh:other.high];
  }
  if (other.hasLow) {
    [self setLow:other.low];
  }
  if (other.hasPrev) {
    [self setPrev:other.prev];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasBid) {
    [self setBid:other.bid];
  }
  if (other.hasOffer) {
    [self setOffer:other.offer];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiCurrency_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiCurrency_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 16: {
        [self setCurrCode:[input readInt32]];
        break;
      }
      case 24: {
        [self setCurrAgainst:[input readInt32]];
        break;
      }
      case 37: {
        [self setPrice:[input readFloat]];
        break;
      }
      case 45: {
        [self setChange:[input readFloat]];
        break;
      }
      case 61: {
        [self setRange1:[input readFloat]];
        break;
      }
      case 69: {
        [self setRange2:[input readFloat]];
        break;
      }
      case 77: {
        [self setLast:[input readFloat]];
        break;
      }
      case 85: {
        [self setOpen:[input readFloat]];
        break;
      }
      case 93: {
        [self setHigh:[input readFloat]];
        break;
      }
      case 101: {
        [self setLow:[input readFloat]];
        break;
      }
      case 109: {
        [self setPrev:[input readFloat]];
        break;
      }
      case 117: {
        [self setMid:[input readFloat]];
        break;
      }
      case 125: {
        [self setBid:[input readFloat]];
        break;
      }
      case 133: {
        [self setOffer:[input readFloat]];
        break;
      }
      case 136: {
        [self setDate:[input readInt32]];
        break;
      }
      case 144: {
        [self setTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (KiCurrency_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (KiCurrency_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasCurrCode {
  return result.hasCurrCode;
}
- (int32_t) currCode {
  return result.currCode;
}
- (KiCurrency_Builder*) setCurrCode:(int32_t) value {
  result.hasCurrCode = YES;
  result.currCode = value;
  return self;
}
- (KiCurrency_Builder*) clearCurrCode {
  result.hasCurrCode = NO;
  result.currCode = 0;
  return self;
}
- (BOOL) hasCurrAgainst {
  return result.hasCurrAgainst;
}
- (int32_t) currAgainst {
  return result.currAgainst;
}
- (KiCurrency_Builder*) setCurrAgainst:(int32_t) value {
  result.hasCurrAgainst = YES;
  result.currAgainst = value;
  return self;
}
- (KiCurrency_Builder*) clearCurrAgainst {
  result.hasCurrAgainst = NO;
  result.currAgainst = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (Float32) price {
  return result.price;
}
- (KiCurrency_Builder*) setPrice:(Float32) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (KiCurrency_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasChange {
  return result.hasChange;
}
- (Float32) change {
  return result.change;
}
- (KiCurrency_Builder*) setChange:(Float32) value {
  result.hasChange = YES;
  result.change = value;
  return self;
}
- (KiCurrency_Builder*) clearChange {
  result.hasChange = NO;
  result.change = 0;
  return self;
}
- (BOOL) hasRange1 {
  return result.hasRange1;
}
- (Float32) range1 {
  return result.range1;
}
- (KiCurrency_Builder*) setRange1:(Float32) value {
  result.hasRange1 = YES;
  result.range1 = value;
  return self;
}
- (KiCurrency_Builder*) clearRange1 {
  result.hasRange1 = NO;
  result.range1 = 0;
  return self;
}
- (BOOL) hasRange2 {
  return result.hasRange2;
}
- (Float32) range2 {
  return result.range2;
}
- (KiCurrency_Builder*) setRange2:(Float32) value {
  result.hasRange2 = YES;
  result.range2 = value;
  return self;
}
- (KiCurrency_Builder*) clearRange2 {
  result.hasRange2 = NO;
  result.range2 = 0;
  return self;
}
- (BOOL) hasLast {
  return result.hasLast;
}
- (Float32) last {
  return result.last;
}
- (KiCurrency_Builder*) setLast:(Float32) value {
  result.hasLast = YES;
  result.last = value;
  return self;
}
- (KiCurrency_Builder*) clearLast {
  result.hasLast = NO;
  result.last = 0;
  return self;
}
- (BOOL) hasOpen {
  return result.hasOpen;
}
- (Float32) open {
  return result.open;
}
- (KiCurrency_Builder*) setOpen:(Float32) value {
  result.hasOpen = YES;
  result.open = value;
  return self;
}
- (KiCurrency_Builder*) clearOpen {
  result.hasOpen = NO;
  result.open = 0;
  return self;
}
- (BOOL) hasHigh {
  return result.hasHigh;
}
- (Float32) high {
  return result.high;
}
- (KiCurrency_Builder*) setHigh:(Float32) value {
  result.hasHigh = YES;
  result.high = value;
  return self;
}
- (KiCurrency_Builder*) clearHigh {
  result.hasHigh = NO;
  result.high = 0;
  return self;
}
- (BOOL) hasLow {
  return result.hasLow;
}
- (Float32) low {
  return result.low;
}
- (KiCurrency_Builder*) setLow:(Float32) value {
  result.hasLow = YES;
  result.low = value;
  return self;
}
- (KiCurrency_Builder*) clearLow {
  result.hasLow = NO;
  result.low = 0;
  return self;
}
- (BOOL) hasPrev {
  return result.hasPrev;
}
- (Float32) prev {
  return result.prev;
}
- (KiCurrency_Builder*) setPrev:(Float32) value {
  result.hasPrev = YES;
  result.prev = value;
  return self;
}
- (KiCurrency_Builder*) clearPrev {
  result.hasPrev = NO;
  result.prev = 0;
  return self;
}
- (BOOL) hasMid {
  return result.hasMid;
}
- (Float32) mid {
  return result.mid;
}
- (KiCurrency_Builder*) setMid:(Float32) value {
  result.hasMid = YES;
  result.mid = value;
  return self;
}
- (KiCurrency_Builder*) clearMid {
  result.hasMid = NO;
  result.mid = 0;
  return self;
}
- (BOOL) hasBid {
  return result.hasBid;
}
- (Float32) bid {
  return result.bid;
}
- (KiCurrency_Builder*) setBid:(Float32) value {
  result.hasBid = YES;
  result.bid = value;
  return self;
}
- (KiCurrency_Builder*) clearBid {
  result.hasBid = NO;
  result.bid = 0;
  return self;
}
- (BOOL) hasOffer {
  return result.hasOffer;
}
- (Float32) offer {
  return result.offer;
}
- (KiCurrency_Builder*) setOffer:(Float32) value {
  result.hasOffer = YES;
  result.offer = value;
  return self;
}
- (KiCurrency_Builder*) clearOffer {
  result.hasOffer = NO;
  result.offer = 0;
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (KiCurrency_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (KiCurrency_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (KiCurrency_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (KiCurrency_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
@end

@interface IdxContractData ()
@property (strong) NSString* code;
@property (strong) NSString* name;
@property Status contractStatus;
@property (strong) NSString* contractType;
@property Float32 initialOfPremium;
@property int32_t contractSize;
@property (strong) NSString* underlying;
@property Float32 optionStrike;
@property (strong) NSString* optionVerb;
@property int64_t matDate;
@property (strong) NSString* remarks;
@property (strong) NSString* remarks2;
@end

@implementation IdxContractData

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasContractStatus {
  return !!hasContractStatus_;
}
- (void) setHasContractStatus:(BOOL) value {
  hasContractStatus_ = !!value;
}
@synthesize contractStatus;
- (BOOL) hasContractType {
  return !!hasContractType_;
}
- (void) setHasContractType:(BOOL) value {
  hasContractType_ = !!value;
}
@synthesize contractType;
- (BOOL) hasInitialOfPremium {
  return !!hasInitialOfPremium_;
}
- (void) setHasInitialOfPremium:(BOOL) value {
  hasInitialOfPremium_ = !!value;
}
@synthesize initialOfPremium;
- (BOOL) hasContractSize {
  return !!hasContractSize_;
}
- (void) setHasContractSize:(BOOL) value {
  hasContractSize_ = !!value;
}
@synthesize contractSize;
- (BOOL) hasUnderlying {
  return !!hasUnderlying_;
}
- (void) setHasUnderlying:(BOOL) value {
  hasUnderlying_ = !!value;
}
@synthesize underlying;
- (BOOL) hasOptionStrike {
  return !!hasOptionStrike_;
}
- (void) setHasOptionStrike:(BOOL) value {
  hasOptionStrike_ = !!value;
}
@synthesize optionStrike;
- (BOOL) hasOptionVerb {
  return !!hasOptionVerb_;
}
- (void) setHasOptionVerb:(BOOL) value {
  hasOptionVerb_ = !!value;
}
@synthesize optionVerb;
- (BOOL) hasMatDate {
  return !!hasMatDate_;
}
- (void) setHasMatDate:(BOOL) value {
  hasMatDate_ = !!value;
}
@synthesize matDate;
- (BOOL) hasRemarks {
  return !!hasRemarks_;
}
- (void) setHasRemarks:(BOOL) value {
  hasRemarks_ = !!value;
}
@synthesize remarks;
- (BOOL) hasRemarks2 {
  return !!hasRemarks2_;
}
- (void) setHasRemarks2:(BOOL) value {
  hasRemarks2_ = !!value;
}
@synthesize remarks2;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.name = @"";
    self.contractStatus = StatusActive;
    self.contractType = @"";
    self.initialOfPremium = 0;
    self.contractSize = 0;
    self.underlying = @"";
    self.optionStrike = 0;
    self.optionVerb = @"";
    self.matDate = 0L;
    self.remarks = @"";
    self.remarks2 = @"";
  }
  return self;
}
static IdxContractData* defaultIdxContractDataInstance = nil;
+ (void) initialize {
  if (self == [IdxContractData class]) {
    defaultIdxContractDataInstance = [[IdxContractData alloc] init];
  }
}
+ (IdxContractData*) defaultInstance {
  return defaultIdxContractDataInstance;
}
- (IdxContractData*) defaultInstance {
  return defaultIdxContractDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasContractStatus) {
    [output writeEnum:4 value:self.contractStatus];
  }
  if (self.hasContractType) {
    [output writeString:5 value:self.contractType];
  }
  if (self.hasInitialOfPremium) {
    [output writeFloat:6 value:self.initialOfPremium];
  }
  if (self.hasContractSize) {
    [output writeInt32:7 value:self.contractSize];
  }
  if (self.hasUnderlying) {
    [output writeString:8 value:self.underlying];
  }
  if (self.hasOptionStrike) {
    [output writeFloat:9 value:self.optionStrike];
  }
  if (self.hasOptionVerb) {
    [output writeString:10 value:self.optionVerb];
  }
  if (self.hasMatDate) {
    [output writeInt64:11 value:self.matDate];
  }
  if (self.hasRemarks) {
    [output writeString:12 value:self.remarks];
  }
  if (self.hasRemarks2) {
    [output writeString:13 value:self.remarks2];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasContractStatus) {
    size += computeEnumSize(4, self.contractStatus);
  }
  if (self.hasContractType) {
    size += computeStringSize(5, self.contractType);
  }
  if (self.hasInitialOfPremium) {
    size += computeFloatSize(6, self.initialOfPremium);
  }
  if (self.hasContractSize) {
    size += computeInt32Size(7, self.contractSize);
  }
  if (self.hasUnderlying) {
    size += computeStringSize(8, self.underlying);
  }
  if (self.hasOptionStrike) {
    size += computeFloatSize(9, self.optionStrike);
  }
  if (self.hasOptionVerb) {
    size += computeStringSize(10, self.optionVerb);
  }
  if (self.hasMatDate) {
    size += computeInt64Size(11, self.matDate);
  }
  if (self.hasRemarks) {
    size += computeStringSize(12, self.remarks);
  }
  if (self.hasRemarks2) {
    size += computeStringSize(13, self.remarks2);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxContractData*) parseFromData:(NSData*) data {
  return (IdxContractData*)[[[IdxContractData builder] mergeFromData:data] build];
}
+ (IdxContractData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxContractData*)[[[IdxContractData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxContractData*) parseFromInputStream:(NSInputStream*) input {
  return (IdxContractData*)[[[IdxContractData builder] mergeFromInputStream:input] build];
}
+ (IdxContractData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxContractData*)[[[IdxContractData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxContractData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxContractData*)[[[IdxContractData builder] mergeFromCodedInputStream:input] build];
}
+ (IdxContractData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxContractData*)[[[IdxContractData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxContractData_Builder*) builder {
  return [[IdxContractData_Builder alloc] init];
}
+ (IdxContractData_Builder*) builderWithPrototype:(IdxContractData*) prototype {
  return [[IdxContractData builder] mergeFrom:prototype];
}
- (IdxContractData_Builder*) builder {
  return [IdxContractData builder];
}
- (IdxContractData_Builder*) toBuilder {
  return [IdxContractData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasContractStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"contractStatus", self.contractStatus];
  }
  if (self.hasContractType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contractType", self.contractType];
  }
  if (self.hasInitialOfPremium) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialOfPremium", [NSNumber numberWithFloat:self.initialOfPremium]];
  }
  if (self.hasContractSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contractSize", [NSNumber numberWithInt:self.contractSize]];
  }
  if (self.hasUnderlying) {
    [output appendFormat:@"%@%@: %@\n", indent, @"underlying", self.underlying];
  }
  if (self.hasOptionStrike) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionStrike", [NSNumber numberWithFloat:self.optionStrike]];
  }
  if (self.hasOptionVerb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionVerb", self.optionVerb];
  }
  if (self.hasMatDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matDate", [NSNumber numberWithLongLong:self.matDate]];
  }
  if (self.hasRemarks) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remarks", self.remarks];
  }
  if (self.hasRemarks2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remarks2", self.remarks2];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxContractData class]]) {
    return NO;
  }
  IdxContractData *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasContractStatus == otherMessage.hasContractStatus &&
      (!self.hasContractStatus || self.contractStatus != otherMessage.contractStatus) &&
      self.hasContractType == otherMessage.hasContractType &&
      (!self.hasContractType || [self.contractType isEqual:otherMessage.contractType]) &&
      self.hasInitialOfPremium == otherMessage.hasInitialOfPremium &&
      (!self.hasInitialOfPremium || self.initialOfPremium == otherMessage.initialOfPremium) &&
      self.hasContractSize == otherMessage.hasContractSize &&
      (!self.hasContractSize || self.contractSize == otherMessage.contractSize) &&
      self.hasUnderlying == otherMessage.hasUnderlying &&
      (!self.hasUnderlying || [self.underlying isEqual:otherMessage.underlying]) &&
      self.hasOptionStrike == otherMessage.hasOptionStrike &&
      (!self.hasOptionStrike || self.optionStrike == otherMessage.optionStrike) &&
      self.hasOptionVerb == otherMessage.hasOptionVerb &&
      (!self.hasOptionVerb || [self.optionVerb isEqual:otherMessage.optionVerb]) &&
      self.hasMatDate == otherMessage.hasMatDate &&
      (!self.hasMatDate || self.matDate == otherMessage.matDate) &&
      self.hasRemarks == otherMessage.hasRemarks &&
      (!self.hasRemarks || [self.remarks isEqual:otherMessage.remarks]) &&
      self.hasRemarks2 == otherMessage.hasRemarks2 &&
      (!self.hasRemarks2 || [self.remarks2 isEqual:otherMessage.remarks2]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasContractStatus) {
    hashCode = hashCode * 31 + self.contractStatus;
  }
  if (self.hasContractType) {
    hashCode = hashCode * 31 + [self.contractType hash];
  }
  if (self.hasInitialOfPremium) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.initialOfPremium] hash];
  }
  if (self.hasContractSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.contractSize] hash];
  }
  if (self.hasUnderlying) {
    hashCode = hashCode * 31 + [self.underlying hash];
  }
  if (self.hasOptionStrike) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.optionStrike] hash];
  }
  if (self.hasOptionVerb) {
    hashCode = hashCode * 31 + [self.optionVerb hash];
  }
  if (self.hasMatDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.matDate] hash];
  }
  if (self.hasRemarks) {
    hashCode = hashCode * 31 + [self.remarks hash];
  }
  if (self.hasRemarks2) {
    hashCode = hashCode * 31 + [self.remarks2 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxContractData_Builder()
@property (strong) IdxContractData* result;
@end

@implementation IdxContractData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxContractData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxContractData_Builder*) clear {
  self.result = [[IdxContractData alloc] init];
  return self;
}
- (IdxContractData_Builder*) clone {
  return [IdxContractData builderWithPrototype:result];
}
- (IdxContractData*) defaultInstance {
  return [IdxContractData defaultInstance];
}
- (IdxContractData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxContractData*) buildPartial {
  IdxContractData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxContractData_Builder*) mergeFrom:(IdxContractData*) other {
  if (other == [IdxContractData defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasContractStatus) {
    [self setContractStatus:other.contractStatus];
  }
  if (other.hasContractType) {
    [self setContractType:other.contractType];
  }
  if (other.hasInitialOfPremium) {
    [self setInitialOfPremium:other.initialOfPremium];
  }
  if (other.hasContractSize) {
    [self setContractSize:other.contractSize];
  }
  if (other.hasUnderlying) {
    [self setUnderlying:other.underlying];
  }
  if (other.hasOptionStrike) {
    [self setOptionStrike:other.optionStrike];
  }
  if (other.hasOptionVerb) {
    [self setOptionVerb:other.optionVerb];
  }
  if (other.hasMatDate) {
    [self setMatDate:other.matDate];
  }
  if (other.hasRemarks) {
    [self setRemarks:other.remarks];
  }
  if (other.hasRemarks2) {
    [self setRemarks2:other.remarks2];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxContractData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxContractData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setContractStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setContractType:[input readString]];
        break;
      }
      case 53: {
        [self setInitialOfPremium:[input readFloat]];
        break;
      }
      case 56: {
        [self setContractSize:[input readInt32]];
        break;
      }
      case 66: {
        [self setUnderlying:[input readString]];
        break;
      }
      case 77: {
        [self setOptionStrike:[input readFloat]];
        break;
      }
      case 82: {
        [self setOptionVerb:[input readString]];
        break;
      }
      case 88: {
        [self setMatDate:[input readInt64]];
        break;
      }
      case 98: {
        [self setRemarks:[input readString]];
        break;
      }
      case 106: {
        [self setRemarks2:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxContractData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxContractData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (IdxContractData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (IdxContractData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasContractStatus {
  return result.hasContractStatus;
}
- (Status) contractStatus {
  return result.contractStatus;
}
- (IdxContractData_Builder*) setContractStatus:(Status) value {
  result.hasContractStatus = YES;
  result.contractStatus = value;
  return self;
}
- (IdxContractData_Builder*) clearContractStatus {
  result.hasContractStatus = NO;
  result.contractStatus = StatusActive;
  return self;
}
- (BOOL) hasContractType {
  return result.hasContractType;
}
- (NSString*) contractType {
  return result.contractType;
}
- (IdxContractData_Builder*) setContractType:(NSString*) value {
  result.hasContractType = YES;
  result.contractType = value;
  return self;
}
- (IdxContractData_Builder*) clearContractType {
  result.hasContractType = NO;
  result.contractType = @"";
  return self;
}
- (BOOL) hasInitialOfPremium {
  return result.hasInitialOfPremium;
}
- (Float32) initialOfPremium {
  return result.initialOfPremium;
}
- (IdxContractData_Builder*) setInitialOfPremium:(Float32) value {
  result.hasInitialOfPremium = YES;
  result.initialOfPremium = value;
  return self;
}
- (IdxContractData_Builder*) clearInitialOfPremium {
  result.hasInitialOfPremium = NO;
  result.initialOfPremium = 0;
  return self;
}
- (BOOL) hasContractSize {
  return result.hasContractSize;
}
- (int32_t) contractSize {
  return result.contractSize;
}
- (IdxContractData_Builder*) setContractSize:(int32_t) value {
  result.hasContractSize = YES;
  result.contractSize = value;
  return self;
}
- (IdxContractData_Builder*) clearContractSize {
  result.hasContractSize = NO;
  result.contractSize = 0;
  return self;
}
- (BOOL) hasUnderlying {
  return result.hasUnderlying;
}
- (NSString*) underlying {
  return result.underlying;
}
- (IdxContractData_Builder*) setUnderlying:(NSString*) value {
  result.hasUnderlying = YES;
  result.underlying = value;
  return self;
}
- (IdxContractData_Builder*) clearUnderlying {
  result.hasUnderlying = NO;
  result.underlying = @"";
  return self;
}
- (BOOL) hasOptionStrike {
  return result.hasOptionStrike;
}
- (Float32) optionStrike {
  return result.optionStrike;
}
- (IdxContractData_Builder*) setOptionStrike:(Float32) value {
  result.hasOptionStrike = YES;
  result.optionStrike = value;
  return self;
}
- (IdxContractData_Builder*) clearOptionStrike {
  result.hasOptionStrike = NO;
  result.optionStrike = 0;
  return self;
}
- (BOOL) hasOptionVerb {
  return result.hasOptionVerb;
}
- (NSString*) optionVerb {
  return result.optionVerb;
}
- (IdxContractData_Builder*) setOptionVerb:(NSString*) value {
  result.hasOptionVerb = YES;
  result.optionVerb = value;
  return self;
}
- (IdxContractData_Builder*) clearOptionVerb {
  result.hasOptionVerb = NO;
  result.optionVerb = @"";
  return self;
}
- (BOOL) hasMatDate {
  return result.hasMatDate;
}
- (int64_t) matDate {
  return result.matDate;
}
- (IdxContractData_Builder*) setMatDate:(int64_t) value {
  result.hasMatDate = YES;
  result.matDate = value;
  return self;
}
- (IdxContractData_Builder*) clearMatDate {
  result.hasMatDate = NO;
  result.matDate = 0L;
  return self;
}
- (BOOL) hasRemarks {
  return result.hasRemarks;
}
- (NSString*) remarks {
  return result.remarks;
}
- (IdxContractData_Builder*) setRemarks:(NSString*) value {
  result.hasRemarks = YES;
  result.remarks = value;
  return self;
}
- (IdxContractData_Builder*) clearRemarks {
  result.hasRemarks = NO;
  result.remarks = @"";
  return self;
}
- (BOOL) hasRemarks2 {
  return result.hasRemarks2;
}
- (NSString*) remarks2 {
  return result.remarks2;
}
- (IdxContractData_Builder*) setRemarks2:(NSString*) value {
  result.hasRemarks2 = YES;
  result.remarks2 = value;
  return self;
}
- (IdxContractData_Builder*) clearRemarks2 {
  result.hasRemarks2 = NO;
  result.remarks2 = @"";
  return self;
}
@end

@interface IdxStockData ()
@property (strong) NSString* code;
@property (strong) NSString* name;
@property Status securityStatus;
@property SecurityType securityType;
@property (strong) NSString* subSector;
@property Float32 ipoPrice;
@property Float32 basePrice;
@property int64_t listedShare;
@property int64_t tradeableShare;
@property int32_t sharePerLot;
@property (strong) NSString* remarks;
@property (strong) NSString* remarks2;
@end

@implementation IdxStockData

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasSecurityStatus {
  return !!hasSecurityStatus_;
}
- (void) setHasSecurityStatus:(BOOL) value {
  hasSecurityStatus_ = !!value;
}
@synthesize securityStatus;
- (BOOL) hasSecurityType {
  return !!hasSecurityType_;
}
- (void) setHasSecurityType:(BOOL) value {
  hasSecurityType_ = !!value;
}
@synthesize securityType;
- (BOOL) hasSubSector {
  return !!hasSubSector_;
}
- (void) setHasSubSector:(BOOL) value {
  hasSubSector_ = !!value;
}
@synthesize subSector;
- (BOOL) hasIpoPrice {
  return !!hasIpoPrice_;
}
- (void) setHasIpoPrice:(BOOL) value {
  hasIpoPrice_ = !!value;
}
@synthesize ipoPrice;
- (BOOL) hasBasePrice {
  return !!hasBasePrice_;
}
- (void) setHasBasePrice:(BOOL) value {
  hasBasePrice_ = !!value;
}
@synthesize basePrice;
- (BOOL) hasListedShare {
  return !!hasListedShare_;
}
- (void) setHasListedShare:(BOOL) value {
  hasListedShare_ = !!value;
}
@synthesize listedShare;
- (BOOL) hasTradeableShare {
  return !!hasTradeableShare_;
}
- (void) setHasTradeableShare:(BOOL) value {
  hasTradeableShare_ = !!value;
}
@synthesize tradeableShare;
- (BOOL) hasSharePerLot {
  return !!hasSharePerLot_;
}
- (void) setHasSharePerLot:(BOOL) value {
  hasSharePerLot_ = !!value;
}
@synthesize sharePerLot;
- (BOOL) hasRemarks {
  return !!hasRemarks_;
}
- (void) setHasRemarks:(BOOL) value {
  hasRemarks_ = !!value;
}
@synthesize remarks;
- (BOOL) hasRemarks2 {
  return !!hasRemarks2_;
}
- (void) setHasRemarks2:(BOOL) value {
  hasRemarks2_ = !!value;
}
@synthesize remarks2;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.name = @"";
    self.securityStatus = StatusActive;
    self.securityType = SecurityTypeOrdi;
    self.subSector = @"";
    self.ipoPrice = 0;
    self.basePrice = 0;
    self.listedShare = 0L;
    self.tradeableShare = 0L;
    self.sharePerLot = 0;
    self.remarks = @"";
    self.remarks2 = @"";
  }
  return self;
}
static IdxStockData* defaultIdxStockDataInstance = nil;
+ (void) initialize {
  if (self == [IdxStockData class]) {
    defaultIdxStockDataInstance = [[IdxStockData alloc] init];
  }
}
+ (IdxStockData*) defaultInstance {
  return defaultIdxStockDataInstance;
}
- (IdxStockData*) defaultInstance {
  return defaultIdxStockDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasSecurityStatus) {
    [output writeEnum:4 value:self.securityStatus];
  }
  if (self.hasSecurityType) {
    [output writeEnum:5 value:self.securityType];
  }
  if (self.hasSubSector) {
    [output writeString:6 value:self.subSector];
  }
  if (self.hasIpoPrice) {
    [output writeFloat:7 value:self.ipoPrice];
  }
  if (self.hasBasePrice) {
    [output writeFloat:8 value:self.basePrice];
  }
  if (self.hasListedShare) {
    [output writeInt64:9 value:self.listedShare];
  }
  if (self.hasTradeableShare) {
    [output writeInt64:10 value:self.tradeableShare];
  }
  if (self.hasSharePerLot) {
    [output writeInt32:11 value:self.sharePerLot];
  }
  if (self.hasRemarks) {
    [output writeString:12 value:self.remarks];
  }
  if (self.hasRemarks2) {
    [output writeString:13 value:self.remarks2];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasSecurityStatus) {
    size += computeEnumSize(4, self.securityStatus);
  }
  if (self.hasSecurityType) {
    size += computeEnumSize(5, self.securityType);
  }
  if (self.hasSubSector) {
    size += computeStringSize(6, self.subSector);
  }
  if (self.hasIpoPrice) {
    size += computeFloatSize(7, self.ipoPrice);
  }
  if (self.hasBasePrice) {
    size += computeFloatSize(8, self.basePrice);
  }
  if (self.hasListedShare) {
    size += computeInt64Size(9, self.listedShare);
  }
  if (self.hasTradeableShare) {
    size += computeInt64Size(10, self.tradeableShare);
  }
  if (self.hasSharePerLot) {
    size += computeInt32Size(11, self.sharePerLot);
  }
  if (self.hasRemarks) {
    size += computeStringSize(12, self.remarks);
  }
  if (self.hasRemarks2) {
    size += computeStringSize(13, self.remarks2);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxStockData*) parseFromData:(NSData*) data {
  return (IdxStockData*)[[[IdxStockData builder] mergeFromData:data] build];
}
+ (IdxStockData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxStockData*)[[[IdxStockData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxStockData*) parseFromInputStream:(NSInputStream*) input {
  return (IdxStockData*)[[[IdxStockData builder] mergeFromInputStream:input] build];
}
+ (IdxStockData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxStockData*)[[[IdxStockData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxStockData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxStockData*)[[[IdxStockData builder] mergeFromCodedInputStream:input] build];
}
+ (IdxStockData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxStockData*)[[[IdxStockData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxStockData_Builder*) builder {
  return [[IdxStockData_Builder alloc] init];
}
+ (IdxStockData_Builder*) builderWithPrototype:(IdxStockData*) prototype {
  return [[IdxStockData builder] mergeFrom:prototype];
}
- (IdxStockData_Builder*) builder {
  return [IdxStockData builder];
}
- (IdxStockData_Builder*) toBuilder {
  return [IdxStockData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSecurityStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"securityStatus", self.securityStatus];
  }
  if (self.hasSecurityType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"securityType", self.securityType];
  }
  if (self.hasSubSector) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subSector", self.subSector];
  }
  if (self.hasIpoPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipoPrice", [NSNumber numberWithFloat:self.ipoPrice]];
  }
  if (self.hasBasePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"basePrice", [NSNumber numberWithFloat:self.basePrice]];
  }
  if (self.hasListedShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"listedShare", [NSNumber numberWithLongLong:self.listedShare]];
  }
  if (self.hasTradeableShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeableShare", [NSNumber numberWithLongLong:self.tradeableShare]];
  }
  if (self.hasSharePerLot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sharePerLot", [NSNumber numberWithInt:self.sharePerLot]];
  }
  if (self.hasRemarks) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remarks", self.remarks];
  }
  if (self.hasRemarks2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remarks2", self.remarks2];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxStockData class]]) {
    return NO;
  }
  IdxStockData *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSecurityStatus == otherMessage.hasSecurityStatus &&
      (!self.hasSecurityStatus || self.securityStatus != otherMessage.securityStatus) &&
      self.hasSecurityType == otherMessage.hasSecurityType &&
      (!self.hasSecurityType || self.securityType != otherMessage.securityType) &&
      self.hasSubSector == otherMessage.hasSubSector &&
      (!self.hasSubSector || [self.subSector isEqual:otherMessage.subSector]) &&
      self.hasIpoPrice == otherMessage.hasIpoPrice &&
      (!self.hasIpoPrice || self.ipoPrice == otherMessage.ipoPrice) &&
      self.hasBasePrice == otherMessage.hasBasePrice &&
      (!self.hasBasePrice || self.basePrice == otherMessage.basePrice) &&
      self.hasListedShare == otherMessage.hasListedShare &&
      (!self.hasListedShare || self.listedShare == otherMessage.listedShare) &&
      self.hasTradeableShare == otherMessage.hasTradeableShare &&
      (!self.hasTradeableShare || self.tradeableShare == otherMessage.tradeableShare) &&
      self.hasSharePerLot == otherMessage.hasSharePerLot &&
      (!self.hasSharePerLot || self.sharePerLot == otherMessage.sharePerLot) &&
      self.hasRemarks == otherMessage.hasRemarks &&
      (!self.hasRemarks || [self.remarks isEqual:otherMessage.remarks]) &&
      self.hasRemarks2 == otherMessage.hasRemarks2 &&
      (!self.hasRemarks2 || [self.remarks2 isEqual:otherMessage.remarks2]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSecurityStatus) {
    hashCode = hashCode * 31 + self.securityStatus;
  }
  if (self.hasSecurityType) {
    hashCode = hashCode * 31 + self.securityType;
  }
  if (self.hasSubSector) {
    hashCode = hashCode * 31 + [self.subSector hash];
  }
  if (self.hasIpoPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.ipoPrice] hash];
  }
  if (self.hasBasePrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.basePrice] hash];
  }
  if (self.hasListedShare) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.listedShare] hash];
  }
  if (self.hasTradeableShare) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tradeableShare] hash];
  }
  if (self.hasSharePerLot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sharePerLot] hash];
  }
  if (self.hasRemarks) {
    hashCode = hashCode * 31 + [self.remarks hash];
  }
  if (self.hasRemarks2) {
    hashCode = hashCode * 31 + [self.remarks2 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxStockData_Builder()
@property (strong) IdxStockData* result;
@end

@implementation IdxStockData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxStockData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxStockData_Builder*) clear {
  self.result = [[IdxStockData alloc] init];
  return self;
}
- (IdxStockData_Builder*) clone {
  return [IdxStockData builderWithPrototype:result];
}
- (IdxStockData*) defaultInstance {
  return [IdxStockData defaultInstance];
}
- (IdxStockData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxStockData*) buildPartial {
  IdxStockData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxStockData_Builder*) mergeFrom:(IdxStockData*) other {
  if (other == [IdxStockData defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSecurityStatus) {
    [self setSecurityStatus:other.securityStatus];
  }
  if (other.hasSecurityType) {
    [self setSecurityType:other.securityType];
  }
  if (other.hasSubSector) {
    [self setSubSector:other.subSector];
  }
  if (other.hasIpoPrice) {
    [self setIpoPrice:other.ipoPrice];
  }
  if (other.hasBasePrice) {
    [self setBasePrice:other.basePrice];
  }
  if (other.hasListedShare) {
    [self setListedShare:other.listedShare];
  }
  if (other.hasTradeableShare) {
    [self setTradeableShare:other.tradeableShare];
  }
  if (other.hasSharePerLot) {
    [self setSharePerLot:other.sharePerLot];
  }
  if (other.hasRemarks) {
    [self setRemarks:other.remarks];
  }
  if (other.hasRemarks2) {
    [self setRemarks2:other.remarks2];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxStockData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxStockData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setSecurityStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (SecurityTypeIsValidValue(value)) {
          [self setSecurityType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setSubSector:[input readString]];
        break;
      }
      case 61: {
        [self setIpoPrice:[input readFloat]];
        break;
      }
      case 69: {
        [self setBasePrice:[input readFloat]];
        break;
      }
      case 72: {
        [self setListedShare:[input readInt64]];
        break;
      }
      case 80: {
        [self setTradeableShare:[input readInt64]];
        break;
      }
      case 88: {
        [self setSharePerLot:[input readInt32]];
        break;
      }
      case 98: {
        [self setRemarks:[input readString]];
        break;
      }
      case 106: {
        [self setRemarks2:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxStockData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxStockData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (IdxStockData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (IdxStockData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasSecurityStatus {
  return result.hasSecurityStatus;
}
- (Status) securityStatus {
  return result.securityStatus;
}
- (IdxStockData_Builder*) setSecurityStatus:(Status) value {
  result.hasSecurityStatus = YES;
  result.securityStatus = value;
  return self;
}
- (IdxStockData_Builder*) clearSecurityStatus {
  result.hasSecurityStatus = NO;
  result.securityStatus = StatusActive;
  return self;
}
- (BOOL) hasSecurityType {
  return result.hasSecurityType;
}
- (SecurityType) securityType {
  return result.securityType;
}
- (IdxStockData_Builder*) setSecurityType:(SecurityType) value {
  result.hasSecurityType = YES;
  result.securityType = value;
  return self;
}
- (IdxStockData_Builder*) clearSecurityType {
  result.hasSecurityType = NO;
  result.securityType = SecurityTypeOrdi;
  return self;
}
- (BOOL) hasSubSector {
  return result.hasSubSector;
}
- (NSString*) subSector {
  return result.subSector;
}
- (IdxStockData_Builder*) setSubSector:(NSString*) value {
  result.hasSubSector = YES;
  result.subSector = value;
  return self;
}
- (IdxStockData_Builder*) clearSubSector {
  result.hasSubSector = NO;
  result.subSector = @"";
  return self;
}
- (BOOL) hasIpoPrice {
  return result.hasIpoPrice;
}
- (Float32) ipoPrice {
  return result.ipoPrice;
}
- (IdxStockData_Builder*) setIpoPrice:(Float32) value {
  result.hasIpoPrice = YES;
  result.ipoPrice = value;
  return self;
}
- (IdxStockData_Builder*) clearIpoPrice {
  result.hasIpoPrice = NO;
  result.ipoPrice = 0;
  return self;
}
- (BOOL) hasBasePrice {
  return result.hasBasePrice;
}
- (Float32) basePrice {
  return result.basePrice;
}
- (IdxStockData_Builder*) setBasePrice:(Float32) value {
  result.hasBasePrice = YES;
  result.basePrice = value;
  return self;
}
- (IdxStockData_Builder*) clearBasePrice {
  result.hasBasePrice = NO;
  result.basePrice = 0;
  return self;
}
- (BOOL) hasListedShare {
  return result.hasListedShare;
}
- (int64_t) listedShare {
  return result.listedShare;
}
- (IdxStockData_Builder*) setListedShare:(int64_t) value {
  result.hasListedShare = YES;
  result.listedShare = value;
  return self;
}
- (IdxStockData_Builder*) clearListedShare {
  result.hasListedShare = NO;
  result.listedShare = 0L;
  return self;
}
- (BOOL) hasTradeableShare {
  return result.hasTradeableShare;
}
- (int64_t) tradeableShare {
  return result.tradeableShare;
}
- (IdxStockData_Builder*) setTradeableShare:(int64_t) value {
  result.hasTradeableShare = YES;
  result.tradeableShare = value;
  return self;
}
- (IdxStockData_Builder*) clearTradeableShare {
  result.hasTradeableShare = NO;
  result.tradeableShare = 0L;
  return self;
}
- (BOOL) hasSharePerLot {
  return result.hasSharePerLot;
}
- (int32_t) sharePerLot {
  return result.sharePerLot;
}
- (IdxStockData_Builder*) setSharePerLot:(int32_t) value {
  result.hasSharePerLot = YES;
  result.sharePerLot = value;
  return self;
}
- (IdxStockData_Builder*) clearSharePerLot {
  result.hasSharePerLot = NO;
  result.sharePerLot = 0;
  return self;
}
- (BOOL) hasRemarks {
  return result.hasRemarks;
}
- (NSString*) remarks {
  return result.remarks;
}
- (IdxStockData_Builder*) setRemarks:(NSString*) value {
  result.hasRemarks = YES;
  result.remarks = value;
  return self;
}
- (IdxStockData_Builder*) clearRemarks {
  result.hasRemarks = NO;
  result.remarks = @"";
  return self;
}
- (BOOL) hasRemarks2 {
  return result.hasRemarks2;
}
- (NSString*) remarks2 {
  return result.remarks2;
}
- (IdxStockData_Builder*) setRemarks2:(NSString*) value {
  result.hasRemarks2 = YES;
  result.remarks2 = value;
  return self;
}
- (IdxStockData_Builder*) clearRemarks2 {
  result.hasRemarks2 = NO;
  result.remarks2 = @"";
  return self;
}
@end

@interface KiStockData ()
@property int32_t id;
@property (strong) NSString* code;
@property (strong) NSString* name;
@property Status status;
@property int32_t subSector;
@property int32_t clientType;
@property (strong) NSString* board;
@property (strong) NSString* color;
@property Float32 ipoPrice;
@property SecurityType securityType;
@property int32_t shEnable;
@property Float32 shTotalTarget;
@property (strong) NSString* type;
@end

@implementation KiStockData

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasSubSector {
  return !!hasSubSector_;
}
- (void) setHasSubSector:(BOOL) value {
  hasSubSector_ = !!value;
}
@synthesize subSector;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) value {
  hasClientType_ = !!value;
}
@synthesize clientType;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasIpoPrice {
  return !!hasIpoPrice_;
}
- (void) setHasIpoPrice:(BOOL) value {
  hasIpoPrice_ = !!value;
}
@synthesize ipoPrice;
- (BOOL) hasSecurityType {
  return !!hasSecurityType_;
}
- (void) setHasSecurityType:(BOOL) value {
  hasSecurityType_ = !!value;
}
@synthesize securityType;
- (BOOL) hasShEnable {
  return !!hasShEnable_;
}
- (void) setHasShEnable:(BOOL) value {
  hasShEnable_ = !!value;
}
@synthesize shEnable;
- (BOOL) hasShTotalTarget {
  return !!hasShTotalTarget_;
}
- (void) setHasShTotalTarget:(BOOL) value {
  hasShTotalTarget_ = !!value;
}
@synthesize shTotalTarget;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.code = @"";
    self.name = @"";
    self.status = StatusActive;
    self.subSector = 0;
    self.clientType = 0;
    self.board = @"";
    self.color = @"";
    self.ipoPrice = 0;
    self.securityType = SecurityTypeOrdi;
    self.shEnable = 0;
    self.shTotalTarget = 0;
    self.type = @"";
  }
  return self;
}
static KiStockData* defaultKiStockDataInstance = nil;
+ (void) initialize {
  if (self == [KiStockData class]) {
    defaultKiStockDataInstance = [[KiStockData alloc] init];
  }
}
+ (KiStockData*) defaultInstance {
  return defaultKiStockDataInstance;
}
- (KiStockData*) defaultInstance {
  return defaultKiStockDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasStatus) {
    [output writeEnum:4 value:self.status];
  }
  if (self.hasSubSector) {
    [output writeInt32:5 value:self.subSector];
  }
  if (self.hasClientType) {
    [output writeInt32:6 value:self.clientType];
  }
  if (self.hasBoard) {
    [output writeString:7 value:self.board];
  }
  if (self.hasColor) {
    [output writeString:8 value:self.color];
  }
  if (self.hasIpoPrice) {
    [output writeFloat:9 value:self.ipoPrice];
  }
  if (self.hasSecurityType) {
    [output writeEnum:10 value:self.securityType];
  }
  if (self.hasShEnable) {
    [output writeInt32:11 value:self.shEnable];
  }
  if (self.hasShTotalTarget) {
    [output writeFloat:12 value:self.shTotalTarget];
  }
  if (self.hasType) {
    [output writeString:13 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasStatus) {
    size += computeEnumSize(4, self.status);
  }
  if (self.hasSubSector) {
    size += computeInt32Size(5, self.subSector);
  }
  if (self.hasClientType) {
    size += computeInt32Size(6, self.clientType);
  }
  if (self.hasBoard) {
    size += computeStringSize(7, self.board);
  }
  if (self.hasColor) {
    size += computeStringSize(8, self.color);
  }
  if (self.hasIpoPrice) {
    size += computeFloatSize(9, self.ipoPrice);
  }
  if (self.hasSecurityType) {
    size += computeEnumSize(10, self.securityType);
  }
  if (self.hasShEnable) {
    size += computeInt32Size(11, self.shEnable);
  }
  if (self.hasShTotalTarget) {
    size += computeFloatSize(12, self.shTotalTarget);
  }
  if (self.hasType) {
    size += computeStringSize(13, self.type);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiStockData*) parseFromData:(NSData*) data {
  return (KiStockData*)[[[KiStockData builder] mergeFromData:data] build];
}
+ (KiStockData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiStockData*)[[[KiStockData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiStockData*) parseFromInputStream:(NSInputStream*) input {
  return (KiStockData*)[[[KiStockData builder] mergeFromInputStream:input] build];
}
+ (KiStockData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiStockData*)[[[KiStockData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiStockData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiStockData*)[[[KiStockData builder] mergeFromCodedInputStream:input] build];
}
+ (KiStockData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiStockData*)[[[KiStockData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiStockData_Builder*) builder {
  return [[KiStockData_Builder alloc] init];
}
+ (KiStockData_Builder*) builderWithPrototype:(KiStockData*) prototype {
  return [[KiStockData builder] mergeFrom:prototype];
}
- (KiStockData_Builder*) builder {
  return [KiStockData builder];
}
- (KiStockData_Builder*) toBuilder {
  return [KiStockData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasSubSector) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subSector", [NSNumber numberWithInt:self.subSector]];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", [NSNumber numberWithInt:self.clientType]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"board", self.board];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", self.color];
  }
  if (self.hasIpoPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipoPrice", [NSNumber numberWithFloat:self.ipoPrice]];
  }
  if (self.hasSecurityType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"securityType", self.securityType];
  }
  if (self.hasShEnable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shEnable", [NSNumber numberWithInt:self.shEnable]];
  }
  if (self.hasShTotalTarget) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shTotalTarget", [NSNumber numberWithFloat:self.shTotalTarget]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiStockData class]]) {
    return NO;
  }
  KiStockData *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      self.hasSubSector == otherMessage.hasSubSector &&
      (!self.hasSubSector || self.subSector == otherMessage.subSector) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || [self.board isEqual:otherMessage.board]) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || [self.color isEqual:otherMessage.color]) &&
      self.hasIpoPrice == otherMessage.hasIpoPrice &&
      (!self.hasIpoPrice || self.ipoPrice == otherMessage.ipoPrice) &&
      self.hasSecurityType == otherMessage.hasSecurityType &&
      (!self.hasSecurityType || self.securityType != otherMessage.securityType) &&
      self.hasShEnable == otherMessage.hasShEnable &&
      (!self.hasShEnable || self.shEnable == otherMessage.shEnable) &&
      self.hasShTotalTarget == otherMessage.hasShTotalTarget &&
      (!self.hasShTotalTarget || self.shTotalTarget == otherMessage.shTotalTarget) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasSubSector) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.subSector] hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientType] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + [self.board hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [self.color hash];
  }
  if (self.hasIpoPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.ipoPrice] hash];
  }
  if (self.hasSecurityType) {
    hashCode = hashCode * 31 + self.securityType;
  }
  if (self.hasShEnable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.shEnable] hash];
  }
  if (self.hasShTotalTarget) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.shTotalTarget] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiStockData_Builder()
@property (strong) KiStockData* result;
@end

@implementation KiStockData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiStockData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiStockData_Builder*) clear {
  self.result = [[KiStockData alloc] init];
  return self;
}
- (KiStockData_Builder*) clone {
  return [KiStockData builderWithPrototype:result];
}
- (KiStockData*) defaultInstance {
  return [KiStockData defaultInstance];
}
- (KiStockData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiStockData*) buildPartial {
  KiStockData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiStockData_Builder*) mergeFrom:(KiStockData*) other {
  if (other == [KiStockData defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasSubSector) {
    [self setSubSector:other.subSector];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasIpoPrice) {
    [self setIpoPrice:other.ipoPrice];
  }
  if (other.hasSecurityType) {
    [self setSecurityType:other.securityType];
  }
  if (other.hasShEnable) {
    [self setShEnable:other.shEnable];
  }
  if (other.hasShTotalTarget) {
    [self setShTotalTarget:other.shTotalTarget];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiStockData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiStockData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setSubSector:[input readInt32]];
        break;
      }
      case 48: {
        [self setClientType:[input readInt32]];
        break;
      }
      case 58: {
        [self setBoard:[input readString]];
        break;
      }
      case 66: {
        [self setColor:[input readString]];
        break;
      }
      case 77: {
        [self setIpoPrice:[input readFloat]];
        break;
      }
      case 80: {
        int32_t value = [input readEnum];
        if (SecurityTypeIsValidValue(value)) {
          [self setSecurityType:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        [self setShEnable:[input readInt32]];
        break;
      }
      case 101: {
        [self setShTotalTarget:[input readFloat]];
        break;
      }
      case 106: {
        [self setType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (KiStockData_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (KiStockData_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (KiStockData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (KiStockData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (KiStockData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (KiStockData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (Status) status {
  return result.status;
}
- (KiStockData_Builder*) setStatus:(Status) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (KiStockData_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = StatusActive;
  return self;
}
- (BOOL) hasSubSector {
  return result.hasSubSector;
}
- (int32_t) subSector {
  return result.subSector;
}
- (KiStockData_Builder*) setSubSector:(int32_t) value {
  result.hasSubSector = YES;
  result.subSector = value;
  return self;
}
- (KiStockData_Builder*) clearSubSector {
  result.hasSubSector = NO;
  result.subSector = 0;
  return self;
}
- (BOOL) hasClientType {
  return result.hasClientType;
}
- (int32_t) clientType {
  return result.clientType;
}
- (KiStockData_Builder*) setClientType:(int32_t) value {
  result.hasClientType = YES;
  result.clientType = value;
  return self;
}
- (KiStockData_Builder*) clearClientType {
  result.hasClientType = NO;
  result.clientType = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (NSString*) board {
  return result.board;
}
- (KiStockData_Builder*) setBoard:(NSString*) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (KiStockData_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = @"";
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (NSString*) color {
  return result.color;
}
- (KiStockData_Builder*) setColor:(NSString*) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (KiStockData_Builder*) clearColor {
  result.hasColor = NO;
  result.color = @"";
  return self;
}
- (BOOL) hasIpoPrice {
  return result.hasIpoPrice;
}
- (Float32) ipoPrice {
  return result.ipoPrice;
}
- (KiStockData_Builder*) setIpoPrice:(Float32) value {
  result.hasIpoPrice = YES;
  result.ipoPrice = value;
  return self;
}
- (KiStockData_Builder*) clearIpoPrice {
  result.hasIpoPrice = NO;
  result.ipoPrice = 0;
  return self;
}
- (BOOL) hasSecurityType {
  return result.hasSecurityType;
}
- (SecurityType) securityType {
  return result.securityType;
}
- (KiStockData_Builder*) setSecurityType:(SecurityType) value {
  result.hasSecurityType = YES;
  result.securityType = value;
  return self;
}
- (KiStockData_Builder*) clearSecurityType {
  result.hasSecurityType = NO;
  result.securityType = SecurityTypeOrdi;
  return self;
}
- (BOOL) hasShEnable {
  return result.hasShEnable;
}
- (int32_t) shEnable {
  return result.shEnable;
}
- (KiStockData_Builder*) setShEnable:(int32_t) value {
  result.hasShEnable = YES;
  result.shEnable = value;
  return self;
}
- (KiStockData_Builder*) clearShEnable {
  result.hasShEnable = NO;
  result.shEnable = 0;
  return self;
}
- (BOOL) hasShTotalTarget {
  return result.hasShTotalTarget;
}
- (Float32) shTotalTarget {
  return result.shTotalTarget;
}
- (KiStockData_Builder*) setShTotalTarget:(Float32) value {
  result.hasShTotalTarget = YES;
  result.shTotalTarget = value;
  return self;
}
- (KiStockData_Builder*) clearShTotalTarget {
  result.hasShTotalTarget = NO;
  result.shTotalTarget = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (KiStockData_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (KiStockData_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
@end

@interface IdxContractSummary ()
@property (strong) NSString* code;
@property (strong) StockSummary* contractSummary;
@property int32_t sequence;
@property Float32 avgPrice;
@property Status secboardState;
@property Float32 settlementPrice;
@property Float32 refferencePrice;
@end

@implementation IdxContractSummary

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasContractSummary {
  return !!hasContractSummary_;
}
- (void) setHasContractSummary:(BOOL) value {
  hasContractSummary_ = !!value;
}
@synthesize contractSummary;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasAvgPrice {
  return !!hasAvgPrice_;
}
- (void) setHasAvgPrice:(BOOL) value {
  hasAvgPrice_ = !!value;
}
@synthesize avgPrice;
- (BOOL) hasSecboardState {
  return !!hasSecboardState_;
}
- (void) setHasSecboardState:(BOOL) value {
  hasSecboardState_ = !!value;
}
@synthesize secboardState;
- (BOOL) hasSettlementPrice {
  return !!hasSettlementPrice_;
}
- (void) setHasSettlementPrice:(BOOL) value {
  hasSettlementPrice_ = !!value;
}
@synthesize settlementPrice;
- (BOOL) hasRefferencePrice {
  return !!hasRefferencePrice_;
}
- (void) setHasRefferencePrice:(BOOL) value {
  hasRefferencePrice_ = !!value;
}
@synthesize refferencePrice;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.contractSummary = [StockSummary defaultInstance];
    self.sequence = 0;
    self.avgPrice = 0;
    self.secboardState = StatusActive;
    self.settlementPrice = 0;
    self.refferencePrice = 0;
  }
  return self;
}
static IdxContractSummary* defaultIdxContractSummaryInstance = nil;
+ (void) initialize {
  if (self == [IdxContractSummary class]) {
    defaultIdxContractSummaryInstance = [[IdxContractSummary alloc] init];
  }
}
+ (IdxContractSummary*) defaultInstance {
  return defaultIdxContractSummaryInstance;
}
- (IdxContractSummary*) defaultInstance {
  return defaultIdxContractSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasContractSummary) {
    [output writeMessage:2 value:self.contractSummary];
  }
  if (self.hasSequence) {
    [output writeInt32:3 value:self.sequence];
  }
  if (self.hasAvgPrice) {
    [output writeFloat:4 value:self.avgPrice];
  }
  if (self.hasSecboardState) {
    [output writeEnum:5 value:self.secboardState];
  }
  if (self.hasSettlementPrice) {
    [output writeFloat:6 value:self.settlementPrice];
  }
  if (self.hasRefferencePrice) {
    [output writeFloat:7 value:self.refferencePrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasContractSummary) {
    size += computeMessageSize(2, self.contractSummary);
  }
  if (self.hasSequence) {
    size += computeInt32Size(3, self.sequence);
  }
  if (self.hasAvgPrice) {
    size += computeFloatSize(4, self.avgPrice);
  }
  if (self.hasSecboardState) {
    size += computeEnumSize(5, self.secboardState);
  }
  if (self.hasSettlementPrice) {
    size += computeFloatSize(6, self.settlementPrice);
  }
  if (self.hasRefferencePrice) {
    size += computeFloatSize(7, self.refferencePrice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxContractSummary*) parseFromData:(NSData*) data {
  return (IdxContractSummary*)[[[IdxContractSummary builder] mergeFromData:data] build];
}
+ (IdxContractSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxContractSummary*)[[[IdxContractSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxContractSummary*) parseFromInputStream:(NSInputStream*) input {
  return (IdxContractSummary*)[[[IdxContractSummary builder] mergeFromInputStream:input] build];
}
+ (IdxContractSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxContractSummary*)[[[IdxContractSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxContractSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxContractSummary*)[[[IdxContractSummary builder] mergeFromCodedInputStream:input] build];
}
+ (IdxContractSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxContractSummary*)[[[IdxContractSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxContractSummary_Builder*) builder {
  return [[IdxContractSummary_Builder alloc] init];
}
+ (IdxContractSummary_Builder*) builderWithPrototype:(IdxContractSummary*) prototype {
  return [[IdxContractSummary builder] mergeFrom:prototype];
}
- (IdxContractSummary_Builder*) builder {
  return [IdxContractSummary builder];
}
- (IdxContractSummary_Builder*) toBuilder {
  return [IdxContractSummary builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasContractSummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"contractSummary"];
    [self.contractSummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasAvgPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avgPrice", [NSNumber numberWithFloat:self.avgPrice]];
  }
  if (self.hasSecboardState) {
    [output appendFormat:@"%@%@: %d\n", indent, @"secboardState", self.secboardState];
  }
  if (self.hasSettlementPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"settlementPrice", [NSNumber numberWithFloat:self.settlementPrice]];
  }
  if (self.hasRefferencePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refferencePrice", [NSNumber numberWithFloat:self.refferencePrice]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxContractSummary class]]) {
    return NO;
  }
  IdxContractSummary *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasContractSummary == otherMessage.hasContractSummary &&
      (!self.hasContractSummary || [self.contractSummary isEqual:otherMessage.contractSummary]) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasAvgPrice == otherMessage.hasAvgPrice &&
      (!self.hasAvgPrice || self.avgPrice == otherMessage.avgPrice) &&
      self.hasSecboardState == otherMessage.hasSecboardState &&
      (!self.hasSecboardState || self.secboardState != otherMessage.secboardState) &&
      self.hasSettlementPrice == otherMessage.hasSettlementPrice &&
      (!self.hasSettlementPrice || self.settlementPrice == otherMessage.settlementPrice) &&
      self.hasRefferencePrice == otherMessage.hasRefferencePrice &&
      (!self.hasRefferencePrice || self.refferencePrice == otherMessage.refferencePrice) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasContractSummary) {
    hashCode = hashCode * 31 + [self.contractSummary hash];
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasAvgPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.avgPrice] hash];
  }
  if (self.hasSecboardState) {
    hashCode = hashCode * 31 + self.secboardState;
  }
  if (self.hasSettlementPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.settlementPrice] hash];
  }
  if (self.hasRefferencePrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.refferencePrice] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxContractSummary_Builder()
@property (strong) IdxContractSummary* result;
@end

@implementation IdxContractSummary_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxContractSummary alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxContractSummary_Builder*) clear {
  self.result = [[IdxContractSummary alloc] init];
  return self;
}
- (IdxContractSummary_Builder*) clone {
  return [IdxContractSummary builderWithPrototype:result];
}
- (IdxContractSummary*) defaultInstance {
  return [IdxContractSummary defaultInstance];
}
- (IdxContractSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxContractSummary*) buildPartial {
  IdxContractSummary* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxContractSummary_Builder*) mergeFrom:(IdxContractSummary*) other {
  if (other == [IdxContractSummary defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasContractSummary) {
    [self mergeContractSummary:other.contractSummary];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasAvgPrice) {
    [self setAvgPrice:other.avgPrice];
  }
  if (other.hasSecboardState) {
    [self setSecboardState:other.secboardState];
  }
  if (other.hasSettlementPrice) {
    [self setSettlementPrice:other.settlementPrice];
  }
  if (other.hasRefferencePrice) {
    [self setRefferencePrice:other.refferencePrice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxContractSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxContractSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        StockSummary_Builder* subBuilder = [StockSummary builder];
        if (self.hasContractSummary) {
          [subBuilder mergeFrom:self.contractSummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContractSummary:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 37: {
        [self setAvgPrice:[input readFloat]];
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setSecboardState:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 53: {
        [self setSettlementPrice:[input readFloat]];
        break;
      }
      case 61: {
        [self setRefferencePrice:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxContractSummary_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxContractSummary_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasContractSummary {
  return result.hasContractSummary;
}
- (StockSummary*) contractSummary {
  return result.contractSummary;
}
- (IdxContractSummary_Builder*) setContractSummary:(StockSummary*) value {
  result.hasContractSummary = YES;
  result.contractSummary = value;
  return self;
}
- (IdxContractSummary_Builder*) setContractSummaryBuilder:(StockSummary_Builder*) builderForValue {
  return [self setContractSummary:[builderForValue build]];
}
- (IdxContractSummary_Builder*) mergeContractSummary:(StockSummary*) value {
  if (result.hasContractSummary &&
      result.contractSummary != [StockSummary defaultInstance]) {
    result.contractSummary =
      [[[StockSummary builderWithPrototype:result.contractSummary] mergeFrom:value] buildPartial];
  } else {
    result.contractSummary = value;
  }
  result.hasContractSummary = YES;
  return self;
}
- (IdxContractSummary_Builder*) clearContractSummary {
  result.hasContractSummary = NO;
  result.contractSummary = [StockSummary defaultInstance];
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (IdxContractSummary_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (IdxContractSummary_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasAvgPrice {
  return result.hasAvgPrice;
}
- (Float32) avgPrice {
  return result.avgPrice;
}
- (IdxContractSummary_Builder*) setAvgPrice:(Float32) value {
  result.hasAvgPrice = YES;
  result.avgPrice = value;
  return self;
}
- (IdxContractSummary_Builder*) clearAvgPrice {
  result.hasAvgPrice = NO;
  result.avgPrice = 0;
  return self;
}
- (BOOL) hasSecboardState {
  return result.hasSecboardState;
}
- (Status) secboardState {
  return result.secboardState;
}
- (IdxContractSummary_Builder*) setSecboardState:(Status) value {
  result.hasSecboardState = YES;
  result.secboardState = value;
  return self;
}
- (IdxContractSummary_Builder*) clearSecboardState {
  result.hasSecboardState = NO;
  result.secboardState = StatusActive;
  return self;
}
- (BOOL) hasSettlementPrice {
  return result.hasSettlementPrice;
}
- (Float32) settlementPrice {
  return result.settlementPrice;
}
- (IdxContractSummary_Builder*) setSettlementPrice:(Float32) value {
  result.hasSettlementPrice = YES;
  result.settlementPrice = value;
  return self;
}
- (IdxContractSummary_Builder*) clearSettlementPrice {
  result.hasSettlementPrice = NO;
  result.settlementPrice = 0;
  return self;
}
- (BOOL) hasRefferencePrice {
  return result.hasRefferencePrice;
}
- (Float32) refferencePrice {
  return result.refferencePrice;
}
- (IdxContractSummary_Builder*) setRefferencePrice:(Float32) value {
  result.hasRefferencePrice = YES;
  result.refferencePrice = value;
  return self;
}
- (IdxContractSummary_Builder*) clearRefferencePrice {
  result.hasRefferencePrice = NO;
  result.refferencePrice = 0;
  return self;
}
@end

@interface IdxStockSummary ()
@property (strong) NSString* code;
@property Float32 individualIndex;
@property int64_t availableForForeigners;
@property Status secboardState;
@property (strong) StockSummary* stockSummary;
@property int32_t sequence;
@end

@implementation IdxStockSummary

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasIndividualIndex {
  return !!hasIndividualIndex_;
}
- (void) setHasIndividualIndex:(BOOL) value {
  hasIndividualIndex_ = !!value;
}
@synthesize individualIndex;
- (BOOL) hasAvailableForForeigners {
  return !!hasAvailableForForeigners_;
}
- (void) setHasAvailableForForeigners:(BOOL) value {
  hasAvailableForForeigners_ = !!value;
}
@synthesize availableForForeigners;
- (BOOL) hasSecboardState {
  return !!hasSecboardState_;
}
- (void) setHasSecboardState:(BOOL) value {
  hasSecboardState_ = !!value;
}
@synthesize secboardState;
- (BOOL) hasStockSummary {
  return !!hasStockSummary_;
}
- (void) setHasStockSummary:(BOOL) value {
  hasStockSummary_ = !!value;
}
@synthesize stockSummary;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.individualIndex = 0;
    self.availableForForeigners = 0L;
    self.secboardState = StatusActive;
    self.stockSummary = [StockSummary defaultInstance];
    self.sequence = 0;
  }
  return self;
}
static IdxStockSummary* defaultIdxStockSummaryInstance = nil;
+ (void) initialize {
  if (self == [IdxStockSummary class]) {
    defaultIdxStockSummaryInstance = [[IdxStockSummary alloc] init];
  }
}
+ (IdxStockSummary*) defaultInstance {
  return defaultIdxStockSummaryInstance;
}
- (IdxStockSummary*) defaultInstance {
  return defaultIdxStockSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasIndividualIndex) {
    [output writeFloat:2 value:self.individualIndex];
  }
  if (self.hasAvailableForForeigners) {
    [output writeInt64:3 value:self.availableForForeigners];
  }
  if (self.hasSecboardState) {
    [output writeEnum:4 value:self.secboardState];
  }
  if (self.hasStockSummary) {
    [output writeMessage:5 value:self.stockSummary];
  }
  if (self.hasSequence) {
    [output writeInt32:6 value:self.sequence];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasIndividualIndex) {
    size += computeFloatSize(2, self.individualIndex);
  }
  if (self.hasAvailableForForeigners) {
    size += computeInt64Size(3, self.availableForForeigners);
  }
  if (self.hasSecboardState) {
    size += computeEnumSize(4, self.secboardState);
  }
  if (self.hasStockSummary) {
    size += computeMessageSize(5, self.stockSummary);
  }
  if (self.hasSequence) {
    size += computeInt32Size(6, self.sequence);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxStockSummary*) parseFromData:(NSData*) data {
  return (IdxStockSummary*)[[[IdxStockSummary builder] mergeFromData:data] build];
}
+ (IdxStockSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxStockSummary*)[[[IdxStockSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxStockSummary*) parseFromInputStream:(NSInputStream*) input {
  return (IdxStockSummary*)[[[IdxStockSummary builder] mergeFromInputStream:input] build];
}
+ (IdxStockSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxStockSummary*)[[[IdxStockSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxStockSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxStockSummary*)[[[IdxStockSummary builder] mergeFromCodedInputStream:input] build];
}
+ (IdxStockSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxStockSummary*)[[[IdxStockSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxStockSummary_Builder*) builder {
  return [[IdxStockSummary_Builder alloc] init];
}
+ (IdxStockSummary_Builder*) builderWithPrototype:(IdxStockSummary*) prototype {
  return [[IdxStockSummary builder] mergeFrom:prototype];
}
- (IdxStockSummary_Builder*) builder {
  return [IdxStockSummary builder];
}
- (IdxStockSummary_Builder*) toBuilder {
  return [IdxStockSummary builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasIndividualIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"individualIndex", [NSNumber numberWithFloat:self.individualIndex]];
  }
  if (self.hasAvailableForForeigners) {
    [output appendFormat:@"%@%@: %@\n", indent, @"availableForForeigners", [NSNumber numberWithLongLong:self.availableForForeigners]];
  }
  if (self.hasSecboardState) {
    [output appendFormat:@"%@%@: %d\n", indent, @"secboardState", self.secboardState];
  }
  if (self.hasStockSummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockSummary"];
    [self.stockSummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxStockSummary class]]) {
    return NO;
  }
  IdxStockSummary *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasIndividualIndex == otherMessage.hasIndividualIndex &&
      (!self.hasIndividualIndex || self.individualIndex == otherMessage.individualIndex) &&
      self.hasAvailableForForeigners == otherMessage.hasAvailableForForeigners &&
      (!self.hasAvailableForForeigners || self.availableForForeigners == otherMessage.availableForForeigners) &&
      self.hasSecboardState == otherMessage.hasSecboardState &&
      (!self.hasSecboardState || self.secboardState != otherMessage.secboardState) &&
      self.hasStockSummary == otherMessage.hasStockSummary &&
      (!self.hasStockSummary || [self.stockSummary isEqual:otherMessage.stockSummary]) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasIndividualIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.individualIndex] hash];
  }
  if (self.hasAvailableForForeigners) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.availableForForeigners] hash];
  }
  if (self.hasSecboardState) {
    hashCode = hashCode * 31 + self.secboardState;
  }
  if (self.hasStockSummary) {
    hashCode = hashCode * 31 + [self.stockSummary hash];
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxStockSummary_Builder()
@property (strong) IdxStockSummary* result;
@end

@implementation IdxStockSummary_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxStockSummary alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxStockSummary_Builder*) clear {
  self.result = [[IdxStockSummary alloc] init];
  return self;
}
- (IdxStockSummary_Builder*) clone {
  return [IdxStockSummary builderWithPrototype:result];
}
- (IdxStockSummary*) defaultInstance {
  return [IdxStockSummary defaultInstance];
}
- (IdxStockSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxStockSummary*) buildPartial {
  IdxStockSummary* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxStockSummary_Builder*) mergeFrom:(IdxStockSummary*) other {
  if (other == [IdxStockSummary defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasIndividualIndex) {
    [self setIndividualIndex:other.individualIndex];
  }
  if (other.hasAvailableForForeigners) {
    [self setAvailableForForeigners:other.availableForForeigners];
  }
  if (other.hasSecboardState) {
    [self setSecboardState:other.secboardState];
  }
  if (other.hasStockSummary) {
    [self mergeStockSummary:other.stockSummary];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxStockSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxStockSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 21: {
        [self setIndividualIndex:[input readFloat]];
        break;
      }
      case 24: {
        [self setAvailableForForeigners:[input readInt64]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setSecboardState:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        StockSummary_Builder* subBuilder = [StockSummary builder];
        if (self.hasStockSummary) {
          [subBuilder mergeFrom:self.stockSummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockSummary:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setSequence:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxStockSummary_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxStockSummary_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasIndividualIndex {
  return result.hasIndividualIndex;
}
- (Float32) individualIndex {
  return result.individualIndex;
}
- (IdxStockSummary_Builder*) setIndividualIndex:(Float32) value {
  result.hasIndividualIndex = YES;
  result.individualIndex = value;
  return self;
}
- (IdxStockSummary_Builder*) clearIndividualIndex {
  result.hasIndividualIndex = NO;
  result.individualIndex = 0;
  return self;
}
- (BOOL) hasAvailableForForeigners {
  return result.hasAvailableForForeigners;
}
- (int64_t) availableForForeigners {
  return result.availableForForeigners;
}
- (IdxStockSummary_Builder*) setAvailableForForeigners:(int64_t) value {
  result.hasAvailableForForeigners = YES;
  result.availableForForeigners = value;
  return self;
}
- (IdxStockSummary_Builder*) clearAvailableForForeigners {
  result.hasAvailableForForeigners = NO;
  result.availableForForeigners = 0L;
  return self;
}
- (BOOL) hasSecboardState {
  return result.hasSecboardState;
}
- (Status) secboardState {
  return result.secboardState;
}
- (IdxStockSummary_Builder*) setSecboardState:(Status) value {
  result.hasSecboardState = YES;
  result.secboardState = value;
  return self;
}
- (IdxStockSummary_Builder*) clearSecboardState {
  result.hasSecboardState = NO;
  result.secboardState = StatusActive;
  return self;
}
- (BOOL) hasStockSummary {
  return result.hasStockSummary;
}
- (StockSummary*) stockSummary {
  return result.stockSummary;
}
- (IdxStockSummary_Builder*) setStockSummary:(StockSummary*) value {
  result.hasStockSummary = YES;
  result.stockSummary = value;
  return self;
}
- (IdxStockSummary_Builder*) setStockSummaryBuilder:(StockSummary_Builder*) builderForValue {
  return [self setStockSummary:[builderForValue build]];
}
- (IdxStockSummary_Builder*) mergeStockSummary:(StockSummary*) value {
  if (result.hasStockSummary &&
      result.stockSummary != [StockSummary defaultInstance]) {
    result.stockSummary =
      [[[StockSummary builderWithPrototype:result.stockSummary] mergeFrom:value] buildPartial];
  } else {
    result.stockSummary = value;
  }
  result.hasStockSummary = YES;
  return self;
}
- (IdxStockSummary_Builder*) clearStockSummary {
  result.hasStockSummary = NO;
  result.stockSummary = [StockSummary defaultInstance];
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (IdxStockSummary_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (IdxStockSummary_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
@end

@interface KiStockSummary ()
@property int32_t codeId;
@property int32_t lastVolume;
@property (strong) StockSummary* stockSummary;
@property int64_t foreignBought;
@property int64_t foreignSold;
@property int64_t domesticBought;
@property int64_t domesticSold;
@property int64_t foreignVolBought;
@property int64_t foreignValBought;
@property int64_t foreignFreqBought;
@property int64_t foreignVolSold;
@property int64_t foreignValSold;
@property int64_t foreignFreqSold;
@property int32_t sequence;
@property Float32 referencePrice;
@property Float32 settlementPrice;
@end

@implementation KiStockSummary

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasLastVolume {
  return !!hasLastVolume_;
}
- (void) setHasLastVolume:(BOOL) value {
  hasLastVolume_ = !!value;
}
@synthesize lastVolume;
- (BOOL) hasStockSummary {
  return !!hasStockSummary_;
}
- (void) setHasStockSummary:(BOOL) value {
  hasStockSummary_ = !!value;
}
@synthesize stockSummary;
- (BOOL) hasForeignBought {
  return !!hasForeignBought_;
}
- (void) setHasForeignBought:(BOOL) value {
  hasForeignBought_ = !!value;
}
@synthesize foreignBought;
- (BOOL) hasForeignSold {
  return !!hasForeignSold_;
}
- (void) setHasForeignSold:(BOOL) value {
  hasForeignSold_ = !!value;
}
@synthesize foreignSold;
- (BOOL) hasDomesticBought {
  return !!hasDomesticBought_;
}
- (void) setHasDomesticBought:(BOOL) value {
  hasDomesticBought_ = !!value;
}
@synthesize domesticBought;
- (BOOL) hasDomesticSold {
  return !!hasDomesticSold_;
}
- (void) setHasDomesticSold:(BOOL) value {
  hasDomesticSold_ = !!value;
}
@synthesize domesticSold;
- (BOOL) hasForeignVolBought {
  return !!hasForeignVolBought_;
}
- (void) setHasForeignVolBought:(BOOL) value {
  hasForeignVolBought_ = !!value;
}
@synthesize foreignVolBought;
- (BOOL) hasForeignValBought {
  return !!hasForeignValBought_;
}
- (void) setHasForeignValBought:(BOOL) value {
  hasForeignValBought_ = !!value;
}
@synthesize foreignValBought;
- (BOOL) hasForeignFreqBought {
  return !!hasForeignFreqBought_;
}
- (void) setHasForeignFreqBought:(BOOL) value {
  hasForeignFreqBought_ = !!value;
}
@synthesize foreignFreqBought;
- (BOOL) hasForeignVolSold {
  return !!hasForeignVolSold_;
}
- (void) setHasForeignVolSold:(BOOL) value {
  hasForeignVolSold_ = !!value;
}
@synthesize foreignVolSold;
- (BOOL) hasForeignValSold {
  return !!hasForeignValSold_;
}
- (void) setHasForeignValSold:(BOOL) value {
  hasForeignValSold_ = !!value;
}
@synthesize foreignValSold;
- (BOOL) hasForeignFreqSold {
  return !!hasForeignFreqSold_;
}
- (void) setHasForeignFreqSold:(BOOL) value {
  hasForeignFreqSold_ = !!value;
}
@synthesize foreignFreqSold;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasReferencePrice {
  return !!hasReferencePrice_;
}
- (void) setHasReferencePrice:(BOOL) value {
  hasReferencePrice_ = !!value;
}
@synthesize referencePrice;
- (BOOL) hasSettlementPrice {
  return !!hasSettlementPrice_;
}
- (void) setHasSettlementPrice:(BOOL) value {
  hasSettlementPrice_ = !!value;
}
@synthesize settlementPrice;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.lastVolume = 0;
    self.stockSummary = [StockSummary defaultInstance];
    self.foreignBought = 0L;
    self.foreignSold = 0L;
    self.domesticBought = 0L;
    self.domesticSold = 0L;
    self.foreignVolBought = 0L;
    self.foreignValBought = 0L;
    self.foreignFreqBought = 0L;
    self.foreignVolSold = 0L;
    self.foreignValSold = 0L;
    self.foreignFreqSold = 0L;
    self.sequence = 0;
    self.referencePrice = 0;
    self.settlementPrice = 0;
  }
  return self;
}
static KiStockSummary* defaultKiStockSummaryInstance = nil;
+ (void) initialize {
  if (self == [KiStockSummary class]) {
    defaultKiStockSummaryInstance = [[KiStockSummary alloc] init];
  }
}
+ (KiStockSummary*) defaultInstance {
  return defaultKiStockSummaryInstance;
}
- (KiStockSummary*) defaultInstance {
  return defaultKiStockSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasLastVolume) {
    [output writeInt32:3 value:self.lastVolume];
  }
  if (self.hasStockSummary) {
    [output writeMessage:4 value:self.stockSummary];
  }
  if (self.hasForeignBought) {
    [output writeInt64:5 value:self.foreignBought];
  }
  if (self.hasForeignSold) {
    [output writeInt64:6 value:self.foreignSold];
  }
  if (self.hasDomesticBought) {
    [output writeInt64:7 value:self.domesticBought];
  }
  if (self.hasDomesticSold) {
    [output writeInt64:8 value:self.domesticSold];
  }
  if (self.hasForeignVolBought) {
    [output writeInt64:9 value:self.foreignVolBought];
  }
  if (self.hasForeignValBought) {
    [output writeInt64:10 value:self.foreignValBought];
  }
  if (self.hasForeignFreqBought) {
    [output writeInt64:11 value:self.foreignFreqBought];
  }
  if (self.hasForeignVolSold) {
    [output writeInt64:12 value:self.foreignVolSold];
  }
  if (self.hasForeignValSold) {
    [output writeInt64:13 value:self.foreignValSold];
  }
  if (self.hasForeignFreqSold) {
    [output writeInt64:14 value:self.foreignFreqSold];
  }
  if (self.hasSequence) {
    [output writeInt32:15 value:self.sequence];
  }
  if (self.hasReferencePrice) {
    [output writeFloat:16 value:self.referencePrice];
  }
  if (self.hasSettlementPrice) {
    [output writeFloat:17 value:self.settlementPrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasLastVolume) {
    size += computeInt32Size(3, self.lastVolume);
  }
  if (self.hasStockSummary) {
    size += computeMessageSize(4, self.stockSummary);
  }
  if (self.hasForeignBought) {
    size += computeInt64Size(5, self.foreignBought);
  }
  if (self.hasForeignSold) {
    size += computeInt64Size(6, self.foreignSold);
  }
  if (self.hasDomesticBought) {
    size += computeInt64Size(7, self.domesticBought);
  }
  if (self.hasDomesticSold) {
    size += computeInt64Size(8, self.domesticSold);
  }
  if (self.hasForeignVolBought) {
    size += computeInt64Size(9, self.foreignVolBought);
  }
  if (self.hasForeignValBought) {
    size += computeInt64Size(10, self.foreignValBought);
  }
  if (self.hasForeignFreqBought) {
    size += computeInt64Size(11, self.foreignFreqBought);
  }
  if (self.hasForeignVolSold) {
    size += computeInt64Size(12, self.foreignVolSold);
  }
  if (self.hasForeignValSold) {
    size += computeInt64Size(13, self.foreignValSold);
  }
  if (self.hasForeignFreqSold) {
    size += computeInt64Size(14, self.foreignFreqSold);
  }
  if (self.hasSequence) {
    size += computeInt32Size(15, self.sequence);
  }
  if (self.hasReferencePrice) {
    size += computeFloatSize(16, self.referencePrice);
  }
  if (self.hasSettlementPrice) {
    size += computeFloatSize(17, self.settlementPrice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiStockSummary*) parseFromData:(NSData*) data {
  return (KiStockSummary*)[[[KiStockSummary builder] mergeFromData:data] build];
}
+ (KiStockSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiStockSummary*)[[[KiStockSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiStockSummary*) parseFromInputStream:(NSInputStream*) input {
  return (KiStockSummary*)[[[KiStockSummary builder] mergeFromInputStream:input] build];
}
+ (KiStockSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiStockSummary*)[[[KiStockSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiStockSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiStockSummary*)[[[KiStockSummary builder] mergeFromCodedInputStream:input] build];
}
+ (KiStockSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiStockSummary*)[[[KiStockSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiStockSummary_Builder*) builder {
  return [[KiStockSummary_Builder alloc] init];
}
+ (KiStockSummary_Builder*) builderWithPrototype:(KiStockSummary*) prototype {
  return [[KiStockSummary builder] mergeFrom:prototype];
}
- (KiStockSummary_Builder*) builder {
  return [KiStockSummary builder];
}
- (KiStockSummary_Builder*) toBuilder {
  return [KiStockSummary builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasLastVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastVolume", [NSNumber numberWithInt:self.lastVolume]];
  }
  if (self.hasStockSummary) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockSummary"];
    [self.stockSummary writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasForeignBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignBought", [NSNumber numberWithLongLong:self.foreignBought]];
  }
  if (self.hasForeignSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignSold", [NSNumber numberWithLongLong:self.foreignSold]];
  }
  if (self.hasDomesticBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domesticBought", [NSNumber numberWithLongLong:self.domesticBought]];
  }
  if (self.hasDomesticSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domesticSold", [NSNumber numberWithLongLong:self.domesticSold]];
  }
  if (self.hasForeignVolBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignVolBought", [NSNumber numberWithLongLong:self.foreignVolBought]];
  }
  if (self.hasForeignValBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignValBought", [NSNumber numberWithLongLong:self.foreignValBought]];
  }
  if (self.hasForeignFreqBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignFreqBought", [NSNumber numberWithLongLong:self.foreignFreqBought]];
  }
  if (self.hasForeignVolSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignVolSold", [NSNumber numberWithLongLong:self.foreignVolSold]];
  }
  if (self.hasForeignValSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignValSold", [NSNumber numberWithLongLong:self.foreignValSold]];
  }
  if (self.hasForeignFreqSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignFreqSold", [NSNumber numberWithLongLong:self.foreignFreqSold]];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasReferencePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"referencePrice", [NSNumber numberWithFloat:self.referencePrice]];
  }
  if (self.hasSettlementPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"settlementPrice", [NSNumber numberWithFloat:self.settlementPrice]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiStockSummary class]]) {
    return NO;
  }
  KiStockSummary *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasLastVolume == otherMessage.hasLastVolume &&
      (!self.hasLastVolume || self.lastVolume == otherMessage.lastVolume) &&
      self.hasStockSummary == otherMessage.hasStockSummary &&
      (!self.hasStockSummary || [self.stockSummary isEqual:otherMessage.stockSummary]) &&
      self.hasForeignBought == otherMessage.hasForeignBought &&
      (!self.hasForeignBought || self.foreignBought == otherMessage.foreignBought) &&
      self.hasForeignSold == otherMessage.hasForeignSold &&
      (!self.hasForeignSold || self.foreignSold == otherMessage.foreignSold) &&
      self.hasDomesticBought == otherMessage.hasDomesticBought &&
      (!self.hasDomesticBought || self.domesticBought == otherMessage.domesticBought) &&
      self.hasDomesticSold == otherMessage.hasDomesticSold &&
      (!self.hasDomesticSold || self.domesticSold == otherMessage.domesticSold) &&
      self.hasForeignVolBought == otherMessage.hasForeignVolBought &&
      (!self.hasForeignVolBought || self.foreignVolBought == otherMessage.foreignVolBought) &&
      self.hasForeignValBought == otherMessage.hasForeignValBought &&
      (!self.hasForeignValBought || self.foreignValBought == otherMessage.foreignValBought) &&
      self.hasForeignFreqBought == otherMessage.hasForeignFreqBought &&
      (!self.hasForeignFreqBought || self.foreignFreqBought == otherMessage.foreignFreqBought) &&
      self.hasForeignVolSold == otherMessage.hasForeignVolSold &&
      (!self.hasForeignVolSold || self.foreignVolSold == otherMessage.foreignVolSold) &&
      self.hasForeignValSold == otherMessage.hasForeignValSold &&
      (!self.hasForeignValSold || self.foreignValSold == otherMessage.foreignValSold) &&
      self.hasForeignFreqSold == otherMessage.hasForeignFreqSold &&
      (!self.hasForeignFreqSold || self.foreignFreqSold == otherMessage.foreignFreqSold) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasReferencePrice == otherMessage.hasReferencePrice &&
      (!self.hasReferencePrice || self.referencePrice == otherMessage.referencePrice) &&
      self.hasSettlementPrice == otherMessage.hasSettlementPrice &&
      (!self.hasSettlementPrice || self.settlementPrice == otherMessage.settlementPrice) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasLastVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastVolume] hash];
  }
  if (self.hasStockSummary) {
    hashCode = hashCode * 31 + [self.stockSummary hash];
  }
  if (self.hasForeignBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignBought] hash];
  }
  if (self.hasForeignSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignSold] hash];
  }
  if (self.hasDomesticBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.domesticBought] hash];
  }
  if (self.hasDomesticSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.domesticSold] hash];
  }
  if (self.hasForeignVolBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignVolBought] hash];
  }
  if (self.hasForeignValBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignValBought] hash];
  }
  if (self.hasForeignFreqBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignFreqBought] hash];
  }
  if (self.hasForeignVolSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignVolSold] hash];
  }
  if (self.hasForeignValSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignValSold] hash];
  }
  if (self.hasForeignFreqSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignFreqSold] hash];
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasReferencePrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.referencePrice] hash];
  }
  if (self.hasSettlementPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.settlementPrice] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiStockSummary_Builder()
@property (strong) KiStockSummary* result;
@end

@implementation KiStockSummary_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiStockSummary alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiStockSummary_Builder*) clear {
  self.result = [[KiStockSummary alloc] init];
  return self;
}
- (KiStockSummary_Builder*) clone {
  return [KiStockSummary builderWithPrototype:result];
}
- (KiStockSummary*) defaultInstance {
  return [KiStockSummary defaultInstance];
}
- (KiStockSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiStockSummary*) buildPartial {
  KiStockSummary* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiStockSummary_Builder*) mergeFrom:(KiStockSummary*) other {
  if (other == [KiStockSummary defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasLastVolume) {
    [self setLastVolume:other.lastVolume];
  }
  if (other.hasStockSummary) {
    [self mergeStockSummary:other.stockSummary];
  }
  if (other.hasForeignBought) {
    [self setForeignBought:other.foreignBought];
  }
  if (other.hasForeignSold) {
    [self setForeignSold:other.foreignSold];
  }
  if (other.hasDomesticBought) {
    [self setDomesticBought:other.domesticBought];
  }
  if (other.hasDomesticSold) {
    [self setDomesticSold:other.domesticSold];
  }
  if (other.hasForeignVolBought) {
    [self setForeignVolBought:other.foreignVolBought];
  }
  if (other.hasForeignValBought) {
    [self setForeignValBought:other.foreignValBought];
  }
  if (other.hasForeignFreqBought) {
    [self setForeignFreqBought:other.foreignFreqBought];
  }
  if (other.hasForeignVolSold) {
    [self setForeignVolSold:other.foreignVolSold];
  }
  if (other.hasForeignValSold) {
    [self setForeignValSold:other.foreignValSold];
  }
  if (other.hasForeignFreqSold) {
    [self setForeignFreqSold:other.foreignFreqSold];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasReferencePrice) {
    [self setReferencePrice:other.referencePrice];
  }
  if (other.hasSettlementPrice) {
    [self setSettlementPrice:other.settlementPrice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiStockSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiStockSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 24: {
        [self setLastVolume:[input readInt32]];
        break;
      }
      case 34: {
        StockSummary_Builder* subBuilder = [StockSummary builder];
        if (self.hasStockSummary) {
          [subBuilder mergeFrom:self.stockSummary];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockSummary:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setForeignBought:[input readInt64]];
        break;
      }
      case 48: {
        [self setForeignSold:[input readInt64]];
        break;
      }
      case 56: {
        [self setDomesticBought:[input readInt64]];
        break;
      }
      case 64: {
        [self setDomesticSold:[input readInt64]];
        break;
      }
      case 72: {
        [self setForeignVolBought:[input readInt64]];
        break;
      }
      case 80: {
        [self setForeignValBought:[input readInt64]];
        break;
      }
      case 88: {
        [self setForeignFreqBought:[input readInt64]];
        break;
      }
      case 96: {
        [self setForeignVolSold:[input readInt64]];
        break;
      }
      case 104: {
        [self setForeignValSold:[input readInt64]];
        break;
      }
      case 112: {
        [self setForeignFreqSold:[input readInt64]];
        break;
      }
      case 120: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 133: {
        [self setReferencePrice:[input readFloat]];
        break;
      }
      case 141: {
        [self setSettlementPrice:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiStockSummary_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiStockSummary_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasLastVolume {
  return result.hasLastVolume;
}
- (int32_t) lastVolume {
  return result.lastVolume;
}
- (KiStockSummary_Builder*) setLastVolume:(int32_t) value {
  result.hasLastVolume = YES;
  result.lastVolume = value;
  return self;
}
- (KiStockSummary_Builder*) clearLastVolume {
  result.hasLastVolume = NO;
  result.lastVolume = 0;
  return self;
}
- (BOOL) hasStockSummary {
  return result.hasStockSummary;
}
- (StockSummary*) stockSummary {
  return result.stockSummary;
}
- (KiStockSummary_Builder*) setStockSummary:(StockSummary*) value {
  result.hasStockSummary = YES;
  result.stockSummary = value;
  return self;
}
- (KiStockSummary_Builder*) setStockSummaryBuilder:(StockSummary_Builder*) builderForValue {
  return [self setStockSummary:[builderForValue build]];
}
- (KiStockSummary_Builder*) mergeStockSummary:(StockSummary*) value {
  if (result.hasStockSummary &&
      result.stockSummary != [StockSummary defaultInstance]) {
    result.stockSummary =
      [[[StockSummary builderWithPrototype:result.stockSummary] mergeFrom:value] buildPartial];
  } else {
    result.stockSummary = value;
  }
  result.hasStockSummary = YES;
  return self;
}
- (KiStockSummary_Builder*) clearStockSummary {
  result.hasStockSummary = NO;
  result.stockSummary = [StockSummary defaultInstance];
  return self;
}
- (BOOL) hasForeignBought {
  return result.hasForeignBought;
}
- (int64_t) foreignBought {
  return result.foreignBought;
}
- (KiStockSummary_Builder*) setForeignBought:(int64_t) value {
  result.hasForeignBought = YES;
  result.foreignBought = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignBought {
  result.hasForeignBought = NO;
  result.foreignBought = 0L;
  return self;
}
- (BOOL) hasForeignSold {
  return result.hasForeignSold;
}
- (int64_t) foreignSold {
  return result.foreignSold;
}
- (KiStockSummary_Builder*) setForeignSold:(int64_t) value {
  result.hasForeignSold = YES;
  result.foreignSold = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignSold {
  result.hasForeignSold = NO;
  result.foreignSold = 0L;
  return self;
}
- (BOOL) hasDomesticBought {
  return result.hasDomesticBought;
}
- (int64_t) domesticBought {
  return result.domesticBought;
}
- (KiStockSummary_Builder*) setDomesticBought:(int64_t) value {
  result.hasDomesticBought = YES;
  result.domesticBought = value;
  return self;
}
- (KiStockSummary_Builder*) clearDomesticBought {
  result.hasDomesticBought = NO;
  result.domesticBought = 0L;
  return self;
}
- (BOOL) hasDomesticSold {
  return result.hasDomesticSold;
}
- (int64_t) domesticSold {
  return result.domesticSold;
}
- (KiStockSummary_Builder*) setDomesticSold:(int64_t) value {
  result.hasDomesticSold = YES;
  result.domesticSold = value;
  return self;
}
- (KiStockSummary_Builder*) clearDomesticSold {
  result.hasDomesticSold = NO;
  result.domesticSold = 0L;
  return self;
}
- (BOOL) hasForeignVolBought {
  return result.hasForeignVolBought;
}
- (int64_t) foreignVolBought {
  return result.foreignVolBought;
}
- (KiStockSummary_Builder*) setForeignVolBought:(int64_t) value {
  result.hasForeignVolBought = YES;
  result.foreignVolBought = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignVolBought {
  result.hasForeignVolBought = NO;
  result.foreignVolBought = 0L;
  return self;
}
- (BOOL) hasForeignValBought {
  return result.hasForeignValBought;
}
- (int64_t) foreignValBought {
  return result.foreignValBought;
}
- (KiStockSummary_Builder*) setForeignValBought:(int64_t) value {
  result.hasForeignValBought = YES;
  result.foreignValBought = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignValBought {
  result.hasForeignValBought = NO;
  result.foreignValBought = 0L;
  return self;
}
- (BOOL) hasForeignFreqBought {
  return result.hasForeignFreqBought;
}
- (int64_t) foreignFreqBought {
  return result.foreignFreqBought;
}
- (KiStockSummary_Builder*) setForeignFreqBought:(int64_t) value {
  result.hasForeignFreqBought = YES;
  result.foreignFreqBought = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignFreqBought {
  result.hasForeignFreqBought = NO;
  result.foreignFreqBought = 0L;
  return self;
}
- (BOOL) hasForeignVolSold {
  return result.hasForeignVolSold;
}
- (int64_t) foreignVolSold {
  return result.foreignVolSold;
}
- (KiStockSummary_Builder*) setForeignVolSold:(int64_t) value {
  result.hasForeignVolSold = YES;
  result.foreignVolSold = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignVolSold {
  result.hasForeignVolSold = NO;
  result.foreignVolSold = 0L;
  return self;
}
- (BOOL) hasForeignValSold {
  return result.hasForeignValSold;
}
- (int64_t) foreignValSold {
  return result.foreignValSold;
}
- (KiStockSummary_Builder*) setForeignValSold:(int64_t) value {
  result.hasForeignValSold = YES;
  result.foreignValSold = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignValSold {
  result.hasForeignValSold = NO;
  result.foreignValSold = 0L;
  return self;
}
- (BOOL) hasForeignFreqSold {
  return result.hasForeignFreqSold;
}
- (int64_t) foreignFreqSold {
  return result.foreignFreqSold;
}
- (KiStockSummary_Builder*) setForeignFreqSold:(int64_t) value {
  result.hasForeignFreqSold = YES;
  result.foreignFreqSold = value;
  return self;
}
- (KiStockSummary_Builder*) clearForeignFreqSold {
  result.hasForeignFreqSold = NO;
  result.foreignFreqSold = 0L;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (KiStockSummary_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (KiStockSummary_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasReferencePrice {
  return result.hasReferencePrice;
}
- (Float32) referencePrice {
  return result.referencePrice;
}
- (KiStockSummary_Builder*) setReferencePrice:(Float32) value {
  result.hasReferencePrice = YES;
  result.referencePrice = value;
  return self;
}
- (KiStockSummary_Builder*) clearReferencePrice {
  result.hasReferencePrice = NO;
  result.referencePrice = 0;
  return self;
}
- (BOOL) hasSettlementPrice {
  return result.hasSettlementPrice;
}
- (Float32) settlementPrice {
  return result.settlementPrice;
}
- (KiStockSummary_Builder*) setSettlementPrice:(Float32) value {
  result.hasSettlementPrice = YES;
  result.settlementPrice = value;
  return self;
}
- (KiStockSummary_Builder*) clearSettlementPrice {
  result.hasSettlementPrice = NO;
  result.settlementPrice = 0;
  return self;
}
@end

@interface KiWk52104 ()
@property int32_t codeId;
@property Board board;
@property int32_t wk52High;
@property int32_t wk52Low;
@property int32_t wk104High;
@property int32_t wk104Low;
@end

@implementation KiWk52104

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasWk52High {
  return !!hasWk52High_;
}
- (void) setHasWk52High:(BOOL) value {
  hasWk52High_ = !!value;
}
@synthesize wk52High;
- (BOOL) hasWk52Low {
  return !!hasWk52Low_;
}
- (void) setHasWk52Low:(BOOL) value {
  hasWk52Low_ = !!value;
}
@synthesize wk52Low;
- (BOOL) hasWk104High {
  return !!hasWk104High_;
}
- (void) setHasWk104High:(BOOL) value {
  hasWk104High_ = !!value;
}
@synthesize wk104High;
- (BOOL) hasWk104Low {
  return !!hasWk104Low_;
}
- (void) setHasWk104Low:(BOOL) value {
  hasWk104Low_ = !!value;
}
@synthesize wk104Low;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
    self.wk52High = 0;
    self.wk52Low = 0;
    self.wk104High = 0;
    self.wk104Low = 0;
  }
  return self;
}
static KiWk52104* defaultKiWk52104Instance = nil;
+ (void) initialize {
  if (self == [KiWk52104 class]) {
    defaultKiWk52104Instance = [[KiWk52104 alloc] init];
  }
}
+ (KiWk52104*) defaultInstance {
  return defaultKiWk52104Instance;
}
- (KiWk52104*) defaultInstance {
  return defaultKiWk52104Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasWk52High) {
    [output writeInt32:3 value:self.wk52High];
  }
  if (self.hasWk52Low) {
    [output writeInt32:4 value:self.wk52Low];
  }
  if (self.hasWk104High) {
    [output writeInt32:5 value:self.wk104High];
  }
  if (self.hasWk104Low) {
    [output writeInt32:6 value:self.wk104Low];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasWk52High) {
    size += computeInt32Size(3, self.wk52High);
  }
  if (self.hasWk52Low) {
    size += computeInt32Size(4, self.wk52Low);
  }
  if (self.hasWk104High) {
    size += computeInt32Size(5, self.wk104High);
  }
  if (self.hasWk104Low) {
    size += computeInt32Size(6, self.wk104Low);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiWk52104*) parseFromData:(NSData*) data {
  return (KiWk52104*)[[[KiWk52104 builder] mergeFromData:data] build];
}
+ (KiWk52104*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiWk52104*)[[[KiWk52104 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiWk52104*) parseFromInputStream:(NSInputStream*) input {
  return (KiWk52104*)[[[KiWk52104 builder] mergeFromInputStream:input] build];
}
+ (KiWk52104*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiWk52104*)[[[KiWk52104 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiWk52104*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiWk52104*)[[[KiWk52104 builder] mergeFromCodedInputStream:input] build];
}
+ (KiWk52104*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiWk52104*)[[[KiWk52104 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiWk52104_Builder*) builder {
  return [[KiWk52104_Builder alloc] init];
}
+ (KiWk52104_Builder*) builderWithPrototype:(KiWk52104*) prototype {
  return [[KiWk52104 builder] mergeFrom:prototype];
}
- (KiWk52104_Builder*) builder {
  return [KiWk52104 builder];
}
- (KiWk52104_Builder*) toBuilder {
  return [KiWk52104 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasWk52High) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wk52High", [NSNumber numberWithInt:self.wk52High]];
  }
  if (self.hasWk52Low) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wk52Low", [NSNumber numberWithInt:self.wk52Low]];
  }
  if (self.hasWk104High) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wk104High", [NSNumber numberWithInt:self.wk104High]];
  }
  if (self.hasWk104Low) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wk104Low", [NSNumber numberWithInt:self.wk104Low]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiWk52104 class]]) {
    return NO;
  }
  KiWk52104 *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasWk52High == otherMessage.hasWk52High &&
      (!self.hasWk52High || self.wk52High == otherMessage.wk52High) &&
      self.hasWk52Low == otherMessage.hasWk52Low &&
      (!self.hasWk52Low || self.wk52Low == otherMessage.wk52Low) &&
      self.hasWk104High == otherMessage.hasWk104High &&
      (!self.hasWk104High || self.wk104High == otherMessage.wk104High) &&
      self.hasWk104Low == otherMessage.hasWk104Low &&
      (!self.hasWk104Low || self.wk104Low == otherMessage.wk104Low) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasWk52High) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wk52High] hash];
  }
  if (self.hasWk52Low) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wk52Low] hash];
  }
  if (self.hasWk104High) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wk104High] hash];
  }
  if (self.hasWk104Low) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wk104Low] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiWk52104_Builder()
@property (strong) KiWk52104* result;
@end

@implementation KiWk52104_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiWk52104 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiWk52104_Builder*) clear {
  self.result = [[KiWk52104 alloc] init];
  return self;
}
- (KiWk52104_Builder*) clone {
  return [KiWk52104 builderWithPrototype:result];
}
- (KiWk52104*) defaultInstance {
  return [KiWk52104 defaultInstance];
}
- (KiWk52104*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiWk52104*) buildPartial {
  KiWk52104* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiWk52104_Builder*) mergeFrom:(KiWk52104*) other {
  if (other == [KiWk52104 defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasWk52High) {
    [self setWk52High:other.wk52High];
  }
  if (other.hasWk52Low) {
    [self setWk52Low:other.wk52Low];
  }
  if (other.hasWk104High) {
    [self setWk104High:other.wk104High];
  }
  if (other.hasWk104Low) {
    [self setWk104Low:other.wk104Low];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiWk52104_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiWk52104_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setWk52High:[input readInt32]];
        break;
      }
      case 32: {
        [self setWk52Low:[input readInt32]];
        break;
      }
      case 40: {
        [self setWk104High:[input readInt32]];
        break;
      }
      case 48: {
        [self setWk104Low:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiWk52104_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiWk52104_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (KiWk52104_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (KiWk52104_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasWk52High {
  return result.hasWk52High;
}
- (int32_t) wk52High {
  return result.wk52High;
}
- (KiWk52104_Builder*) setWk52High:(int32_t) value {
  result.hasWk52High = YES;
  result.wk52High = value;
  return self;
}
- (KiWk52104_Builder*) clearWk52High {
  result.hasWk52High = NO;
  result.wk52High = 0;
  return self;
}
- (BOOL) hasWk52Low {
  return result.hasWk52Low;
}
- (int32_t) wk52Low {
  return result.wk52Low;
}
- (KiWk52104_Builder*) setWk52Low:(int32_t) value {
  result.hasWk52Low = YES;
  result.wk52Low = value;
  return self;
}
- (KiWk52104_Builder*) clearWk52Low {
  result.hasWk52Low = NO;
  result.wk52Low = 0;
  return self;
}
- (BOOL) hasWk104High {
  return result.hasWk104High;
}
- (int32_t) wk104High {
  return result.wk104High;
}
- (KiWk52104_Builder*) setWk104High:(int32_t) value {
  result.hasWk104High = YES;
  result.wk104High = value;
  return self;
}
- (KiWk52104_Builder*) clearWk104High {
  result.hasWk104High = NO;
  result.wk104High = 0;
  return self;
}
- (BOOL) hasWk104Low {
  return result.hasWk104Low;
}
- (int32_t) wk104Low {
  return result.wk104Low;
}
- (KiWk52104_Builder*) setWk104Low:(int32_t) value {
  result.hasWk104Low = YES;
  result.wk104Low = value;
  return self;
}
- (KiWk52104_Builder*) clearWk104Low {
  result.hasWk104Low = NO;
  result.wk104Low = 0;
  return self;
}
@end

@interface StockSummary ()
@property Board board;
@property int32_t previousPrice;
@property Float32 change;
@property int64_t tradedVolume;
@property int64_t tradedValue;
@property int32_t tradedFrequency;
@property (strong) OHLC* ohlc;
@property (strong) BestBidOffer* bestBidOffer;
@end

@implementation StockSummary

- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasPreviousPrice {
  return !!hasPreviousPrice_;
}
- (void) setHasPreviousPrice:(BOOL) value {
  hasPreviousPrice_ = !!value;
}
@synthesize previousPrice;
- (BOOL) hasChange {
  return !!hasChange_;
}
- (void) setHasChange:(BOOL) value {
  hasChange_ = !!value;
}
@synthesize change;
- (BOOL) hasTradedVolume {
  return !!hasTradedVolume_;
}
- (void) setHasTradedVolume:(BOOL) value {
  hasTradedVolume_ = !!value;
}
@synthesize tradedVolume;
- (BOOL) hasTradedValue {
  return !!hasTradedValue_;
}
- (void) setHasTradedValue:(BOOL) value {
  hasTradedValue_ = !!value;
}
@synthesize tradedValue;
- (BOOL) hasTradedFrequency {
  return !!hasTradedFrequency_;
}
- (void) setHasTradedFrequency:(BOOL) value {
  hasTradedFrequency_ = !!value;
}
@synthesize tradedFrequency;
- (BOOL) hasOhlc {
  return !!hasOhlc_;
}
- (void) setHasOhlc:(BOOL) value {
  hasOhlc_ = !!value;
}
@synthesize ohlc;
- (BOOL) hasBestBidOffer {
  return !!hasBestBidOffer_;
}
- (void) setHasBestBidOffer:(BOOL) value {
  hasBestBidOffer_ = !!value;
}
@synthesize bestBidOffer;
- (id) init {
  if ((self = [super init])) {
    self.board = BoardRg;
    self.previousPrice = 0;
    self.change = 0;
    self.tradedVolume = 0L;
    self.tradedValue = 0L;
    self.tradedFrequency = 0;
    self.ohlc = [OHLC defaultInstance];
    self.bestBidOffer = [BestBidOffer defaultInstance];
  }
  return self;
}
static StockSummary* defaultStockSummaryInstance = nil;
+ (void) initialize {
  if (self == [StockSummary class]) {
    defaultStockSummaryInstance = [[StockSummary alloc] init];
  }
}
+ (StockSummary*) defaultInstance {
  return defaultStockSummaryInstance;
}
- (StockSummary*) defaultInstance {
  return defaultStockSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasPreviousPrice) {
    [output writeInt32:3 value:self.previousPrice];
  }
  if (self.hasChange) {
    [output writeFloat:4 value:self.change];
  }
  if (self.hasTradedVolume) {
    [output writeInt64:5 value:self.tradedVolume];
  }
  if (self.hasTradedValue) {
    [output writeInt64:6 value:self.tradedValue];
  }
  if (self.hasTradedFrequency) {
    [output writeInt32:7 value:self.tradedFrequency];
  }
  if (self.hasOhlc) {
    [output writeMessage:8 value:self.ohlc];
  }
  if (self.hasBestBidOffer) {
    [output writeMessage:9 value:self.bestBidOffer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasPreviousPrice) {
    size += computeInt32Size(3, self.previousPrice);
  }
  if (self.hasChange) {
    size += computeFloatSize(4, self.change);
  }
  if (self.hasTradedVolume) {
    size += computeInt64Size(5, self.tradedVolume);
  }
  if (self.hasTradedValue) {
    size += computeInt64Size(6, self.tradedValue);
  }
  if (self.hasTradedFrequency) {
    size += computeInt32Size(7, self.tradedFrequency);
  }
  if (self.hasOhlc) {
    size += computeMessageSize(8, self.ohlc);
  }
  if (self.hasBestBidOffer) {
    size += computeMessageSize(9, self.bestBidOffer);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StockSummary*) parseFromData:(NSData*) data {
  return (StockSummary*)[[[StockSummary builder] mergeFromData:data] build];
}
+ (StockSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StockSummary*)[[[StockSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StockSummary*) parseFromInputStream:(NSInputStream*) input {
  return (StockSummary*)[[[StockSummary builder] mergeFromInputStream:input] build];
}
+ (StockSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StockSummary*)[[[StockSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StockSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StockSummary*)[[[StockSummary builder] mergeFromCodedInputStream:input] build];
}
+ (StockSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StockSummary*)[[[StockSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StockSummary_Builder*) builder {
  return [[StockSummary_Builder alloc] init];
}
+ (StockSummary_Builder*) builderWithPrototype:(StockSummary*) prototype {
  return [[StockSummary builder] mergeFrom:prototype];
}
- (StockSummary_Builder*) builder {
  return [StockSummary builder];
}
- (StockSummary_Builder*) toBuilder {
  return [StockSummary builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasPreviousPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previousPrice", [NSNumber numberWithInt:self.previousPrice]];
  }
  if (self.hasChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"change", [NSNumber numberWithFloat:self.change]];
  }
  if (self.hasTradedVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradedVolume", [NSNumber numberWithLongLong:self.tradedVolume]];
  }
  if (self.hasTradedValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradedValue", [NSNumber numberWithLongLong:self.tradedValue]];
  }
  if (self.hasTradedFrequency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradedFrequency", [NSNumber numberWithInt:self.tradedFrequency]];
  }
  if (self.hasOhlc) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [self.ohlc writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBestBidOffer) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer"];
    [self.bestBidOffer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StockSummary class]]) {
    return NO;
  }
  StockSummary *otherMessage = other;
  return
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasPreviousPrice == otherMessage.hasPreviousPrice &&
      (!self.hasPreviousPrice || self.previousPrice == otherMessage.previousPrice) &&
      self.hasChange == otherMessage.hasChange &&
      (!self.hasChange || self.change == otherMessage.change) &&
      self.hasTradedVolume == otherMessage.hasTradedVolume &&
      (!self.hasTradedVolume || self.tradedVolume == otherMessage.tradedVolume) &&
      self.hasTradedValue == otherMessage.hasTradedValue &&
      (!self.hasTradedValue || self.tradedValue == otherMessage.tradedValue) &&
      self.hasTradedFrequency == otherMessage.hasTradedFrequency &&
      (!self.hasTradedFrequency || self.tradedFrequency == otherMessage.tradedFrequency) &&
      self.hasOhlc == otherMessage.hasOhlc &&
      (!self.hasOhlc || [self.ohlc isEqual:otherMessage.ohlc]) &&
      self.hasBestBidOffer == otherMessage.hasBestBidOffer &&
      (!self.hasBestBidOffer || [self.bestBidOffer isEqual:otherMessage.bestBidOffer]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasPreviousPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.previousPrice] hash];
  }
  if (self.hasChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.change] hash];
  }
  if (self.hasTradedVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tradedVolume] hash];
  }
  if (self.hasTradedValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tradedValue] hash];
  }
  if (self.hasTradedFrequency) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tradedFrequency] hash];
  }
  if (self.hasOhlc) {
    hashCode = hashCode * 31 + [self.ohlc hash];
  }
  if (self.hasBestBidOffer) {
    hashCode = hashCode * 31 + [self.bestBidOffer hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StockSummary_Builder()
@property (strong) StockSummary* result;
@end

@implementation StockSummary_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[StockSummary alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StockSummary_Builder*) clear {
  self.result = [[StockSummary alloc] init];
  return self;
}
- (StockSummary_Builder*) clone {
  return [StockSummary builderWithPrototype:result];
}
- (StockSummary*) defaultInstance {
  return [StockSummary defaultInstance];
}
- (StockSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StockSummary*) buildPartial {
  StockSummary* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (StockSummary_Builder*) mergeFrom:(StockSummary*) other {
  if (other == [StockSummary defaultInstance]) {
    return self;
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasPreviousPrice) {
    [self setPreviousPrice:other.previousPrice];
  }
  if (other.hasChange) {
    [self setChange:other.change];
  }
  if (other.hasTradedVolume) {
    [self setTradedVolume:other.tradedVolume];
  }
  if (other.hasTradedValue) {
    [self setTradedValue:other.tradedValue];
  }
  if (other.hasTradedFrequency) {
    [self setTradedFrequency:other.tradedFrequency];
  }
  if (other.hasOhlc) {
    [self mergeOhlc:other.ohlc];
  }
  if (other.hasBestBidOffer) {
    [self mergeBestBidOffer:other.bestBidOffer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StockSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StockSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setPreviousPrice:[input readInt32]];
        break;
      }
      case 37: {
        [self setChange:[input readFloat]];
        break;
      }
      case 40: {
        [self setTradedVolume:[input readInt64]];
        break;
      }
      case 48: {
        [self setTradedValue:[input readInt64]];
        break;
      }
      case 56: {
        [self setTradedFrequency:[input readInt32]];
        break;
      }
      case 66: {
        OHLC_Builder* subBuilder = [OHLC builder];
        if (self.hasOhlc) {
          [subBuilder mergeFrom:self.ohlc];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOhlc:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer) {
          [subBuilder mergeFrom:self.bestBidOffer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (StockSummary_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (StockSummary_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasPreviousPrice {
  return result.hasPreviousPrice;
}
- (int32_t) previousPrice {
  return result.previousPrice;
}
- (StockSummary_Builder*) setPreviousPrice:(int32_t) value {
  result.hasPreviousPrice = YES;
  result.previousPrice = value;
  return self;
}
- (StockSummary_Builder*) clearPreviousPrice {
  result.hasPreviousPrice = NO;
  result.previousPrice = 0;
  return self;
}
- (BOOL) hasChange {
  return result.hasChange;
}
- (Float32) change {
  return result.change;
}
- (StockSummary_Builder*) setChange:(Float32) value {
  result.hasChange = YES;
  result.change = value;
  return self;
}
- (StockSummary_Builder*) clearChange {
  result.hasChange = NO;
  result.change = 0;
  return self;
}
- (BOOL) hasTradedVolume {
  return result.hasTradedVolume;
}
- (int64_t) tradedVolume {
  return result.tradedVolume;
}
- (StockSummary_Builder*) setTradedVolume:(int64_t) value {
  result.hasTradedVolume = YES;
  result.tradedVolume = value;
  return self;
}
- (StockSummary_Builder*) clearTradedVolume {
  result.hasTradedVolume = NO;
  result.tradedVolume = 0L;
  return self;
}
- (BOOL) hasTradedValue {
  return result.hasTradedValue;
}
- (int64_t) tradedValue {
  return result.tradedValue;
}
- (StockSummary_Builder*) setTradedValue:(int64_t) value {
  result.hasTradedValue = YES;
  result.tradedValue = value;
  return self;
}
- (StockSummary_Builder*) clearTradedValue {
  result.hasTradedValue = NO;
  result.tradedValue = 0L;
  return self;
}
- (BOOL) hasTradedFrequency {
  return result.hasTradedFrequency;
}
- (int32_t) tradedFrequency {
  return result.tradedFrequency;
}
- (StockSummary_Builder*) setTradedFrequency:(int32_t) value {
  result.hasTradedFrequency = YES;
  result.tradedFrequency = value;
  return self;
}
- (StockSummary_Builder*) clearTradedFrequency {
  result.hasTradedFrequency = NO;
  result.tradedFrequency = 0;
  return self;
}
- (BOOL) hasOhlc {
  return result.hasOhlc;
}
- (OHLC*) ohlc {
  return result.ohlc;
}
- (StockSummary_Builder*) setOhlc:(OHLC*) value {
  result.hasOhlc = YES;
  result.ohlc = value;
  return self;
}
- (StockSummary_Builder*) setOhlcBuilder:(OHLC_Builder*) builderForValue {
  return [self setOhlc:[builderForValue build]];
}
- (StockSummary_Builder*) mergeOhlc:(OHLC*) value {
  if (result.hasOhlc &&
      result.ohlc != [OHLC defaultInstance]) {
    result.ohlc =
      [[[OHLC builderWithPrototype:result.ohlc] mergeFrom:value] buildPartial];
  } else {
    result.ohlc = value;
  }
  result.hasOhlc = YES;
  return self;
}
- (StockSummary_Builder*) clearOhlc {
  result.hasOhlc = NO;
  result.ohlc = [OHLC defaultInstance];
  return self;
}
- (BOOL) hasBestBidOffer {
  return result.hasBestBidOffer;
}
- (BestBidOffer*) bestBidOffer {
  return result.bestBidOffer;
}
- (StockSummary_Builder*) setBestBidOffer:(BestBidOffer*) value {
  result.hasBestBidOffer = YES;
  result.bestBidOffer = value;
  return self;
}
- (StockSummary_Builder*) setBestBidOfferBuilder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer:[builderForValue build]];
}
- (StockSummary_Builder*) mergeBestBidOffer:(BestBidOffer*) value {
  if (result.hasBestBidOffer &&
      result.bestBidOffer != [BestBidOffer defaultInstance]) {
    result.bestBidOffer =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer = value;
  }
  result.hasBestBidOffer = YES;
  return self;
}
- (StockSummary_Builder*) clearBestBidOffer {
  result.hasBestBidOffer = NO;
  result.bestBidOffer = [BestBidOffer defaultInstance];
  return self;
}
@end

@interface StockHistory ()
@property int32_t codeId;
@property Board board;
@property (strong) NSMutableArray * ohlcArray;
@end

@implementation StockHistory

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
@synthesize ohlcArray;
@dynamic ohlc;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
  }
  return self;
}
static StockHistory* defaultStockHistoryInstance = nil;
+ (void) initialize {
  if (self == [StockHistory class]) {
    defaultStockHistoryInstance = [[StockHistory alloc] init];
  }
}
+ (StockHistory*) defaultInstance {
  return defaultStockHistoryInstance;
}
- (StockHistory*) defaultInstance {
  return defaultStockHistoryInstance;
}
- (NSArray *)ohlc {
  return ohlcArray;
}
- (OHLC*)ohlcAtIndex:(NSUInteger)index {
  return [ohlcArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:3 value:self.board];
  }
  for (OHLC *element in self.ohlcArray) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(3, self.board);
  }
  for (OHLC *element in self.ohlcArray) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StockHistory*) parseFromData:(NSData*) data {
  return (StockHistory*)[[[StockHistory builder] mergeFromData:data] build];
}
+ (StockHistory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StockHistory*)[[[StockHistory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StockHistory*) parseFromInputStream:(NSInputStream*) input {
  return (StockHistory*)[[[StockHistory builder] mergeFromInputStream:input] build];
}
+ (StockHistory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StockHistory*)[[[StockHistory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StockHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StockHistory*)[[[StockHistory builder] mergeFromCodedInputStream:input] build];
}
+ (StockHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StockHistory*)[[[StockHistory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StockHistory_Builder*) builder {
  return [[StockHistory_Builder alloc] init];
}
+ (StockHistory_Builder*) builderWithPrototype:(StockHistory*) prototype {
  return [[StockHistory builder] mergeFrom:prototype];
}
- (StockHistory_Builder*) builder {
  return [StockHistory builder];
}
- (StockHistory_Builder*) toBuilder {
  return [StockHistory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  for (OHLC* element in self.ohlcArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StockHistory class]]) {
    return NO;
  }
  StockHistory *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      [self.ohlcArray isEqualToArray:otherMessage.ohlcArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  for (OHLC* element in self.ohlcArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StockHistory_Builder()
@property (strong) StockHistory* result;
@end

@implementation StockHistory_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[StockHistory alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StockHistory_Builder*) clear {
  self.result = [[StockHistory alloc] init];
  return self;
}
- (StockHistory_Builder*) clone {
  return [StockHistory builderWithPrototype:result];
}
- (StockHistory*) defaultInstance {
  return [StockHistory defaultInstance];
}
- (StockHistory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StockHistory*) buildPartial {
  StockHistory* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (StockHistory_Builder*) mergeFrom:(StockHistory*) other {
  if (other == [StockHistory defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.ohlcArray.count > 0) {
    if (result.ohlcArray == nil) {
      result.ohlcArray = [[NSMutableArray alloc] initWithArray:other.ohlcArray];
    } else {
      [result.ohlcArray addObjectsFromArray:other.ohlcArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StockHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StockHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        OHLC_Builder* subBuilder = [OHLC builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOhlc:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (StockHistory_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (StockHistory_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (StockHistory_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (StockHistory_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (NSMutableArray *)ohlc {
  return result.ohlcArray;
}
- (OHLC*)ohlcAtIndex:(NSUInteger)index {
  return [result ohlcAtIndex:index];
}
- (StockHistory_Builder *)addOhlc:(OHLC*)value {
  if (result.ohlcArray == nil) {
    result.ohlcArray = [[NSMutableArray alloc]init];
  }
  [result.ohlcArray addObject:value];
  return self;
}
- (StockHistory_Builder *)setOhlcArray:(NSArray *)array {
  result.ohlcArray = [[NSMutableArray alloc]init];
  return self;
}
- (StockHistory_Builder *)clearOhlc {
  result.ohlcArray = nil;
  return self;
}
@end

@interface ForeignHistory ()
@property int32_t date;
@property Board board;
@property int64_t fBuy;
@property int64_t fSell;
@property int64_t tVal;
@end

@implementation ForeignHistory

- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasFBuy {
  return !!hasFBuy_;
}
- (void) setHasFBuy:(BOOL) value {
  hasFBuy_ = !!value;
}
@synthesize fBuy;
- (BOOL) hasFSell {
  return !!hasFSell_;
}
- (void) setHasFSell:(BOOL) value {
  hasFSell_ = !!value;
}
@synthesize fSell;
- (BOOL) hasTVal {
  return !!hasTVal_;
}
- (void) setHasTVal:(BOOL) value {
  hasTVal_ = !!value;
}
@synthesize tVal;
- (id) init {
  if ((self = [super init])) {
    self.date = 0;
    self.board = BoardRg;
    self.fBuy = 0L;
    self.fSell = 0L;
    self.tVal = 0L;
  }
  return self;
}
static ForeignHistory* defaultForeignHistoryInstance = nil;
+ (void) initialize {
  if (self == [ForeignHistory class]) {
    defaultForeignHistoryInstance = [[ForeignHistory alloc] init];
  }
}
+ (ForeignHistory*) defaultInstance {
  return defaultForeignHistoryInstance;
}
- (ForeignHistory*) defaultInstance {
  return defaultForeignHistoryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDate) {
    [output writeInt32:1 value:self.date];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasFBuy) {
    [output writeInt64:3 value:self.fBuy];
  }
  if (self.hasFSell) {
    [output writeInt64:4 value:self.fSell];
  }
  if (self.hasTVal) {
    [output writeInt64:5 value:self.tVal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDate) {
    size += computeInt32Size(1, self.date);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasFBuy) {
    size += computeInt64Size(3, self.fBuy);
  }
  if (self.hasFSell) {
    size += computeInt64Size(4, self.fSell);
  }
  if (self.hasTVal) {
    size += computeInt64Size(5, self.tVal);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ForeignHistory*) parseFromData:(NSData*) data {
  return (ForeignHistory*)[[[ForeignHistory builder] mergeFromData:data] build];
}
+ (ForeignHistory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignHistory*)[[[ForeignHistory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ForeignHistory*) parseFromInputStream:(NSInputStream*) input {
  return (ForeignHistory*)[[[ForeignHistory builder] mergeFromInputStream:input] build];
}
+ (ForeignHistory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignHistory*)[[[ForeignHistory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ForeignHistory*)[[[ForeignHistory builder] mergeFromCodedInputStream:input] build];
}
+ (ForeignHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignHistory*)[[[ForeignHistory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignHistory_Builder*) builder {
  return [[ForeignHistory_Builder alloc] init];
}
+ (ForeignHistory_Builder*) builderWithPrototype:(ForeignHistory*) prototype {
  return [[ForeignHistory builder] mergeFrom:prototype];
}
- (ForeignHistory_Builder*) builder {
  return [ForeignHistory builder];
}
- (ForeignHistory_Builder*) toBuilder {
  return [ForeignHistory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasFBuy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fBuy", [NSNumber numberWithLongLong:self.fBuy]];
  }
  if (self.hasFSell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fSell", [NSNumber numberWithLongLong:self.fSell]];
  }
  if (self.hasTVal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tVal", [NSNumber numberWithLongLong:self.tVal]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignHistory class]]) {
    return NO;
  }
  ForeignHistory *otherMessage = other;
  return
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasFBuy == otherMessage.hasFBuy &&
      (!self.hasFBuy || self.fBuy == otherMessage.fBuy) &&
      self.hasFSell == otherMessage.hasFSell &&
      (!self.hasFSell || self.fSell == otherMessage.fSell) &&
      self.hasTVal == otherMessage.hasTVal &&
      (!self.hasTVal || self.tVal == otherMessage.tVal) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasFBuy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fBuy] hash];
  }
  if (self.hasFSell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fSell] hash];
  }
  if (self.hasTVal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tVal] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ForeignHistory_Builder()
@property (strong) ForeignHistory* result;
@end

@implementation ForeignHistory_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ForeignHistory alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ForeignHistory_Builder*) clear {
  self.result = [[ForeignHistory alloc] init];
  return self;
}
- (ForeignHistory_Builder*) clone {
  return [ForeignHistory builderWithPrototype:result];
}
- (ForeignHistory*) defaultInstance {
  return [ForeignHistory defaultInstance];
}
- (ForeignHistory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ForeignHistory*) buildPartial {
  ForeignHistory* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ForeignHistory_Builder*) mergeFrom:(ForeignHistory*) other {
  if (other == [ForeignHistory defaultInstance]) {
    return self;
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasFBuy) {
    [self setFBuy:other.fBuy];
  }
  if (other.hasFSell) {
    [self setFSell:other.fSell];
  }
  if (other.hasTVal) {
    [self setTVal:other.tVal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ForeignHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ForeignHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDate:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setFBuy:[input readInt64]];
        break;
      }
      case 32: {
        [self setFSell:[input readInt64]];
        break;
      }
      case 40: {
        [self setTVal:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (ForeignHistory_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (ForeignHistory_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (ForeignHistory_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (ForeignHistory_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasFBuy {
  return result.hasFBuy;
}
- (int64_t) fBuy {
  return result.fBuy;
}
- (ForeignHistory_Builder*) setFBuy:(int64_t) value {
  result.hasFBuy = YES;
  result.fBuy = value;
  return self;
}
- (ForeignHistory_Builder*) clearFBuy {
  result.hasFBuy = NO;
  result.fBuy = 0L;
  return self;
}
- (BOOL) hasFSell {
  return result.hasFSell;
}
- (int64_t) fSell {
  return result.fSell;
}
- (ForeignHistory_Builder*) setFSell:(int64_t) value {
  result.hasFSell = YES;
  result.fSell = value;
  return self;
}
- (ForeignHistory_Builder*) clearFSell {
  result.hasFSell = NO;
  result.fSell = 0L;
  return self;
}
- (BOOL) hasTVal {
  return result.hasTVal;
}
- (int64_t) tVal {
  return result.tVal;
}
- (ForeignHistory_Builder*) setTVal:(int64_t) value {
  result.hasTVal = YES;
  result.tVal = value;
  return self;
}
- (ForeignHistory_Builder*) clearTVal {
  result.hasTVal = NO;
  result.tVal = 0L;
  return self;
}
@end

@interface OHLC ()
@property int32_t time;
@property int32_t open;
@property int32_t high;
@property int32_t low;
@property int32_t close;
@property int32_t volume;
@end

@implementation OHLC

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasOpen {
  return !!hasOpen_;
}
- (void) setHasOpen:(BOOL) value {
  hasOpen_ = !!value;
}
@synthesize open;
- (BOOL) hasHigh {
  return !!hasHigh_;
}
- (void) setHasHigh:(BOOL) value {
  hasHigh_ = !!value;
}
@synthesize high;
- (BOOL) hasLow {
  return !!hasLow_;
}
- (void) setHasLow:(BOOL) value {
  hasLow_ = !!value;
}
@synthesize low;
- (BOOL) hasClose {
  return !!hasClose_;
}
- (void) setHasClose:(BOOL) value {
  hasClose_ = !!value;
}
@synthesize close;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (id) init {
  if ((self = [super init])) {
    self.time = 0;
    self.open = 0;
    self.high = 0;
    self.low = 0;
    self.close = 0;
    self.volume = 0;
  }
  return self;
}
static OHLC* defaultOHLCInstance = nil;
+ (void) initialize {
  if (self == [OHLC class]) {
    defaultOHLCInstance = [[OHLC alloc] init];
  }
}
+ (OHLC*) defaultInstance {
  return defaultOHLCInstance;
}
- (OHLC*) defaultInstance {
  return defaultOHLCInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeInt32:1 value:self.time];
  }
  if (self.hasOpen) {
    [output writeInt32:2 value:self.open];
  }
  if (self.hasHigh) {
    [output writeInt32:3 value:self.high];
  }
  if (self.hasLow) {
    [output writeInt32:4 value:self.low];
  }
  if (self.hasClose) {
    [output writeInt32:5 value:self.close];
  }
  if (self.hasVolume) {
    [output writeInt32:6 value:self.volume];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTime) {
    size += computeInt32Size(1, self.time);
  }
  if (self.hasOpen) {
    size += computeInt32Size(2, self.open);
  }
  if (self.hasHigh) {
    size += computeInt32Size(3, self.high);
  }
  if (self.hasLow) {
    size += computeInt32Size(4, self.low);
  }
  if (self.hasClose) {
    size += computeInt32Size(5, self.close);
  }
  if (self.hasVolume) {
    size += computeInt32Size(6, self.volume);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OHLC*) parseFromData:(NSData*) data {
  return (OHLC*)[[[OHLC builder] mergeFromData:data] build];
}
+ (OHLC*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OHLC*)[[[OHLC builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OHLC*) parseFromInputStream:(NSInputStream*) input {
  return (OHLC*)[[[OHLC builder] mergeFromInputStream:input] build];
}
+ (OHLC*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OHLC*)[[[OHLC builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OHLC*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OHLC*)[[[OHLC builder] mergeFromCodedInputStream:input] build];
}
+ (OHLC*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OHLC*)[[[OHLC builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OHLC_Builder*) builder {
  return [[OHLC_Builder alloc] init];
}
+ (OHLC_Builder*) builderWithPrototype:(OHLC*) prototype {
  return [[OHLC builder] mergeFrom:prototype];
}
- (OHLC_Builder*) builder {
  return [OHLC builder];
}
- (OHLC_Builder*) toBuilder {
  return [OHLC builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  if (self.hasOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"open", [NSNumber numberWithInt:self.open]];
  }
  if (self.hasHigh) {
    [output appendFormat:@"%@%@: %@\n", indent, @"high", [NSNumber numberWithInt:self.high]];
  }
  if (self.hasLow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"low", [NSNumber numberWithInt:self.low]];
  }
  if (self.hasClose) {
    [output appendFormat:@"%@%@: %@\n", indent, @"close", [NSNumber numberWithInt:self.close]];
  }
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithInt:self.volume]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OHLC class]]) {
    return NO;
  }
  OHLC *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasOpen == otherMessage.hasOpen &&
      (!self.hasOpen || self.open == otherMessage.open) &&
      self.hasHigh == otherMessage.hasHigh &&
      (!self.hasHigh || self.high == otherMessage.high) &&
      self.hasLow == otherMessage.hasLow &&
      (!self.hasLow || self.low == otherMessage.low) &&
      self.hasClose == otherMessage.hasClose &&
      (!self.hasClose || self.close == otherMessage.close) &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  if (self.hasOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.open] hash];
  }
  if (self.hasHigh) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.high] hash];
  }
  if (self.hasLow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.low] hash];
  }
  if (self.hasClose) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.close] hash];
  }
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.volume] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OHLC_Builder()
@property (strong) OHLC* result;
@end

@implementation OHLC_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OHLC alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OHLC_Builder*) clear {
  self.result = [[OHLC alloc] init];
  return self;
}
- (OHLC_Builder*) clone {
  return [OHLC builderWithPrototype:result];
}
- (OHLC*) defaultInstance {
  return [OHLC defaultInstance];
}
- (OHLC*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OHLC*) buildPartial {
  OHLC* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OHLC_Builder*) mergeFrom:(OHLC*) other {
  if (other == [OHLC defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasOpen) {
    [self setOpen:other.open];
  }
  if (other.hasHigh) {
    [self setHigh:other.high];
  }
  if (other.hasLow) {
    [self setLow:other.low];
  }
  if (other.hasClose) {
    [self setClose:other.close];
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OHLC_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OHLC_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readInt32]];
        break;
      }
      case 16: {
        [self setOpen:[input readInt32]];
        break;
      }
      case 24: {
        [self setHigh:[input readInt32]];
        break;
      }
      case 32: {
        [self setLow:[input readInt32]];
        break;
      }
      case 40: {
        [self setClose:[input readInt32]];
        break;
      }
      case 48: {
        [self setVolume:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (OHLC_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (OHLC_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
- (BOOL) hasOpen {
  return result.hasOpen;
}
- (int32_t) open {
  return result.open;
}
- (OHLC_Builder*) setOpen:(int32_t) value {
  result.hasOpen = YES;
  result.open = value;
  return self;
}
- (OHLC_Builder*) clearOpen {
  result.hasOpen = NO;
  result.open = 0;
  return self;
}
- (BOOL) hasHigh {
  return result.hasHigh;
}
- (int32_t) high {
  return result.high;
}
- (OHLC_Builder*) setHigh:(int32_t) value {
  result.hasHigh = YES;
  result.high = value;
  return self;
}
- (OHLC_Builder*) clearHigh {
  result.hasHigh = NO;
  result.high = 0;
  return self;
}
- (BOOL) hasLow {
  return result.hasLow;
}
- (int32_t) low {
  return result.low;
}
- (OHLC_Builder*) setLow:(int32_t) value {
  result.hasLow = YES;
  result.low = value;
  return self;
}
- (OHLC_Builder*) clearLow {
  result.hasLow = NO;
  result.low = 0;
  return self;
}
- (BOOL) hasClose {
  return result.hasClose;
}
- (int32_t) close {
  return result.close;
}
- (OHLC_Builder*) setClose:(int32_t) value {
  result.hasClose = YES;
  result.close = value;
  return self;
}
- (OHLC_Builder*) clearClose {
  result.hasClose = NO;
  result.close = 0;
  return self;
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (int32_t) volume {
  return result.volume;
}
- (OHLC_Builder*) setVolume:(int32_t) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (OHLC_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0;
  return self;
}
@end

@interface KiIndicesData ()
@property int32_t id;
@property (strong) NSString* code;
@end

@implementation KiIndicesData

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.code = @"";
  }
  return self;
}
static KiIndicesData* defaultKiIndicesDataInstance = nil;
+ (void) initialize {
  if (self == [KiIndicesData class]) {
    defaultKiIndicesDataInstance = [[KiIndicesData alloc] init];
  }
}
+ (KiIndicesData*) defaultInstance {
  return defaultKiIndicesDataInstance;
}
- (KiIndicesData*) defaultInstance {
  return defaultKiIndicesDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiIndicesData*) parseFromData:(NSData*) data {
  return (KiIndicesData*)[[[KiIndicesData builder] mergeFromData:data] build];
}
+ (KiIndicesData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiIndicesData*)[[[KiIndicesData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiIndicesData*) parseFromInputStream:(NSInputStream*) input {
  return (KiIndicesData*)[[[KiIndicesData builder] mergeFromInputStream:input] build];
}
+ (KiIndicesData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiIndicesData*)[[[KiIndicesData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiIndicesData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiIndicesData*)[[[KiIndicesData builder] mergeFromCodedInputStream:input] build];
}
+ (KiIndicesData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiIndicesData*)[[[KiIndicesData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiIndicesData_Builder*) builder {
  return [[KiIndicesData_Builder alloc] init];
}
+ (KiIndicesData_Builder*) builderWithPrototype:(KiIndicesData*) prototype {
  return [[KiIndicesData builder] mergeFrom:prototype];
}
- (KiIndicesData_Builder*) builder {
  return [KiIndicesData builder];
}
- (KiIndicesData_Builder*) toBuilder {
  return [KiIndicesData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiIndicesData class]]) {
    return NO;
  }
  KiIndicesData *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiIndicesData_Builder()
@property (strong) KiIndicesData* result;
@end

@implementation KiIndicesData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiIndicesData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiIndicesData_Builder*) clear {
  self.result = [[KiIndicesData alloc] init];
  return self;
}
- (KiIndicesData_Builder*) clone {
  return [KiIndicesData builderWithPrototype:result];
}
- (KiIndicesData*) defaultInstance {
  return [KiIndicesData defaultInstance];
}
- (KiIndicesData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiIndicesData*) buildPartial {
  KiIndicesData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiIndicesData_Builder*) mergeFrom:(KiIndicesData*) other {
  if (other == [KiIndicesData defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiIndicesData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiIndicesData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (KiIndicesData_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (KiIndicesData_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (KiIndicesData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (KiIndicesData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
@end

@interface IdxIndices ()
@property (strong) NSString* code;
@property int64_t baseValue;
@property int64_t marketValue;
@property (strong) Indices* indices;
@end

@implementation IdxIndices

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasBaseValue {
  return !!hasBaseValue_;
}
- (void) setHasBaseValue:(BOOL) value {
  hasBaseValue_ = !!value;
}
@synthesize baseValue;
- (BOOL) hasMarketValue {
  return !!hasMarketValue_;
}
- (void) setHasMarketValue:(BOOL) value {
  hasMarketValue_ = !!value;
}
@synthesize marketValue;
- (BOOL) hasIndices {
  return !!hasIndices_;
}
- (void) setHasIndices:(BOOL) value {
  hasIndices_ = !!value;
}
@synthesize indices;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.baseValue = 0L;
    self.marketValue = 0L;
    self.indices = [Indices defaultInstance];
  }
  return self;
}
static IdxIndices* defaultIdxIndicesInstance = nil;
+ (void) initialize {
  if (self == [IdxIndices class]) {
    defaultIdxIndicesInstance = [[IdxIndices alloc] init];
  }
}
+ (IdxIndices*) defaultInstance {
  return defaultIdxIndicesInstance;
}
- (IdxIndices*) defaultInstance {
  return defaultIdxIndicesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasBaseValue) {
    [output writeInt64:2 value:self.baseValue];
  }
  if (self.hasMarketValue) {
    [output writeInt64:3 value:self.marketValue];
  }
  if (self.hasIndices) {
    [output writeMessage:4 value:self.indices];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasBaseValue) {
    size += computeInt64Size(2, self.baseValue);
  }
  if (self.hasMarketValue) {
    size += computeInt64Size(3, self.marketValue);
  }
  if (self.hasIndices) {
    size += computeMessageSize(4, self.indices);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxIndices*) parseFromData:(NSData*) data {
  return (IdxIndices*)[[[IdxIndices builder] mergeFromData:data] build];
}
+ (IdxIndices*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxIndices*)[[[IdxIndices builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxIndices*) parseFromInputStream:(NSInputStream*) input {
  return (IdxIndices*)[[[IdxIndices builder] mergeFromInputStream:input] build];
}
+ (IdxIndices*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxIndices*)[[[IdxIndices builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxIndices*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxIndices*)[[[IdxIndices builder] mergeFromCodedInputStream:input] build];
}
+ (IdxIndices*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxIndices*)[[[IdxIndices builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxIndices_Builder*) builder {
  return [[IdxIndices_Builder alloc] init];
}
+ (IdxIndices_Builder*) builderWithPrototype:(IdxIndices*) prototype {
  return [[IdxIndices builder] mergeFrom:prototype];
}
- (IdxIndices_Builder*) builder {
  return [IdxIndices builder];
}
- (IdxIndices_Builder*) toBuilder {
  return [IdxIndices builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasBaseValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseValue", [NSNumber numberWithLongLong:self.baseValue]];
  }
  if (self.hasMarketValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketValue", [NSNumber numberWithLongLong:self.marketValue]];
  }
  if (self.hasIndices) {
    [output appendFormat:@"%@%@ {\n", indent, @"indices"];
    [self.indices writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxIndices class]]) {
    return NO;
  }
  IdxIndices *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasBaseValue == otherMessage.hasBaseValue &&
      (!self.hasBaseValue || self.baseValue == otherMessage.baseValue) &&
      self.hasMarketValue == otherMessage.hasMarketValue &&
      (!self.hasMarketValue || self.marketValue == otherMessage.marketValue) &&
      self.hasIndices == otherMessage.hasIndices &&
      (!self.hasIndices || [self.indices isEqual:otherMessage.indices]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasBaseValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.baseValue] hash];
  }
  if (self.hasMarketValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.marketValue] hash];
  }
  if (self.hasIndices) {
    hashCode = hashCode * 31 + [self.indices hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxIndices_Builder()
@property (strong) IdxIndices* result;
@end

@implementation IdxIndices_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxIndices alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxIndices_Builder*) clear {
  self.result = [[IdxIndices alloc] init];
  return self;
}
- (IdxIndices_Builder*) clone {
  return [IdxIndices builderWithPrototype:result];
}
- (IdxIndices*) defaultInstance {
  return [IdxIndices defaultInstance];
}
- (IdxIndices*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxIndices*) buildPartial {
  IdxIndices* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxIndices_Builder*) mergeFrom:(IdxIndices*) other {
  if (other == [IdxIndices defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasBaseValue) {
    [self setBaseValue:other.baseValue];
  }
  if (other.hasMarketValue) {
    [self setMarketValue:other.marketValue];
  }
  if (other.hasIndices) {
    [self mergeIndices:other.indices];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxIndices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxIndices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 16: {
        [self setBaseValue:[input readInt64]];
        break;
      }
      case 24: {
        [self setMarketValue:[input readInt64]];
        break;
      }
      case 34: {
        Indices_Builder* subBuilder = [Indices builder];
        if (self.hasIndices) {
          [subBuilder mergeFrom:self.indices];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIndices:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxIndices_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxIndices_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasBaseValue {
  return result.hasBaseValue;
}
- (int64_t) baseValue {
  return result.baseValue;
}
- (IdxIndices_Builder*) setBaseValue:(int64_t) value {
  result.hasBaseValue = YES;
  result.baseValue = value;
  return self;
}
- (IdxIndices_Builder*) clearBaseValue {
  result.hasBaseValue = NO;
  result.baseValue = 0L;
  return self;
}
- (BOOL) hasMarketValue {
  return result.hasMarketValue;
}
- (int64_t) marketValue {
  return result.marketValue;
}
- (IdxIndices_Builder*) setMarketValue:(int64_t) value {
  result.hasMarketValue = YES;
  result.marketValue = value;
  return self;
}
- (IdxIndices_Builder*) clearMarketValue {
  result.hasMarketValue = NO;
  result.marketValue = 0L;
  return self;
}
- (BOOL) hasIndices {
  return result.hasIndices;
}
- (Indices*) indices {
  return result.indices;
}
- (IdxIndices_Builder*) setIndices:(Indices*) value {
  result.hasIndices = YES;
  result.indices = value;
  return self;
}
- (IdxIndices_Builder*) setIndicesBuilder:(Indices_Builder*) builderForValue {
  return [self setIndices:[builderForValue build]];
}
- (IdxIndices_Builder*) mergeIndices:(Indices*) value {
  if (result.hasIndices &&
      result.indices != [Indices defaultInstance]) {
    result.indices =
      [[[Indices builderWithPrototype:result.indices] mergeFrom:value] buildPartial];
  } else {
    result.indices = value;
  }
  result.hasIndices = YES;
  return self;
}
- (IdxIndices_Builder*) clearIndices {
  result.hasIndices = NO;
  result.indices = [Indices defaultInstance];
  return self;
}
@end

@interface KiIndices ()
@property int32_t codeId;
@property (strong) Indices* indices;
@end

@implementation KiIndices

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasIndices {
  return !!hasIndices_;
}
- (void) setHasIndices:(BOOL) value {
  hasIndices_ = !!value;
}
@synthesize indices;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.indices = [Indices defaultInstance];
  }
  return self;
}
static KiIndices* defaultKiIndicesInstance = nil;
+ (void) initialize {
  if (self == [KiIndices class]) {
    defaultKiIndicesInstance = [[KiIndices alloc] init];
  }
}
+ (KiIndices*) defaultInstance {
  return defaultKiIndicesInstance;
}
- (KiIndices*) defaultInstance {
  return defaultKiIndicesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasIndices) {
    [output writeMessage:3 value:self.indices];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasIndices) {
    size += computeMessageSize(3, self.indices);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiIndices*) parseFromData:(NSData*) data {
  return (KiIndices*)[[[KiIndices builder] mergeFromData:data] build];
}
+ (KiIndices*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiIndices*)[[[KiIndices builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiIndices*) parseFromInputStream:(NSInputStream*) input {
  return (KiIndices*)[[[KiIndices builder] mergeFromInputStream:input] build];
}
+ (KiIndices*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiIndices*)[[[KiIndices builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiIndices*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiIndices*)[[[KiIndices builder] mergeFromCodedInputStream:input] build];
}
+ (KiIndices*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiIndices*)[[[KiIndices builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiIndices_Builder*) builder {
  return [[KiIndices_Builder alloc] init];
}
+ (KiIndices_Builder*) builderWithPrototype:(KiIndices*) prototype {
  return [[KiIndices builder] mergeFrom:prototype];
}
- (KiIndices_Builder*) builder {
  return [KiIndices builder];
}
- (KiIndices_Builder*) toBuilder {
  return [KiIndices builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasIndices) {
    [output appendFormat:@"%@%@ {\n", indent, @"indices"];
    [self.indices writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiIndices class]]) {
    return NO;
  }
  KiIndices *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasIndices == otherMessage.hasIndices &&
      (!self.hasIndices || [self.indices isEqual:otherMessage.indices]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasIndices) {
    hashCode = hashCode * 31 + [self.indices hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiIndices_Builder()
@property (strong) KiIndices* result;
@end

@implementation KiIndices_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiIndices alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiIndices_Builder*) clear {
  self.result = [[KiIndices alloc] init];
  return self;
}
- (KiIndices_Builder*) clone {
  return [KiIndices builderWithPrototype:result];
}
- (KiIndices*) defaultInstance {
  return [KiIndices defaultInstance];
}
- (KiIndices*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiIndices*) buildPartial {
  KiIndices* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiIndices_Builder*) mergeFrom:(KiIndices*) other {
  if (other == [KiIndices defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasIndices) {
    [self mergeIndices:other.indices];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiIndices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiIndices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 26: {
        Indices_Builder* subBuilder = [Indices builder];
        if (self.hasIndices) {
          [subBuilder mergeFrom:self.indices];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIndices:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiIndices_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiIndices_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasIndices {
  return result.hasIndices;
}
- (Indices*) indices {
  return result.indices;
}
- (KiIndices_Builder*) setIndices:(Indices*) value {
  result.hasIndices = YES;
  result.indices = value;
  return self;
}
- (KiIndices_Builder*) setIndicesBuilder:(Indices_Builder*) builderForValue {
  return [self setIndices:[builderForValue build]];
}
- (KiIndices_Builder*) mergeIndices:(Indices*) value {
  if (result.hasIndices &&
      result.indices != [Indices defaultInstance]) {
    result.indices =
      [[[Indices builderWithPrototype:result.indices] mergeFrom:value] buildPartial];
  } else {
    result.indices = value;
  }
  result.hasIndices = YES;
  return self;
}
- (KiIndices_Builder*) clearIndices {
  result.hasIndices = NO;
  result.indices = [Indices defaultInstance];
  return self;
}
@end

@interface Indices ()
@property Float32 previous;
@property (strong) OHLCFloat* ohlc;
@end

@implementation Indices

- (BOOL) hasPrevious {
  return !!hasPrevious_;
}
- (void) setHasPrevious:(BOOL) value {
  hasPrevious_ = !!value;
}
@synthesize previous;
- (BOOL) hasOhlc {
  return !!hasOhlc_;
}
- (void) setHasOhlc:(BOOL) value {
  hasOhlc_ = !!value;
}
@synthesize ohlc;
- (id) init {
  if ((self = [super init])) {
    self.previous = 0;
    self.ohlc = [OHLCFloat defaultInstance];
  }
  return self;
}
static Indices* defaultIndicesInstance = nil;
+ (void) initialize {
  if (self == [Indices class]) {
    defaultIndicesInstance = [[Indices alloc] init];
  }
}
+ (Indices*) defaultInstance {
  return defaultIndicesInstance;
}
- (Indices*) defaultInstance {
  return defaultIndicesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrevious) {
    [output writeFloat:1 value:self.previous];
  }
  if (self.hasOhlc) {
    [output writeMessage:2 value:self.ohlc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrevious) {
    size += computeFloatSize(1, self.previous);
  }
  if (self.hasOhlc) {
    size += computeMessageSize(2, self.ohlc);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Indices*) parseFromData:(NSData*) data {
  return (Indices*)[[[Indices builder] mergeFromData:data] build];
}
+ (Indices*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Indices*)[[[Indices builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Indices*) parseFromInputStream:(NSInputStream*) input {
  return (Indices*)[[[Indices builder] mergeFromInputStream:input] build];
}
+ (Indices*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Indices*)[[[Indices builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Indices*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Indices*)[[[Indices builder] mergeFromCodedInputStream:input] build];
}
+ (Indices*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Indices*)[[[Indices builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Indices_Builder*) builder {
  return [[Indices_Builder alloc] init];
}
+ (Indices_Builder*) builderWithPrototype:(Indices*) prototype {
  return [[Indices builder] mergeFrom:prototype];
}
- (Indices_Builder*) builder {
  return [Indices builder];
}
- (Indices_Builder*) toBuilder {
  return [Indices builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasPrevious) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previous", [NSNumber numberWithFloat:self.previous]];
  }
  if (self.hasOhlc) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [self.ohlc writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Indices class]]) {
    return NO;
  }
  Indices *otherMessage = other;
  return
      self.hasPrevious == otherMessage.hasPrevious &&
      (!self.hasPrevious || self.previous == otherMessage.previous) &&
      self.hasOhlc == otherMessage.hasOhlc &&
      (!self.hasOhlc || [self.ohlc isEqual:otherMessage.ohlc]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasPrevious) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.previous] hash];
  }
  if (self.hasOhlc) {
    hashCode = hashCode * 31 + [self.ohlc hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Indices_Builder()
@property (strong) Indices* result;
@end

@implementation Indices_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Indices alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Indices_Builder*) clear {
  self.result = [[Indices alloc] init];
  return self;
}
- (Indices_Builder*) clone {
  return [Indices builderWithPrototype:result];
}
- (Indices*) defaultInstance {
  return [Indices defaultInstance];
}
- (Indices*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Indices*) buildPartial {
  Indices* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Indices_Builder*) mergeFrom:(Indices*) other {
  if (other == [Indices defaultInstance]) {
    return self;
  }
  if (other.hasPrevious) {
    [self setPrevious:other.previous];
  }
  if (other.hasOhlc) {
    [self mergeOhlc:other.ohlc];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Indices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Indices_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setPrevious:[input readFloat]];
        break;
      }
      case 18: {
        OHLCFloat_Builder* subBuilder = [OHLCFloat builder];
        if (self.hasOhlc) {
          [subBuilder mergeFrom:self.ohlc];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOhlc:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPrevious {
  return result.hasPrevious;
}
- (Float32) previous {
  return result.previous;
}
- (Indices_Builder*) setPrevious:(Float32) value {
  result.hasPrevious = YES;
  result.previous = value;
  return self;
}
- (Indices_Builder*) clearPrevious {
  result.hasPrevious = NO;
  result.previous = 0;
  return self;
}
- (BOOL) hasOhlc {
  return result.hasOhlc;
}
- (OHLCFloat*) ohlc {
  return result.ohlc;
}
- (Indices_Builder*) setOhlc:(OHLCFloat*) value {
  result.hasOhlc = YES;
  result.ohlc = value;
  return self;
}
- (Indices_Builder*) setOhlcBuilder:(OHLCFloat_Builder*) builderForValue {
  return [self setOhlc:[builderForValue build]];
}
- (Indices_Builder*) mergeOhlc:(OHLCFloat*) value {
  if (result.hasOhlc &&
      result.ohlc != [OHLCFloat defaultInstance]) {
    result.ohlc =
      [[[OHLCFloat builderWithPrototype:result.ohlc] mergeFrom:value] buildPartial];
  } else {
    result.ohlc = value;
  }
  result.hasOhlc = YES;
  return self;
}
- (Indices_Builder*) clearOhlc {
  result.hasOhlc = NO;
  result.ohlc = [OHLCFloat defaultInstance];
  return self;
}
@end

@interface IndicesHistory ()
@property int32_t codeId;
@property (strong) NSMutableArray * ohlcArray;
@end

@implementation IndicesHistory

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
@synthesize ohlcArray;
@dynamic ohlc;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
  }
  return self;
}
static IndicesHistory* defaultIndicesHistoryInstance = nil;
+ (void) initialize {
  if (self == [IndicesHistory class]) {
    defaultIndicesHistoryInstance = [[IndicesHistory alloc] init];
  }
}
+ (IndicesHistory*) defaultInstance {
  return defaultIndicesHistoryInstance;
}
- (IndicesHistory*) defaultInstance {
  return defaultIndicesHistoryInstance;
}
- (NSArray *)ohlc {
  return ohlcArray;
}
- (OHLCFloat*)ohlcAtIndex:(NSUInteger)index {
  return [ohlcArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  for (OHLCFloat *element in self.ohlcArray) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  for (OHLCFloat *element in self.ohlcArray) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IndicesHistory*) parseFromData:(NSData*) data {
  return (IndicesHistory*)[[[IndicesHistory builder] mergeFromData:data] build];
}
+ (IndicesHistory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IndicesHistory*)[[[IndicesHistory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IndicesHistory*) parseFromInputStream:(NSInputStream*) input {
  return (IndicesHistory*)[[[IndicesHistory builder] mergeFromInputStream:input] build];
}
+ (IndicesHistory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IndicesHistory*)[[[IndicesHistory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IndicesHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IndicesHistory*)[[[IndicesHistory builder] mergeFromCodedInputStream:input] build];
}
+ (IndicesHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IndicesHistory*)[[[IndicesHistory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IndicesHistory_Builder*) builder {
  return [[IndicesHistory_Builder alloc] init];
}
+ (IndicesHistory_Builder*) builderWithPrototype:(IndicesHistory*) prototype {
  return [[IndicesHistory builder] mergeFrom:prototype];
}
- (IndicesHistory_Builder*) builder {
  return [IndicesHistory builder];
}
- (IndicesHistory_Builder*) toBuilder {
  return [IndicesHistory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  for (OHLCFloat* element in self.ohlcArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"ohlc"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IndicesHistory class]]) {
    return NO;
  }
  IndicesHistory *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      [self.ohlcArray isEqualToArray:otherMessage.ohlcArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  for (OHLCFloat* element in self.ohlcArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IndicesHistory_Builder()
@property (strong) IndicesHistory* result;
@end

@implementation IndicesHistory_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IndicesHistory alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IndicesHistory_Builder*) clear {
  self.result = [[IndicesHistory alloc] init];
  return self;
}
- (IndicesHistory_Builder*) clone {
  return [IndicesHistory builderWithPrototype:result];
}
- (IndicesHistory*) defaultInstance {
  return [IndicesHistory defaultInstance];
}
- (IndicesHistory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IndicesHistory*) buildPartial {
  IndicesHistory* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IndicesHistory_Builder*) mergeFrom:(IndicesHistory*) other {
  if (other == [IndicesHistory defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.ohlcArray.count > 0) {
    if (result.ohlcArray == nil) {
      result.ohlcArray = [[NSMutableArray alloc] initWithArray:other.ohlcArray];
    } else {
      [result.ohlcArray addObjectsFromArray:other.ohlcArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IndicesHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IndicesHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 26: {
        OHLCFloat_Builder* subBuilder = [OHLCFloat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOhlc:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (IndicesHistory_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (IndicesHistory_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (NSMutableArray *)ohlc {
  return result.ohlcArray;
}
- (OHLCFloat*)ohlcAtIndex:(NSUInteger)index {
  return [result ohlcAtIndex:index];
}
- (IndicesHistory_Builder *)addOhlc:(OHLCFloat*)value {
  if (result.ohlcArray == nil) {
    result.ohlcArray = [[NSMutableArray alloc]init];
  }
  [result.ohlcArray addObject:value];
  return self;
}
- (IndicesHistory_Builder *)setOhlcArray:(NSArray *)array {
  result.ohlcArray = [[NSMutableArray alloc]init];
  return self;
}
- (IndicesHistory_Builder *)clearOhlc {
  result.ohlcArray = nil;
  return self;
}
@end

@interface OHLCFloat ()
@property int32_t time;
@property Float32 open;
@property Float32 high;
@property Float32 low;
@property Float32 close;
@property Float32 volume;
@end

@implementation OHLCFloat

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasOpen {
  return !!hasOpen_;
}
- (void) setHasOpen:(BOOL) value {
  hasOpen_ = !!value;
}
@synthesize open;
- (BOOL) hasHigh {
  return !!hasHigh_;
}
- (void) setHasHigh:(BOOL) value {
  hasHigh_ = !!value;
}
@synthesize high;
- (BOOL) hasLow {
  return !!hasLow_;
}
- (void) setHasLow:(BOOL) value {
  hasLow_ = !!value;
}
@synthesize low;
- (BOOL) hasClose {
  return !!hasClose_;
}
- (void) setHasClose:(BOOL) value {
  hasClose_ = !!value;
}
@synthesize close;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (id) init {
  if ((self = [super init])) {
    self.time = 0;
    self.open = 0;
    self.high = 0;
    self.low = 0;
    self.close = 0;
    self.volume = 0;
  }
  return self;
}
static OHLCFloat* defaultOHLCFloatInstance = nil;
+ (void) initialize {
  if (self == [OHLCFloat class]) {
    defaultOHLCFloatInstance = [[OHLCFloat alloc] init];
  }
}
+ (OHLCFloat*) defaultInstance {
  return defaultOHLCFloatInstance;
}
- (OHLCFloat*) defaultInstance {
  return defaultOHLCFloatInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeInt32:1 value:self.time];
  }
  if (self.hasOpen) {
    [output writeFloat:2 value:self.open];
  }
  if (self.hasHigh) {
    [output writeFloat:3 value:self.high];
  }
  if (self.hasLow) {
    [output writeFloat:4 value:self.low];
  }
  if (self.hasClose) {
    [output writeFloat:5 value:self.close];
  }
  if (self.hasVolume) {
    [output writeFloat:6 value:self.volume];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTime) {
    size += computeInt32Size(1, self.time);
  }
  if (self.hasOpen) {
    size += computeFloatSize(2, self.open);
  }
  if (self.hasHigh) {
    size += computeFloatSize(3, self.high);
  }
  if (self.hasLow) {
    size += computeFloatSize(4, self.low);
  }
  if (self.hasClose) {
    size += computeFloatSize(5, self.close);
  }
  if (self.hasVolume) {
    size += computeFloatSize(6, self.volume);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OHLCFloat*) parseFromData:(NSData*) data {
  return (OHLCFloat*)[[[OHLCFloat builder] mergeFromData:data] build];
}
+ (OHLCFloat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OHLCFloat*)[[[OHLCFloat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OHLCFloat*) parseFromInputStream:(NSInputStream*) input {
  return (OHLCFloat*)[[[OHLCFloat builder] mergeFromInputStream:input] build];
}
+ (OHLCFloat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OHLCFloat*)[[[OHLCFloat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OHLCFloat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OHLCFloat*)[[[OHLCFloat builder] mergeFromCodedInputStream:input] build];
}
+ (OHLCFloat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OHLCFloat*)[[[OHLCFloat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OHLCFloat_Builder*) builder {
  return [[OHLCFloat_Builder alloc] init];
}
+ (OHLCFloat_Builder*) builderWithPrototype:(OHLCFloat*) prototype {
  return [[OHLCFloat builder] mergeFrom:prototype];
}
- (OHLCFloat_Builder*) builder {
  return [OHLCFloat builder];
}
- (OHLCFloat_Builder*) toBuilder {
  return [OHLCFloat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInt:self.time]];
  }
  if (self.hasOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"open", [NSNumber numberWithFloat:self.open]];
  }
  if (self.hasHigh) {
    [output appendFormat:@"%@%@: %@\n", indent, @"high", [NSNumber numberWithFloat:self.high]];
  }
  if (self.hasLow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"low", [NSNumber numberWithFloat:self.low]];
  }
  if (self.hasClose) {
    [output appendFormat:@"%@%@: %@\n", indent, @"close", [NSNumber numberWithFloat:self.close]];
  }
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithFloat:self.volume]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OHLCFloat class]]) {
    return NO;
  }
  OHLCFloat *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasOpen == otherMessage.hasOpen &&
      (!self.hasOpen || self.open == otherMessage.open) &&
      self.hasHigh == otherMessage.hasHigh &&
      (!self.hasHigh || self.high == otherMessage.high) &&
      self.hasLow == otherMessage.hasLow &&
      (!self.hasLow || self.low == otherMessage.low) &&
      self.hasClose == otherMessage.hasClose &&
      (!self.hasClose || self.close == otherMessage.close) &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.time] hash];
  }
  if (self.hasOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.open] hash];
  }
  if (self.hasHigh) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.high] hash];
  }
  if (self.hasLow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.low] hash];
  }
  if (self.hasClose) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.close] hash];
  }
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.volume] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OHLCFloat_Builder()
@property (strong) OHLCFloat* result;
@end

@implementation OHLCFloat_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OHLCFloat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OHLCFloat_Builder*) clear {
  self.result = [[OHLCFloat alloc] init];
  return self;
}
- (OHLCFloat_Builder*) clone {
  return [OHLCFloat builderWithPrototype:result];
}
- (OHLCFloat*) defaultInstance {
  return [OHLCFloat defaultInstance];
}
- (OHLCFloat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OHLCFloat*) buildPartial {
  OHLCFloat* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OHLCFloat_Builder*) mergeFrom:(OHLCFloat*) other {
  if (other == [OHLCFloat defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasOpen) {
    [self setOpen:other.open];
  }
  if (other.hasHigh) {
    [self setHigh:other.high];
  }
  if (other.hasLow) {
    [self setLow:other.low];
  }
  if (other.hasClose) {
    [self setClose:other.close];
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OHLCFloat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OHLCFloat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readInt32]];
        break;
      }
      case 21: {
        [self setOpen:[input readFloat]];
        break;
      }
      case 29: {
        [self setHigh:[input readFloat]];
        break;
      }
      case 37: {
        [self setLow:[input readFloat]];
        break;
      }
      case 45: {
        [self setClose:[input readFloat]];
        break;
      }
      case 53: {
        [self setVolume:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (OHLCFloat_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (OHLCFloat_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
- (BOOL) hasOpen {
  return result.hasOpen;
}
- (Float32) open {
  return result.open;
}
- (OHLCFloat_Builder*) setOpen:(Float32) value {
  result.hasOpen = YES;
  result.open = value;
  return self;
}
- (OHLCFloat_Builder*) clearOpen {
  result.hasOpen = NO;
  result.open = 0;
  return self;
}
- (BOOL) hasHigh {
  return result.hasHigh;
}
- (Float32) high {
  return result.high;
}
- (OHLCFloat_Builder*) setHigh:(Float32) value {
  result.hasHigh = YES;
  result.high = value;
  return self;
}
- (OHLCFloat_Builder*) clearHigh {
  result.hasHigh = NO;
  result.high = 0;
  return self;
}
- (BOOL) hasLow {
  return result.hasLow;
}
- (Float32) low {
  return result.low;
}
- (OHLCFloat_Builder*) setLow:(Float32) value {
  result.hasLow = YES;
  result.low = value;
  return self;
}
- (OHLCFloat_Builder*) clearLow {
  result.hasLow = NO;
  result.low = 0;
  return self;
}
- (BOOL) hasClose {
  return result.hasClose;
}
- (Float32) close {
  return result.close;
}
- (OHLCFloat_Builder*) setClose:(Float32) value {
  result.hasClose = YES;
  result.close = value;
  return self;
}
- (OHLCFloat_Builder*) clearClose {
  result.hasClose = NO;
  result.close = 0;
  return self;
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (Float32) volume {
  return result.volume;
}
- (OHLCFloat_Builder*) setVolume:(Float32) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (OHLCFloat_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0;
  return self;
}
@end

@interface IdxMarketDepth ()
@property (strong) NSString* code;
@property Board board;
@property (strong) BestBidOffer* bestBidOffer1;
@property (strong) BestBidOffer* bestBidOffer2;
@property (strong) BestBidOffer* bestBidOffer3;
@property (strong) BestBidOffer* bestBidOffer4;
@property (strong) BestBidOffer* bestBidOffer5;
@end

@implementation IdxMarketDepth

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasBestBidOffer1 {
  return !!hasBestBidOffer1_;
}
- (void) setHasBestBidOffer1:(BOOL) value {
  hasBestBidOffer1_ = !!value;
}
@synthesize bestBidOffer1;
- (BOOL) hasBestBidOffer2 {
  return !!hasBestBidOffer2_;
}
- (void) setHasBestBidOffer2:(BOOL) value {
  hasBestBidOffer2_ = !!value;
}
@synthesize bestBidOffer2;
- (BOOL) hasBestBidOffer3 {
  return !!hasBestBidOffer3_;
}
- (void) setHasBestBidOffer3:(BOOL) value {
  hasBestBidOffer3_ = !!value;
}
@synthesize bestBidOffer3;
- (BOOL) hasBestBidOffer4 {
  return !!hasBestBidOffer4_;
}
- (void) setHasBestBidOffer4:(BOOL) value {
  hasBestBidOffer4_ = !!value;
}
@synthesize bestBidOffer4;
- (BOOL) hasBestBidOffer5 {
  return !!hasBestBidOffer5_;
}
- (void) setHasBestBidOffer5:(BOOL) value {
  hasBestBidOffer5_ = !!value;
}
@synthesize bestBidOffer5;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.board = BoardRg;
    self.bestBidOffer1 = [BestBidOffer defaultInstance];
    self.bestBidOffer2 = [BestBidOffer defaultInstance];
    self.bestBidOffer3 = [BestBidOffer defaultInstance];
    self.bestBidOffer4 = [BestBidOffer defaultInstance];
    self.bestBidOffer5 = [BestBidOffer defaultInstance];
  }
  return self;
}
static IdxMarketDepth* defaultIdxMarketDepthInstance = nil;
+ (void) initialize {
  if (self == [IdxMarketDepth class]) {
    defaultIdxMarketDepthInstance = [[IdxMarketDepth alloc] init];
  }
}
+ (IdxMarketDepth*) defaultInstance {
  return defaultIdxMarketDepthInstance;
}
- (IdxMarketDepth*) defaultInstance {
  return defaultIdxMarketDepthInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasBoard) {
    [output writeEnum:3 value:self.board];
  }
  if (self.hasBestBidOffer1) {
    [output writeMessage:4 value:self.bestBidOffer1];
  }
  if (self.hasBestBidOffer2) {
    [output writeMessage:5 value:self.bestBidOffer2];
  }
  if (self.hasBestBidOffer3) {
    [output writeMessage:6 value:self.bestBidOffer3];
  }
  if (self.hasBestBidOffer4) {
    [output writeMessage:7 value:self.bestBidOffer4];
  }
  if (self.hasBestBidOffer5) {
    [output writeMessage:8 value:self.bestBidOffer5];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasBoard) {
    size += computeEnumSize(3, self.board);
  }
  if (self.hasBestBidOffer1) {
    size += computeMessageSize(4, self.bestBidOffer1);
  }
  if (self.hasBestBidOffer2) {
    size += computeMessageSize(5, self.bestBidOffer2);
  }
  if (self.hasBestBidOffer3) {
    size += computeMessageSize(6, self.bestBidOffer3);
  }
  if (self.hasBestBidOffer4) {
    size += computeMessageSize(7, self.bestBidOffer4);
  }
  if (self.hasBestBidOffer5) {
    size += computeMessageSize(8, self.bestBidOffer5);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxMarketDepth*) parseFromData:(NSData*) data {
  return (IdxMarketDepth*)[[[IdxMarketDepth builder] mergeFromData:data] build];
}
+ (IdxMarketDepth*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxMarketDepth*)[[[IdxMarketDepth builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxMarketDepth*) parseFromInputStream:(NSInputStream*) input {
  return (IdxMarketDepth*)[[[IdxMarketDepth builder] mergeFromInputStream:input] build];
}
+ (IdxMarketDepth*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxMarketDepth*)[[[IdxMarketDepth builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxMarketDepth*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxMarketDepth*)[[[IdxMarketDepth builder] mergeFromCodedInputStream:input] build];
}
+ (IdxMarketDepth*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxMarketDepth*)[[[IdxMarketDepth builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxMarketDepth_Builder*) builder {
  return [[IdxMarketDepth_Builder alloc] init];
}
+ (IdxMarketDepth_Builder*) builderWithPrototype:(IdxMarketDepth*) prototype {
  return [[IdxMarketDepth builder] mergeFrom:prototype];
}
- (IdxMarketDepth_Builder*) builder {
  return [IdxMarketDepth builder];
}
- (IdxMarketDepth_Builder*) toBuilder {
  return [IdxMarketDepth builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasBestBidOffer1) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer1"];
    [self.bestBidOffer1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBestBidOffer2) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer2"];
    [self.bestBidOffer2 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBestBidOffer3) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer3"];
    [self.bestBidOffer3 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBestBidOffer4) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer4"];
    [self.bestBidOffer4 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBestBidOffer5) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer5"];
    [self.bestBidOffer5 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxMarketDepth class]]) {
    return NO;
  }
  IdxMarketDepth *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasBestBidOffer1 == otherMessage.hasBestBidOffer1 &&
      (!self.hasBestBidOffer1 || [self.bestBidOffer1 isEqual:otherMessage.bestBidOffer1]) &&
      self.hasBestBidOffer2 == otherMessage.hasBestBidOffer2 &&
      (!self.hasBestBidOffer2 || [self.bestBidOffer2 isEqual:otherMessage.bestBidOffer2]) &&
      self.hasBestBidOffer3 == otherMessage.hasBestBidOffer3 &&
      (!self.hasBestBidOffer3 || [self.bestBidOffer3 isEqual:otherMessage.bestBidOffer3]) &&
      self.hasBestBidOffer4 == otherMessage.hasBestBidOffer4 &&
      (!self.hasBestBidOffer4 || [self.bestBidOffer4 isEqual:otherMessage.bestBidOffer4]) &&
      self.hasBestBidOffer5 == otherMessage.hasBestBidOffer5 &&
      (!self.hasBestBidOffer5 || [self.bestBidOffer5 isEqual:otherMessage.bestBidOffer5]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasBestBidOffer1) {
    hashCode = hashCode * 31 + [self.bestBidOffer1 hash];
  }
  if (self.hasBestBidOffer2) {
    hashCode = hashCode * 31 + [self.bestBidOffer2 hash];
  }
  if (self.hasBestBidOffer3) {
    hashCode = hashCode * 31 + [self.bestBidOffer3 hash];
  }
  if (self.hasBestBidOffer4) {
    hashCode = hashCode * 31 + [self.bestBidOffer4 hash];
  }
  if (self.hasBestBidOffer5) {
    hashCode = hashCode * 31 + [self.bestBidOffer5 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxMarketDepth_Builder()
@property (strong) IdxMarketDepth* result;
@end

@implementation IdxMarketDepth_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxMarketDepth alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxMarketDepth_Builder*) clear {
  self.result = [[IdxMarketDepth alloc] init];
  return self;
}
- (IdxMarketDepth_Builder*) clone {
  return [IdxMarketDepth builderWithPrototype:result];
}
- (IdxMarketDepth*) defaultInstance {
  return [IdxMarketDepth defaultInstance];
}
- (IdxMarketDepth*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxMarketDepth*) buildPartial {
  IdxMarketDepth* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxMarketDepth_Builder*) mergeFrom:(IdxMarketDepth*) other {
  if (other == [IdxMarketDepth defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasBestBidOffer1) {
    [self mergeBestBidOffer1:other.bestBidOffer1];
  }
  if (other.hasBestBidOffer2) {
    [self mergeBestBidOffer2:other.bestBidOffer2];
  }
  if (other.hasBestBidOffer3) {
    [self mergeBestBidOffer3:other.bestBidOffer3];
  }
  if (other.hasBestBidOffer4) {
    [self mergeBestBidOffer4:other.bestBidOffer4];
  }
  if (other.hasBestBidOffer5) {
    [self mergeBestBidOffer5:other.bestBidOffer5];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxMarketDepth_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxMarketDepth_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer1) {
          [subBuilder mergeFrom:self.bestBidOffer1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer1:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer2) {
          [subBuilder mergeFrom:self.bestBidOffer2];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer2:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer3) {
          [subBuilder mergeFrom:self.bestBidOffer3];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer3:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer4) {
          [subBuilder mergeFrom:self.bestBidOffer4];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer4:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer5) {
          [subBuilder mergeFrom:self.bestBidOffer5];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer5:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxMarketDepth_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxMarketDepth_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (IdxMarketDepth_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (IdxMarketDepth_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasBestBidOffer1 {
  return result.hasBestBidOffer1;
}
- (BestBidOffer*) bestBidOffer1 {
  return result.bestBidOffer1;
}
- (IdxMarketDepth_Builder*) setBestBidOffer1:(BestBidOffer*) value {
  result.hasBestBidOffer1 = YES;
  result.bestBidOffer1 = value;
  return self;
}
- (IdxMarketDepth_Builder*) setBestBidOffer1Builder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer1:[builderForValue build]];
}
- (IdxMarketDepth_Builder*) mergeBestBidOffer1:(BestBidOffer*) value {
  if (result.hasBestBidOffer1 &&
      result.bestBidOffer1 != [BestBidOffer defaultInstance]) {
    result.bestBidOffer1 =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer1] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer1 = value;
  }
  result.hasBestBidOffer1 = YES;
  return self;
}
- (IdxMarketDepth_Builder*) clearBestBidOffer1 {
  result.hasBestBidOffer1 = NO;
  result.bestBidOffer1 = [BestBidOffer defaultInstance];
  return self;
}
- (BOOL) hasBestBidOffer2 {
  return result.hasBestBidOffer2;
}
- (BestBidOffer*) bestBidOffer2 {
  return result.bestBidOffer2;
}
- (IdxMarketDepth_Builder*) setBestBidOffer2:(BestBidOffer*) value {
  result.hasBestBidOffer2 = YES;
  result.bestBidOffer2 = value;
  return self;
}
- (IdxMarketDepth_Builder*) setBestBidOffer2Builder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer2:[builderForValue build]];
}
- (IdxMarketDepth_Builder*) mergeBestBidOffer2:(BestBidOffer*) value {
  if (result.hasBestBidOffer2 &&
      result.bestBidOffer2 != [BestBidOffer defaultInstance]) {
    result.bestBidOffer2 =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer2] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer2 = value;
  }
  result.hasBestBidOffer2 = YES;
  return self;
}
- (IdxMarketDepth_Builder*) clearBestBidOffer2 {
  result.hasBestBidOffer2 = NO;
  result.bestBidOffer2 = [BestBidOffer defaultInstance];
  return self;
}
- (BOOL) hasBestBidOffer3 {
  return result.hasBestBidOffer3;
}
- (BestBidOffer*) bestBidOffer3 {
  return result.bestBidOffer3;
}
- (IdxMarketDepth_Builder*) setBestBidOffer3:(BestBidOffer*) value {
  result.hasBestBidOffer3 = YES;
  result.bestBidOffer3 = value;
  return self;
}
- (IdxMarketDepth_Builder*) setBestBidOffer3Builder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer3:[builderForValue build]];
}
- (IdxMarketDepth_Builder*) mergeBestBidOffer3:(BestBidOffer*) value {
  if (result.hasBestBidOffer3 &&
      result.bestBidOffer3 != [BestBidOffer defaultInstance]) {
    result.bestBidOffer3 =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer3] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer3 = value;
  }
  result.hasBestBidOffer3 = YES;
  return self;
}
- (IdxMarketDepth_Builder*) clearBestBidOffer3 {
  result.hasBestBidOffer3 = NO;
  result.bestBidOffer3 = [BestBidOffer defaultInstance];
  return self;
}
- (BOOL) hasBestBidOffer4 {
  return result.hasBestBidOffer4;
}
- (BestBidOffer*) bestBidOffer4 {
  return result.bestBidOffer4;
}
- (IdxMarketDepth_Builder*) setBestBidOffer4:(BestBidOffer*) value {
  result.hasBestBidOffer4 = YES;
  result.bestBidOffer4 = value;
  return self;
}
- (IdxMarketDepth_Builder*) setBestBidOffer4Builder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer4:[builderForValue build]];
}
- (IdxMarketDepth_Builder*) mergeBestBidOffer4:(BestBidOffer*) value {
  if (result.hasBestBidOffer4 &&
      result.bestBidOffer4 != [BestBidOffer defaultInstance]) {
    result.bestBidOffer4 =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer4] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer4 = value;
  }
  result.hasBestBidOffer4 = YES;
  return self;
}
- (IdxMarketDepth_Builder*) clearBestBidOffer4 {
  result.hasBestBidOffer4 = NO;
  result.bestBidOffer4 = [BestBidOffer defaultInstance];
  return self;
}
- (BOOL) hasBestBidOffer5 {
  return result.hasBestBidOffer5;
}
- (BestBidOffer*) bestBidOffer5 {
  return result.bestBidOffer5;
}
- (IdxMarketDepth_Builder*) setBestBidOffer5:(BestBidOffer*) value {
  result.hasBestBidOffer5 = YES;
  result.bestBidOffer5 = value;
  return self;
}
- (IdxMarketDepth_Builder*) setBestBidOffer5Builder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer5:[builderForValue build]];
}
- (IdxMarketDepth_Builder*) mergeBestBidOffer5:(BestBidOffer*) value {
  if (result.hasBestBidOffer5 &&
      result.bestBidOffer5 != [BestBidOffer defaultInstance]) {
    result.bestBidOffer5 =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer5] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer5 = value;
  }
  result.hasBestBidOffer5 = YES;
  return self;
}
- (IdxMarketDepth_Builder*) clearBestBidOffer5 {
  result.hasBestBidOffer5 = NO;
  result.bestBidOffer5 = [BestBidOffer defaultInstance];
  return self;
}
@end

@interface IdxTrade ()
@property (strong) NSString* code;
@property (strong) NSString* buyerBroker;
@property (strong) NSString* sellerBroker;
@property TradeCommand tradeCommand;
@property (strong) BestBidOffer* bestBidOffer;
@property (strong) Trade* trade;
@property (strong) TNumber* number;
@end

@implementation IdxTrade

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasBuyerBroker {
  return !!hasBuyerBroker_;
}
- (void) setHasBuyerBroker:(BOOL) value {
  hasBuyerBroker_ = !!value;
}
@synthesize buyerBroker;
- (BOOL) hasSellerBroker {
  return !!hasSellerBroker_;
}
- (void) setHasSellerBroker:(BOOL) value {
  hasSellerBroker_ = !!value;
}
@synthesize sellerBroker;
- (BOOL) hasTradeCommand {
  return !!hasTradeCommand_;
}
- (void) setHasTradeCommand:(BOOL) value {
  hasTradeCommand_ = !!value;
}
@synthesize tradeCommand;
- (BOOL) hasBestBidOffer {
  return !!hasBestBidOffer_;
}
- (void) setHasBestBidOffer:(BOOL) value {
  hasBestBidOffer_ = !!value;
}
@synthesize bestBidOffer;
- (BOOL) hasTrade {
  return !!hasTrade_;
}
- (void) setHasTrade:(BOOL) value {
  hasTrade_ = !!value;
}
@synthesize trade;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) value {
  hasNumber_ = !!value;
}
@synthesize number;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.buyerBroker = @"";
    self.sellerBroker = @"";
    self.tradeCommand = TradeCommandMatched;
    self.bestBidOffer = [BestBidOffer defaultInstance];
    self.trade = [Trade defaultInstance];
    self.number = [TNumber defaultInstance];
  }
  return self;
}
static IdxTrade* defaultIdxTradeInstance = nil;
+ (void) initialize {
  if (self == [IdxTrade class]) {
    defaultIdxTradeInstance = [[IdxTrade alloc] init];
  }
}
+ (IdxTrade*) defaultInstance {
  return defaultIdxTradeInstance;
}
- (IdxTrade*) defaultInstance {
  return defaultIdxTradeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasBuyerBroker) {
    [output writeString:2 value:self.buyerBroker];
  }
  if (self.hasSellerBroker) {
    [output writeString:3 value:self.sellerBroker];
  }
  if (self.hasTradeCommand) {
    [output writeEnum:4 value:self.tradeCommand];
  }
  if (self.hasBestBidOffer) {
    [output writeMessage:5 value:self.bestBidOffer];
  }
  if (self.hasTrade) {
    [output writeMessage:6 value:self.trade];
  }
  if (self.hasNumber) {
    [output writeMessage:7 value:self.number];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasBuyerBroker) {
    size += computeStringSize(2, self.buyerBroker);
  }
  if (self.hasSellerBroker) {
    size += computeStringSize(3, self.sellerBroker);
  }
  if (self.hasTradeCommand) {
    size += computeEnumSize(4, self.tradeCommand);
  }
  if (self.hasBestBidOffer) {
    size += computeMessageSize(5, self.bestBidOffer);
  }
  if (self.hasTrade) {
    size += computeMessageSize(6, self.trade);
  }
  if (self.hasNumber) {
    size += computeMessageSize(7, self.number);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxTrade*) parseFromData:(NSData*) data {
  return (IdxTrade*)[[[IdxTrade builder] mergeFromData:data] build];
}
+ (IdxTrade*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxTrade*)[[[IdxTrade builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxTrade*) parseFromInputStream:(NSInputStream*) input {
  return (IdxTrade*)[[[IdxTrade builder] mergeFromInputStream:input] build];
}
+ (IdxTrade*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxTrade*)[[[IdxTrade builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxTrade*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxTrade*)[[[IdxTrade builder] mergeFromCodedInputStream:input] build];
}
+ (IdxTrade*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxTrade*)[[[IdxTrade builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxTrade_Builder*) builder {
  return [[IdxTrade_Builder alloc] init];
}
+ (IdxTrade_Builder*) builderWithPrototype:(IdxTrade*) prototype {
  return [[IdxTrade builder] mergeFrom:prototype];
}
- (IdxTrade_Builder*) builder {
  return [IdxTrade builder];
}
- (IdxTrade_Builder*) toBuilder {
  return [IdxTrade builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasBuyerBroker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyerBroker", self.buyerBroker];
  }
  if (self.hasSellerBroker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellerBroker", self.sellerBroker];
  }
  if (self.hasTradeCommand) {
    [output appendFormat:@"%@%@: %d\n", indent, @"tradeCommand", self.tradeCommand];
  }
  if (self.hasBestBidOffer) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer"];
    [self.bestBidOffer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTrade) {
    [output appendFormat:@"%@%@ {\n", indent, @"trade"];
    [self.trade writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@ {\n", indent, @"number"];
    [self.number writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxTrade class]]) {
    return NO;
  }
  IdxTrade *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasBuyerBroker == otherMessage.hasBuyerBroker &&
      (!self.hasBuyerBroker || [self.buyerBroker isEqual:otherMessage.buyerBroker]) &&
      self.hasSellerBroker == otherMessage.hasSellerBroker &&
      (!self.hasSellerBroker || [self.sellerBroker isEqual:otherMessage.sellerBroker]) &&
      self.hasTradeCommand == otherMessage.hasTradeCommand &&
      (!self.hasTradeCommand || self.tradeCommand != otherMessage.tradeCommand) &&
      self.hasBestBidOffer == otherMessage.hasBestBidOffer &&
      (!self.hasBestBidOffer || [self.bestBidOffer isEqual:otherMessage.bestBidOffer]) &&
      self.hasTrade == otherMessage.hasTrade &&
      (!self.hasTrade || [self.trade isEqual:otherMessage.trade]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || [self.number isEqual:otherMessage.number]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasBuyerBroker) {
    hashCode = hashCode * 31 + [self.buyerBroker hash];
  }
  if (self.hasSellerBroker) {
    hashCode = hashCode * 31 + [self.sellerBroker hash];
  }
  if (self.hasTradeCommand) {
    hashCode = hashCode * 31 + self.tradeCommand;
  }
  if (self.hasBestBidOffer) {
    hashCode = hashCode * 31 + [self.bestBidOffer hash];
  }
  if (self.hasTrade) {
    hashCode = hashCode * 31 + [self.trade hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [self.number hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxTrade_Builder()
@property (strong) IdxTrade* result;
@end

@implementation IdxTrade_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxTrade alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxTrade_Builder*) clear {
  self.result = [[IdxTrade alloc] init];
  return self;
}
- (IdxTrade_Builder*) clone {
  return [IdxTrade builderWithPrototype:result];
}
- (IdxTrade*) defaultInstance {
  return [IdxTrade defaultInstance];
}
- (IdxTrade*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxTrade*) buildPartial {
  IdxTrade* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxTrade_Builder*) mergeFrom:(IdxTrade*) other {
  if (other == [IdxTrade defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasBuyerBroker) {
    [self setBuyerBroker:other.buyerBroker];
  }
  if (other.hasSellerBroker) {
    [self setSellerBroker:other.sellerBroker];
  }
  if (other.hasTradeCommand) {
    [self setTradeCommand:other.tradeCommand];
  }
  if (other.hasBestBidOffer) {
    [self mergeBestBidOffer:other.bestBidOffer];
  }
  if (other.hasTrade) {
    [self mergeTrade:other.trade];
  }
  if (other.hasNumber) {
    [self mergeNumber:other.number];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxTrade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxTrade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setBuyerBroker:[input readString]];
        break;
      }
      case 26: {
        [self setSellerBroker:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (TradeCommandIsValidValue(value)) {
          [self setTradeCommand:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer) {
          [subBuilder mergeFrom:self.bestBidOffer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Trade_Builder* subBuilder = [Trade builder];
        if (self.hasTrade) {
          [subBuilder mergeFrom:self.trade];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTrade:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        TNumber_Builder* subBuilder = [TNumber builder];
        if (self.hasNumber) {
          [subBuilder mergeFrom:self.number];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNumber:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxTrade_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxTrade_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasBuyerBroker {
  return result.hasBuyerBroker;
}
- (NSString*) buyerBroker {
  return result.buyerBroker;
}
- (IdxTrade_Builder*) setBuyerBroker:(NSString*) value {
  result.hasBuyerBroker = YES;
  result.buyerBroker = value;
  return self;
}
- (IdxTrade_Builder*) clearBuyerBroker {
  result.hasBuyerBroker = NO;
  result.buyerBroker = @"";
  return self;
}
- (BOOL) hasSellerBroker {
  return result.hasSellerBroker;
}
- (NSString*) sellerBroker {
  return result.sellerBroker;
}
- (IdxTrade_Builder*) setSellerBroker:(NSString*) value {
  result.hasSellerBroker = YES;
  result.sellerBroker = value;
  return self;
}
- (IdxTrade_Builder*) clearSellerBroker {
  result.hasSellerBroker = NO;
  result.sellerBroker = @"";
  return self;
}
- (BOOL) hasTradeCommand {
  return result.hasTradeCommand;
}
- (TradeCommand) tradeCommand {
  return result.tradeCommand;
}
- (IdxTrade_Builder*) setTradeCommand:(TradeCommand) value {
  result.hasTradeCommand = YES;
  result.tradeCommand = value;
  return self;
}
- (IdxTrade_Builder*) clearTradeCommand {
  result.hasTradeCommand = NO;
  result.tradeCommand = TradeCommandMatched;
  return self;
}
- (BOOL) hasBestBidOffer {
  return result.hasBestBidOffer;
}
- (BestBidOffer*) bestBidOffer {
  return result.bestBidOffer;
}
- (IdxTrade_Builder*) setBestBidOffer:(BestBidOffer*) value {
  result.hasBestBidOffer = YES;
  result.bestBidOffer = value;
  return self;
}
- (IdxTrade_Builder*) setBestBidOfferBuilder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer:[builderForValue build]];
}
- (IdxTrade_Builder*) mergeBestBidOffer:(BestBidOffer*) value {
  if (result.hasBestBidOffer &&
      result.bestBidOffer != [BestBidOffer defaultInstance]) {
    result.bestBidOffer =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer = value;
  }
  result.hasBestBidOffer = YES;
  return self;
}
- (IdxTrade_Builder*) clearBestBidOffer {
  result.hasBestBidOffer = NO;
  result.bestBidOffer = [BestBidOffer defaultInstance];
  return self;
}
- (BOOL) hasTrade {
  return result.hasTrade;
}
- (Trade*) trade {
  return result.trade;
}
- (IdxTrade_Builder*) setTrade:(Trade*) value {
  result.hasTrade = YES;
  result.trade = value;
  return self;
}
- (IdxTrade_Builder*) setTradeBuilder:(Trade_Builder*) builderForValue {
  return [self setTrade:[builderForValue build]];
}
- (IdxTrade_Builder*) mergeTrade:(Trade*) value {
  if (result.hasTrade &&
      result.trade != [Trade defaultInstance]) {
    result.trade =
      [[[Trade builderWithPrototype:result.trade] mergeFrom:value] buildPartial];
  } else {
    result.trade = value;
  }
  result.hasTrade = YES;
  return self;
}
- (IdxTrade_Builder*) clearTrade {
  result.hasTrade = NO;
  result.trade = [Trade defaultInstance];
  return self;
}
- (BOOL) hasNumber {
  return result.hasNumber;
}
- (TNumber*) number {
  return result.number;
}
- (IdxTrade_Builder*) setNumber:(TNumber*) value {
  result.hasNumber = YES;
  result.number = value;
  return self;
}
- (IdxTrade_Builder*) setNumberBuilder:(TNumber_Builder*) builderForValue {
  return [self setNumber:[builderForValue build]];
}
- (IdxTrade_Builder*) mergeNumber:(TNumber*) value {
  if (result.hasNumber &&
      result.number != [TNumber defaultInstance]) {
    result.number =
      [[[TNumber builderWithPrototype:result.number] mergeFrom:value] buildPartial];
  } else {
    result.number = value;
  }
  result.hasNumber = YES;
  return self;
}
- (IdxTrade_Builder*) clearNumber {
  result.hasNumber = NO;
  result.number = [TNumber defaultInstance];
  return self;
}
@end

@interface Trade ()
@property int32_t sequence;
@property int32_t tradeTime;
@property Board board;
@property int32_t price;
@property int32_t volume;
@property InvestorType buyerType;
@property InvestorType sellerType;
@end

@implementation Trade

- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasTradeTime {
  return !!hasTradeTime_;
}
- (void) setHasTradeTime:(BOOL) value {
  hasTradeTime_ = !!value;
}
@synthesize tradeTime;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (BOOL) hasBuyerType {
  return !!hasBuyerType_;
}
- (void) setHasBuyerType:(BOOL) value {
  hasBuyerType_ = !!value;
}
@synthesize buyerType;
- (BOOL) hasSellerType {
  return !!hasSellerType_;
}
- (void) setHasSellerType:(BOOL) value {
  hasSellerType_ = !!value;
}
@synthesize sellerType;
- (id) init {
  if ((self = [super init])) {
    self.sequence = 0;
    self.tradeTime = 0;
    self.board = BoardRg;
    self.price = 0;
    self.volume = 0;
    self.buyerType = InvestorTypeD;
    self.sellerType = InvestorTypeD;
  }
  return self;
}
static Trade* defaultTradeInstance = nil;
+ (void) initialize {
  if (self == [Trade class]) {
    defaultTradeInstance = [[Trade alloc] init];
  }
}
+ (Trade*) defaultInstance {
  return defaultTradeInstance;
}
- (Trade*) defaultInstance {
  return defaultTradeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequence) {
    [output writeInt32:1 value:self.sequence];
  }
  if (self.hasTradeTime) {
    [output writeInt32:2 value:self.tradeTime];
  }
  if (self.hasBoard) {
    [output writeEnum:3 value:self.board];
  }
  if (self.hasPrice) {
    [output writeInt32:4 value:self.price];
  }
  if (self.hasVolume) {
    [output writeInt32:5 value:self.volume];
  }
  if (self.hasBuyerType) {
    [output writeEnum:6 value:self.buyerType];
  }
  if (self.hasSellerType) {
    [output writeEnum:7 value:self.sellerType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequence) {
    size += computeInt32Size(1, self.sequence);
  }
  if (self.hasTradeTime) {
    size += computeInt32Size(2, self.tradeTime);
  }
  if (self.hasBoard) {
    size += computeEnumSize(3, self.board);
  }
  if (self.hasPrice) {
    size += computeInt32Size(4, self.price);
  }
  if (self.hasVolume) {
    size += computeInt32Size(5, self.volume);
  }
  if (self.hasBuyerType) {
    size += computeEnumSize(6, self.buyerType);
  }
  if (self.hasSellerType) {
    size += computeEnumSize(7, self.sellerType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Trade*) parseFromData:(NSData*) data {
  return (Trade*)[[[Trade builder] mergeFromData:data] build];
}
+ (Trade*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Trade*)[[[Trade builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Trade*) parseFromInputStream:(NSInputStream*) input {
  return (Trade*)[[[Trade builder] mergeFromInputStream:input] build];
}
+ (Trade*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Trade*)[[[Trade builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Trade*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Trade*)[[[Trade builder] mergeFromCodedInputStream:input] build];
}
+ (Trade*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Trade*)[[[Trade builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Trade_Builder*) builder {
  return [[Trade_Builder alloc] init];
}
+ (Trade_Builder*) builderWithPrototype:(Trade*) prototype {
  return [[Trade builder] mergeFrom:prototype];
}
- (Trade_Builder*) builder {
  return [Trade builder];
}
- (Trade_Builder*) toBuilder {
  return [Trade builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasTradeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeTime", [NSNumber numberWithInt:self.tradeTime]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithInt:self.volume]];
  }
  if (self.hasBuyerType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"buyerType", self.buyerType];
  }
  if (self.hasSellerType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"sellerType", self.sellerType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Trade class]]) {
    return NO;
  }
  Trade *otherMessage = other;
  return
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasTradeTime == otherMessage.hasTradeTime &&
      (!self.hasTradeTime || self.tradeTime == otherMessage.tradeTime) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      self.hasBuyerType == otherMessage.hasBuyerType &&
      (!self.hasBuyerType || self.buyerType != otherMessage.buyerType) &&
      self.hasSellerType == otherMessage.hasSellerType &&
      (!self.hasSellerType || self.sellerType != otherMessage.sellerType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasTradeTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tradeTime] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.volume] hash];
  }
  if (self.hasBuyerType) {
    hashCode = hashCode * 31 + self.buyerType;
  }
  if (self.hasSellerType) {
    hashCode = hashCode * 31 + self.sellerType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Trade_Builder()
@property (strong) Trade* result;
@end

@implementation Trade_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Trade alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Trade_Builder*) clear {
  self.result = [[Trade alloc] init];
  return self;
}
- (Trade_Builder*) clone {
  return [Trade builderWithPrototype:result];
}
- (Trade*) defaultInstance {
  return [Trade defaultInstance];
}
- (Trade*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Trade*) buildPartial {
  Trade* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Trade_Builder*) mergeFrom:(Trade*) other {
  if (other == [Trade defaultInstance]) {
    return self;
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasTradeTime) {
    [self setTradeTime:other.tradeTime];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  if (other.hasBuyerType) {
    [self setBuyerType:other.buyerType];
  }
  if (other.hasSellerType) {
    [self setSellerType:other.sellerType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Trade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Trade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 16: {
        [self setTradeTime:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 40: {
        [self setVolume:[input readInt32]];
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (InvestorTypeIsValidValue(value)) {
          [self setBuyerType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (InvestorTypeIsValidValue(value)) {
          [self setSellerType:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (Trade_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (Trade_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasTradeTime {
  return result.hasTradeTime;
}
- (int32_t) tradeTime {
  return result.tradeTime;
}
- (Trade_Builder*) setTradeTime:(int32_t) value {
  result.hasTradeTime = YES;
  result.tradeTime = value;
  return self;
}
- (Trade_Builder*) clearTradeTime {
  result.hasTradeTime = NO;
  result.tradeTime = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (Trade_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (Trade_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (Trade_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (Trade_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (int32_t) volume {
  return result.volume;
}
- (Trade_Builder*) setVolume:(int32_t) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (Trade_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0;
  return self;
}
- (BOOL) hasBuyerType {
  return result.hasBuyerType;
}
- (InvestorType) buyerType {
  return result.buyerType;
}
- (Trade_Builder*) setBuyerType:(InvestorType) value {
  result.hasBuyerType = YES;
  result.buyerType = value;
  return self;
}
- (Trade_Builder*) clearBuyerType {
  result.hasBuyerType = NO;
  result.buyerType = InvestorTypeD;
  return self;
}
- (BOOL) hasSellerType {
  return result.hasSellerType;
}
- (InvestorType) sellerType {
  return result.sellerType;
}
- (Trade_Builder*) setSellerType:(InvestorType) value {
  result.hasSellerType = YES;
  result.sellerType = value;
  return self;
}
- (Trade_Builder*) clearSellerType {
  result.hasSellerType = NO;
  result.sellerType = InvestorTypeD;
  return self;
}
@end

@interface KiTrade ()
@property int32_t codeId;
@property int32_t buyerBrokerId;
@property int32_t sellerBrokerId;
@property int32_t previous;
@property (strong) Trade* trade;
@end

@implementation KiTrade

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBuyerBrokerId {
  return !!hasBuyerBrokerId_;
}
- (void) setHasBuyerBrokerId:(BOOL) value {
  hasBuyerBrokerId_ = !!value;
}
@synthesize buyerBrokerId;
- (BOOL) hasSellerBrokerId {
  return !!hasSellerBrokerId_;
}
- (void) setHasSellerBrokerId:(BOOL) value {
  hasSellerBrokerId_ = !!value;
}
@synthesize sellerBrokerId;
- (BOOL) hasPrevious {
  return !!hasPrevious_;
}
- (void) setHasPrevious:(BOOL) value {
  hasPrevious_ = !!value;
}
@synthesize previous;
- (BOOL) hasTrade {
  return !!hasTrade_;
}
- (void) setHasTrade:(BOOL) value {
  hasTrade_ = !!value;
}
@synthesize trade;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.buyerBrokerId = 0;
    self.sellerBrokerId = 0;
    self.previous = 0;
    self.trade = [Trade defaultInstance];
  }
  return self;
}
static KiTrade* defaultKiTradeInstance = nil;
+ (void) initialize {
  if (self == [KiTrade class]) {
    defaultKiTradeInstance = [[KiTrade alloc] init];
  }
}
+ (KiTrade*) defaultInstance {
  return defaultKiTradeInstance;
}
- (KiTrade*) defaultInstance {
  return defaultKiTradeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBuyerBrokerId) {
    [output writeInt32:2 value:self.buyerBrokerId];
  }
  if (self.hasSellerBrokerId) {
    [output writeInt32:3 value:self.sellerBrokerId];
  }
  if (self.hasPrevious) {
    [output writeInt32:7 value:self.previous];
  }
  if (self.hasTrade) {
    [output writeMessage:8 value:self.trade];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBuyerBrokerId) {
    size += computeInt32Size(2, self.buyerBrokerId);
  }
  if (self.hasSellerBrokerId) {
    size += computeInt32Size(3, self.sellerBrokerId);
  }
  if (self.hasPrevious) {
    size += computeInt32Size(7, self.previous);
  }
  if (self.hasTrade) {
    size += computeMessageSize(8, self.trade);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiTrade*) parseFromData:(NSData*) data {
  return (KiTrade*)[[[KiTrade builder] mergeFromData:data] build];
}
+ (KiTrade*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiTrade*)[[[KiTrade builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiTrade*) parseFromInputStream:(NSInputStream*) input {
  return (KiTrade*)[[[KiTrade builder] mergeFromInputStream:input] build];
}
+ (KiTrade*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiTrade*)[[[KiTrade builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiTrade*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiTrade*)[[[KiTrade builder] mergeFromCodedInputStream:input] build];
}
+ (KiTrade*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiTrade*)[[[KiTrade builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiTrade_Builder*) builder {
  return [[KiTrade_Builder alloc] init];
}
+ (KiTrade_Builder*) builderWithPrototype:(KiTrade*) prototype {
  return [[KiTrade builder] mergeFrom:prototype];
}
- (KiTrade_Builder*) builder {
  return [KiTrade builder];
}
- (KiTrade_Builder*) toBuilder {
  return [KiTrade builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBuyerBrokerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyerBrokerId", [NSNumber numberWithInt:self.buyerBrokerId]];
  }
  if (self.hasSellerBrokerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellerBrokerId", [NSNumber numberWithInt:self.sellerBrokerId]];
  }
  if (self.hasPrevious) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previous", [NSNumber numberWithInt:self.previous]];
  }
  if (self.hasTrade) {
    [output appendFormat:@"%@%@ {\n", indent, @"trade"];
    [self.trade writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiTrade class]]) {
    return NO;
  }
  KiTrade *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBuyerBrokerId == otherMessage.hasBuyerBrokerId &&
      (!self.hasBuyerBrokerId || self.buyerBrokerId == otherMessage.buyerBrokerId) &&
      self.hasSellerBrokerId == otherMessage.hasSellerBrokerId &&
      (!self.hasSellerBrokerId || self.sellerBrokerId == otherMessage.sellerBrokerId) &&
      self.hasPrevious == otherMessage.hasPrevious &&
      (!self.hasPrevious || self.previous == otherMessage.previous) &&
      self.hasTrade == otherMessage.hasTrade &&
      (!self.hasTrade || [self.trade isEqual:otherMessage.trade]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBuyerBrokerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.buyerBrokerId] hash];
  }
  if (self.hasSellerBrokerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sellerBrokerId] hash];
  }
  if (self.hasPrevious) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.previous] hash];
  }
  if (self.hasTrade) {
    hashCode = hashCode * 31 + [self.trade hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiTrade_Builder()
@property (strong) KiTrade* result;
@end

@implementation KiTrade_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiTrade alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiTrade_Builder*) clear {
  self.result = [[KiTrade alloc] init];
  return self;
}
- (KiTrade_Builder*) clone {
  return [KiTrade builderWithPrototype:result];
}
- (KiTrade*) defaultInstance {
  return [KiTrade defaultInstance];
}
- (KiTrade*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiTrade*) buildPartial {
  KiTrade* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiTrade_Builder*) mergeFrom:(KiTrade*) other {
  if (other == [KiTrade defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBuyerBrokerId) {
    [self setBuyerBrokerId:other.buyerBrokerId];
  }
  if (other.hasSellerBrokerId) {
    [self setSellerBrokerId:other.sellerBrokerId];
  }
  if (other.hasPrevious) {
    [self setPrevious:other.previous];
  }
  if (other.hasTrade) {
    [self mergeTrade:other.trade];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiTrade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiTrade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        [self setBuyerBrokerId:[input readInt32]];
        break;
      }
      case 24: {
        [self setSellerBrokerId:[input readInt32]];
        break;
      }
      case 56: {
        [self setPrevious:[input readInt32]];
        break;
      }
      case 66: {
        Trade_Builder* subBuilder = [Trade builder];
        if (self.hasTrade) {
          [subBuilder mergeFrom:self.trade];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTrade:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiTrade_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiTrade_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBuyerBrokerId {
  return result.hasBuyerBrokerId;
}
- (int32_t) buyerBrokerId {
  return result.buyerBrokerId;
}
- (KiTrade_Builder*) setBuyerBrokerId:(int32_t) value {
  result.hasBuyerBrokerId = YES;
  result.buyerBrokerId = value;
  return self;
}
- (KiTrade_Builder*) clearBuyerBrokerId {
  result.hasBuyerBrokerId = NO;
  result.buyerBrokerId = 0;
  return self;
}
- (BOOL) hasSellerBrokerId {
  return result.hasSellerBrokerId;
}
- (int32_t) sellerBrokerId {
  return result.sellerBrokerId;
}
- (KiTrade_Builder*) setSellerBrokerId:(int32_t) value {
  result.hasSellerBrokerId = YES;
  result.sellerBrokerId = value;
  return self;
}
- (KiTrade_Builder*) clearSellerBrokerId {
  result.hasSellerBrokerId = NO;
  result.sellerBrokerId = 0;
  return self;
}
- (BOOL) hasPrevious {
  return result.hasPrevious;
}
- (int32_t) previous {
  return result.previous;
}
- (KiTrade_Builder*) setPrevious:(int32_t) value {
  result.hasPrevious = YES;
  result.previous = value;
  return self;
}
- (KiTrade_Builder*) clearPrevious {
  result.hasPrevious = NO;
  result.previous = 0;
  return self;
}
- (BOOL) hasTrade {
  return result.hasTrade;
}
- (Trade*) trade {
  return result.trade;
}
- (KiTrade_Builder*) setTrade:(Trade*) value {
  result.hasTrade = YES;
  result.trade = value;
  return self;
}
- (KiTrade_Builder*) setTradeBuilder:(Trade_Builder*) builderForValue {
  return [self setTrade:[builderForValue build]];
}
- (KiTrade_Builder*) mergeTrade:(Trade*) value {
  if (result.hasTrade &&
      result.trade != [Trade defaultInstance]) {
    result.trade =
      [[[Trade builderWithPrototype:result.trade] mergeFrom:value] buildPartial];
  } else {
    result.trade = value;
  }
  result.hasTrade = YES;
  return self;
}
- (KiTrade_Builder*) clearTrade {
  result.hasTrade = NO;
  result.trade = [Trade defaultInstance];
  return self;
}
@end

@interface TNumber ()
@property int32_t tradeNo;
@property int32_t buyerOrderNo;
@property int32_t sellerOrderNo;
@end

@implementation TNumber

- (BOOL) hasTradeNo {
  return !!hasTradeNo_;
}
- (void) setHasTradeNo:(BOOL) value {
  hasTradeNo_ = !!value;
}
@synthesize tradeNo;
- (BOOL) hasBuyerOrderNo {
  return !!hasBuyerOrderNo_;
}
- (void) setHasBuyerOrderNo:(BOOL) value {
  hasBuyerOrderNo_ = !!value;
}
@synthesize buyerOrderNo;
- (BOOL) hasSellerOrderNo {
  return !!hasSellerOrderNo_;
}
- (void) setHasSellerOrderNo:(BOOL) value {
  hasSellerOrderNo_ = !!value;
}
@synthesize sellerOrderNo;
- (id) init {
  if ((self = [super init])) {
    self.tradeNo = 0;
    self.buyerOrderNo = 0;
    self.sellerOrderNo = 0;
  }
  return self;
}
static TNumber* defaultTNumberInstance = nil;
+ (void) initialize {
  if (self == [TNumber class]) {
    defaultTNumberInstance = [[TNumber alloc] init];
  }
}
+ (TNumber*) defaultInstance {
  return defaultTNumberInstance;
}
- (TNumber*) defaultInstance {
  return defaultTNumberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTradeNo) {
    [output writeInt32:1 value:self.tradeNo];
  }
  if (self.hasBuyerOrderNo) {
    [output writeInt32:2 value:self.buyerOrderNo];
  }
  if (self.hasSellerOrderNo) {
    [output writeInt32:3 value:self.sellerOrderNo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTradeNo) {
    size += computeInt32Size(1, self.tradeNo);
  }
  if (self.hasBuyerOrderNo) {
    size += computeInt32Size(2, self.buyerOrderNo);
  }
  if (self.hasSellerOrderNo) {
    size += computeInt32Size(3, self.sellerOrderNo);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TNumber*) parseFromData:(NSData*) data {
  return (TNumber*)[[[TNumber builder] mergeFromData:data] build];
}
+ (TNumber*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TNumber*)[[[TNumber builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TNumber*) parseFromInputStream:(NSInputStream*) input {
  return (TNumber*)[[[TNumber builder] mergeFromInputStream:input] build];
}
+ (TNumber*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TNumber*)[[[TNumber builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TNumber*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TNumber*)[[[TNumber builder] mergeFromCodedInputStream:input] build];
}
+ (TNumber*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TNumber*)[[[TNumber builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TNumber_Builder*) builder {
  return [[TNumber_Builder alloc] init];
}
+ (TNumber_Builder*) builderWithPrototype:(TNumber*) prototype {
  return [[TNumber builder] mergeFrom:prototype];
}
- (TNumber_Builder*) builder {
  return [TNumber builder];
}
- (TNumber_Builder*) toBuilder {
  return [TNumber builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTradeNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeNo", [NSNumber numberWithInt:self.tradeNo]];
  }
  if (self.hasBuyerOrderNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyerOrderNo", [NSNumber numberWithInt:self.buyerOrderNo]];
  }
  if (self.hasSellerOrderNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellerOrderNo", [NSNumber numberWithInt:self.sellerOrderNo]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TNumber class]]) {
    return NO;
  }
  TNumber *otherMessage = other;
  return
      self.hasTradeNo == otherMessage.hasTradeNo &&
      (!self.hasTradeNo || self.tradeNo == otherMessage.tradeNo) &&
      self.hasBuyerOrderNo == otherMessage.hasBuyerOrderNo &&
      (!self.hasBuyerOrderNo || self.buyerOrderNo == otherMessage.buyerOrderNo) &&
      self.hasSellerOrderNo == otherMessage.hasSellerOrderNo &&
      (!self.hasSellerOrderNo || self.sellerOrderNo == otherMessage.sellerOrderNo) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTradeNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tradeNo] hash];
  }
  if (self.hasBuyerOrderNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.buyerOrderNo] hash];
  }
  if (self.hasSellerOrderNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sellerOrderNo] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TNumber_Builder()
@property (strong) TNumber* result;
@end

@implementation TNumber_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TNumber alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TNumber_Builder*) clear {
  self.result = [[TNumber alloc] init];
  return self;
}
- (TNumber_Builder*) clone {
  return [TNumber builderWithPrototype:result];
}
- (TNumber*) defaultInstance {
  return [TNumber defaultInstance];
}
- (TNumber*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TNumber*) buildPartial {
  TNumber* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TNumber_Builder*) mergeFrom:(TNumber*) other {
  if (other == [TNumber defaultInstance]) {
    return self;
  }
  if (other.hasTradeNo) {
    [self setTradeNo:other.tradeNo];
  }
  if (other.hasBuyerOrderNo) {
    [self setBuyerOrderNo:other.buyerOrderNo];
  }
  if (other.hasSellerOrderNo) {
    [self setSellerOrderNo:other.sellerOrderNo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TNumber_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TNumber_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTradeNo:[input readInt32]];
        break;
      }
      case 16: {
        [self setBuyerOrderNo:[input readInt32]];
        break;
      }
      case 24: {
        [self setSellerOrderNo:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTradeNo {
  return result.hasTradeNo;
}
- (int32_t) tradeNo {
  return result.tradeNo;
}
- (TNumber_Builder*) setTradeNo:(int32_t) value {
  result.hasTradeNo = YES;
  result.tradeNo = value;
  return self;
}
- (TNumber_Builder*) clearTradeNo {
  result.hasTradeNo = NO;
  result.tradeNo = 0;
  return self;
}
- (BOOL) hasBuyerOrderNo {
  return result.hasBuyerOrderNo;
}
- (int32_t) buyerOrderNo {
  return result.buyerOrderNo;
}
- (TNumber_Builder*) setBuyerOrderNo:(int32_t) value {
  result.hasBuyerOrderNo = YES;
  result.buyerOrderNo = value;
  return self;
}
- (TNumber_Builder*) clearBuyerOrderNo {
  result.hasBuyerOrderNo = NO;
  result.buyerOrderNo = 0;
  return self;
}
- (BOOL) hasSellerOrderNo {
  return result.hasSellerOrderNo;
}
- (int32_t) sellerOrderNo {
  return result.sellerOrderNo;
}
- (TNumber_Builder*) setSellerOrderNo:(int32_t) value {
  result.hasSellerOrderNo = YES;
  result.sellerOrderNo = value;
  return self;
}
- (TNumber_Builder*) clearSellerOrderNo {
  result.hasSellerOrderNo = NO;
  result.sellerOrderNo = 0;
  return self;
}
@end

@interface KiTradeDetail ()
@property (strong) TNumber* number;
@property (strong) KiTrade* detail;
@end

@implementation KiTradeDetail

- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) value {
  hasNumber_ = !!value;
}
@synthesize number;
- (BOOL) hasDetail {
  return !!hasDetail_;
}
- (void) setHasDetail:(BOOL) value {
  hasDetail_ = !!value;
}
@synthesize detail;
- (id) init {
  if ((self = [super init])) {
    self.number = [TNumber defaultInstance];
    self.detail = [KiTrade defaultInstance];
  }
  return self;
}
static KiTradeDetail* defaultKiTradeDetailInstance = nil;
+ (void) initialize {
  if (self == [KiTradeDetail class]) {
    defaultKiTradeDetailInstance = [[KiTradeDetail alloc] init];
  }
}
+ (KiTradeDetail*) defaultInstance {
  return defaultKiTradeDetailInstance;
}
- (KiTradeDetail*) defaultInstance {
  return defaultKiTradeDetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumber) {
    [output writeMessage:1 value:self.number];
  }
  if (self.hasDetail) {
    [output writeMessage:2 value:self.detail];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNumber) {
    size += computeMessageSize(1, self.number);
  }
  if (self.hasDetail) {
    size += computeMessageSize(2, self.detail);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiTradeDetail*) parseFromData:(NSData*) data {
  return (KiTradeDetail*)[[[KiTradeDetail builder] mergeFromData:data] build];
}
+ (KiTradeDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiTradeDetail*)[[[KiTradeDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiTradeDetail*) parseFromInputStream:(NSInputStream*) input {
  return (KiTradeDetail*)[[[KiTradeDetail builder] mergeFromInputStream:input] build];
}
+ (KiTradeDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiTradeDetail*)[[[KiTradeDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiTradeDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiTradeDetail*)[[[KiTradeDetail builder] mergeFromCodedInputStream:input] build];
}
+ (KiTradeDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiTradeDetail*)[[[KiTradeDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiTradeDetail_Builder*) builder {
  return [[KiTradeDetail_Builder alloc] init];
}
+ (KiTradeDetail_Builder*) builderWithPrototype:(KiTradeDetail*) prototype {
  return [[KiTradeDetail builder] mergeFrom:prototype];
}
- (KiTradeDetail_Builder*) builder {
  return [KiTradeDetail builder];
}
- (KiTradeDetail_Builder*) toBuilder {
  return [KiTradeDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasNumber) {
    [output appendFormat:@"%@%@ {\n", indent, @"number"];
    [self.number writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDetail) {
    [output appendFormat:@"%@%@ {\n", indent, @"detail"];
    [self.detail writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiTradeDetail class]]) {
    return NO;
  }
  KiTradeDetail *otherMessage = other;
  return
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || [self.number isEqual:otherMessage.number]) &&
      self.hasDetail == otherMessage.hasDetail &&
      (!self.hasDetail || [self.detail isEqual:otherMessage.detail]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [self.number hash];
  }
  if (self.hasDetail) {
    hashCode = hashCode * 31 + [self.detail hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiTradeDetail_Builder()
@property (strong) KiTradeDetail* result;
@end

@implementation KiTradeDetail_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiTradeDetail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiTradeDetail_Builder*) clear {
  self.result = [[KiTradeDetail alloc] init];
  return self;
}
- (KiTradeDetail_Builder*) clone {
  return [KiTradeDetail builderWithPrototype:result];
}
- (KiTradeDetail*) defaultInstance {
  return [KiTradeDetail defaultInstance];
}
- (KiTradeDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiTradeDetail*) buildPartial {
  KiTradeDetail* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiTradeDetail_Builder*) mergeFrom:(KiTradeDetail*) other {
  if (other == [KiTradeDetail defaultInstance]) {
    return self;
  }
  if (other.hasNumber) {
    [self mergeNumber:other.number];
  }
  if (other.hasDetail) {
    [self mergeDetail:other.detail];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiTradeDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiTradeDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TNumber_Builder* subBuilder = [TNumber builder];
        if (self.hasNumber) {
          [subBuilder mergeFrom:self.number];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNumber:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        KiTrade_Builder* subBuilder = [KiTrade builder];
        if (self.hasDetail) {
          [subBuilder mergeFrom:self.detail];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDetail:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNumber {
  return result.hasNumber;
}
- (TNumber*) number {
  return result.number;
}
- (KiTradeDetail_Builder*) setNumber:(TNumber*) value {
  result.hasNumber = YES;
  result.number = value;
  return self;
}
- (KiTradeDetail_Builder*) setNumberBuilder:(TNumber_Builder*) builderForValue {
  return [self setNumber:[builderForValue build]];
}
- (KiTradeDetail_Builder*) mergeNumber:(TNumber*) value {
  if (result.hasNumber &&
      result.number != [TNumber defaultInstance]) {
    result.number =
      [[[TNumber builderWithPrototype:result.number] mergeFrom:value] buildPartial];
  } else {
    result.number = value;
  }
  result.hasNumber = YES;
  return self;
}
- (KiTradeDetail_Builder*) clearNumber {
  result.hasNumber = NO;
  result.number = [TNumber defaultInstance];
  return self;
}
- (BOOL) hasDetail {
  return result.hasDetail;
}
- (KiTrade*) detail {
  return result.detail;
}
- (KiTradeDetail_Builder*) setDetail:(KiTrade*) value {
  result.hasDetail = YES;
  result.detail = value;
  return self;
}
- (KiTradeDetail_Builder*) setDetailBuilder:(KiTrade_Builder*) builderForValue {
  return [self setDetail:[builderForValue build]];
}
- (KiTradeDetail_Builder*) mergeDetail:(KiTrade*) value {
  if (result.hasDetail &&
      result.detail != [KiTrade defaultInstance]) {
    result.detail =
      [[[KiTrade builderWithPrototype:result.detail] mergeFrom:value] buildPartial];
  } else {
    result.detail = value;
  }
  result.hasDetail = YES;
  return self;
}
- (KiTradeDetail_Builder*) clearDetail {
  result.hasDetail = NO;
  result.detail = [KiTrade defaultInstance];
  return self;
}
@end

@interface IdxOrder ()
@property (strong) NSString* code;
@property (strong) NSString* broker;
@property (strong) BestBidOffer* bestBidOffer;
@property (strong) Order* order;
@end

@implementation IdxOrder

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasBroker {
  return !!hasBroker_;
}
- (void) setHasBroker:(BOOL) value {
  hasBroker_ = !!value;
}
@synthesize broker;
- (BOOL) hasBestBidOffer {
  return !!hasBestBidOffer_;
}
- (void) setHasBestBidOffer:(BOOL) value {
  hasBestBidOffer_ = !!value;
}
@synthesize bestBidOffer;
- (BOOL) hasOrder {
  return !!hasOrder_;
}
- (void) setHasOrder:(BOOL) value {
  hasOrder_ = !!value;
}
@synthesize order;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.broker = @"";
    self.bestBidOffer = [BestBidOffer defaultInstance];
    self.order = [Order defaultInstance];
  }
  return self;
}
static IdxOrder* defaultIdxOrderInstance = nil;
+ (void) initialize {
  if (self == [IdxOrder class]) {
    defaultIdxOrderInstance = [[IdxOrder alloc] init];
  }
}
+ (IdxOrder*) defaultInstance {
  return defaultIdxOrderInstance;
}
- (IdxOrder*) defaultInstance {
  return defaultIdxOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasBroker) {
    [output writeString:2 value:self.broker];
  }
  if (self.hasBestBidOffer) {
    [output writeMessage:4 value:self.bestBidOffer];
  }
  if (self.hasOrder) {
    [output writeMessage:5 value:self.order];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasBroker) {
    size += computeStringSize(2, self.broker);
  }
  if (self.hasBestBidOffer) {
    size += computeMessageSize(4, self.bestBidOffer);
  }
  if (self.hasOrder) {
    size += computeMessageSize(5, self.order);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxOrder*) parseFromData:(NSData*) data {
  return (IdxOrder*)[[[IdxOrder builder] mergeFromData:data] build];
}
+ (IdxOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxOrder*)[[[IdxOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxOrder*) parseFromInputStream:(NSInputStream*) input {
  return (IdxOrder*)[[[IdxOrder builder] mergeFromInputStream:input] build];
}
+ (IdxOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxOrder*)[[[IdxOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxOrder*)[[[IdxOrder builder] mergeFromCodedInputStream:input] build];
}
+ (IdxOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxOrder*)[[[IdxOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxOrder_Builder*) builder {
  return [[IdxOrder_Builder alloc] init];
}
+ (IdxOrder_Builder*) builderWithPrototype:(IdxOrder*) prototype {
  return [[IdxOrder builder] mergeFrom:prototype];
}
- (IdxOrder_Builder*) builder {
  return [IdxOrder builder];
}
- (IdxOrder_Builder*) toBuilder {
  return [IdxOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasBroker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"broker", self.broker];
  }
  if (self.hasBestBidOffer) {
    [output appendFormat:@"%@%@ {\n", indent, @"bestBidOffer"];
    [self.bestBidOffer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOrder) {
    [output appendFormat:@"%@%@ {\n", indent, @"order"];
    [self.order writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxOrder class]]) {
    return NO;
  }
  IdxOrder *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasBroker == otherMessage.hasBroker &&
      (!self.hasBroker || [self.broker isEqual:otherMessage.broker]) &&
      self.hasBestBidOffer == otherMessage.hasBestBidOffer &&
      (!self.hasBestBidOffer || [self.bestBidOffer isEqual:otherMessage.bestBidOffer]) &&
      self.hasOrder == otherMessage.hasOrder &&
      (!self.hasOrder || [self.order isEqual:otherMessage.order]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasBroker) {
    hashCode = hashCode * 31 + [self.broker hash];
  }
  if (self.hasBestBidOffer) {
    hashCode = hashCode * 31 + [self.bestBidOffer hash];
  }
  if (self.hasOrder) {
    hashCode = hashCode * 31 + [self.order hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxOrder_Builder()
@property (strong) IdxOrder* result;
@end

@implementation IdxOrder_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxOrder_Builder*) clear {
  self.result = [[IdxOrder alloc] init];
  return self;
}
- (IdxOrder_Builder*) clone {
  return [IdxOrder builderWithPrototype:result];
}
- (IdxOrder*) defaultInstance {
  return [IdxOrder defaultInstance];
}
- (IdxOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxOrder*) buildPartial {
  IdxOrder* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxOrder_Builder*) mergeFrom:(IdxOrder*) other {
  if (other == [IdxOrder defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasBroker) {
    [self setBroker:other.broker];
  }
  if (other.hasBestBidOffer) {
    [self mergeBestBidOffer:other.bestBidOffer];
  }
  if (other.hasOrder) {
    [self mergeOrder:other.order];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setBroker:[input readString]];
        break;
      }
      case 34: {
        BestBidOffer_Builder* subBuilder = [BestBidOffer builder];
        if (self.hasBestBidOffer) {
          [subBuilder mergeFrom:self.bestBidOffer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBestBidOffer:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Order_Builder* subBuilder = [Order builder];
        if (self.hasOrder) {
          [subBuilder mergeFrom:self.order];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrder:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxOrder_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxOrder_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasBroker {
  return result.hasBroker;
}
- (NSString*) broker {
  return result.broker;
}
- (IdxOrder_Builder*) setBroker:(NSString*) value {
  result.hasBroker = YES;
  result.broker = value;
  return self;
}
- (IdxOrder_Builder*) clearBroker {
  result.hasBroker = NO;
  result.broker = @"";
  return self;
}
- (BOOL) hasBestBidOffer {
  return result.hasBestBidOffer;
}
- (BestBidOffer*) bestBidOffer {
  return result.bestBidOffer;
}
- (IdxOrder_Builder*) setBestBidOffer:(BestBidOffer*) value {
  result.hasBestBidOffer = YES;
  result.bestBidOffer = value;
  return self;
}
- (IdxOrder_Builder*) setBestBidOfferBuilder:(BestBidOffer_Builder*) builderForValue {
  return [self setBestBidOffer:[builderForValue build]];
}
- (IdxOrder_Builder*) mergeBestBidOffer:(BestBidOffer*) value {
  if (result.hasBestBidOffer &&
      result.bestBidOffer != [BestBidOffer defaultInstance]) {
    result.bestBidOffer =
      [[[BestBidOffer builderWithPrototype:result.bestBidOffer] mergeFrom:value] buildPartial];
  } else {
    result.bestBidOffer = value;
  }
  result.hasBestBidOffer = YES;
  return self;
}
- (IdxOrder_Builder*) clearBestBidOffer {
  result.hasBestBidOffer = NO;
  result.bestBidOffer = [BestBidOffer defaultInstance];
  return self;
}
- (BOOL) hasOrder {
  return result.hasOrder;
}
- (Order*) order {
  return result.order;
}
- (IdxOrder_Builder*) setOrder:(Order*) value {
  result.hasOrder = YES;
  result.order = value;
  return self;
}
- (IdxOrder_Builder*) setOrderBuilder:(Order_Builder*) builderForValue {
  return [self setOrder:[builderForValue build]];
}
- (IdxOrder_Builder*) mergeOrder:(Order*) value {
  if (result.hasOrder &&
      result.order != [Order defaultInstance]) {
    result.order =
      [[[Order builderWithPrototype:result.order] mergeFrom:value] buildPartial];
  } else {
    result.order = value;
  }
  result.hasOrder = YES;
  return self;
}
- (IdxOrder_Builder*) clearOrder {
  result.hasOrder = NO;
  result.order = [Order defaultInstance];
  return self;
}
@end

@interface Order ()
@property int32_t orderNo;
@property int32_t sequence;
@property int32_t orderTime;
@property OrderCommand orderCommand;
@property Board board;
@property int32_t price;
@property int32_t volume;
@property int32_t balance;
@property InvestorType investorType;
@property int32_t orderRef;
@end

@implementation Order

- (BOOL) hasOrderNo {
  return !!hasOrderNo_;
}
- (void) setHasOrderNo:(BOOL) value {
  hasOrderNo_ = !!value;
}
@synthesize orderNo;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasOrderTime {
  return !!hasOrderTime_;
}
- (void) setHasOrderTime:(BOOL) value {
  hasOrderTime_ = !!value;
}
@synthesize orderTime;
- (BOOL) hasOrderCommand {
  return !!hasOrderCommand_;
}
- (void) setHasOrderCommand:(BOOL) value {
  hasOrderCommand_ = !!value;
}
@synthesize orderCommand;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (BOOL) hasBalance {
  return !!hasBalance_;
}
- (void) setHasBalance:(BOOL) value {
  hasBalance_ = !!value;
}
@synthesize balance;
- (BOOL) hasInvestorType {
  return !!hasInvestorType_;
}
- (void) setHasInvestorType:(BOOL) value {
  hasInvestorType_ = !!value;
}
@synthesize investorType;
- (BOOL) hasOrderRef {
  return !!hasOrderRef_;
}
- (void) setHasOrderRef:(BOOL) value {
  hasOrderRef_ = !!value;
}
@synthesize orderRef;
- (id) init {
  if ((self = [super init])) {
    self.orderNo = 0;
    self.sequence = 0;
    self.orderTime = 0;
    self.orderCommand = OrderCommandBid;
    self.board = BoardRg;
    self.price = 0;
    self.volume = 0;
    self.balance = 0;
    self.investorType = InvestorTypeD;
    self.orderRef = 0;
  }
  return self;
}
static Order* defaultOrderInstance = nil;
+ (void) initialize {
  if (self == [Order class]) {
    defaultOrderInstance = [[Order alloc] init];
  }
}
+ (Order*) defaultInstance {
  return defaultOrderInstance;
}
- (Order*) defaultInstance {
  return defaultOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderNo) {
    [output writeInt32:1 value:self.orderNo];
  }
  if (self.hasSequence) {
    [output writeInt32:2 value:self.sequence];
  }
  if (self.hasOrderTime) {
    [output writeInt32:3 value:self.orderTime];
  }
  if (self.hasOrderCommand) {
    [output writeEnum:4 value:self.orderCommand];
  }
  if (self.hasBoard) {
    [output writeEnum:5 value:self.board];
  }
  if (self.hasPrice) {
    [output writeInt32:6 value:self.price];
  }
  if (self.hasVolume) {
    [output writeInt32:7 value:self.volume];
  }
  if (self.hasBalance) {
    [output writeInt32:8 value:self.balance];
  }
  if (self.hasInvestorType) {
    [output writeEnum:9 value:self.investorType];
  }
  if (self.hasOrderRef) {
    [output writeInt32:10 value:self.orderRef];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOrderNo) {
    size += computeInt32Size(1, self.orderNo);
  }
  if (self.hasSequence) {
    size += computeInt32Size(2, self.sequence);
  }
  if (self.hasOrderTime) {
    size += computeInt32Size(3, self.orderTime);
  }
  if (self.hasOrderCommand) {
    size += computeEnumSize(4, self.orderCommand);
  }
  if (self.hasBoard) {
    size += computeEnumSize(5, self.board);
  }
  if (self.hasPrice) {
    size += computeInt32Size(6, self.price);
  }
  if (self.hasVolume) {
    size += computeInt32Size(7, self.volume);
  }
  if (self.hasBalance) {
    size += computeInt32Size(8, self.balance);
  }
  if (self.hasInvestorType) {
    size += computeEnumSize(9, self.investorType);
  }
  if (self.hasOrderRef) {
    size += computeInt32Size(10, self.orderRef);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Order*) parseFromData:(NSData*) data {
  return (Order*)[[[Order builder] mergeFromData:data] build];
}
+ (Order*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Order*) parseFromInputStream:(NSInputStream*) input {
  return (Order*)[[[Order builder] mergeFromInputStream:input] build];
}
+ (Order*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Order*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Order*)[[[Order builder] mergeFromCodedInputStream:input] build];
}
+ (Order*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Order_Builder*) builder {
  return [[Order_Builder alloc] init];
}
+ (Order_Builder*) builderWithPrototype:(Order*) prototype {
  return [[Order builder] mergeFrom:prototype];
}
- (Order_Builder*) builder {
  return [Order builder];
}
- (Order_Builder*) toBuilder {
  return [Order builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasOrderNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderNo", [NSNumber numberWithInt:self.orderNo]];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasOrderTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderTime", [NSNumber numberWithInt:self.orderTime]];
  }
  if (self.hasOrderCommand) {
    [output appendFormat:@"%@%@: %d\n", indent, @"orderCommand", self.orderCommand];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithInt:self.volume]];
  }
  if (self.hasBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"balance", [NSNumber numberWithInt:self.balance]];
  }
  if (self.hasInvestorType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"investorType", self.investorType];
  }
  if (self.hasOrderRef) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderRef", [NSNumber numberWithInt:self.orderRef]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Order class]]) {
    return NO;
  }
  Order *otherMessage = other;
  return
      self.hasOrderNo == otherMessage.hasOrderNo &&
      (!self.hasOrderNo || self.orderNo == otherMessage.orderNo) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasOrderTime == otherMessage.hasOrderTime &&
      (!self.hasOrderTime || self.orderTime == otherMessage.orderTime) &&
      self.hasOrderCommand == otherMessage.hasOrderCommand &&
      (!self.hasOrderCommand || self.orderCommand != otherMessage.orderCommand) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      self.hasBalance == otherMessage.hasBalance &&
      (!self.hasBalance || self.balance == otherMessage.balance) &&
      self.hasInvestorType == otherMessage.hasInvestorType &&
      (!self.hasInvestorType || self.investorType != otherMessage.investorType) &&
      self.hasOrderRef == otherMessage.hasOrderRef &&
      (!self.hasOrderRef || self.orderRef == otherMessage.orderRef) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasOrderNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.orderNo] hash];
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasOrderTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.orderTime] hash];
  }
  if (self.hasOrderCommand) {
    hashCode = hashCode * 31 + self.orderCommand;
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.volume] hash];
  }
  if (self.hasBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.balance] hash];
  }
  if (self.hasInvestorType) {
    hashCode = hashCode * 31 + self.investorType;
  }
  if (self.hasOrderRef) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.orderRef] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Order_Builder()
@property (strong) Order* result;
@end

@implementation Order_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Order alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Order_Builder*) clear {
  self.result = [[Order alloc] init];
  return self;
}
- (Order_Builder*) clone {
  return [Order builderWithPrototype:result];
}
- (Order*) defaultInstance {
  return [Order defaultInstance];
}
- (Order*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Order*) buildPartial {
  Order* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Order_Builder*) mergeFrom:(Order*) other {
  if (other == [Order defaultInstance]) {
    return self;
  }
  if (other.hasOrderNo) {
    [self setOrderNo:other.orderNo];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasOrderTime) {
    [self setOrderTime:other.orderTime];
  }
  if (other.hasOrderCommand) {
    [self setOrderCommand:other.orderCommand];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  if (other.hasBalance) {
    [self setBalance:other.balance];
  }
  if (other.hasInvestorType) {
    [self setInvestorType:other.investorType];
  }
  if (other.hasOrderRef) {
    [self setOrderRef:other.orderRef];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Order_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Order_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOrderNo:[input readInt32]];
        break;
      }
      case 16: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 24: {
        [self setOrderTime:[input readInt32]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (OrderCommandIsValidValue(value)) {
          [self setOrderCommand:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 56: {
        [self setVolume:[input readInt32]];
        break;
      }
      case 64: {
        [self setBalance:[input readInt32]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (InvestorTypeIsValidValue(value)) {
          [self setInvestorType:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        [self setOrderRef:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOrderNo {
  return result.hasOrderNo;
}
- (int32_t) orderNo {
  return result.orderNo;
}
- (Order_Builder*) setOrderNo:(int32_t) value {
  result.hasOrderNo = YES;
  result.orderNo = value;
  return self;
}
- (Order_Builder*) clearOrderNo {
  result.hasOrderNo = NO;
  result.orderNo = 0;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (Order_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (Order_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasOrderTime {
  return result.hasOrderTime;
}
- (int32_t) orderTime {
  return result.orderTime;
}
- (Order_Builder*) setOrderTime:(int32_t) value {
  result.hasOrderTime = YES;
  result.orderTime = value;
  return self;
}
- (Order_Builder*) clearOrderTime {
  result.hasOrderTime = NO;
  result.orderTime = 0;
  return self;
}
- (BOOL) hasOrderCommand {
  return result.hasOrderCommand;
}
- (OrderCommand) orderCommand {
  return result.orderCommand;
}
- (Order_Builder*) setOrderCommand:(OrderCommand) value {
  result.hasOrderCommand = YES;
  result.orderCommand = value;
  return self;
}
- (Order_Builder*) clearOrderCommand {
  result.hasOrderCommand = NO;
  result.orderCommand = OrderCommandBid;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (Order_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (Order_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (Order_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (Order_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (int32_t) volume {
  return result.volume;
}
- (Order_Builder*) setVolume:(int32_t) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (Order_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0;
  return self;
}
- (BOOL) hasBalance {
  return result.hasBalance;
}
- (int32_t) balance {
  return result.balance;
}
- (Order_Builder*) setBalance:(int32_t) value {
  result.hasBalance = YES;
  result.balance = value;
  return self;
}
- (Order_Builder*) clearBalance {
  result.hasBalance = NO;
  result.balance = 0;
  return self;
}
- (BOOL) hasInvestorType {
  return result.hasInvestorType;
}
- (InvestorType) investorType {
  return result.investorType;
}
- (Order_Builder*) setInvestorType:(InvestorType) value {
  result.hasInvestorType = YES;
  result.investorType = value;
  return self;
}
- (Order_Builder*) clearInvestorType {
  result.hasInvestorType = NO;
  result.investorType = InvestorTypeD;
  return self;
}
- (BOOL) hasOrderRef {
  return result.hasOrderRef;
}
- (int32_t) orderRef {
  return result.orderRef;
}
- (Order_Builder*) setOrderRef:(int32_t) value {
  result.hasOrderRef = YES;
  result.orderRef = value;
  return self;
}
- (Order_Builder*) clearOrderRef {
  result.hasOrderRef = NO;
  result.orderRef = 0;
  return self;
}
@end

@interface KiOrder ()
@property int32_t codeId;
@property int32_t brokerId;
@property (strong) Order* order;
@end

@implementation KiOrder

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBrokerId {
  return !!hasBrokerId_;
}
- (void) setHasBrokerId:(BOOL) value {
  hasBrokerId_ = !!value;
}
@synthesize brokerId;
- (BOOL) hasOrder {
  return !!hasOrder_;
}
- (void) setHasOrder:(BOOL) value {
  hasOrder_ = !!value;
}
@synthesize order;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.brokerId = 0;
    self.order = [Order defaultInstance];
  }
  return self;
}
static KiOrder* defaultKiOrderInstance = nil;
+ (void) initialize {
  if (self == [KiOrder class]) {
    defaultKiOrderInstance = [[KiOrder alloc] init];
  }
}
+ (KiOrder*) defaultInstance {
  return defaultKiOrderInstance;
}
- (KiOrder*) defaultInstance {
  return defaultKiOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBrokerId) {
    [output writeInt32:2 value:self.brokerId];
  }
  if (self.hasOrder) {
    [output writeMessage:5 value:self.order];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBrokerId) {
    size += computeInt32Size(2, self.brokerId);
  }
  if (self.hasOrder) {
    size += computeMessageSize(5, self.order);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiOrder*) parseFromData:(NSData*) data {
  return (KiOrder*)[[[KiOrder builder] mergeFromData:data] build];
}
+ (KiOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiOrder*)[[[KiOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiOrder*) parseFromInputStream:(NSInputStream*) input {
  return (KiOrder*)[[[KiOrder builder] mergeFromInputStream:input] build];
}
+ (KiOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiOrder*)[[[KiOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiOrder*)[[[KiOrder builder] mergeFromCodedInputStream:input] build];
}
+ (KiOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiOrder*)[[[KiOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiOrder_Builder*) builder {
  return [[KiOrder_Builder alloc] init];
}
+ (KiOrder_Builder*) builderWithPrototype:(KiOrder*) prototype {
  return [[KiOrder builder] mergeFrom:prototype];
}
- (KiOrder_Builder*) builder {
  return [KiOrder builder];
}
- (KiOrder_Builder*) toBuilder {
  return [KiOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBrokerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brokerId", [NSNumber numberWithInt:self.brokerId]];
  }
  if (self.hasOrder) {
    [output appendFormat:@"%@%@ {\n", indent, @"order"];
    [self.order writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiOrder class]]) {
    return NO;
  }
  KiOrder *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBrokerId == otherMessage.hasBrokerId &&
      (!self.hasBrokerId || self.brokerId == otherMessage.brokerId) &&
      self.hasOrder == otherMessage.hasOrder &&
      (!self.hasOrder || [self.order isEqual:otherMessage.order]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBrokerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.brokerId] hash];
  }
  if (self.hasOrder) {
    hashCode = hashCode * 31 + [self.order hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiOrder_Builder()
@property (strong) KiOrder* result;
@end

@implementation KiOrder_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiOrder_Builder*) clear {
  self.result = [[KiOrder alloc] init];
  return self;
}
- (KiOrder_Builder*) clone {
  return [KiOrder builderWithPrototype:result];
}
- (KiOrder*) defaultInstance {
  return [KiOrder defaultInstance];
}
- (KiOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiOrder*) buildPartial {
  KiOrder* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiOrder_Builder*) mergeFrom:(KiOrder*) other {
  if (other == [KiOrder defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBrokerId) {
    [self setBrokerId:other.brokerId];
  }
  if (other.hasOrder) {
    [self mergeOrder:other.order];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        [self setBrokerId:[input readInt32]];
        break;
      }
      case 42: {
        Order_Builder* subBuilder = [Order builder];
        if (self.hasOrder) {
          [subBuilder mergeFrom:self.order];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrder:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (KiOrder_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (KiOrder_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBrokerId {
  return result.hasBrokerId;
}
- (int32_t) brokerId {
  return result.brokerId;
}
- (KiOrder_Builder*) setBrokerId:(int32_t) value {
  result.hasBrokerId = YES;
  result.brokerId = value;
  return self;
}
- (KiOrder_Builder*) clearBrokerId {
  result.hasBrokerId = NO;
  result.brokerId = 0;
  return self;
}
- (BOOL) hasOrder {
  return result.hasOrder;
}
- (Order*) order {
  return result.order;
}
- (KiOrder_Builder*) setOrder:(Order*) value {
  result.hasOrder = YES;
  result.order = value;
  return self;
}
- (KiOrder_Builder*) setOrderBuilder:(Order_Builder*) builderForValue {
  return [self setOrder:[builderForValue build]];
}
- (KiOrder_Builder*) mergeOrder:(Order*) value {
  if (result.hasOrder &&
      result.order != [Order defaultInstance]) {
    result.order =
      [[[Order builderWithPrototype:result.order] mergeFrom:value] buildPartial];
  } else {
    result.order = value;
  }
  result.hasOrder = YES;
  return self;
}
- (KiOrder_Builder*) clearOrder {
  result.hasOrder = NO;
  result.order = [Order defaultInstance];
  return self;
}
@end

@interface OrderInfo ()
@property int32_t balance;
@property OrderStatus status;
@property int32_t queue;
@property int32_t lots;
@property int32_t nQueue;
@property int32_t nLots;
@property int32_t orderRef;
@property int32_t brokerId;
@end

@implementation OrderInfo

- (BOOL) hasBalance {
  return !!hasBalance_;
}
- (void) setHasBalance:(BOOL) value {
  hasBalance_ = !!value;
}
@synthesize balance;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasQueue {
  return !!hasQueue_;
}
- (void) setHasQueue:(BOOL) value {
  hasQueue_ = !!value;
}
@synthesize queue;
- (BOOL) hasLots {
  return !!hasLots_;
}
- (void) setHasLots:(BOOL) value {
  hasLots_ = !!value;
}
@synthesize lots;
- (BOOL) hasNQueue {
  return !!hasNQueue_;
}
- (void) setHasNQueue:(BOOL) value {
  hasNQueue_ = !!value;
}
@synthesize nQueue;
- (BOOL) hasNLots {
  return !!hasNLots_;
}
- (void) setHasNLots:(BOOL) value {
  hasNLots_ = !!value;
}
@synthesize nLots;
- (BOOL) hasOrderRef {
  return !!hasOrderRef_;
}
- (void) setHasOrderRef:(BOOL) value {
  hasOrderRef_ = !!value;
}
@synthesize orderRef;
- (BOOL) hasBrokerId {
  return !!hasBrokerId_;
}
- (void) setHasBrokerId:(BOOL) value {
  hasBrokerId_ = !!value;
}
@synthesize brokerId;
- (id) init {
  if ((self = [super init])) {
    self.balance = 0;
    self.status = OrderStatusOpen;
    self.queue = 0;
    self.lots = 0;
    self.nQueue = 0;
    self.nLots = 0;
    self.orderRef = 0;
    self.brokerId = 0;
  }
  return self;
}
static OrderInfo* defaultOrderInfoInstance = nil;
+ (void) initialize {
  if (self == [OrderInfo class]) {
    defaultOrderInfoInstance = [[OrderInfo alloc] init];
  }
}
+ (OrderInfo*) defaultInstance {
  return defaultOrderInfoInstance;
}
- (OrderInfo*) defaultInstance {
  return defaultOrderInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBalance) {
    [output writeInt32:2 value:self.balance];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  if (self.hasQueue) {
    [output writeInt32:4 value:self.queue];
  }
  if (self.hasLots) {
    [output writeInt32:5 value:self.lots];
  }
  if (self.hasNQueue) {
    [output writeInt32:6 value:self.nQueue];
  }
  if (self.hasNLots) {
    [output writeInt32:7 value:self.nLots];
  }
  if (self.hasOrderRef) {
    [output writeInt32:8 value:self.orderRef];
  }
  if (self.hasBrokerId) {
    [output writeInt32:9 value:self.brokerId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBalance) {
    size += computeInt32Size(2, self.balance);
  }
  if (self.hasStatus) {
    size += computeEnumSize(3, self.status);
  }
  if (self.hasQueue) {
    size += computeInt32Size(4, self.queue);
  }
  if (self.hasLots) {
    size += computeInt32Size(5, self.lots);
  }
  if (self.hasNQueue) {
    size += computeInt32Size(6, self.nQueue);
  }
  if (self.hasNLots) {
    size += computeInt32Size(7, self.nLots);
  }
  if (self.hasOrderRef) {
    size += computeInt32Size(8, self.orderRef);
  }
  if (self.hasBrokerId) {
    size += computeInt32Size(9, self.brokerId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OrderInfo*) parseFromData:(NSData*) data {
  return (OrderInfo*)[[[OrderInfo builder] mergeFromData:data] build];
}
+ (OrderInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderInfo*)[[[OrderInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OrderInfo*) parseFromInputStream:(NSInputStream*) input {
  return (OrderInfo*)[[[OrderInfo builder] mergeFromInputStream:input] build];
}
+ (OrderInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderInfo*)[[[OrderInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OrderInfo*)[[[OrderInfo builder] mergeFromCodedInputStream:input] build];
}
+ (OrderInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderInfo*)[[[OrderInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderInfo_Builder*) builder {
  return [[OrderInfo_Builder alloc] init];
}
+ (OrderInfo_Builder*) builderWithPrototype:(OrderInfo*) prototype {
  return [[OrderInfo builder] mergeFrom:prototype];
}
- (OrderInfo_Builder*) builder {
  return [OrderInfo builder];
}
- (OrderInfo_Builder*) toBuilder {
  return [OrderInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"balance", [NSNumber numberWithInt:self.balance]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasQueue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queue", [NSNumber numberWithInt:self.queue]];
  }
  if (self.hasLots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lots", [NSNumber numberWithInt:self.lots]];
  }
  if (self.hasNQueue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nQueue", [NSNumber numberWithInt:self.nQueue]];
  }
  if (self.hasNLots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nLots", [NSNumber numberWithInt:self.nLots]];
  }
  if (self.hasOrderRef) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderRef", [NSNumber numberWithInt:self.orderRef]];
  }
  if (self.hasBrokerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brokerId", [NSNumber numberWithInt:self.brokerId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OrderInfo class]]) {
    return NO;
  }
  OrderInfo *otherMessage = other;
  return
      self.hasBalance == otherMessage.hasBalance &&
      (!self.hasBalance || self.balance == otherMessage.balance) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      self.hasQueue == otherMessage.hasQueue &&
      (!self.hasQueue || self.queue == otherMessage.queue) &&
      self.hasLots == otherMessage.hasLots &&
      (!self.hasLots || self.lots == otherMessage.lots) &&
      self.hasNQueue == otherMessage.hasNQueue &&
      (!self.hasNQueue || self.nQueue == otherMessage.nQueue) &&
      self.hasNLots == otherMessage.hasNLots &&
      (!self.hasNLots || self.nLots == otherMessage.nLots) &&
      self.hasOrderRef == otherMessage.hasOrderRef &&
      (!self.hasOrderRef || self.orderRef == otherMessage.orderRef) &&
      self.hasBrokerId == otherMessage.hasBrokerId &&
      (!self.hasBrokerId || self.brokerId == otherMessage.brokerId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.balance] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasQueue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.queue] hash];
  }
  if (self.hasLots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lots] hash];
  }
  if (self.hasNQueue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.nQueue] hash];
  }
  if (self.hasNLots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.nLots] hash];
  }
  if (self.hasOrderRef) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.orderRef] hash];
  }
  if (self.hasBrokerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.brokerId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OrderInfo_Builder()
@property (strong) OrderInfo* result;
@end

@implementation OrderInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OrderInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OrderInfo_Builder*) clear {
  self.result = [[OrderInfo alloc] init];
  return self;
}
- (OrderInfo_Builder*) clone {
  return [OrderInfo builderWithPrototype:result];
}
- (OrderInfo*) defaultInstance {
  return [OrderInfo defaultInstance];
}
- (OrderInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OrderInfo*) buildPartial {
  OrderInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OrderInfo_Builder*) mergeFrom:(OrderInfo*) other {
  if (other == [OrderInfo defaultInstance]) {
    return self;
  }
  if (other.hasBalance) {
    [self setBalance:other.balance];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasQueue) {
    [self setQueue:other.queue];
  }
  if (other.hasLots) {
    [self setLots:other.lots];
  }
  if (other.hasNQueue) {
    [self setNQueue:other.nQueue];
  }
  if (other.hasNLots) {
    [self setNLots:other.nLots];
  }
  if (other.hasOrderRef) {
    [self setOrderRef:other.orderRef];
  }
  if (other.hasBrokerId) {
    [self setBrokerId:other.brokerId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OrderInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OrderInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16: {
        [self setBalance:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (OrderStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setQueue:[input readInt32]];
        break;
      }
      case 40: {
        [self setLots:[input readInt32]];
        break;
      }
      case 48: {
        [self setNQueue:[input readInt32]];
        break;
      }
      case 56: {
        [self setNLots:[input readInt32]];
        break;
      }
      case 64: {
        [self setOrderRef:[input readInt32]];
        break;
      }
      case 72: {
        [self setBrokerId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBalance {
  return result.hasBalance;
}
- (int32_t) balance {
  return result.balance;
}
- (OrderInfo_Builder*) setBalance:(int32_t) value {
  result.hasBalance = YES;
  result.balance = value;
  return self;
}
- (OrderInfo_Builder*) clearBalance {
  result.hasBalance = NO;
  result.balance = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (OrderStatus) status {
  return result.status;
}
- (OrderInfo_Builder*) setStatus:(OrderStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (OrderInfo_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = OrderStatusOpen;
  return self;
}
- (BOOL) hasQueue {
  return result.hasQueue;
}
- (int32_t) queue {
  return result.queue;
}
- (OrderInfo_Builder*) setQueue:(int32_t) value {
  result.hasQueue = YES;
  result.queue = value;
  return self;
}
- (OrderInfo_Builder*) clearQueue {
  result.hasQueue = NO;
  result.queue = 0;
  return self;
}
- (BOOL) hasLots {
  return result.hasLots;
}
- (int32_t) lots {
  return result.lots;
}
- (OrderInfo_Builder*) setLots:(int32_t) value {
  result.hasLots = YES;
  result.lots = value;
  return self;
}
- (OrderInfo_Builder*) clearLots {
  result.hasLots = NO;
  result.lots = 0;
  return self;
}
- (BOOL) hasNQueue {
  return result.hasNQueue;
}
- (int32_t) nQueue {
  return result.nQueue;
}
- (OrderInfo_Builder*) setNQueue:(int32_t) value {
  result.hasNQueue = YES;
  result.nQueue = value;
  return self;
}
- (OrderInfo_Builder*) clearNQueue {
  result.hasNQueue = NO;
  result.nQueue = 0;
  return self;
}
- (BOOL) hasNLots {
  return result.hasNLots;
}
- (int32_t) nLots {
  return result.nLots;
}
- (OrderInfo_Builder*) setNLots:(int32_t) value {
  result.hasNLots = YES;
  result.nLots = value;
  return self;
}
- (OrderInfo_Builder*) clearNLots {
  result.hasNLots = NO;
  result.nLots = 0;
  return self;
}
- (BOOL) hasOrderRef {
  return result.hasOrderRef;
}
- (int32_t) orderRef {
  return result.orderRef;
}
- (OrderInfo_Builder*) setOrderRef:(int32_t) value {
  result.hasOrderRef = YES;
  result.orderRef = value;
  return self;
}
- (OrderInfo_Builder*) clearOrderRef {
  result.hasOrderRef = NO;
  result.orderRef = 0;
  return self;
}
- (BOOL) hasBrokerId {
  return result.hasBrokerId;
}
- (int32_t) brokerId {
  return result.brokerId;
}
- (OrderInfo_Builder*) setBrokerId:(int32_t) value {
  result.hasBrokerId = YES;
  result.brokerId = value;
  return self;
}
- (OrderInfo_Builder*) clearBrokerId {
  result.hasBrokerId = NO;
  result.brokerId = 0;
  return self;
}
@end

@interface KiOrderDetail ()
@property (strong) KiOrder* detail;
@property (strong) OrderInfo* info;
@end

@implementation KiOrderDetail

- (BOOL) hasDetail {
  return !!hasDetail_;
}
- (void) setHasDetail:(BOOL) value {
  hasDetail_ = !!value;
}
@synthesize detail;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) value {
  hasInfo_ = !!value;
}
@synthesize info;
- (id) init {
  if ((self = [super init])) {
    self.detail = [KiOrder defaultInstance];
    self.info = [OrderInfo defaultInstance];
  }
  return self;
}
static KiOrderDetail* defaultKiOrderDetailInstance = nil;
+ (void) initialize {
  if (self == [KiOrderDetail class]) {
    defaultKiOrderDetailInstance = [[KiOrderDetail alloc] init];
  }
}
+ (KiOrderDetail*) defaultInstance {
  return defaultKiOrderDetailInstance;
}
- (KiOrderDetail*) defaultInstance {
  return defaultKiOrderDetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDetail) {
    [output writeMessage:2 value:self.detail];
  }
  if (self.hasInfo) {
    [output writeMessage:3 value:self.info];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDetail) {
    size += computeMessageSize(2, self.detail);
  }
  if (self.hasInfo) {
    size += computeMessageSize(3, self.info);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiOrderDetail*) parseFromData:(NSData*) data {
  return (KiOrderDetail*)[[[KiOrderDetail builder] mergeFromData:data] build];
}
+ (KiOrderDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiOrderDetail*)[[[KiOrderDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiOrderDetail*) parseFromInputStream:(NSInputStream*) input {
  return (KiOrderDetail*)[[[KiOrderDetail builder] mergeFromInputStream:input] build];
}
+ (KiOrderDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiOrderDetail*)[[[KiOrderDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiOrderDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiOrderDetail*)[[[KiOrderDetail builder] mergeFromCodedInputStream:input] build];
}
+ (KiOrderDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiOrderDetail*)[[[KiOrderDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiOrderDetail_Builder*) builder {
  return [[KiOrderDetail_Builder alloc] init];
}
+ (KiOrderDetail_Builder*) builderWithPrototype:(KiOrderDetail*) prototype {
  return [[KiOrderDetail builder] mergeFrom:prototype];
}
- (KiOrderDetail_Builder*) builder {
  return [KiOrderDetail builder];
}
- (KiOrderDetail_Builder*) toBuilder {
  return [KiOrderDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasDetail) {
    [output appendFormat:@"%@%@ {\n", indent, @"detail"];
    [self.detail writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"info"];
    [self.info writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiOrderDetail class]]) {
    return NO;
  }
  KiOrderDetail *otherMessage = other;
  return
      self.hasDetail == otherMessage.hasDetail &&
      (!self.hasDetail || [self.detail isEqual:otherMessage.detail]) &&
      self.hasInfo == otherMessage.hasInfo &&
      (!self.hasInfo || [self.info isEqual:otherMessage.info]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasDetail) {
    hashCode = hashCode * 31 + [self.detail hash];
  }
  if (self.hasInfo) {
    hashCode = hashCode * 31 + [self.info hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiOrderDetail_Builder()
@property (strong) KiOrderDetail* result;
@end

@implementation KiOrderDetail_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiOrderDetail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiOrderDetail_Builder*) clear {
  self.result = [[KiOrderDetail alloc] init];
  return self;
}
- (KiOrderDetail_Builder*) clone {
  return [KiOrderDetail builderWithPrototype:result];
}
- (KiOrderDetail*) defaultInstance {
  return [KiOrderDetail defaultInstance];
}
- (KiOrderDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiOrderDetail*) buildPartial {
  KiOrderDetail* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiOrderDetail_Builder*) mergeFrom:(KiOrderDetail*) other {
  if (other == [KiOrderDetail defaultInstance]) {
    return self;
  }
  if (other.hasDetail) {
    [self mergeDetail:other.detail];
  }
  if (other.hasInfo) {
    [self mergeInfo:other.info];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiOrderDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiOrderDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        KiOrder_Builder* subBuilder = [KiOrder builder];
        if (self.hasDetail) {
          [subBuilder mergeFrom:self.detail];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDetail:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        OrderInfo_Builder* subBuilder = [OrderInfo builder];
        if (self.hasInfo) {
          [subBuilder mergeFrom:self.info];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDetail {
  return result.hasDetail;
}
- (KiOrder*) detail {
  return result.detail;
}
- (KiOrderDetail_Builder*) setDetail:(KiOrder*) value {
  result.hasDetail = YES;
  result.detail = value;
  return self;
}
- (KiOrderDetail_Builder*) setDetailBuilder:(KiOrder_Builder*) builderForValue {
  return [self setDetail:[builderForValue build]];
}
- (KiOrderDetail_Builder*) mergeDetail:(KiOrder*) value {
  if (result.hasDetail &&
      result.detail != [KiOrder defaultInstance]) {
    result.detail =
      [[[KiOrder builderWithPrototype:result.detail] mergeFrom:value] buildPartial];
  } else {
    result.detail = value;
  }
  result.hasDetail = YES;
  return self;
}
- (KiOrderDetail_Builder*) clearDetail {
  result.hasDetail = NO;
  result.detail = [KiOrder defaultInstance];
  return self;
}
- (BOOL) hasInfo {
  return result.hasInfo;
}
- (OrderInfo*) info {
  return result.info;
}
- (KiOrderDetail_Builder*) setInfo:(OrderInfo*) value {
  result.hasInfo = YES;
  result.info = value;
  return self;
}
- (KiOrderDetail_Builder*) setInfoBuilder:(OrderInfo_Builder*) builderForValue {
  return [self setInfo:[builderForValue build]];
}
- (KiOrderDetail_Builder*) mergeInfo:(OrderInfo*) value {
  if (result.hasInfo &&
      result.info != [OrderInfo defaultInstance]) {
    result.info =
      [[[OrderInfo builderWithPrototype:result.info] mergeFrom:value] buildPartial];
  } else {
    result.info = value;
  }
  result.hasInfo = YES;
  return self;
}
- (KiOrderDetail_Builder*) clearInfo {
  result.hasInfo = NO;
  result.info = [OrderInfo defaultInstance];
  return self;
}
@end

@interface IdxBrokerData ()
@property (strong) NSString* code;
@property (strong) NSString* name;
@property Status status;
@end

@implementation IdxBrokerData

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.name = @"";
    self.status = StatusActive;
  }
  return self;
}
static IdxBrokerData* defaultIdxBrokerDataInstance = nil;
+ (void) initialize {
  if (self == [IdxBrokerData class]) {
    defaultIdxBrokerDataInstance = [[IdxBrokerData alloc] init];
  }
}
+ (IdxBrokerData*) defaultInstance {
  return defaultIdxBrokerDataInstance;
}
- (IdxBrokerData*) defaultInstance {
  return defaultIdxBrokerDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasStatus) {
    [output writeEnum:4 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasStatus) {
    size += computeEnumSize(4, self.status);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IdxBrokerData*) parseFromData:(NSData*) data {
  return (IdxBrokerData*)[[[IdxBrokerData builder] mergeFromData:data] build];
}
+ (IdxBrokerData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxBrokerData*)[[[IdxBrokerData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IdxBrokerData*) parseFromInputStream:(NSInputStream*) input {
  return (IdxBrokerData*)[[[IdxBrokerData builder] mergeFromInputStream:input] build];
}
+ (IdxBrokerData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxBrokerData*)[[[IdxBrokerData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxBrokerData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IdxBrokerData*)[[[IdxBrokerData builder] mergeFromCodedInputStream:input] build];
}
+ (IdxBrokerData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IdxBrokerData*)[[[IdxBrokerData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IdxBrokerData_Builder*) builder {
  return [[IdxBrokerData_Builder alloc] init];
}
+ (IdxBrokerData_Builder*) builderWithPrototype:(IdxBrokerData*) prototype {
  return [[IdxBrokerData builder] mergeFrom:prototype];
}
- (IdxBrokerData_Builder*) builder {
  return [IdxBrokerData builder];
}
- (IdxBrokerData_Builder*) toBuilder {
  return [IdxBrokerData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IdxBrokerData class]]) {
    return NO;
  }
  IdxBrokerData *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IdxBrokerData_Builder()
@property (strong) IdxBrokerData* result;
@end

@implementation IdxBrokerData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[IdxBrokerData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IdxBrokerData_Builder*) clear {
  self.result = [[IdxBrokerData alloc] init];
  return self;
}
- (IdxBrokerData_Builder*) clone {
  return [IdxBrokerData builderWithPrototype:result];
}
- (IdxBrokerData*) defaultInstance {
  return [IdxBrokerData defaultInstance];
}
- (IdxBrokerData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IdxBrokerData*) buildPartial {
  IdxBrokerData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IdxBrokerData_Builder*) mergeFrom:(IdxBrokerData*) other {
  if (other == [IdxBrokerData defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IdxBrokerData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IdxBrokerData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (IdxBrokerData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (IdxBrokerData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (IdxBrokerData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (IdxBrokerData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (Status) status {
  return result.status;
}
- (IdxBrokerData_Builder*) setStatus:(Status) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (IdxBrokerData_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = StatusActive;
  return self;
}
@end

@interface KiBrokerData ()
@property int32_t id;
@property (strong) NSString* code;
@property (strong) NSString* name;
@property Status status;
@property InvestorType type;
@end

@implementation KiBrokerData

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.code = @"";
    self.name = @"";
    self.status = StatusActive;
    self.type = InvestorTypeD;
  }
  return self;
}
static KiBrokerData* defaultKiBrokerDataInstance = nil;
+ (void) initialize {
  if (self == [KiBrokerData class]) {
    defaultKiBrokerDataInstance = [[KiBrokerData alloc] init];
  }
}
+ (KiBrokerData*) defaultInstance {
  return defaultKiBrokerDataInstance;
}
- (KiBrokerData*) defaultInstance {
  return defaultKiBrokerDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasStatus) {
    [output writeEnum:4 value:self.status];
  }
  if (self.hasType) {
    [output writeEnum:5 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasStatus) {
    size += computeEnumSize(4, self.status);
  }
  if (self.hasType) {
    size += computeEnumSize(5, self.type);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (KiBrokerData*) parseFromData:(NSData*) data {
  return (KiBrokerData*)[[[KiBrokerData builder] mergeFromData:data] build];
}
+ (KiBrokerData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiBrokerData*)[[[KiBrokerData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KiBrokerData*) parseFromInputStream:(NSInputStream*) input {
  return (KiBrokerData*)[[[KiBrokerData builder] mergeFromInputStream:input] build];
}
+ (KiBrokerData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiBrokerData*)[[[KiBrokerData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiBrokerData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KiBrokerData*)[[[KiBrokerData builder] mergeFromCodedInputStream:input] build];
}
+ (KiBrokerData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KiBrokerData*)[[[KiBrokerData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KiBrokerData_Builder*) builder {
  return [[KiBrokerData_Builder alloc] init];
}
+ (KiBrokerData_Builder*) builderWithPrototype:(KiBrokerData*) prototype {
  return [[KiBrokerData builder] mergeFrom:prototype];
}
- (KiBrokerData_Builder*) builder {
  return [KiBrokerData builder];
}
- (KiBrokerData_Builder*) toBuilder {
  return [KiBrokerData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KiBrokerData class]]) {
    return NO;
  }
  KiBrokerData *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status != otherMessage.status) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type != otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KiBrokerData_Builder()
@property (strong) KiBrokerData* result;
@end

@implementation KiBrokerData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[KiBrokerData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KiBrokerData_Builder*) clear {
  self.result = [[KiBrokerData alloc] init];
  return self;
}
- (KiBrokerData_Builder*) clone {
  return [KiBrokerData builderWithPrototype:result];
}
- (KiBrokerData*) defaultInstance {
  return [KiBrokerData defaultInstance];
}
- (KiBrokerData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KiBrokerData*) buildPartial {
  KiBrokerData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (KiBrokerData_Builder*) mergeFrom:(KiBrokerData*) other {
  if (other == [KiBrokerData defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KiBrokerData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KiBrokerData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (StatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (InvestorTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (KiBrokerData_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (KiBrokerData_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (KiBrokerData_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (KiBrokerData_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (KiBrokerData_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (KiBrokerData_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (Status) status {
  return result.status;
}
- (KiBrokerData_Builder*) setStatus:(Status) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (KiBrokerData_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = StatusActive;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (InvestorType) type {
  return result.type;
}
- (KiBrokerData_Builder*) setType:(InvestorType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (KiBrokerData_Builder*) clearType {
  result.hasType = NO;
  result.type = InvestorTypeD;
  return self;
}
@end

@interface NetBuySell ()
@property int32_t codeId;
@property Board board;
@property (strong) NSMutableArray * transactionArray;
@end

@implementation NetBuySell

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
@synthesize transactionArray;
@dynamic transaction;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
  }
  return self;
}
static NetBuySell* defaultNetBuySellInstance = nil;
+ (void) initialize {
  if (self == [NetBuySell class]) {
    defaultNetBuySellInstance = [[NetBuySell alloc] init];
  }
}
+ (NetBuySell*) defaultInstance {
  return defaultNetBuySellInstance;
}
- (NetBuySell*) defaultInstance {
  return defaultNetBuySellInstance;
}
- (NSArray *)transaction {
  return transactionArray;
}
- (Transaction*)transactionAtIndex:(NSUInteger)index {
  return [transactionArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  for (Transaction *element in self.transactionArray) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  for (Transaction *element in self.transactionArray) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NetBuySell*) parseFromData:(NSData*) data {
  return (NetBuySell*)[[[NetBuySell builder] mergeFromData:data] build];
}
+ (NetBuySell*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NetBuySell*)[[[NetBuySell builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NetBuySell*) parseFromInputStream:(NSInputStream*) input {
  return (NetBuySell*)[[[NetBuySell builder] mergeFromInputStream:input] build];
}
+ (NetBuySell*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NetBuySell*)[[[NetBuySell builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NetBuySell*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NetBuySell*)[[[NetBuySell builder] mergeFromCodedInputStream:input] build];
}
+ (NetBuySell*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NetBuySell*)[[[NetBuySell builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NetBuySell_Builder*) builder {
  return [[NetBuySell_Builder alloc] init];
}
+ (NetBuySell_Builder*) builderWithPrototype:(NetBuySell*) prototype {
  return [[NetBuySell builder] mergeFrom:prototype];
}
- (NetBuySell_Builder*) builder {
  return [NetBuySell builder];
}
- (NetBuySell_Builder*) toBuilder {
  return [NetBuySell builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  for (Transaction* element in self.transactionArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"transaction"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NetBuySell class]]) {
    return NO;
  }
  NetBuySell *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      [self.transactionArray isEqualToArray:otherMessage.transactionArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  for (Transaction* element in self.transactionArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NetBuySell_Builder()
@property (strong) NetBuySell* result;
@end

@implementation NetBuySell_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[NetBuySell alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NetBuySell_Builder*) clear {
  self.result = [[NetBuySell alloc] init];
  return self;
}
- (NetBuySell_Builder*) clone {
  return [NetBuySell builderWithPrototype:result];
}
- (NetBuySell*) defaultInstance {
  return [NetBuySell defaultInstance];
}
- (NetBuySell*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NetBuySell*) buildPartial {
  NetBuySell* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (NetBuySell_Builder*) mergeFrom:(NetBuySell*) other {
  if (other == [NetBuySell defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.transactionArray.count > 0) {
    if (result.transactionArray == nil) {
      result.transactionArray = [[NSMutableArray alloc] initWithArray:other.transactionArray];
    } else {
      [result.transactionArray addObjectsFromArray:other.transactionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NetBuySell_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NetBuySell_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        Transaction_Builder* subBuilder = [Transaction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTransaction:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (NetBuySell_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (NetBuySell_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (NetBuySell_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (NetBuySell_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (NSMutableArray *)transaction {
  return result.transactionArray;
}
- (Transaction*)transactionAtIndex:(NSUInteger)index {
  return [result transactionAtIndex:index];
}
- (NetBuySell_Builder *)addTransaction:(Transaction*)value {
  if (result.transactionArray == nil) {
    result.transactionArray = [[NSMutableArray alloc]init];
  }
  [result.transactionArray addObject:value];
  return self;
}
- (NetBuySell_Builder *)setTransactionArray:(NSArray *)array {
  result.transactionArray = [[NSMutableArray alloc]init];
  return self;
}
- (NetBuySell_Builder *)clearTransaction {
  result.transactionArray = nil;
  return self;
}
@end

@interface Transaction ()
@property int32_t codeId;
@property Board board;
@property int32_t sequence;
@property (strong) TransactionDetail* buy;
@property (strong) TransactionDetail* sell;
@property int64_t foreignBought;
@property int64_t foreignSold;
@property int64_t domesticBought;
@property int64_t domesticSold;
@property (strong) NSString* code;
@end

@implementation Transaction

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasBuy {
  return !!hasBuy_;
}
- (void) setHasBuy:(BOOL) value {
  hasBuy_ = !!value;
}
@synthesize buy;
- (BOOL) hasSell {
  return !!hasSell_;
}
- (void) setHasSell:(BOOL) value {
  hasSell_ = !!value;
}
@synthesize sell;
- (BOOL) hasForeignBought {
  return !!hasForeignBought_;
}
- (void) setHasForeignBought:(BOOL) value {
  hasForeignBought_ = !!value;
}
@synthesize foreignBought;
- (BOOL) hasForeignSold {
  return !!hasForeignSold_;
}
- (void) setHasForeignSold:(BOOL) value {
  hasForeignSold_ = !!value;
}
@synthesize foreignSold;
- (BOOL) hasDomesticBought {
  return !!hasDomesticBought_;
}
- (void) setHasDomesticBought:(BOOL) value {
  hasDomesticBought_ = !!value;
}
@synthesize domesticBought;
- (BOOL) hasDomesticSold {
  return !!hasDomesticSold_;
}
- (void) setHasDomesticSold:(BOOL) value {
  hasDomesticSold_ = !!value;
}
@synthesize domesticSold;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
    self.sequence = 0;
    self.buy = [TransactionDetail defaultInstance];
    self.sell = [TransactionDetail defaultInstance];
    self.foreignBought = 0L;
    self.foreignSold = 0L;
    self.domesticBought = 0L;
    self.domesticSold = 0L;
    self.code = @"";
  }
  return self;
}
static Transaction* defaultTransactionInstance = nil;
+ (void) initialize {
  if (self == [Transaction class]) {
    defaultTransactionInstance = [[Transaction alloc] init];
  }
}
+ (Transaction*) defaultInstance {
  return defaultTransactionInstance;
}
- (Transaction*) defaultInstance {
  return defaultTransactionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasSequence) {
    [output writeInt32:3 value:self.sequence];
  }
  if (self.hasBuy) {
    [output writeMessage:4 value:self.buy];
  }
  if (self.hasSell) {
    [output writeMessage:5 value:self.sell];
  }
  if (self.hasForeignBought) {
    [output writeInt64:6 value:self.foreignBought];
  }
  if (self.hasForeignSold) {
    [output writeInt64:7 value:self.foreignSold];
  }
  if (self.hasDomesticBought) {
    [output writeInt64:8 value:self.domesticBought];
  }
  if (self.hasDomesticSold) {
    [output writeInt64:9 value:self.domesticSold];
  }
  if (self.hasCode) {
    [output writeString:10 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasSequence) {
    size += computeInt32Size(3, self.sequence);
  }
  if (self.hasBuy) {
    size += computeMessageSize(4, self.buy);
  }
  if (self.hasSell) {
    size += computeMessageSize(5, self.sell);
  }
  if (self.hasForeignBought) {
    size += computeInt64Size(6, self.foreignBought);
  }
  if (self.hasForeignSold) {
    size += computeInt64Size(7, self.foreignSold);
  }
  if (self.hasDomesticBought) {
    size += computeInt64Size(8, self.domesticBought);
  }
  if (self.hasDomesticSold) {
    size += computeInt64Size(9, self.domesticSold);
  }
  if (self.hasCode) {
    size += computeStringSize(10, self.code);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Transaction*) parseFromData:(NSData*) data {
  return (Transaction*)[[[Transaction builder] mergeFromData:data] build];
}
+ (Transaction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Transaction*)[[[Transaction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Transaction*) parseFromInputStream:(NSInputStream*) input {
  return (Transaction*)[[[Transaction builder] mergeFromInputStream:input] build];
}
+ (Transaction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Transaction*)[[[Transaction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Transaction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Transaction*)[[[Transaction builder] mergeFromCodedInputStream:input] build];
}
+ (Transaction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Transaction*)[[[Transaction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Transaction_Builder*) builder {
  return [[Transaction_Builder alloc] init];
}
+ (Transaction_Builder*) builderWithPrototype:(Transaction*) prototype {
  return [[Transaction builder] mergeFrom:prototype];
}
- (Transaction_Builder*) builder {
  return [Transaction builder];
}
- (Transaction_Builder*) toBuilder {
  return [Transaction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasBuy) {
    [output appendFormat:@"%@%@ {\n", indent, @"buy"];
    [self.buy writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSell) {
    [output appendFormat:@"%@%@ {\n", indent, @"sell"];
    [self.sell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasForeignBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignBought", [NSNumber numberWithLongLong:self.foreignBought]];
  }
  if (self.hasForeignSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignSold", [NSNumber numberWithLongLong:self.foreignSold]];
  }
  if (self.hasDomesticBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domesticBought", [NSNumber numberWithLongLong:self.domesticBought]];
  }
  if (self.hasDomesticSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domesticSold", [NSNumber numberWithLongLong:self.domesticSold]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Transaction class]]) {
    return NO;
  }
  Transaction *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasBuy == otherMessage.hasBuy &&
      (!self.hasBuy || [self.buy isEqual:otherMessage.buy]) &&
      self.hasSell == otherMessage.hasSell &&
      (!self.hasSell || [self.sell isEqual:otherMessage.sell]) &&
      self.hasForeignBought == otherMessage.hasForeignBought &&
      (!self.hasForeignBought || self.foreignBought == otherMessage.foreignBought) &&
      self.hasForeignSold == otherMessage.hasForeignSold &&
      (!self.hasForeignSold || self.foreignSold == otherMessage.foreignSold) &&
      self.hasDomesticBought == otherMessage.hasDomesticBought &&
      (!self.hasDomesticBought || self.domesticBought == otherMessage.domesticBought) &&
      self.hasDomesticSold == otherMessage.hasDomesticSold &&
      (!self.hasDomesticSold || self.domesticSold == otherMessage.domesticSold) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasBuy) {
    hashCode = hashCode * 31 + [self.buy hash];
  }
  if (self.hasSell) {
    hashCode = hashCode * 31 + [self.sell hash];
  }
  if (self.hasForeignBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignBought] hash];
  }
  if (self.hasForeignSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignSold] hash];
  }
  if (self.hasDomesticBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.domesticBought] hash];
  }
  if (self.hasDomesticSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.domesticSold] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Transaction_Builder()
@property (strong) Transaction* result;
@end

@implementation Transaction_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Transaction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Transaction_Builder*) clear {
  self.result = [[Transaction alloc] init];
  return self;
}
- (Transaction_Builder*) clone {
  return [Transaction builderWithPrototype:result];
}
- (Transaction*) defaultInstance {
  return [Transaction defaultInstance];
}
- (Transaction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Transaction*) buildPartial {
  Transaction* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Transaction_Builder*) mergeFrom:(Transaction*) other {
  if (other == [Transaction defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasBuy) {
    [self mergeBuy:other.buy];
  }
  if (other.hasSell) {
    [self mergeSell:other.sell];
  }
  if (other.hasForeignBought) {
    [self setForeignBought:other.foreignBought];
  }
  if (other.hasForeignSold) {
    [self setForeignSold:other.foreignSold];
  }
  if (other.hasDomesticBought) {
    [self setDomesticBought:other.domesticBought];
  }
  if (other.hasDomesticSold) {
    [self setDomesticSold:other.domesticSold];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Transaction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Transaction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 34: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasBuy) {
          [subBuilder mergeFrom:self.buy];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBuy:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasSell) {
          [subBuilder mergeFrom:self.sell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSell:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setForeignBought:[input readInt64]];
        break;
      }
      case 56: {
        [self setForeignSold:[input readInt64]];
        break;
      }
      case 64: {
        [self setDomesticBought:[input readInt64]];
        break;
      }
      case 72: {
        [self setDomesticSold:[input readInt64]];
        break;
      }
      case 82: {
        [self setCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (Transaction_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (Transaction_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (Transaction_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (Transaction_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (Transaction_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (Transaction_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasBuy {
  return result.hasBuy;
}
- (TransactionDetail*) buy {
  return result.buy;
}
- (Transaction_Builder*) setBuy:(TransactionDetail*) value {
  result.hasBuy = YES;
  result.buy = value;
  return self;
}
- (Transaction_Builder*) setBuyBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setBuy:[builderForValue build]];
}
- (Transaction_Builder*) mergeBuy:(TransactionDetail*) value {
  if (result.hasBuy &&
      result.buy != [TransactionDetail defaultInstance]) {
    result.buy =
      [[[TransactionDetail builderWithPrototype:result.buy] mergeFrom:value] buildPartial];
  } else {
    result.buy = value;
  }
  result.hasBuy = YES;
  return self;
}
- (Transaction_Builder*) clearBuy {
  result.hasBuy = NO;
  result.buy = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasSell {
  return result.hasSell;
}
- (TransactionDetail*) sell {
  return result.sell;
}
- (Transaction_Builder*) setSell:(TransactionDetail*) value {
  result.hasSell = YES;
  result.sell = value;
  return self;
}
- (Transaction_Builder*) setSellBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setSell:[builderForValue build]];
}
- (Transaction_Builder*) mergeSell:(TransactionDetail*) value {
  if (result.hasSell &&
      result.sell != [TransactionDetail defaultInstance]) {
    result.sell =
      [[[TransactionDetail builderWithPrototype:result.sell] mergeFrom:value] buildPartial];
  } else {
    result.sell = value;
  }
  result.hasSell = YES;
  return self;
}
- (Transaction_Builder*) clearSell {
  result.hasSell = NO;
  result.sell = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasForeignBought {
  return result.hasForeignBought;
}
- (int64_t) foreignBought {
  return result.foreignBought;
}
- (Transaction_Builder*) setForeignBought:(int64_t) value {
  result.hasForeignBought = YES;
  result.foreignBought = value;
  return self;
}
- (Transaction_Builder*) clearForeignBought {
  result.hasForeignBought = NO;
  result.foreignBought = 0L;
  return self;
}
- (BOOL) hasForeignSold {
  return result.hasForeignSold;
}
- (int64_t) foreignSold {
  return result.foreignSold;
}
- (Transaction_Builder*) setForeignSold:(int64_t) value {
  result.hasForeignSold = YES;
  result.foreignSold = value;
  return self;
}
- (Transaction_Builder*) clearForeignSold {
  result.hasForeignSold = NO;
  result.foreignSold = 0L;
  return self;
}
- (BOOL) hasDomesticBought {
  return result.hasDomesticBought;
}
- (int64_t) domesticBought {
  return result.domesticBought;
}
- (Transaction_Builder*) setDomesticBought:(int64_t) value {
  result.hasDomesticBought = YES;
  result.domesticBought = value;
  return self;
}
- (Transaction_Builder*) clearDomesticBought {
  result.hasDomesticBought = NO;
  result.domesticBought = 0L;
  return self;
}
- (BOOL) hasDomesticSold {
  return result.hasDomesticSold;
}
- (int64_t) domesticSold {
  return result.domesticSold;
}
- (Transaction_Builder*) setDomesticSold:(int64_t) value {
  result.hasDomesticSold = YES;
  result.domesticSold = value;
  return self;
}
- (Transaction_Builder*) clearDomesticSold {
  result.hasDomesticSold = NO;
  result.domesticSold = 0L;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (Transaction_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (Transaction_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
@end

@interface TransactionDetail ()
@property int64_t volume;
@property int64_t value;
@property int32_t frequency;
@end

@implementation TransactionDetail

- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value {
  hasValue_ = !!value;
}
@synthesize value;
- (BOOL) hasFrequency {
  return !!hasFrequency_;
}
- (void) setHasFrequency:(BOOL) value {
  hasFrequency_ = !!value;
}
@synthesize frequency;
- (id) init {
  if ((self = [super init])) {
    self.volume = 0L;
    self.value = 0L;
    self.frequency = 0;
  }
  return self;
}
static TransactionDetail* defaultTransactionDetailInstance = nil;
+ (void) initialize {
  if (self == [TransactionDetail class]) {
    defaultTransactionDetailInstance = [[TransactionDetail alloc] init];
  }
}
+ (TransactionDetail*) defaultInstance {
  return defaultTransactionDetailInstance;
}
- (TransactionDetail*) defaultInstance {
  return defaultTransactionDetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVolume) {
    [output writeInt64:1 value:self.volume];
  }
  if (self.hasValue) {
    [output writeInt64:2 value:self.value];
  }
  if (self.hasFrequency) {
    [output writeInt32:3 value:self.frequency];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVolume) {
    size += computeInt64Size(1, self.volume);
  }
  if (self.hasValue) {
    size += computeInt64Size(2, self.value);
  }
  if (self.hasFrequency) {
    size += computeInt32Size(3, self.frequency);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TransactionDetail*) parseFromData:(NSData*) data {
  return (TransactionDetail*)[[[TransactionDetail builder] mergeFromData:data] build];
}
+ (TransactionDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransactionDetail*)[[[TransactionDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TransactionDetail*) parseFromInputStream:(NSInputStream*) input {
  return (TransactionDetail*)[[[TransactionDetail builder] mergeFromInputStream:input] build];
}
+ (TransactionDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransactionDetail*)[[[TransactionDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransactionDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TransactionDetail*)[[[TransactionDetail builder] mergeFromCodedInputStream:input] build];
}
+ (TransactionDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransactionDetail*)[[[TransactionDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransactionDetail_Builder*) builder {
  return [[TransactionDetail_Builder alloc] init];
}
+ (TransactionDetail_Builder*) builderWithPrototype:(TransactionDetail*) prototype {
  return [[TransactionDetail builder] mergeFrom:prototype];
}
- (TransactionDetail_Builder*) builder {
  return [TransactionDetail builder];
}
- (TransactionDetail_Builder*) toBuilder {
  return [TransactionDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithLongLong:self.volume]];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithLongLong:self.value]];
  }
  if (self.hasFrequency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frequency", [NSNumber numberWithInt:self.frequency]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TransactionDetail class]]) {
    return NO;
  }
  TransactionDetail *otherMessage = other;
  return
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      self.hasFrequency == otherMessage.hasFrequency &&
      (!self.hasFrequency || self.frequency == otherMessage.frequency) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.volume] hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.value] hash];
  }
  if (self.hasFrequency) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.frequency] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TransactionDetail_Builder()
@property (strong) TransactionDetail* result;
@end

@implementation TransactionDetail_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TransactionDetail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TransactionDetail_Builder*) clear {
  self.result = [[TransactionDetail alloc] init];
  return self;
}
- (TransactionDetail_Builder*) clone {
  return [TransactionDetail builderWithPrototype:result];
}
- (TransactionDetail*) defaultInstance {
  return [TransactionDetail defaultInstance];
}
- (TransactionDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TransactionDetail*) buildPartial {
  TransactionDetail* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TransactionDetail_Builder*) mergeFrom:(TransactionDetail*) other {
  if (other == [TransactionDetail defaultInstance]) {
    return self;
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasFrequency) {
    [self setFrequency:other.frequency];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransactionDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransactionDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVolume:[input readInt64]];
        break;
      }
      case 16: {
        [self setValue:[input readInt64]];
        break;
      }
      case 24: {
        [self setFrequency:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (int64_t) volume {
  return result.volume;
}
- (TransactionDetail_Builder*) setVolume:(int64_t) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (TransactionDetail_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0L;
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (int64_t) value {
  return result.value;
}
- (TransactionDetail_Builder*) setValue:(int64_t) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (TransactionDetail_Builder*) clearValue {
  result.hasValue = NO;
  result.value = 0L;
  return self;
}
- (BOOL) hasFrequency {
  return result.hasFrequency;
}
- (int32_t) frequency {
  return result.frequency;
}
- (TransactionDetail_Builder*) setFrequency:(int32_t) value {
  result.hasFrequency = YES;
  result.frequency = value;
  return self;
}
- (TransactionDetail_Builder*) clearFrequency {
  result.hasFrequency = NO;
  result.frequency = 0;
  return self;
}
@end

@interface FDSummary ()
@property int32_t sequence;
@property (strong) TransactionDetail* fBuy;
@property (strong) TransactionDetail* fSell;
@property (strong) TransactionDetail* dBuy;
@property (strong) TransactionDetail* dSell;
@end

@implementation FDSummary

- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasFBuy {
  return !!hasFBuy_;
}
- (void) setHasFBuy:(BOOL) value {
  hasFBuy_ = !!value;
}
@synthesize fBuy;
- (BOOL) hasFSell {
  return !!hasFSell_;
}
- (void) setHasFSell:(BOOL) value {
  hasFSell_ = !!value;
}
@synthesize fSell;
- (BOOL) hasDBuy {
  return !!hasDBuy_;
}
- (void) setHasDBuy:(BOOL) value {
  hasDBuy_ = !!value;
}
@synthesize dBuy;
- (BOOL) hasDSell {
  return !!hasDSell_;
}
- (void) setHasDSell:(BOOL) value {
  hasDSell_ = !!value;
}
@synthesize dSell;
- (id) init {
  if ((self = [super init])) {
    self.sequence = 0;
    self.fBuy = [TransactionDetail defaultInstance];
    self.fSell = [TransactionDetail defaultInstance];
    self.dBuy = [TransactionDetail defaultInstance];
    self.dSell = [TransactionDetail defaultInstance];
  }
  return self;
}
static FDSummary* defaultFDSummaryInstance = nil;
+ (void) initialize {
  if (self == [FDSummary class]) {
    defaultFDSummaryInstance = [[FDSummary alloc] init];
  }
}
+ (FDSummary*) defaultInstance {
  return defaultFDSummaryInstance;
}
- (FDSummary*) defaultInstance {
  return defaultFDSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequence) {
    [output writeInt32:1 value:self.sequence];
  }
  if (self.hasFBuy) {
    [output writeMessage:2 value:self.fBuy];
  }
  if (self.hasFSell) {
    [output writeMessage:3 value:self.fSell];
  }
  if (self.hasDBuy) {
    [output writeMessage:4 value:self.dBuy];
  }
  if (self.hasDSell) {
    [output writeMessage:5 value:self.dSell];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequence) {
    size += computeInt32Size(1, self.sequence);
  }
  if (self.hasFBuy) {
    size += computeMessageSize(2, self.fBuy);
  }
  if (self.hasFSell) {
    size += computeMessageSize(3, self.fSell);
  }
  if (self.hasDBuy) {
    size += computeMessageSize(4, self.dBuy);
  }
  if (self.hasDSell) {
    size += computeMessageSize(5, self.dSell);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FDSummary*) parseFromData:(NSData*) data {
  return (FDSummary*)[[[FDSummary builder] mergeFromData:data] build];
}
+ (FDSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FDSummary*)[[[FDSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FDSummary*) parseFromInputStream:(NSInputStream*) input {
  return (FDSummary*)[[[FDSummary builder] mergeFromInputStream:input] build];
}
+ (FDSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FDSummary*)[[[FDSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FDSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FDSummary*)[[[FDSummary builder] mergeFromCodedInputStream:input] build];
}
+ (FDSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FDSummary*)[[[FDSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FDSummary_Builder*) builder {
  return [[FDSummary_Builder alloc] init];
}
+ (FDSummary_Builder*) builderWithPrototype:(FDSummary*) prototype {
  return [[FDSummary builder] mergeFrom:prototype];
}
- (FDSummary_Builder*) builder {
  return [FDSummary builder];
}
- (FDSummary_Builder*) toBuilder {
  return [FDSummary builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasFBuy) {
    [output appendFormat:@"%@%@ {\n", indent, @"fBuy"];
    [self.fBuy writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFSell) {
    [output appendFormat:@"%@%@ {\n", indent, @"fSell"];
    [self.fSell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDBuy) {
    [output appendFormat:@"%@%@ {\n", indent, @"dBuy"];
    [self.dBuy writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDSell) {
    [output appendFormat:@"%@%@ {\n", indent, @"dSell"];
    [self.dSell writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FDSummary class]]) {
    return NO;
  }
  FDSummary *otherMessage = other;
  return
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasFBuy == otherMessage.hasFBuy &&
      (!self.hasFBuy || [self.fBuy isEqual:otherMessage.fBuy]) &&
      self.hasFSell == otherMessage.hasFSell &&
      (!self.hasFSell || [self.fSell isEqual:otherMessage.fSell]) &&
      self.hasDBuy == otherMessage.hasDBuy &&
      (!self.hasDBuy || [self.dBuy isEqual:otherMessage.dBuy]) &&
      self.hasDSell == otherMessage.hasDSell &&
      (!self.hasDSell || [self.dSell isEqual:otherMessage.dSell]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasFBuy) {
    hashCode = hashCode * 31 + [self.fBuy hash];
  }
  if (self.hasFSell) {
    hashCode = hashCode * 31 + [self.fSell hash];
  }
  if (self.hasDBuy) {
    hashCode = hashCode * 31 + [self.dBuy hash];
  }
  if (self.hasDSell) {
    hashCode = hashCode * 31 + [self.dSell hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FDSummary_Builder()
@property (strong) FDSummary* result;
@end

@implementation FDSummary_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FDSummary alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FDSummary_Builder*) clear {
  self.result = [[FDSummary alloc] init];
  return self;
}
- (FDSummary_Builder*) clone {
  return [FDSummary builderWithPrototype:result];
}
- (FDSummary*) defaultInstance {
  return [FDSummary defaultInstance];
}
- (FDSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FDSummary*) buildPartial {
  FDSummary* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FDSummary_Builder*) mergeFrom:(FDSummary*) other {
  if (other == [FDSummary defaultInstance]) {
    return self;
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasFBuy) {
    [self mergeFBuy:other.fBuy];
  }
  if (other.hasFSell) {
    [self mergeFSell:other.fSell];
  }
  if (other.hasDBuy) {
    [self mergeDBuy:other.dBuy];
  }
  if (other.hasDSell) {
    [self mergeDSell:other.dSell];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FDSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FDSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 18: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasFBuy) {
          [subBuilder mergeFrom:self.fBuy];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFBuy:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasFSell) {
          [subBuilder mergeFrom:self.fSell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFSell:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasDBuy) {
          [subBuilder mergeFrom:self.dBuy];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDBuy:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasDSell) {
          [subBuilder mergeFrom:self.dSell];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDSell:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (FDSummary_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (FDSummary_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasFBuy {
  return result.hasFBuy;
}
- (TransactionDetail*) fBuy {
  return result.fBuy;
}
- (FDSummary_Builder*) setFBuy:(TransactionDetail*) value {
  result.hasFBuy = YES;
  result.fBuy = value;
  return self;
}
- (FDSummary_Builder*) setFBuyBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setFBuy:[builderForValue build]];
}
- (FDSummary_Builder*) mergeFBuy:(TransactionDetail*) value {
  if (result.hasFBuy &&
      result.fBuy != [TransactionDetail defaultInstance]) {
    result.fBuy =
      [[[TransactionDetail builderWithPrototype:result.fBuy] mergeFrom:value] buildPartial];
  } else {
    result.fBuy = value;
  }
  result.hasFBuy = YES;
  return self;
}
- (FDSummary_Builder*) clearFBuy {
  result.hasFBuy = NO;
  result.fBuy = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasFSell {
  return result.hasFSell;
}
- (TransactionDetail*) fSell {
  return result.fSell;
}
- (FDSummary_Builder*) setFSell:(TransactionDetail*) value {
  result.hasFSell = YES;
  result.fSell = value;
  return self;
}
- (FDSummary_Builder*) setFSellBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setFSell:[builderForValue build]];
}
- (FDSummary_Builder*) mergeFSell:(TransactionDetail*) value {
  if (result.hasFSell &&
      result.fSell != [TransactionDetail defaultInstance]) {
    result.fSell =
      [[[TransactionDetail builderWithPrototype:result.fSell] mergeFrom:value] buildPartial];
  } else {
    result.fSell = value;
  }
  result.hasFSell = YES;
  return self;
}
- (FDSummary_Builder*) clearFSell {
  result.hasFSell = NO;
  result.fSell = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasDBuy {
  return result.hasDBuy;
}
- (TransactionDetail*) dBuy {
  return result.dBuy;
}
- (FDSummary_Builder*) setDBuy:(TransactionDetail*) value {
  result.hasDBuy = YES;
  result.dBuy = value;
  return self;
}
- (FDSummary_Builder*) setDBuyBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setDBuy:[builderForValue build]];
}
- (FDSummary_Builder*) mergeDBuy:(TransactionDetail*) value {
  if (result.hasDBuy &&
      result.dBuy != [TransactionDetail defaultInstance]) {
    result.dBuy =
      [[[TransactionDetail builderWithPrototype:result.dBuy] mergeFrom:value] buildPartial];
  } else {
    result.dBuy = value;
  }
  result.hasDBuy = YES;
  return self;
}
- (FDSummary_Builder*) clearDBuy {
  result.hasDBuy = NO;
  result.dBuy = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasDSell {
  return result.hasDSell;
}
- (TransactionDetail*) dSell {
  return result.dSell;
}
- (FDSummary_Builder*) setDSell:(TransactionDetail*) value {
  result.hasDSell = YES;
  result.dSell = value;
  return self;
}
- (FDSummary_Builder*) setDSellBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setDSell:[builderForValue build]];
}
- (FDSummary_Builder*) mergeDSell:(TransactionDetail*) value {
  if (result.hasDSell &&
      result.dSell != [TransactionDetail defaultInstance]) {
    result.dSell =
      [[[TransactionDetail builderWithPrototype:result.dSell] mergeFrom:value] buildPartial];
  } else {
    result.dSell = value;
  }
  result.hasDSell = YES;
  return self;
}
- (FDSummary_Builder*) clearDSell {
  result.hasDSell = NO;
  result.dSell = [TransactionDetail defaultInstance];
  return self;
}
@end

@interface MarketSummary ()
@property (strong) TransactionDetail* stockRg;
@property (strong) TransactionDetail* stockNg;
@property (strong) TransactionDetail* stockTn;
@property (strong) TransactionDetail* warantRg;
@property (strong) TransactionDetail* warantNg;
@property (strong) TransactionDetail* warantTn;
@property (strong) TransactionDetail* rightRg;
@property (strong) TransactionDetail* rightNg;
@property (strong) TransactionDetail* rightTn;
@end

@implementation MarketSummary

- (BOOL) hasStockRg {
  return !!hasStockRg_;
}
- (void) setHasStockRg:(BOOL) value {
  hasStockRg_ = !!value;
}
@synthesize stockRg;
- (BOOL) hasStockNg {
  return !!hasStockNg_;
}
- (void) setHasStockNg:(BOOL) value {
  hasStockNg_ = !!value;
}
@synthesize stockNg;
- (BOOL) hasStockTn {
  return !!hasStockTn_;
}
- (void) setHasStockTn:(BOOL) value {
  hasStockTn_ = !!value;
}
@synthesize stockTn;
- (BOOL) hasWarantRg {
  return !!hasWarantRg_;
}
- (void) setHasWarantRg:(BOOL) value {
  hasWarantRg_ = !!value;
}
@synthesize warantRg;
- (BOOL) hasWarantNg {
  return !!hasWarantNg_;
}
- (void) setHasWarantNg:(BOOL) value {
  hasWarantNg_ = !!value;
}
@synthesize warantNg;
- (BOOL) hasWarantTn {
  return !!hasWarantTn_;
}
- (void) setHasWarantTn:(BOOL) value {
  hasWarantTn_ = !!value;
}
@synthesize warantTn;
- (BOOL) hasRightRg {
  return !!hasRightRg_;
}
- (void) setHasRightRg:(BOOL) value {
  hasRightRg_ = !!value;
}
@synthesize rightRg;
- (BOOL) hasRightNg {
  return !!hasRightNg_;
}
- (void) setHasRightNg:(BOOL) value {
  hasRightNg_ = !!value;
}
@synthesize rightNg;
- (BOOL) hasRightTn {
  return !!hasRightTn_;
}
- (void) setHasRightTn:(BOOL) value {
  hasRightTn_ = !!value;
}
@synthesize rightTn;
- (id) init {
  if ((self = [super init])) {
    self.stockRg = [TransactionDetail defaultInstance];
    self.stockNg = [TransactionDetail defaultInstance];
    self.stockTn = [TransactionDetail defaultInstance];
    self.warantRg = [TransactionDetail defaultInstance];
    self.warantNg = [TransactionDetail defaultInstance];
    self.warantTn = [TransactionDetail defaultInstance];
    self.rightRg = [TransactionDetail defaultInstance];
    self.rightNg = [TransactionDetail defaultInstance];
    self.rightTn = [TransactionDetail defaultInstance];
  }
  return self;
}
static MarketSummary* defaultMarketSummaryInstance = nil;
+ (void) initialize {
  if (self == [MarketSummary class]) {
    defaultMarketSummaryInstance = [[MarketSummary alloc] init];
  }
}
+ (MarketSummary*) defaultInstance {
  return defaultMarketSummaryInstance;
}
- (MarketSummary*) defaultInstance {
  return defaultMarketSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStockRg) {
    [output writeMessage:1 value:self.stockRg];
  }
  if (self.hasStockNg) {
    [output writeMessage:2 value:self.stockNg];
  }
  if (self.hasStockTn) {
    [output writeMessage:3 value:self.stockTn];
  }
  if (self.hasWarantRg) {
    [output writeMessage:4 value:self.warantRg];
  }
  if (self.hasWarantNg) {
    [output writeMessage:5 value:self.warantNg];
  }
  if (self.hasWarantTn) {
    [output writeMessage:6 value:self.warantTn];
  }
  if (self.hasRightRg) {
    [output writeMessage:7 value:self.rightRg];
  }
  if (self.hasRightNg) {
    [output writeMessage:8 value:self.rightNg];
  }
  if (self.hasRightTn) {
    [output writeMessage:9 value:self.rightTn];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasStockRg) {
    size += computeMessageSize(1, self.stockRg);
  }
  if (self.hasStockNg) {
    size += computeMessageSize(2, self.stockNg);
  }
  if (self.hasStockTn) {
    size += computeMessageSize(3, self.stockTn);
  }
  if (self.hasWarantRg) {
    size += computeMessageSize(4, self.warantRg);
  }
  if (self.hasWarantNg) {
    size += computeMessageSize(5, self.warantNg);
  }
  if (self.hasWarantTn) {
    size += computeMessageSize(6, self.warantTn);
  }
  if (self.hasRightRg) {
    size += computeMessageSize(7, self.rightRg);
  }
  if (self.hasRightNg) {
    size += computeMessageSize(8, self.rightNg);
  }
  if (self.hasRightTn) {
    size += computeMessageSize(9, self.rightTn);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MarketSummary*) parseFromData:(NSData*) data {
  return (MarketSummary*)[[[MarketSummary builder] mergeFromData:data] build];
}
+ (MarketSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketSummary*)[[[MarketSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MarketSummary*) parseFromInputStream:(NSInputStream*) input {
  return (MarketSummary*)[[[MarketSummary builder] mergeFromInputStream:input] build];
}
+ (MarketSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketSummary*)[[[MarketSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MarketSummary*)[[[MarketSummary builder] mergeFromCodedInputStream:input] build];
}
+ (MarketSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketSummary*)[[[MarketSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketSummary_Builder*) builder {
  return [[MarketSummary_Builder alloc] init];
}
+ (MarketSummary_Builder*) builderWithPrototype:(MarketSummary*) prototype {
  return [[MarketSummary builder] mergeFrom:prototype];
}
- (MarketSummary_Builder*) builder {
  return [MarketSummary builder];
}
- (MarketSummary_Builder*) toBuilder {
  return [MarketSummary builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasStockRg) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockRg"];
    [self.stockRg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStockNg) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockNg"];
    [self.stockNg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStockTn) {
    [output appendFormat:@"%@%@ {\n", indent, @"stockTn"];
    [self.stockTn writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWarantRg) {
    [output appendFormat:@"%@%@ {\n", indent, @"warantRg"];
    [self.warantRg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWarantNg) {
    [output appendFormat:@"%@%@ {\n", indent, @"warantNg"];
    [self.warantNg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWarantTn) {
    [output appendFormat:@"%@%@ {\n", indent, @"warantTn"];
    [self.warantTn writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRightRg) {
    [output appendFormat:@"%@%@ {\n", indent, @"rightRg"];
    [self.rightRg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRightNg) {
    [output appendFormat:@"%@%@ {\n", indent, @"rightNg"];
    [self.rightNg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRightTn) {
    [output appendFormat:@"%@%@ {\n", indent, @"rightTn"];
    [self.rightTn writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MarketSummary class]]) {
    return NO;
  }
  MarketSummary *otherMessage = other;
  return
      self.hasStockRg == otherMessage.hasStockRg &&
      (!self.hasStockRg || [self.stockRg isEqual:otherMessage.stockRg]) &&
      self.hasStockNg == otherMessage.hasStockNg &&
      (!self.hasStockNg || [self.stockNg isEqual:otherMessage.stockNg]) &&
      self.hasStockTn == otherMessage.hasStockTn &&
      (!self.hasStockTn || [self.stockTn isEqual:otherMessage.stockTn]) &&
      self.hasWarantRg == otherMessage.hasWarantRg &&
      (!self.hasWarantRg || [self.warantRg isEqual:otherMessage.warantRg]) &&
      self.hasWarantNg == otherMessage.hasWarantNg &&
      (!self.hasWarantNg || [self.warantNg isEqual:otherMessage.warantNg]) &&
      self.hasWarantTn == otherMessage.hasWarantTn &&
      (!self.hasWarantTn || [self.warantTn isEqual:otherMessage.warantTn]) &&
      self.hasRightRg == otherMessage.hasRightRg &&
      (!self.hasRightRg || [self.rightRg isEqual:otherMessage.rightRg]) &&
      self.hasRightNg == otherMessage.hasRightNg &&
      (!self.hasRightNg || [self.rightNg isEqual:otherMessage.rightNg]) &&
      self.hasRightTn == otherMessage.hasRightTn &&
      (!self.hasRightTn || [self.rightTn isEqual:otherMessage.rightTn]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasStockRg) {
    hashCode = hashCode * 31 + [self.stockRg hash];
  }
  if (self.hasStockNg) {
    hashCode = hashCode * 31 + [self.stockNg hash];
  }
  if (self.hasStockTn) {
    hashCode = hashCode * 31 + [self.stockTn hash];
  }
  if (self.hasWarantRg) {
    hashCode = hashCode * 31 + [self.warantRg hash];
  }
  if (self.hasWarantNg) {
    hashCode = hashCode * 31 + [self.warantNg hash];
  }
  if (self.hasWarantTn) {
    hashCode = hashCode * 31 + [self.warantTn hash];
  }
  if (self.hasRightRg) {
    hashCode = hashCode * 31 + [self.rightRg hash];
  }
  if (self.hasRightNg) {
    hashCode = hashCode * 31 + [self.rightNg hash];
  }
  if (self.hasRightTn) {
    hashCode = hashCode * 31 + [self.rightTn hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MarketSummary_Builder()
@property (strong) MarketSummary* result;
@end

@implementation MarketSummary_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MarketSummary alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MarketSummary_Builder*) clear {
  self.result = [[MarketSummary alloc] init];
  return self;
}
- (MarketSummary_Builder*) clone {
  return [MarketSummary builderWithPrototype:result];
}
- (MarketSummary*) defaultInstance {
  return [MarketSummary defaultInstance];
}
- (MarketSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MarketSummary*) buildPartial {
  MarketSummary* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MarketSummary_Builder*) mergeFrom:(MarketSummary*) other {
  if (other == [MarketSummary defaultInstance]) {
    return self;
  }
  if (other.hasStockRg) {
    [self mergeStockRg:other.stockRg];
  }
  if (other.hasStockNg) {
    [self mergeStockNg:other.stockNg];
  }
  if (other.hasStockTn) {
    [self mergeStockTn:other.stockTn];
  }
  if (other.hasWarantRg) {
    [self mergeWarantRg:other.warantRg];
  }
  if (other.hasWarantNg) {
    [self mergeWarantNg:other.warantNg];
  }
  if (other.hasWarantTn) {
    [self mergeWarantTn:other.warantTn];
  }
  if (other.hasRightRg) {
    [self mergeRightRg:other.rightRg];
  }
  if (other.hasRightNg) {
    [self mergeRightNg:other.rightNg];
  }
  if (other.hasRightTn) {
    [self mergeRightTn:other.rightTn];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MarketSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MarketSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasStockRg) {
          [subBuilder mergeFrom:self.stockRg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockRg:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasStockNg) {
          [subBuilder mergeFrom:self.stockNg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockNg:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasStockTn) {
          [subBuilder mergeFrom:self.stockTn];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStockTn:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasWarantRg) {
          [subBuilder mergeFrom:self.warantRg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWarantRg:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasWarantNg) {
          [subBuilder mergeFrom:self.warantNg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWarantNg:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasWarantTn) {
          [subBuilder mergeFrom:self.warantTn];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWarantTn:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasRightRg) {
          [subBuilder mergeFrom:self.rightRg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRightRg:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasRightNg) {
          [subBuilder mergeFrom:self.rightNg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRightNg:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        TransactionDetail_Builder* subBuilder = [TransactionDetail builder];
        if (self.hasRightTn) {
          [subBuilder mergeFrom:self.rightTn];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRightTn:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasStockRg {
  return result.hasStockRg;
}
- (TransactionDetail*) stockRg {
  return result.stockRg;
}
- (MarketSummary_Builder*) setStockRg:(TransactionDetail*) value {
  result.hasStockRg = YES;
  result.stockRg = value;
  return self;
}
- (MarketSummary_Builder*) setStockRgBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setStockRg:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeStockRg:(TransactionDetail*) value {
  if (result.hasStockRg &&
      result.stockRg != [TransactionDetail defaultInstance]) {
    result.stockRg =
      [[[TransactionDetail builderWithPrototype:result.stockRg] mergeFrom:value] buildPartial];
  } else {
    result.stockRg = value;
  }
  result.hasStockRg = YES;
  return self;
}
- (MarketSummary_Builder*) clearStockRg {
  result.hasStockRg = NO;
  result.stockRg = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasStockNg {
  return result.hasStockNg;
}
- (TransactionDetail*) stockNg {
  return result.stockNg;
}
- (MarketSummary_Builder*) setStockNg:(TransactionDetail*) value {
  result.hasStockNg = YES;
  result.stockNg = value;
  return self;
}
- (MarketSummary_Builder*) setStockNgBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setStockNg:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeStockNg:(TransactionDetail*) value {
  if (result.hasStockNg &&
      result.stockNg != [TransactionDetail defaultInstance]) {
    result.stockNg =
      [[[TransactionDetail builderWithPrototype:result.stockNg] mergeFrom:value] buildPartial];
  } else {
    result.stockNg = value;
  }
  result.hasStockNg = YES;
  return self;
}
- (MarketSummary_Builder*) clearStockNg {
  result.hasStockNg = NO;
  result.stockNg = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasStockTn {
  return result.hasStockTn;
}
- (TransactionDetail*) stockTn {
  return result.stockTn;
}
- (MarketSummary_Builder*) setStockTn:(TransactionDetail*) value {
  result.hasStockTn = YES;
  result.stockTn = value;
  return self;
}
- (MarketSummary_Builder*) setStockTnBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setStockTn:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeStockTn:(TransactionDetail*) value {
  if (result.hasStockTn &&
      result.stockTn != [TransactionDetail defaultInstance]) {
    result.stockTn =
      [[[TransactionDetail builderWithPrototype:result.stockTn] mergeFrom:value] buildPartial];
  } else {
    result.stockTn = value;
  }
  result.hasStockTn = YES;
  return self;
}
- (MarketSummary_Builder*) clearStockTn {
  result.hasStockTn = NO;
  result.stockTn = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasWarantRg {
  return result.hasWarantRg;
}
- (TransactionDetail*) warantRg {
  return result.warantRg;
}
- (MarketSummary_Builder*) setWarantRg:(TransactionDetail*) value {
  result.hasWarantRg = YES;
  result.warantRg = value;
  return self;
}
- (MarketSummary_Builder*) setWarantRgBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setWarantRg:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeWarantRg:(TransactionDetail*) value {
  if (result.hasWarantRg &&
      result.warantRg != [TransactionDetail defaultInstance]) {
    result.warantRg =
      [[[TransactionDetail builderWithPrototype:result.warantRg] mergeFrom:value] buildPartial];
  } else {
    result.warantRg = value;
  }
  result.hasWarantRg = YES;
  return self;
}
- (MarketSummary_Builder*) clearWarantRg {
  result.hasWarantRg = NO;
  result.warantRg = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasWarantNg {
  return result.hasWarantNg;
}
- (TransactionDetail*) warantNg {
  return result.warantNg;
}
- (MarketSummary_Builder*) setWarantNg:(TransactionDetail*) value {
  result.hasWarantNg = YES;
  result.warantNg = value;
  return self;
}
- (MarketSummary_Builder*) setWarantNgBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setWarantNg:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeWarantNg:(TransactionDetail*) value {
  if (result.hasWarantNg &&
      result.warantNg != [TransactionDetail defaultInstance]) {
    result.warantNg =
      [[[TransactionDetail builderWithPrototype:result.warantNg] mergeFrom:value] buildPartial];
  } else {
    result.warantNg = value;
  }
  result.hasWarantNg = YES;
  return self;
}
- (MarketSummary_Builder*) clearWarantNg {
  result.hasWarantNg = NO;
  result.warantNg = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasWarantTn {
  return result.hasWarantTn;
}
- (TransactionDetail*) warantTn {
  return result.warantTn;
}
- (MarketSummary_Builder*) setWarantTn:(TransactionDetail*) value {
  result.hasWarantTn = YES;
  result.warantTn = value;
  return self;
}
- (MarketSummary_Builder*) setWarantTnBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setWarantTn:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeWarantTn:(TransactionDetail*) value {
  if (result.hasWarantTn &&
      result.warantTn != [TransactionDetail defaultInstance]) {
    result.warantTn =
      [[[TransactionDetail builderWithPrototype:result.warantTn] mergeFrom:value] buildPartial];
  } else {
    result.warantTn = value;
  }
  result.hasWarantTn = YES;
  return self;
}
- (MarketSummary_Builder*) clearWarantTn {
  result.hasWarantTn = NO;
  result.warantTn = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasRightRg {
  return result.hasRightRg;
}
- (TransactionDetail*) rightRg {
  return result.rightRg;
}
- (MarketSummary_Builder*) setRightRg:(TransactionDetail*) value {
  result.hasRightRg = YES;
  result.rightRg = value;
  return self;
}
- (MarketSummary_Builder*) setRightRgBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setRightRg:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeRightRg:(TransactionDetail*) value {
  if (result.hasRightRg &&
      result.rightRg != [TransactionDetail defaultInstance]) {
    result.rightRg =
      [[[TransactionDetail builderWithPrototype:result.rightRg] mergeFrom:value] buildPartial];
  } else {
    result.rightRg = value;
  }
  result.hasRightRg = YES;
  return self;
}
- (MarketSummary_Builder*) clearRightRg {
  result.hasRightRg = NO;
  result.rightRg = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasRightNg {
  return result.hasRightNg;
}
- (TransactionDetail*) rightNg {
  return result.rightNg;
}
- (MarketSummary_Builder*) setRightNg:(TransactionDetail*) value {
  result.hasRightNg = YES;
  result.rightNg = value;
  return self;
}
- (MarketSummary_Builder*) setRightNgBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setRightNg:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeRightNg:(TransactionDetail*) value {
  if (result.hasRightNg &&
      result.rightNg != [TransactionDetail defaultInstance]) {
    result.rightNg =
      [[[TransactionDetail builderWithPrototype:result.rightNg] mergeFrom:value] buildPartial];
  } else {
    result.rightNg = value;
  }
  result.hasRightNg = YES;
  return self;
}
- (MarketSummary_Builder*) clearRightNg {
  result.hasRightNg = NO;
  result.rightNg = [TransactionDetail defaultInstance];
  return self;
}
- (BOOL) hasRightTn {
  return result.hasRightTn;
}
- (TransactionDetail*) rightTn {
  return result.rightTn;
}
- (MarketSummary_Builder*) setRightTn:(TransactionDetail*) value {
  result.hasRightTn = YES;
  result.rightTn = value;
  return self;
}
- (MarketSummary_Builder*) setRightTnBuilder:(TransactionDetail_Builder*) builderForValue {
  return [self setRightTn:[builderForValue build]];
}
- (MarketSummary_Builder*) mergeRightTn:(TransactionDetail*) value {
  if (result.hasRightTn &&
      result.rightTn != [TransactionDetail defaultInstance]) {
    result.rightTn =
      [[[TransactionDetail builderWithPrototype:result.rightTn] mergeFrom:value] buildPartial];
  } else {
    result.rightTn = value;
  }
  result.hasRightTn = YES;
  return self;
}
- (MarketSummary_Builder*) clearRightTn {
  result.hasRightTn = NO;
  result.rightTn = [TransactionDetail defaultInstance];
  return self;
}
@end

@interface BestBidOffer ()
@property int32_t bidPrice;
@property int64_t bidVolume;
@property int32_t offerPrice;
@property int64_t offerVolume;
@end

@implementation BestBidOffer

- (BOOL) hasBidPrice {
  return !!hasBidPrice_;
}
- (void) setHasBidPrice:(BOOL) value {
  hasBidPrice_ = !!value;
}
@synthesize bidPrice;
- (BOOL) hasBidVolume {
  return !!hasBidVolume_;
}
- (void) setHasBidVolume:(BOOL) value {
  hasBidVolume_ = !!value;
}
@synthesize bidVolume;
- (BOOL) hasOfferPrice {
  return !!hasOfferPrice_;
}
- (void) setHasOfferPrice:(BOOL) value {
  hasOfferPrice_ = !!value;
}
@synthesize offerPrice;
- (BOOL) hasOfferVolume {
  return !!hasOfferVolume_;
}
- (void) setHasOfferVolume:(BOOL) value {
  hasOfferVolume_ = !!value;
}
@synthesize offerVolume;
- (id) init {
  if ((self = [super init])) {
    self.bidPrice = 0;
    self.bidVolume = 0L;
    self.offerPrice = 0;
    self.offerVolume = 0L;
  }
  return self;
}
static BestBidOffer* defaultBestBidOfferInstance = nil;
+ (void) initialize {
  if (self == [BestBidOffer class]) {
    defaultBestBidOfferInstance = [[BestBidOffer alloc] init];
  }
}
+ (BestBidOffer*) defaultInstance {
  return defaultBestBidOfferInstance;
}
- (BestBidOffer*) defaultInstance {
  return defaultBestBidOfferInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBidPrice) {
    [output writeInt32:1 value:self.bidPrice];
  }
  if (self.hasBidVolume) {
    [output writeInt64:2 value:self.bidVolume];
  }
  if (self.hasOfferPrice) {
    [output writeInt32:3 value:self.offerPrice];
  }
  if (self.hasOfferVolume) {
    [output writeInt64:4 value:self.offerVolume];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBidPrice) {
    size += computeInt32Size(1, self.bidPrice);
  }
  if (self.hasBidVolume) {
    size += computeInt64Size(2, self.bidVolume);
  }
  if (self.hasOfferPrice) {
    size += computeInt32Size(3, self.offerPrice);
  }
  if (self.hasOfferVolume) {
    size += computeInt64Size(4, self.offerVolume);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BestBidOffer*) parseFromData:(NSData*) data {
  return (BestBidOffer*)[[[BestBidOffer builder] mergeFromData:data] build];
}
+ (BestBidOffer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BestBidOffer*)[[[BestBidOffer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BestBidOffer*) parseFromInputStream:(NSInputStream*) input {
  return (BestBidOffer*)[[[BestBidOffer builder] mergeFromInputStream:input] build];
}
+ (BestBidOffer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BestBidOffer*)[[[BestBidOffer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BestBidOffer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BestBidOffer*)[[[BestBidOffer builder] mergeFromCodedInputStream:input] build];
}
+ (BestBidOffer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BestBidOffer*)[[[BestBidOffer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BestBidOffer_Builder*) builder {
  return [[BestBidOffer_Builder alloc] init];
}
+ (BestBidOffer_Builder*) builderWithPrototype:(BestBidOffer*) prototype {
  return [[BestBidOffer builder] mergeFrom:prototype];
}
- (BestBidOffer_Builder*) builder {
  return [BestBidOffer builder];
}
- (BestBidOffer_Builder*) toBuilder {
  return [BestBidOffer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasBidPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bidPrice", [NSNumber numberWithInt:self.bidPrice]];
  }
  if (self.hasBidVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bidVolume", [NSNumber numberWithLongLong:self.bidVolume]];
  }
  if (self.hasOfferPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offerPrice", [NSNumber numberWithInt:self.offerPrice]];
  }
  if (self.hasOfferVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offerVolume", [NSNumber numberWithLongLong:self.offerVolume]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BestBidOffer class]]) {
    return NO;
  }
  BestBidOffer *otherMessage = other;
  return
      self.hasBidPrice == otherMessage.hasBidPrice &&
      (!self.hasBidPrice || self.bidPrice == otherMessage.bidPrice) &&
      self.hasBidVolume == otherMessage.hasBidVolume &&
      (!self.hasBidVolume || self.bidVolume == otherMessage.bidVolume) &&
      self.hasOfferPrice == otherMessage.hasOfferPrice &&
      (!self.hasOfferPrice || self.offerPrice == otherMessage.offerPrice) &&
      self.hasOfferVolume == otherMessage.hasOfferVolume &&
      (!self.hasOfferVolume || self.offerVolume == otherMessage.offerVolume) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasBidPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bidPrice] hash];
  }
  if (self.hasBidVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.bidVolume] hash];
  }
  if (self.hasOfferPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.offerPrice] hash];
  }
  if (self.hasOfferVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.offerVolume] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BestBidOffer_Builder()
@property (strong) BestBidOffer* result;
@end

@implementation BestBidOffer_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BestBidOffer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BestBidOffer_Builder*) clear {
  self.result = [[BestBidOffer alloc] init];
  return self;
}
- (BestBidOffer_Builder*) clone {
  return [BestBidOffer builderWithPrototype:result];
}
- (BestBidOffer*) defaultInstance {
  return [BestBidOffer defaultInstance];
}
- (BestBidOffer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BestBidOffer*) buildPartial {
  BestBidOffer* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BestBidOffer_Builder*) mergeFrom:(BestBidOffer*) other {
  if (other == [BestBidOffer defaultInstance]) {
    return self;
  }
  if (other.hasBidPrice) {
    [self setBidPrice:other.bidPrice];
  }
  if (other.hasBidVolume) {
    [self setBidVolume:other.bidVolume];
  }
  if (other.hasOfferPrice) {
    [self setOfferPrice:other.offerPrice];
  }
  if (other.hasOfferVolume) {
    [self setOfferVolume:other.offerVolume];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BestBidOffer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BestBidOffer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBidPrice:[input readInt32]];
        break;
      }
      case 16: {
        [self setBidVolume:[input readInt64]];
        break;
      }
      case 24: {
        [self setOfferPrice:[input readInt32]];
        break;
      }
      case 32: {
        [self setOfferVolume:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasBidPrice {
  return result.hasBidPrice;
}
- (int32_t) bidPrice {
  return result.bidPrice;
}
- (BestBidOffer_Builder*) setBidPrice:(int32_t) value {
  result.hasBidPrice = YES;
  result.bidPrice = value;
  return self;
}
- (BestBidOffer_Builder*) clearBidPrice {
  result.hasBidPrice = NO;
  result.bidPrice = 0;
  return self;
}
- (BOOL) hasBidVolume {
  return result.hasBidVolume;
}
- (int64_t) bidVolume {
  return result.bidVolume;
}
- (BestBidOffer_Builder*) setBidVolume:(int64_t) value {
  result.hasBidVolume = YES;
  result.bidVolume = value;
  return self;
}
- (BestBidOffer_Builder*) clearBidVolume {
  result.hasBidVolume = NO;
  result.bidVolume = 0L;
  return self;
}
- (BOOL) hasOfferPrice {
  return result.hasOfferPrice;
}
- (int32_t) offerPrice {
  return result.offerPrice;
}
- (BestBidOffer_Builder*) setOfferPrice:(int32_t) value {
  result.hasOfferPrice = YES;
  result.offerPrice = value;
  return self;
}
- (BestBidOffer_Builder*) clearOfferPrice {
  result.hasOfferPrice = NO;
  result.offerPrice = 0;
  return self;
}
- (BOOL) hasOfferVolume {
  return result.hasOfferVolume;
}
- (int64_t) offerVolume {
  return result.offerVolume;
}
- (BestBidOffer_Builder*) setOfferVolume:(int64_t) value {
  result.hasOfferVolume = YES;
  result.offerVolume = value;
  return self;
}
- (BestBidOffer_Builder*) clearOfferVolume {
  result.hasOfferVolume = NO;
  result.offerVolume = 0L;
  return self;
}
@end

@interface ForeignDomestic ()
@property int32_t codeId;
@property Board board;
@property int32_t sequence;
@property int64_t foreignBought;
@property int64_t foreignSold;
@property int64_t domesticBought;
@property int64_t domesticSold;
@property int64_t volume;
@end

@implementation ForeignDomestic

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasForeignBought {
  return !!hasForeignBought_;
}
- (void) setHasForeignBought:(BOOL) value {
  hasForeignBought_ = !!value;
}
@synthesize foreignBought;
- (BOOL) hasForeignSold {
  return !!hasForeignSold_;
}
- (void) setHasForeignSold:(BOOL) value {
  hasForeignSold_ = !!value;
}
@synthesize foreignSold;
- (BOOL) hasDomesticBought {
  return !!hasDomesticBought_;
}
- (void) setHasDomesticBought:(BOOL) value {
  hasDomesticBought_ = !!value;
}
@synthesize domesticBought;
- (BOOL) hasDomesticSold {
  return !!hasDomesticSold_;
}
- (void) setHasDomesticSold:(BOOL) value {
  hasDomesticSold_ = !!value;
}
@synthesize domesticSold;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
    self.sequence = 0;
    self.foreignBought = 0L;
    self.foreignSold = 0L;
    self.domesticBought = 0L;
    self.domesticSold = 0L;
    self.volume = 0L;
  }
  return self;
}
static ForeignDomestic* defaultForeignDomesticInstance = nil;
+ (void) initialize {
  if (self == [ForeignDomestic class]) {
    defaultForeignDomesticInstance = [[ForeignDomestic alloc] init];
  }
}
+ (ForeignDomestic*) defaultInstance {
  return defaultForeignDomesticInstance;
}
- (ForeignDomestic*) defaultInstance {
  return defaultForeignDomesticInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasSequence) {
    [output writeInt32:3 value:self.sequence];
  }
  if (self.hasForeignBought) {
    [output writeInt64:4 value:self.foreignBought];
  }
  if (self.hasForeignSold) {
    [output writeInt64:5 value:self.foreignSold];
  }
  if (self.hasDomesticBought) {
    [output writeInt64:6 value:self.domesticBought];
  }
  if (self.hasDomesticSold) {
    [output writeInt64:7 value:self.domesticSold];
  }
  if (self.hasVolume) {
    [output writeInt64:8 value:self.volume];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasSequence) {
    size += computeInt32Size(3, self.sequence);
  }
  if (self.hasForeignBought) {
    size += computeInt64Size(4, self.foreignBought);
  }
  if (self.hasForeignSold) {
    size += computeInt64Size(5, self.foreignSold);
  }
  if (self.hasDomesticBought) {
    size += computeInt64Size(6, self.domesticBought);
  }
  if (self.hasDomesticSold) {
    size += computeInt64Size(7, self.domesticSold);
  }
  if (self.hasVolume) {
    size += computeInt64Size(8, self.volume);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ForeignDomestic*) parseFromData:(NSData*) data {
  return (ForeignDomestic*)[[[ForeignDomestic builder] mergeFromData:data] build];
}
+ (ForeignDomestic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignDomestic*)[[[ForeignDomestic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ForeignDomestic*) parseFromInputStream:(NSInputStream*) input {
  return (ForeignDomestic*)[[[ForeignDomestic builder] mergeFromInputStream:input] build];
}
+ (ForeignDomestic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignDomestic*)[[[ForeignDomestic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignDomestic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ForeignDomestic*)[[[ForeignDomestic builder] mergeFromCodedInputStream:input] build];
}
+ (ForeignDomestic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignDomestic*)[[[ForeignDomestic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignDomestic_Builder*) builder {
  return [[ForeignDomestic_Builder alloc] init];
}
+ (ForeignDomestic_Builder*) builderWithPrototype:(ForeignDomestic*) prototype {
  return [[ForeignDomestic builder] mergeFrom:prototype];
}
- (ForeignDomestic_Builder*) builder {
  return [ForeignDomestic builder];
}
- (ForeignDomestic_Builder*) toBuilder {
  return [ForeignDomestic builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  if (self.hasForeignBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignBought", [NSNumber numberWithLongLong:self.foreignBought]];
  }
  if (self.hasForeignSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreignSold", [NSNumber numberWithLongLong:self.foreignSold]];
  }
  if (self.hasDomesticBought) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domesticBought", [NSNumber numberWithLongLong:self.domesticBought]];
  }
  if (self.hasDomesticSold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domesticSold", [NSNumber numberWithLongLong:self.domesticSold]];
  }
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithLongLong:self.volume]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignDomestic class]]) {
    return NO;
  }
  ForeignDomestic *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasForeignBought == otherMessage.hasForeignBought &&
      (!self.hasForeignBought || self.foreignBought == otherMessage.foreignBought) &&
      self.hasForeignSold == otherMessage.hasForeignSold &&
      (!self.hasForeignSold || self.foreignSold == otherMessage.foreignSold) &&
      self.hasDomesticBought == otherMessage.hasDomesticBought &&
      (!self.hasDomesticBought || self.domesticBought == otherMessage.domesticBought) &&
      self.hasDomesticSold == otherMessage.hasDomesticSold &&
      (!self.hasDomesticSold || self.domesticSold == otherMessage.domesticSold) &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  if (self.hasForeignBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignBought] hash];
  }
  if (self.hasForeignSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.foreignSold] hash];
  }
  if (self.hasDomesticBought) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.domesticBought] hash];
  }
  if (self.hasDomesticSold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.domesticSold] hash];
  }
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.volume] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ForeignDomestic_Builder()
@property (strong) ForeignDomestic* result;
@end

@implementation ForeignDomestic_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ForeignDomestic alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ForeignDomestic_Builder*) clear {
  self.result = [[ForeignDomestic alloc] init];
  return self;
}
- (ForeignDomestic_Builder*) clone {
  return [ForeignDomestic builderWithPrototype:result];
}
- (ForeignDomestic*) defaultInstance {
  return [ForeignDomestic defaultInstance];
}
- (ForeignDomestic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ForeignDomestic*) buildPartial {
  ForeignDomestic* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ForeignDomestic_Builder*) mergeFrom:(ForeignDomestic*) other {
  if (other == [ForeignDomestic defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasForeignBought) {
    [self setForeignBought:other.foreignBought];
  }
  if (other.hasForeignSold) {
    [self setForeignSold:other.foreignSold];
  }
  if (other.hasDomesticBought) {
    [self setDomesticBought:other.domesticBought];
  }
  if (other.hasDomesticSold) {
    [self setDomesticSold:other.domesticSold];
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ForeignDomestic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ForeignDomestic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 32: {
        [self setForeignBought:[input readInt64]];
        break;
      }
      case 40: {
        [self setForeignSold:[input readInt64]];
        break;
      }
      case 48: {
        [self setDomesticBought:[input readInt64]];
        break;
      }
      case 56: {
        [self setDomesticSold:[input readInt64]];
        break;
      }
      case 64: {
        [self setVolume:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (ForeignDomestic_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (ForeignDomestic_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (ForeignDomestic_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (ForeignDomestic_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (ForeignDomestic_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (ForeignDomestic_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasForeignBought {
  return result.hasForeignBought;
}
- (int64_t) foreignBought {
  return result.foreignBought;
}
- (ForeignDomestic_Builder*) setForeignBought:(int64_t) value {
  result.hasForeignBought = YES;
  result.foreignBought = value;
  return self;
}
- (ForeignDomestic_Builder*) clearForeignBought {
  result.hasForeignBought = NO;
  result.foreignBought = 0L;
  return self;
}
- (BOOL) hasForeignSold {
  return result.hasForeignSold;
}
- (int64_t) foreignSold {
  return result.foreignSold;
}
- (ForeignDomestic_Builder*) setForeignSold:(int64_t) value {
  result.hasForeignSold = YES;
  result.foreignSold = value;
  return self;
}
- (ForeignDomestic_Builder*) clearForeignSold {
  result.hasForeignSold = NO;
  result.foreignSold = 0L;
  return self;
}
- (BOOL) hasDomesticBought {
  return result.hasDomesticBought;
}
- (int64_t) domesticBought {
  return result.domesticBought;
}
- (ForeignDomestic_Builder*) setDomesticBought:(int64_t) value {
  result.hasDomesticBought = YES;
  result.domesticBought = value;
  return self;
}
- (ForeignDomestic_Builder*) clearDomesticBought {
  result.hasDomesticBought = NO;
  result.domesticBought = 0L;
  return self;
}
- (BOOL) hasDomesticSold {
  return result.hasDomesticSold;
}
- (int64_t) domesticSold {
  return result.domesticSold;
}
- (ForeignDomestic_Builder*) setDomesticSold:(int64_t) value {
  result.hasDomesticSold = YES;
  result.domesticSold = value;
  return self;
}
- (ForeignDomestic_Builder*) clearDomesticSold {
  result.hasDomesticSold = NO;
  result.domesticSold = 0L;
  return self;
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (int64_t) volume {
  return result.volume;
}
- (ForeignDomestic_Builder*) setVolume:(int64_t) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (ForeignDomestic_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0L;
  return self;
}
@end

@interface Level2 ()
@property int32_t codeId;
@property Board board;
@property int32_t sequence;
@property (strong) NSMutableArray * bidArray;
@property (strong) NSMutableArray * offerArray;
@property int64_t totalBid;
@property int64_t totalOffer;
@end

@implementation Level2

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
@synthesize bidArray;
@dynamic bid;
@synthesize offerArray;
@dynamic offer;
- (BOOL) hasTotalBid {
  return !!hasTotalBid_;
}
- (void) setHasTotalBid:(BOOL) value {
  hasTotalBid_ = !!value;
}
@synthesize totalBid;
- (BOOL) hasTotalOffer {
  return !!hasTotalOffer_;
}
- (void) setHasTotalOffer:(BOOL) value {
  hasTotalOffer_ = !!value;
}
@synthesize totalOffer;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
    self.sequence = 0;
    self.totalBid = 0L;
    self.totalOffer = 0L;
  }
  return self;
}
static Level2* defaultLevel2Instance = nil;
+ (void) initialize {
  if (self == [Level2 class]) {
    defaultLevel2Instance = [[Level2 alloc] init];
  }
}
+ (Level2*) defaultInstance {
  return defaultLevel2Instance;
}
- (Level2*) defaultInstance {
  return defaultLevel2Instance;
}
- (NSArray *)bid {
  return bidArray;
}
- (BuySell*)bidAtIndex:(NSUInteger)index {
  return [bidArray objectAtIndex:index];
}
- (NSArray *)offer {
  return offerArray;
}
- (BuySell*)offerAtIndex:(NSUInteger)index {
  return [offerArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasSequence) {
    [output writeInt32:3 value:self.sequence];
  }
  for (BuySell *element in self.bidArray) {
    [output writeMessage:4 value:element];
  }
  for (BuySell *element in self.offerArray) {
    [output writeMessage:5 value:element];
  }
  if (self.hasTotalBid) {
    [output writeInt64:6 value:self.totalBid];
  }
  if (self.hasTotalOffer) {
    [output writeInt64:7 value:self.totalOffer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasSequence) {
    size += computeInt32Size(3, self.sequence);
  }
  for (BuySell *element in self.bidArray) {
    size += computeMessageSize(4, element);
  }
  for (BuySell *element in self.offerArray) {
    size += computeMessageSize(5, element);
  }
  if (self.hasTotalBid) {
    size += computeInt64Size(6, self.totalBid);
  }
  if (self.hasTotalOffer) {
    size += computeInt64Size(7, self.totalOffer);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Level2*) parseFromData:(NSData*) data {
  return (Level2*)[[[Level2 builder] mergeFromData:data] build];
}
+ (Level2*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level2*)[[[Level2 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Level2*) parseFromInputStream:(NSInputStream*) input {
  return (Level2*)[[[Level2 builder] mergeFromInputStream:input] build];
}
+ (Level2*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level2*)[[[Level2 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Level2*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Level2*)[[[Level2 builder] mergeFromCodedInputStream:input] build];
}
+ (Level2*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level2*)[[[Level2 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Level2_Builder*) builder {
  return [[Level2_Builder alloc] init];
}
+ (Level2_Builder*) builderWithPrototype:(Level2*) prototype {
  return [[Level2 builder] mergeFrom:prototype];
}
- (Level2_Builder*) builder {
  return [Level2 builder];
}
- (Level2_Builder*) toBuilder {
  return [Level2 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  for (BuySell* element in self.bidArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"bid"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (BuySell* element in self.offerArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"offer"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTotalBid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalBid", [NSNumber numberWithLongLong:self.totalBid]];
  }
  if (self.hasTotalOffer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalOffer", [NSNumber numberWithLongLong:self.totalOffer]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Level2 class]]) {
    return NO;
  }
  Level2 *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      [self.bidArray isEqualToArray:otherMessage.bidArray] &&
      [self.offerArray isEqualToArray:otherMessage.offerArray] &&
      self.hasTotalBid == otherMessage.hasTotalBid &&
      (!self.hasTotalBid || self.totalBid == otherMessage.totalBid) &&
      self.hasTotalOffer == otherMessage.hasTotalOffer &&
      (!self.hasTotalOffer || self.totalOffer == otherMessage.totalOffer) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  for (BuySell* element in self.bidArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (BuySell* element in self.offerArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTotalBid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalBid] hash];
  }
  if (self.hasTotalOffer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalOffer] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Level2_Builder()
@property (strong) Level2* result;
@end

@implementation Level2_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Level2 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Level2_Builder*) clear {
  self.result = [[Level2 alloc] init];
  return self;
}
- (Level2_Builder*) clone {
  return [Level2 builderWithPrototype:result];
}
- (Level2*) defaultInstance {
  return [Level2 defaultInstance];
}
- (Level2*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Level2*) buildPartial {
  Level2* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Level2_Builder*) mergeFrom:(Level2*) other {
  if (other == [Level2 defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.bidArray.count > 0) {
    if (result.bidArray == nil) {
      result.bidArray = [[NSMutableArray alloc] initWithArray:other.bidArray];
    } else {
      [result.bidArray addObjectsFromArray:other.bidArray];
    }
  }
  if (other.offerArray.count > 0) {
    if (result.offerArray == nil) {
      result.offerArray = [[NSMutableArray alloc] initWithArray:other.offerArray];
    } else {
      [result.offerArray addObjectsFromArray:other.offerArray];
    }
  }
  if (other.hasTotalBid) {
    [self setTotalBid:other.totalBid];
  }
  if (other.hasTotalOffer) {
    [self setTotalOffer:other.totalOffer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Level2_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Level2_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 34: {
        BuySell_Builder* subBuilder = [BuySell builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBid:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BuySell_Builder* subBuilder = [BuySell builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOffer:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setTotalBid:[input readInt64]];
        break;
      }
      case 56: {
        [self setTotalOffer:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (Level2_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (Level2_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (Level2_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (Level2_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (Level2_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (Level2_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (NSMutableArray *)bid {
  return result.bidArray;
}
- (BuySell*)bidAtIndex:(NSUInteger)index {
  return [result bidAtIndex:index];
}
- (Level2_Builder *)addBid:(BuySell*)value {
  if (result.bidArray == nil) {
    result.bidArray = [[NSMutableArray alloc]init];
  }
  [result.bidArray addObject:value];
  return self;
}
- (Level2_Builder *)setBidArray:(NSArray *)array {
  result.bidArray = [[NSMutableArray alloc]init];
  return self;
}
- (Level2_Builder *)clearBid {
  result.bidArray = nil;
  return self;
}
- (NSMutableArray *)offer {
  return result.offerArray;
}
- (BuySell*)offerAtIndex:(NSUInteger)index {
  return [result offerAtIndex:index];
}
- (Level2_Builder *)addOffer:(BuySell*)value {
  if (result.offerArray == nil) {
    result.offerArray = [[NSMutableArray alloc]init];
  }
  [result.offerArray addObject:value];
  return self;
}
- (Level2_Builder *)setOfferArray:(NSArray *)array {
  result.offerArray = [[NSMutableArray alloc]init];
  return self;
}
- (Level2_Builder *)clearOffer {
  result.offerArray = nil;
  return self;
}
- (BOOL) hasTotalBid {
  return result.hasTotalBid;
}
- (int64_t) totalBid {
  return result.totalBid;
}
- (Level2_Builder*) setTotalBid:(int64_t) value {
  result.hasTotalBid = YES;
  result.totalBid = value;
  return self;
}
- (Level2_Builder*) clearTotalBid {
  result.hasTotalBid = NO;
  result.totalBid = 0L;
  return self;
}
- (BOOL) hasTotalOffer {
  return result.hasTotalOffer;
}
- (int64_t) totalOffer {
  return result.totalOffer;
}
- (Level2_Builder*) setTotalOffer:(int64_t) value {
  result.hasTotalOffer = YES;
  result.totalOffer = value;
  return self;
}
- (Level2_Builder*) clearTotalOffer {
  result.hasTotalOffer = NO;
  result.totalOffer = 0L;
  return self;
}
@end

@interface Level3 ()
@property int32_t codeId;
@property Board board;
@property int32_t sequence;
@property (strong) NSMutableArray * detailArray;
@property int64_t totalBuy;
@property int64_t totalSell;
@end

@implementation Level3

- (BOOL) hasCodeId {
  return !!hasCodeId_;
}
- (void) setHasCodeId:(BOOL) value {
  hasCodeId_ = !!value;
}
@synthesize codeId;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
@synthesize detailArray;
@dynamic detail;
- (BOOL) hasTotalBuy {
  return !!hasTotalBuy_;
}
- (void) setHasTotalBuy:(BOOL) value {
  hasTotalBuy_ = !!value;
}
@synthesize totalBuy;
- (BOOL) hasTotalSell {
  return !!hasTotalSell_;
}
- (void) setHasTotalSell:(BOOL) value {
  hasTotalSell_ = !!value;
}
@synthesize totalSell;
- (id) init {
  if ((self = [super init])) {
    self.codeId = 0;
    self.board = BoardRg;
    self.sequence = 0;
    self.totalBuy = 0L;
    self.totalSell = 0L;
  }
  return self;
}
static Level3* defaultLevel3Instance = nil;
+ (void) initialize {
  if (self == [Level3 class]) {
    defaultLevel3Instance = [[Level3 alloc] init];
  }
}
+ (Level3*) defaultInstance {
  return defaultLevel3Instance;
}
- (Level3*) defaultInstance {
  return defaultLevel3Instance;
}
- (NSArray *)detail {
  return detailArray;
}
- (Level3Detail*)detailAtIndex:(NSUInteger)index {
  return [detailArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeId) {
    [output writeInt32:1 value:self.codeId];
  }
  if (self.hasBoard) {
    [output writeEnum:2 value:self.board];
  }
  if (self.hasSequence) {
    [output writeInt32:3 value:self.sequence];
  }
  for (Level3Detail *element in self.detailArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasTotalBuy) {
    [output writeInt64:5 value:self.totalBuy];
  }
  if (self.hasTotalSell) {
    [output writeInt64:6 value:self.totalSell];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCodeId) {
    size += computeInt32Size(1, self.codeId);
  }
  if (self.hasBoard) {
    size += computeEnumSize(2, self.board);
  }
  if (self.hasSequence) {
    size += computeInt32Size(3, self.sequence);
  }
  for (Level3Detail *element in self.detailArray) {
    size += computeMessageSize(4, element);
  }
  if (self.hasTotalBuy) {
    size += computeInt64Size(5, self.totalBuy);
  }
  if (self.hasTotalSell) {
    size += computeInt64Size(6, self.totalSell);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Level3*) parseFromData:(NSData*) data {
  return (Level3*)[[[Level3 builder] mergeFromData:data] build];
}
+ (Level3*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level3*)[[[Level3 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Level3*) parseFromInputStream:(NSInputStream*) input {
  return (Level3*)[[[Level3 builder] mergeFromInputStream:input] build];
}
+ (Level3*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level3*)[[[Level3 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Level3*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Level3*)[[[Level3 builder] mergeFromCodedInputStream:input] build];
}
+ (Level3*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level3*)[[[Level3 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Level3_Builder*) builder {
  return [[Level3_Builder alloc] init];
}
+ (Level3_Builder*) builderWithPrototype:(Level3*) prototype {
  return [[Level3 builder] mergeFrom:prototype];
}
- (Level3_Builder*) builder {
  return [Level3 builder];
}
- (Level3_Builder*) toBuilder {
  return [Level3 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeId", [NSNumber numberWithInt:self.codeId]];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithInt:self.sequence]];
  }
  for (Level3Detail* element in self.detailArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"detail"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTotalBuy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalBuy", [NSNumber numberWithLongLong:self.totalBuy]];
  }
  if (self.hasTotalSell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalSell", [NSNumber numberWithLongLong:self.totalSell]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Level3 class]]) {
    return NO;
  }
  Level3 *otherMessage = other;
  return
      self.hasCodeId == otherMessage.hasCodeId &&
      (!self.hasCodeId || self.codeId == otherMessage.codeId) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      [self.detailArray isEqualToArray:otherMessage.detailArray] &&
      self.hasTotalBuy == otherMessage.hasTotalBuy &&
      (!self.hasTotalBuy || self.totalBuy == otherMessage.totalBuy) &&
      self.hasTotalSell == otherMessage.hasTotalSell &&
      (!self.hasTotalSell || self.totalSell == otherMessage.totalSell) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.codeId] hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequence] hash];
  }
  for (Level3Detail* element in self.detailArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTotalBuy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalBuy] hash];
  }
  if (self.hasTotalSell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalSell] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Level3_Builder()
@property (strong) Level3* result;
@end

@implementation Level3_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Level3 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Level3_Builder*) clear {
  self.result = [[Level3 alloc] init];
  return self;
}
- (Level3_Builder*) clone {
  return [Level3 builderWithPrototype:result];
}
- (Level3*) defaultInstance {
  return [Level3 defaultInstance];
}
- (Level3*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Level3*) buildPartial {
  Level3* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Level3_Builder*) mergeFrom:(Level3*) other {
  if (other == [Level3 defaultInstance]) {
    return self;
  }
  if (other.hasCodeId) {
    [self setCodeId:other.codeId];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.detailArray.count > 0) {
    if (result.detailArray == nil) {
      result.detailArray = [[NSMutableArray alloc] initWithArray:other.detailArray];
    } else {
      [result.detailArray addObjectsFromArray:other.detailArray];
    }
  }
  if (other.hasTotalBuy) {
    [self setTotalBuy:other.totalBuy];
  }
  if (other.hasTotalSell) {
    [self setTotalSell:other.totalSell];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Level3_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Level3_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCodeId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSequence:[input readInt32]];
        break;
      }
      case 34: {
        Level3Detail_Builder* subBuilder = [Level3Detail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDetail:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setTotalBuy:[input readInt64]];
        break;
      }
      case 48: {
        [self setTotalSell:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCodeId {
  return result.hasCodeId;
}
- (int32_t) codeId {
  return result.codeId;
}
- (Level3_Builder*) setCodeId:(int32_t) value {
  result.hasCodeId = YES;
  result.codeId = value;
  return self;
}
- (Level3_Builder*) clearCodeId {
  result.hasCodeId = NO;
  result.codeId = 0;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (Level3_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (Level3_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (int32_t) sequence {
  return result.sequence;
}
- (Level3_Builder*) setSequence:(int32_t) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (Level3_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (NSMutableArray *)detail {
  return result.detailArray;
}
- (Level3Detail*)detailAtIndex:(NSUInteger)index {
  return [result detailAtIndex:index];
}
- (Level3_Builder *)addDetail:(Level3Detail*)value {
  if (result.detailArray == nil) {
    result.detailArray = [[NSMutableArray alloc]init];
  }
  [result.detailArray addObject:value];
  return self;
}
- (Level3_Builder *)setDetailArray:(NSArray *)array {
  result.detailArray = [[NSMutableArray alloc]init];
  return self;
}
- (Level3_Builder *)clearDetail {
  result.detailArray = nil;
  return self;
}
- (BOOL) hasTotalBuy {
  return result.hasTotalBuy;
}
- (int64_t) totalBuy {
  return result.totalBuy;
}
- (Level3_Builder*) setTotalBuy:(int64_t) value {
  result.hasTotalBuy = YES;
  result.totalBuy = value;
  return self;
}
- (Level3_Builder*) clearTotalBuy {
  result.hasTotalBuy = NO;
  result.totalBuy = 0L;
  return self;
}
- (BOOL) hasTotalSell {
  return result.hasTotalSell;
}
- (int64_t) totalSell {
  return result.totalSell;
}
- (Level3_Builder*) setTotalSell:(int64_t) value {
  result.hasTotalSell = YES;
  result.totalSell = value;
  return self;
}
- (Level3_Builder*) clearTotalSell {
  result.hasTotalSell = NO;
  result.totalSell = 0L;
  return self;
}
@end

@interface Level3Detail ()
@property int32_t price;
@property int32_t buyVolume;
@property int32_t buyFrequency;
@property int32_t sellVolume;
@property int32_t sellFrequency;
@end

@implementation Level3Detail

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasBuyVolume {
  return !!hasBuyVolume_;
}
- (void) setHasBuyVolume:(BOOL) value {
  hasBuyVolume_ = !!value;
}
@synthesize buyVolume;
- (BOOL) hasBuyFrequency {
  return !!hasBuyFrequency_;
}
- (void) setHasBuyFrequency:(BOOL) value {
  hasBuyFrequency_ = !!value;
}
@synthesize buyFrequency;
- (BOOL) hasSellVolume {
  return !!hasSellVolume_;
}
- (void) setHasSellVolume:(BOOL) value {
  hasSellVolume_ = !!value;
}
@synthesize sellVolume;
- (BOOL) hasSellFrequency {
  return !!hasSellFrequency_;
}
- (void) setHasSellFrequency:(BOOL) value {
  hasSellFrequency_ = !!value;
}
@synthesize sellFrequency;
- (id) init {
  if ((self = [super init])) {
    self.price = 0;
    self.buyVolume = 0;
    self.buyFrequency = 0;
    self.sellVolume = 0;
    self.sellFrequency = 0;
  }
  return self;
}
static Level3Detail* defaultLevel3DetailInstance = nil;
+ (void) initialize {
  if (self == [Level3Detail class]) {
    defaultLevel3DetailInstance = [[Level3Detail alloc] init];
  }
}
+ (Level3Detail*) defaultInstance {
  return defaultLevel3DetailInstance;
}
- (Level3Detail*) defaultInstance {
  return defaultLevel3DetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeInt32:1 value:self.price];
  }
  if (self.hasBuyVolume) {
    [output writeInt32:2 value:self.buyVolume];
  }
  if (self.hasBuyFrequency) {
    [output writeInt32:3 value:self.buyFrequency];
  }
  if (self.hasSellVolume) {
    [output writeInt32:4 value:self.sellVolume];
  }
  if (self.hasSellFrequency) {
    [output writeInt32:5 value:self.sellFrequency];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrice) {
    size += computeInt32Size(1, self.price);
  }
  if (self.hasBuyVolume) {
    size += computeInt32Size(2, self.buyVolume);
  }
  if (self.hasBuyFrequency) {
    size += computeInt32Size(3, self.buyFrequency);
  }
  if (self.hasSellVolume) {
    size += computeInt32Size(4, self.sellVolume);
  }
  if (self.hasSellFrequency) {
    size += computeInt32Size(5, self.sellFrequency);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Level3Detail*) parseFromData:(NSData*) data {
  return (Level3Detail*)[[[Level3Detail builder] mergeFromData:data] build];
}
+ (Level3Detail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level3Detail*)[[[Level3Detail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Level3Detail*) parseFromInputStream:(NSInputStream*) input {
  return (Level3Detail*)[[[Level3Detail builder] mergeFromInputStream:input] build];
}
+ (Level3Detail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level3Detail*)[[[Level3Detail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Level3Detail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Level3Detail*)[[[Level3Detail builder] mergeFromCodedInputStream:input] build];
}
+ (Level3Detail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Level3Detail*)[[[Level3Detail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Level3Detail_Builder*) builder {
  return [[Level3Detail_Builder alloc] init];
}
+ (Level3Detail_Builder*) builderWithPrototype:(Level3Detail*) prototype {
  return [[Level3Detail builder] mergeFrom:prototype];
}
- (Level3Detail_Builder*) builder {
  return [Level3Detail builder];
}
- (Level3Detail_Builder*) toBuilder {
  return [Level3Detail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasBuyVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyVolume", [NSNumber numberWithInt:self.buyVolume]];
  }
  if (self.hasBuyFrequency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyFrequency", [NSNumber numberWithInt:self.buyFrequency]];
  }
  if (self.hasSellVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellVolume", [NSNumber numberWithInt:self.sellVolume]];
  }
  if (self.hasSellFrequency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellFrequency", [NSNumber numberWithInt:self.sellFrequency]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Level3Detail class]]) {
    return NO;
  }
  Level3Detail *otherMessage = other;
  return
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasBuyVolume == otherMessage.hasBuyVolume &&
      (!self.hasBuyVolume || self.buyVolume == otherMessage.buyVolume) &&
      self.hasBuyFrequency == otherMessage.hasBuyFrequency &&
      (!self.hasBuyFrequency || self.buyFrequency == otherMessage.buyFrequency) &&
      self.hasSellVolume == otherMessage.hasSellVolume &&
      (!self.hasSellVolume || self.sellVolume == otherMessage.sellVolume) &&
      self.hasSellFrequency == otherMessage.hasSellFrequency &&
      (!self.hasSellFrequency || self.sellFrequency == otherMessage.sellFrequency) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasBuyVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.buyVolume] hash];
  }
  if (self.hasBuyFrequency) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.buyFrequency] hash];
  }
  if (self.hasSellVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sellVolume] hash];
  }
  if (self.hasSellFrequency) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sellFrequency] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Level3Detail_Builder()
@property (strong) Level3Detail* result;
@end

@implementation Level3Detail_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Level3Detail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Level3Detail_Builder*) clear {
  self.result = [[Level3Detail alloc] init];
  return self;
}
- (Level3Detail_Builder*) clone {
  return [Level3Detail builderWithPrototype:result];
}
- (Level3Detail*) defaultInstance {
  return [Level3Detail defaultInstance];
}
- (Level3Detail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Level3Detail*) buildPartial {
  Level3Detail* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Level3Detail_Builder*) mergeFrom:(Level3Detail*) other {
  if (other == [Level3Detail defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasBuyVolume) {
    [self setBuyVolume:other.buyVolume];
  }
  if (other.hasBuyFrequency) {
    [self setBuyFrequency:other.buyFrequency];
  }
  if (other.hasSellVolume) {
    [self setSellVolume:other.sellVolume];
  }
  if (other.hasSellFrequency) {
    [self setSellFrequency:other.sellFrequency];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Level3Detail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Level3Detail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 16: {
        [self setBuyVolume:[input readInt32]];
        break;
      }
      case 24: {
        [self setBuyFrequency:[input readInt32]];
        break;
      }
      case 32: {
        [self setSellVolume:[input readInt32]];
        break;
      }
      case 40: {
        [self setSellFrequency:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (Level3Detail_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (Level3Detail_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasBuyVolume {
  return result.hasBuyVolume;
}
- (int32_t) buyVolume {
  return result.buyVolume;
}
- (Level3Detail_Builder*) setBuyVolume:(int32_t) value {
  result.hasBuyVolume = YES;
  result.buyVolume = value;
  return self;
}
- (Level3Detail_Builder*) clearBuyVolume {
  result.hasBuyVolume = NO;
  result.buyVolume = 0;
  return self;
}
- (BOOL) hasBuyFrequency {
  return result.hasBuyFrequency;
}
- (int32_t) buyFrequency {
  return result.buyFrequency;
}
- (Level3Detail_Builder*) setBuyFrequency:(int32_t) value {
  result.hasBuyFrequency = YES;
  result.buyFrequency = value;
  return self;
}
- (Level3Detail_Builder*) clearBuyFrequency {
  result.hasBuyFrequency = NO;
  result.buyFrequency = 0;
  return self;
}
- (BOOL) hasSellVolume {
  return result.hasSellVolume;
}
- (int32_t) sellVolume {
  return result.sellVolume;
}
- (Level3Detail_Builder*) setSellVolume:(int32_t) value {
  result.hasSellVolume = YES;
  result.sellVolume = value;
  return self;
}
- (Level3Detail_Builder*) clearSellVolume {
  result.hasSellVolume = NO;
  result.sellVolume = 0;
  return self;
}
- (BOOL) hasSellFrequency {
  return result.hasSellFrequency;
}
- (int32_t) sellFrequency {
  return result.sellFrequency;
}
- (Level3Detail_Builder*) setSellFrequency:(int32_t) value {
  result.hasSellFrequency = YES;
  result.sellFrequency = value;
  return self;
}
- (Level3Detail_Builder*) clearSellFrequency {
  result.hasSellFrequency = NO;
  result.sellFrequency = 0;
  return self;
}
@end

@interface BuySell ()
@property int32_t price;
@property int64_t volume;
@property int32_t queue;
@end

@implementation BuySell

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) value {
  hasVolume_ = !!value;
}
@synthesize volume;
- (BOOL) hasQueue {
  return !!hasQueue_;
}
- (void) setHasQueue:(BOOL) value {
  hasQueue_ = !!value;
}
@synthesize queue;
- (id) init {
  if ((self = [super init])) {
    self.price = 0;
    self.volume = 0L;
    self.queue = 0;
  }
  return self;
}
static BuySell* defaultBuySellInstance = nil;
+ (void) initialize {
  if (self == [BuySell class]) {
    defaultBuySellInstance = [[BuySell alloc] init];
  }
}
+ (BuySell*) defaultInstance {
  return defaultBuySellInstance;
}
- (BuySell*) defaultInstance {
  return defaultBuySellInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeInt32:1 value:self.price];
  }
  if (self.hasVolume) {
    [output writeInt64:2 value:self.volume];
  }
  if (self.hasQueue) {
    [output writeInt32:3 value:self.queue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrice) {
    size += computeInt32Size(1, self.price);
  }
  if (self.hasVolume) {
    size += computeInt64Size(2, self.volume);
  }
  if (self.hasQueue) {
    size += computeInt32Size(3, self.queue);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BuySell*) parseFromData:(NSData*) data {
  return (BuySell*)[[[BuySell builder] mergeFromData:data] build];
}
+ (BuySell*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BuySell*)[[[BuySell builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BuySell*) parseFromInputStream:(NSInputStream*) input {
  return (BuySell*)[[[BuySell builder] mergeFromInputStream:input] build];
}
+ (BuySell*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BuySell*)[[[BuySell builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BuySell*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BuySell*)[[[BuySell builder] mergeFromCodedInputStream:input] build];
}
+ (BuySell*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BuySell*)[[[BuySell builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BuySell_Builder*) builder {
  return [[BuySell_Builder alloc] init];
}
+ (BuySell_Builder*) builderWithPrototype:(BuySell*) prototype {
  return [[BuySell builder] mergeFrom:prototype];
}
- (BuySell_Builder*) builder {
  return [BuySell builder];
}
- (BuySell_Builder*) toBuilder {
  return [BuySell builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithLongLong:self.volume]];
  }
  if (self.hasQueue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queue", [NSNumber numberWithInt:self.queue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BuySell class]]) {
    return NO;
  }
  BuySell *otherMessage = other;
  return
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      self.hasQueue == otherMessage.hasQueue &&
      (!self.hasQueue || self.queue == otherMessage.queue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.volume] hash];
  }
  if (self.hasQueue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.queue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BuySell_Builder()
@property (strong) BuySell* result;
@end

@implementation BuySell_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BuySell alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BuySell_Builder*) clear {
  self.result = [[BuySell alloc] init];
  return self;
}
- (BuySell_Builder*) clone {
  return [BuySell builderWithPrototype:result];
}
- (BuySell*) defaultInstance {
  return [BuySell defaultInstance];
}
- (BuySell*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BuySell*) buildPartial {
  BuySell* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BuySell_Builder*) mergeFrom:(BuySell*) other {
  if (other == [BuySell defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  if (other.hasQueue) {
    [self setQueue:other.queue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BuySell_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BuySell_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 16: {
        [self setVolume:[input readInt64]];
        break;
      }
      case 24: {
        [self setQueue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (BuySell_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (BuySell_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasVolume {
  return result.hasVolume;
}
- (int64_t) volume {
  return result.volume;
}
- (BuySell_Builder*) setVolume:(int64_t) value {
  result.hasVolume = YES;
  result.volume = value;
  return self;
}
- (BuySell_Builder*) clearVolume {
  result.hasVolume = NO;
  result.volume = 0L;
  return self;
}
- (BOOL) hasQueue {
  return result.hasQueue;
}
- (int32_t) queue {
  return result.queue;
}
- (BuySell_Builder*) setQueue:(int32_t) value {
  result.hasQueue = YES;
  result.queue = value;
  return self;
}
- (BuySell_Builder*) clearQueue {
  result.hasQueue = NO;
  result.queue = 0;
  return self;
}
@end

@interface RequestData ()
@property (strong) NSString* time;
@property Request requestType;
@property Sort sorting;
@property Float64 sequence;
@property (strong) NSString* applicationType;
@property (strong) NSString* loginType;
@property (strong) NSString* expiredSession;
@property (strong) NSString* version;
@property (strong) NSString* sessionMi;
@property (strong) NSString* sessionOl;
@property (strong) NSString* clientname;
@property (strong) NSString* clientcode;
@property (strong) NSString* userType;
@property (strong) NSString* username;
@property (strong) NSString* password;
@property (strong) NSString* pin;
@property (strong) NSString* ipAddress;
@property (strong) NSString* stockcode;
@property Board board;
@property OrderStatus orderStatus;
@property RecordType recordType;
@property (strong) NSString* general;
@property (strong) NSString* messageOrder;
@property int32_t price;
@property int32_t qty;
@property int32_t settleDate;
@property DeviceType deviceType;
@property (strong) OrderConditional* orderConditional;
@property (strong) CashWithdraw* cashWithdraw;
@end

@implementation RequestData

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasRequestType {
  return !!hasRequestType_;
}
- (void) setHasRequestType:(BOOL) value {
  hasRequestType_ = !!value;
}
@synthesize requestType;
- (BOOL) hasSorting {
  return !!hasSorting_;
}
- (void) setHasSorting:(BOOL) value {
  hasSorting_ = !!value;
}
@synthesize sorting;
- (BOOL) hasSequence {
  return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value {
  hasSequence_ = !!value;
}
@synthesize sequence;
- (BOOL) hasApplicationType {
  return !!hasApplicationType_;
}
- (void) setHasApplicationType:(BOOL) value {
  hasApplicationType_ = !!value;
}
@synthesize applicationType;
- (BOOL) hasLoginType {
  return !!hasLoginType_;
}
- (void) setHasLoginType:(BOOL) value {
  hasLoginType_ = !!value;
}
@synthesize loginType;
- (BOOL) hasExpiredSession {
  return !!hasExpiredSession_;
}
- (void) setHasExpiredSession:(BOOL) value {
  hasExpiredSession_ = !!value;
}
@synthesize expiredSession;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasSessionMi {
  return !!hasSessionMi_;
}
- (void) setHasSessionMi:(BOOL) value {
  hasSessionMi_ = !!value;
}
@synthesize sessionMi;
- (BOOL) hasSessionOl {
  return !!hasSessionOl_;
}
- (void) setHasSessionOl:(BOOL) value {
  hasSessionOl_ = !!value;
}
@synthesize sessionOl;
- (BOOL) hasClientname {
  return !!hasClientname_;
}
- (void) setHasClientname:(BOOL) value {
  hasClientname_ = !!value;
}
@synthesize clientname;
- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) value {
  hasUserType_ = !!value;
}
@synthesize userType;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasPin {
  return !!hasPin_;
}
- (void) setHasPin:(BOOL) value {
  hasPin_ = !!value;
}
@synthesize pin;
- (BOOL) hasIpAddress {
  return !!hasIpAddress_;
}
- (void) setHasIpAddress:(BOOL) value {
  hasIpAddress_ = !!value;
}
@synthesize ipAddress;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) value {
  hasOrderStatus_ = !!value;
}
@synthesize orderStatus;
- (BOOL) hasRecordType {
  return !!hasRecordType_;
}
- (void) setHasRecordType:(BOOL) value {
  hasRecordType_ = !!value;
}
@synthesize recordType;
- (BOOL) hasGeneral {
  return !!hasGeneral_;
}
- (void) setHasGeneral:(BOOL) value {
  hasGeneral_ = !!value;
}
@synthesize general;
- (BOOL) hasMessageOrder {
  return !!hasMessageOrder_;
}
- (void) setHasMessageOrder:(BOOL) value {
  hasMessageOrder_ = !!value;
}
@synthesize messageOrder;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasQty {
  return !!hasQty_;
}
- (void) setHasQty:(BOOL) value {
  hasQty_ = !!value;
}
@synthesize qty;
- (BOOL) hasSettleDate {
  return !!hasSettleDate_;
}
- (void) setHasSettleDate:(BOOL) value {
  hasSettleDate_ = !!value;
}
@synthesize settleDate;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value {
  hasDeviceType_ = !!value;
}
@synthesize deviceType;
- (BOOL) hasOrderConditional {
  return !!hasOrderConditional_;
}
- (void) setHasOrderConditional:(BOOL) value {
  hasOrderConditional_ = !!value;
}
@synthesize orderConditional;
- (BOOL) hasCashWithdraw {
  return !!hasCashWithdraw_;
}
- (void) setHasCashWithdraw:(BOOL) value {
  hasCashWithdraw_ = !!value;
}
@synthesize cashWithdraw;
- (id) init {
  if ((self = [super init])) {
    self.time = @"";
    self.requestType = RequestSubscribe;
    self.sorting = SortOlder;
    self.sequence = 0;
    self.applicationType = @"";
    self.loginType = @"";
    self.expiredSession = @"";
    self.version = @"";
    self.sessionMi = @"";
    self.sessionOl = @"";
    self.clientname = @"";
    self.clientcode = @"";
    self.userType = @"";
    self.username = @"";
    self.password = @"";
    self.pin = @"";
    self.ipAddress = @"";
    self.stockcode = @"";
    self.board = BoardRg;
    self.orderStatus = OrderStatusOpen;
    self.recordType = RecordTypeIdxTradingStatus;
    self.general = @"";
    self.messageOrder = @"";
    self.price = 0;
    self.qty = 0;
    self.settleDate = 0;
    self.deviceType = DeviceTypeDesktop;
    self.orderConditional = [OrderConditional defaultInstance];
    self.cashWithdraw = [CashWithdraw defaultInstance];
  }
  return self;
}
static RequestData* defaultRequestDataInstance = nil;
+ (void) initialize {
  if (self == [RequestData class]) {
    defaultRequestDataInstance = [[RequestData alloc] init];
  }
}
+ (RequestData*) defaultInstance {
  return defaultRequestDataInstance;
}
- (RequestData*) defaultInstance {
  return defaultRequestDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeString:1 value:self.time];
  }
  if (self.hasRequestType) {
    [output writeEnum:2 value:self.requestType];
  }
  if (self.hasSorting) {
    [output writeEnum:3 value:self.sorting];
  }
  if (self.hasSequence) {
    [output writeDouble:4 value:self.sequence];
  }
  if (self.hasApplicationType) {
    [output writeString:5 value:self.applicationType];
  }
  if (self.hasLoginType) {
    [output writeString:6 value:self.loginType];
  }
  if (self.hasExpiredSession) {
    [output writeString:7 value:self.expiredSession];
  }
  if (self.hasVersion) {
    [output writeString:8 value:self.version];
  }
  if (self.hasSessionMi) {
    [output writeString:9 value:self.sessionMi];
  }
  if (self.hasSessionOl) {
    [output writeString:10 value:self.sessionOl];
  }
  if (self.hasClientname) {
    [output writeString:11 value:self.clientname];
  }
  if (self.hasClientcode) {
    [output writeString:12 value:self.clientcode];
  }
  if (self.hasUserType) {
    [output writeString:13 value:self.userType];
  }
  if (self.hasUsername) {
    [output writeString:14 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:15 value:self.password];
  }
  if (self.hasPin) {
    [output writeString:16 value:self.pin];
  }
  if (self.hasIpAddress) {
    [output writeString:17 value:self.ipAddress];
  }
  if (self.hasStockcode) {
    [output writeString:18 value:self.stockcode];
  }
  if (self.hasBoard) {
    [output writeEnum:19 value:self.board];
  }
  if (self.hasOrderStatus) {
    [output writeEnum:20 value:self.orderStatus];
  }
  if (self.hasRecordType) {
    [output writeEnum:21 value:self.recordType];
  }
  if (self.hasGeneral) {
    [output writeString:22 value:self.general];
  }
  if (self.hasMessageOrder) {
    [output writeString:23 value:self.messageOrder];
  }
  if (self.hasPrice) {
    [output writeInt32:24 value:self.price];
  }
  if (self.hasQty) {
    [output writeInt32:25 value:self.qty];
  }
  if (self.hasSettleDate) {
    [output writeInt32:26 value:self.settleDate];
  }
  if (self.hasDeviceType) {
    [output writeEnum:27 value:self.deviceType];
  }
  if (self.hasOrderConditional) {
    [output writeMessage:28 value:self.orderConditional];
  }
  if (self.hasCashWithdraw) {
    [output writeMessage:29 value:self.cashWithdraw];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTime) {
    size += computeStringSize(1, self.time);
  }
  if (self.hasRequestType) {
    size += computeEnumSize(2, self.requestType);
  }
  if (self.hasSorting) {
    size += computeEnumSize(3, self.sorting);
  }
  if (self.hasSequence) {
    size += computeDoubleSize(4, self.sequence);
  }
  if (self.hasApplicationType) {
    size += computeStringSize(5, self.applicationType);
  }
  if (self.hasLoginType) {
    size += computeStringSize(6, self.loginType);
  }
  if (self.hasExpiredSession) {
    size += computeStringSize(7, self.expiredSession);
  }
  if (self.hasVersion) {
    size += computeStringSize(8, self.version);
  }
  if (self.hasSessionMi) {
    size += computeStringSize(9, self.sessionMi);
  }
  if (self.hasSessionOl) {
    size += computeStringSize(10, self.sessionOl);
  }
  if (self.hasClientname) {
    size += computeStringSize(11, self.clientname);
  }
  if (self.hasClientcode) {
    size += computeStringSize(12, self.clientcode);
  }
  if (self.hasUserType) {
    size += computeStringSize(13, self.userType);
  }
  if (self.hasUsername) {
    size += computeStringSize(14, self.username);
  }
  if (self.hasPassword) {
    size += computeStringSize(15, self.password);
  }
  if (self.hasPin) {
    size += computeStringSize(16, self.pin);
  }
  if (self.hasIpAddress) {
    size += computeStringSize(17, self.ipAddress);
  }
  if (self.hasStockcode) {
    size += computeStringSize(18, self.stockcode);
  }
  if (self.hasBoard) {
    size += computeEnumSize(19, self.board);
  }
  if (self.hasOrderStatus) {
    size += computeEnumSize(20, self.orderStatus);
  }
  if (self.hasRecordType) {
    size += computeEnumSize(21, self.recordType);
  }
  if (self.hasGeneral) {
    size += computeStringSize(22, self.general);
  }
  if (self.hasMessageOrder) {
    size += computeStringSize(23, self.messageOrder);
  }
  if (self.hasPrice) {
    size += computeInt32Size(24, self.price);
  }
  if (self.hasQty) {
    size += computeInt32Size(25, self.qty);
  }
  if (self.hasSettleDate) {
    size += computeInt32Size(26, self.settleDate);
  }
  if (self.hasDeviceType) {
    size += computeEnumSize(27, self.deviceType);
  }
  if (self.hasOrderConditional) {
    size += computeMessageSize(28, self.orderConditional);
  }
  if (self.hasCashWithdraw) {
    size += computeMessageSize(29, self.cashWithdraw);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RequestData*) parseFromData:(NSData*) data {
  return (RequestData*)[[[RequestData builder] mergeFromData:data] build];
}
+ (RequestData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestData*)[[[RequestData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestData*) parseFromInputStream:(NSInputStream*) input {
  return (RequestData*)[[[RequestData builder] mergeFromInputStream:input] build];
}
+ (RequestData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestData*)[[[RequestData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestData*)[[[RequestData builder] mergeFromCodedInputStream:input] build];
}
+ (RequestData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestData*)[[[RequestData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestData_Builder*) builder {
  return [[RequestData_Builder alloc] init];
}
+ (RequestData_Builder*) builderWithPrototype:(RequestData*) prototype {
  return [[RequestData builder] mergeFrom:prototype];
}
- (RequestData_Builder*) builder {
  return [RequestData builder];
}
- (RequestData_Builder*) toBuilder {
  return [RequestData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", self.time];
  }
  if (self.hasRequestType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"requestType", self.requestType];
  }
  if (self.hasSorting) {
    [output appendFormat:@"%@%@: %d\n", indent, @"sorting", self.sorting];
  }
  if (self.hasSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequence", [NSNumber numberWithDouble:self.sequence]];
  }
  if (self.hasApplicationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applicationType", self.applicationType];
  }
  if (self.hasLoginType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginType", self.loginType];
  }
  if (self.hasExpiredSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiredSession", self.expiredSession];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasSessionMi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionMi", self.sessionMi];
  }
  if (self.hasSessionOl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionOl", self.sessionOl];
  }
  if (self.hasClientname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientname", self.clientname];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", self.userType];
  }
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasPin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pin", self.pin];
  }
  if (self.hasIpAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipAddress", self.ipAddress];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %d\n", indent, @"board", self.board];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"orderStatus", self.orderStatus];
  }
  if (self.hasRecordType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"recordType", self.recordType];
  }
  if (self.hasGeneral) {
    [output appendFormat:@"%@%@: %@\n", indent, @"general", self.general];
  }
  if (self.hasMessageOrder) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageOrder", self.messageOrder];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qty", [NSNumber numberWithInt:self.qty]];
  }
  if (self.hasSettleDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"settleDate", [NSNumber numberWithInt:self.settleDate]];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"deviceType", self.deviceType];
  }
  if (self.hasOrderConditional) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderConditional"];
    [self.orderConditional writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCashWithdraw) {
    [output appendFormat:@"%@%@ {\n", indent, @"cashWithdraw"];
    [self.cashWithdraw writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestData class]]) {
    return NO;
  }
  RequestData *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || [self.time isEqual:otherMessage.time]) &&
      self.hasRequestType == otherMessage.hasRequestType &&
      (!self.hasRequestType || self.requestType != otherMessage.requestType) &&
      self.hasSorting == otherMessage.hasSorting &&
      (!self.hasSorting || self.sorting != otherMessage.sorting) &&
      self.hasSequence == otherMessage.hasSequence &&
      (!self.hasSequence || self.sequence == otherMessage.sequence) &&
      self.hasApplicationType == otherMessage.hasApplicationType &&
      (!self.hasApplicationType || [self.applicationType isEqual:otherMessage.applicationType]) &&
      self.hasLoginType == otherMessage.hasLoginType &&
      (!self.hasLoginType || [self.loginType isEqual:otherMessage.loginType]) &&
      self.hasExpiredSession == otherMessage.hasExpiredSession &&
      (!self.hasExpiredSession || [self.expiredSession isEqual:otherMessage.expiredSession]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasSessionMi == otherMessage.hasSessionMi &&
      (!self.hasSessionMi || [self.sessionMi isEqual:otherMessage.sessionMi]) &&
      self.hasSessionOl == otherMessage.hasSessionOl &&
      (!self.hasSessionOl || [self.sessionOl isEqual:otherMessage.sessionOl]) &&
      self.hasClientname == otherMessage.hasClientname &&
      (!self.hasClientname || [self.clientname isEqual:otherMessage.clientname]) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || [self.userType isEqual:otherMessage.userType]) &&
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasPin == otherMessage.hasPin &&
      (!self.hasPin || [self.pin isEqual:otherMessage.pin]) &&
      self.hasIpAddress == otherMessage.hasIpAddress &&
      (!self.hasIpAddress || [self.ipAddress isEqual:otherMessage.ipAddress]) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || self.board != otherMessage.board) &&
      self.hasOrderStatus == otherMessage.hasOrderStatus &&
      (!self.hasOrderStatus || self.orderStatus != otherMessage.orderStatus) &&
      self.hasRecordType == otherMessage.hasRecordType &&
      (!self.hasRecordType || self.recordType != otherMessage.recordType) &&
      self.hasGeneral == otherMessage.hasGeneral &&
      (!self.hasGeneral || [self.general isEqual:otherMessage.general]) &&
      self.hasMessageOrder == otherMessage.hasMessageOrder &&
      (!self.hasMessageOrder || [self.messageOrder isEqual:otherMessage.messageOrder]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasQty == otherMessage.hasQty &&
      (!self.hasQty || self.qty == otherMessage.qty) &&
      self.hasSettleDate == otherMessage.hasSettleDate &&
      (!self.hasSettleDate || self.settleDate == otherMessage.settleDate) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType != otherMessage.deviceType) &&
      self.hasOrderConditional == otherMessage.hasOrderConditional &&
      (!self.hasOrderConditional || [self.orderConditional isEqual:otherMessage.orderConditional]) &&
      self.hasCashWithdraw == otherMessage.hasCashWithdraw &&
      (!self.hasCashWithdraw || [self.cashWithdraw isEqual:otherMessage.cashWithdraw]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [self.time hash];
  }
  if (self.hasRequestType) {
    hashCode = hashCode * 31 + self.requestType;
  }
  if (self.hasSorting) {
    hashCode = hashCode * 31 + self.sorting;
  }
  if (self.hasSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.sequence] hash];
  }
  if (self.hasApplicationType) {
    hashCode = hashCode * 31 + [self.applicationType hash];
  }
  if (self.hasLoginType) {
    hashCode = hashCode * 31 + [self.loginType hash];
  }
  if (self.hasExpiredSession) {
    hashCode = hashCode * 31 + [self.expiredSession hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasSessionMi) {
    hashCode = hashCode * 31 + [self.sessionMi hash];
  }
  if (self.hasSessionOl) {
    hashCode = hashCode * 31 + [self.sessionOl hash];
  }
  if (self.hasClientname) {
    hashCode = hashCode * 31 + [self.clientname hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [self.userType hash];
  }
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasPin) {
    hashCode = hashCode * 31 + [self.pin hash];
  }
  if (self.hasIpAddress) {
    hashCode = hashCode * 31 + [self.ipAddress hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + self.board;
  }
  if (self.hasOrderStatus) {
    hashCode = hashCode * 31 + self.orderStatus;
  }
  if (self.hasRecordType) {
    hashCode = hashCode * 31 + self.recordType;
  }
  if (self.hasGeneral) {
    hashCode = hashCode * 31 + [self.general hash];
  }
  if (self.hasMessageOrder) {
    hashCode = hashCode * 31 + [self.messageOrder hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.qty] hash];
  }
  if (self.hasSettleDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.settleDate] hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + self.deviceType;
  }
  if (self.hasOrderConditional) {
    hashCode = hashCode * 31 + [self.orderConditional hash];
  }
  if (self.hasCashWithdraw) {
    hashCode = hashCode * 31 + [self.cashWithdraw hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestData_Builder()
@property (strong) RequestData* result;
@end

@implementation RequestData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[RequestData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RequestData_Builder*) clear {
  self.result = [[RequestData alloc] init];
  return self;
}
- (RequestData_Builder*) clone {
  return [RequestData builderWithPrototype:result];
}
- (RequestData*) defaultInstance {
  return [RequestData defaultInstance];
}
- (RequestData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestData*) buildPartial {
  RequestData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (RequestData_Builder*) mergeFrom:(RequestData*) other {
  if (other == [RequestData defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasRequestType) {
    [self setRequestType:other.requestType];
  }
  if (other.hasSorting) {
    [self setSorting:other.sorting];
  }
  if (other.hasSequence) {
    [self setSequence:other.sequence];
  }
  if (other.hasApplicationType) {
    [self setApplicationType:other.applicationType];
  }
  if (other.hasLoginType) {
    [self setLoginType:other.loginType];
  }
  if (other.hasExpiredSession) {
    [self setExpiredSession:other.expiredSession];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasSessionMi) {
    [self setSessionMi:other.sessionMi];
  }
  if (other.hasSessionOl) {
    [self setSessionOl:other.sessionOl];
  }
  if (other.hasClientname) {
    [self setClientname:other.clientname];
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasPin) {
    [self setPin:other.pin];
  }
  if (other.hasIpAddress) {
    [self setIpAddress:other.ipAddress];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasRecordType) {
    [self setRecordType:other.recordType];
  }
  if (other.hasGeneral) {
    [self setGeneral:other.general];
  }
  if (other.hasMessageOrder) {
    [self setMessageOrder:other.messageOrder];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasQty) {
    [self setQty:other.qty];
  }
  if (other.hasSettleDate) {
    [self setSettleDate:other.settleDate];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasOrderConditional) {
    [self mergeOrderConditional:other.orderConditional];
  }
  if (other.hasCashWithdraw) {
    [self mergeCashWithdraw:other.cashWithdraw];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTime:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (RequestIsValidValue(value)) {
          [self setRequestType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (SortIsValidValue(value)) {
          [self setSorting:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 33: {
        [self setSequence:[input readDouble]];
        break;
      }
      case 42: {
        [self setApplicationType:[input readString]];
        break;
      }
      case 50: {
        [self setLoginType:[input readString]];
        break;
      }
      case 58: {
        [self setExpiredSession:[input readString]];
        break;
      }
      case 66: {
        [self setVersion:[input readString]];
        break;
      }
      case 74: {
        [self setSessionMi:[input readString]];
        break;
      }
      case 82: {
        [self setSessionOl:[input readString]];
        break;
      }
      case 90: {
        [self setClientname:[input readString]];
        break;
      }
      case 98: {
        [self setClientcode:[input readString]];
        break;
      }
      case 106: {
        [self setUserType:[input readString]];
        break;
      }
      case 114: {
        [self setUsername:[input readString]];
        break;
      }
      case 122: {
        [self setPassword:[input readString]];
        break;
      }
      case 130: {
        [self setPin:[input readString]];
        break;
      }
      case 138: {
        [self setIpAddress:[input readString]];
        break;
      }
      case 146: {
        [self setStockcode:[input readString]];
        break;
      }
      case 152: {
        int32_t value = [input readEnum];
        if (BoardIsValidValue(value)) {
          [self setBoard:value];
        } else {
          [unknownFields mergeVarintField:19 value:value];
        }
        break;
      }
      case 160: {
        int32_t value = [input readEnum];
        if (OrderStatusIsValidValue(value)) {
          [self setOrderStatus:value];
        } else {
          [unknownFields mergeVarintField:20 value:value];
        }
        break;
      }
      case 168: {
        int32_t value = [input readEnum];
        if (RecordTypeIsValidValue(value)) {
          [self setRecordType:value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 178: {
        [self setGeneral:[input readString]];
        break;
      }
      case 186: {
        [self setMessageOrder:[input readString]];
        break;
      }
      case 192: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 200: {
        [self setQty:[input readInt32]];
        break;
      }
      case 208: {
        [self setSettleDate:[input readInt32]];
        break;
      }
      case 216: {
        int32_t value = [input readEnum];
        if (DeviceTypeIsValidValue(value)) {
          [self setDeviceType:value];
        } else {
          [unknownFields mergeVarintField:27 value:value];
        }
        break;
      }
      case 226: {
        OrderConditional_Builder* subBuilder = [OrderConditional builder];
        if (self.hasOrderConditional) {
          [subBuilder mergeFrom:self.orderConditional];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrderConditional:[subBuilder buildPartial]];
        break;
      }
      case 234: {
        CashWithdraw_Builder* subBuilder = [CashWithdraw builder];
        if (self.hasCashWithdraw) {
          [subBuilder mergeFrom:self.cashWithdraw];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCashWithdraw:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (RequestData_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (RequestData_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasRequestType {
  return result.hasRequestType;
}
- (Request) requestType {
  return result.requestType;
}
- (RequestData_Builder*) setRequestType:(Request) value {
  result.hasRequestType = YES;
  result.requestType = value;
  return self;
}
- (RequestData_Builder*) clearRequestType {
  result.hasRequestType = NO;
  result.requestType = RequestSubscribe;
  return self;
}
- (BOOL) hasSorting {
  return result.hasSorting;
}
- (Sort) sorting {
  return result.sorting;
}
- (RequestData_Builder*) setSorting:(Sort) value {
  result.hasSorting = YES;
  result.sorting = value;
  return self;
}
- (RequestData_Builder*) clearSorting {
  result.hasSorting = NO;
  result.sorting = SortOlder;
  return self;
}
- (BOOL) hasSequence {
  return result.hasSequence;
}
- (Float64) sequence {
  return result.sequence;
}
- (RequestData_Builder*) setSequence:(Float64) value {
  result.hasSequence = YES;
  result.sequence = value;
  return self;
}
- (RequestData_Builder*) clearSequence {
  result.hasSequence = NO;
  result.sequence = 0;
  return self;
}
- (BOOL) hasApplicationType {
  return result.hasApplicationType;
}
- (NSString*) applicationType {
  return result.applicationType;
}
- (RequestData_Builder*) setApplicationType:(NSString*) value {
  result.hasApplicationType = YES;
  result.applicationType = value;
  return self;
}
- (RequestData_Builder*) clearApplicationType {
  result.hasApplicationType = NO;
  result.applicationType = @"";
  return self;
}
- (BOOL) hasLoginType {
  return result.hasLoginType;
}
- (NSString*) loginType {
  return result.loginType;
}
- (RequestData_Builder*) setLoginType:(NSString*) value {
  result.hasLoginType = YES;
  result.loginType = value;
  return self;
}
- (RequestData_Builder*) clearLoginType {
  result.hasLoginType = NO;
  result.loginType = @"";
  return self;
}
- (BOOL) hasExpiredSession {
  return result.hasExpiredSession;
}
- (NSString*) expiredSession {
  return result.expiredSession;
}
- (RequestData_Builder*) setExpiredSession:(NSString*) value {
  result.hasExpiredSession = YES;
  result.expiredSession = value;
  return self;
}
- (RequestData_Builder*) clearExpiredSession {
  result.hasExpiredSession = NO;
  result.expiredSession = @"";
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (NSString*) version {
  return result.version;
}
- (RequestData_Builder*) setVersion:(NSString*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (RequestData_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = @"";
  return self;
}
- (BOOL) hasSessionMi {
  return result.hasSessionMi;
}
- (NSString*) sessionMi {
  return result.sessionMi;
}
- (RequestData_Builder*) setSessionMi:(NSString*) value {
  result.hasSessionMi = YES;
  result.sessionMi = value;
  return self;
}
- (RequestData_Builder*) clearSessionMi {
  result.hasSessionMi = NO;
  result.sessionMi = @"";
  return self;
}
- (BOOL) hasSessionOl {
  return result.hasSessionOl;
}
- (NSString*) sessionOl {
  return result.sessionOl;
}
- (RequestData_Builder*) setSessionOl:(NSString*) value {
  result.hasSessionOl = YES;
  result.sessionOl = value;
  return self;
}
- (RequestData_Builder*) clearSessionOl {
  result.hasSessionOl = NO;
  result.sessionOl = @"";
  return self;
}
- (BOOL) hasClientname {
  return result.hasClientname;
}
- (NSString*) clientname {
  return result.clientname;
}
- (RequestData_Builder*) setClientname:(NSString*) value {
  result.hasClientname = YES;
  result.clientname = value;
  return self;
}
- (RequestData_Builder*) clearClientname {
  result.hasClientname = NO;
  result.clientname = @"";
  return self;
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (RequestData_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (RequestData_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasUserType {
  return result.hasUserType;
}
- (NSString*) userType {
  return result.userType;
}
- (RequestData_Builder*) setUserType:(NSString*) value {
  result.hasUserType = YES;
  result.userType = value;
  return self;
}
- (RequestData_Builder*) clearUserType {
  result.hasUserType = NO;
  result.userType = @"";
  return self;
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (RequestData_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (RequestData_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (RequestData_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (RequestData_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasPin {
  return result.hasPin;
}
- (NSString*) pin {
  return result.pin;
}
- (RequestData_Builder*) setPin:(NSString*) value {
  result.hasPin = YES;
  result.pin = value;
  return self;
}
- (RequestData_Builder*) clearPin {
  result.hasPin = NO;
  result.pin = @"";
  return self;
}
- (BOOL) hasIpAddress {
  return result.hasIpAddress;
}
- (NSString*) ipAddress {
  return result.ipAddress;
}
- (RequestData_Builder*) setIpAddress:(NSString*) value {
  result.hasIpAddress = YES;
  result.ipAddress = value;
  return self;
}
- (RequestData_Builder*) clearIpAddress {
  result.hasIpAddress = NO;
  result.ipAddress = @"";
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (RequestData_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (RequestData_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (Board) board {
  return result.board;
}
- (RequestData_Builder*) setBoard:(Board) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (RequestData_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = BoardRg;
  return self;
}
- (BOOL) hasOrderStatus {
  return result.hasOrderStatus;
}
- (OrderStatus) orderStatus {
  return result.orderStatus;
}
- (RequestData_Builder*) setOrderStatus:(OrderStatus) value {
  result.hasOrderStatus = YES;
  result.orderStatus = value;
  return self;
}
- (RequestData_Builder*) clearOrderStatus {
  result.hasOrderStatus = NO;
  result.orderStatus = OrderStatusOpen;
  return self;
}
- (BOOL) hasRecordType {
  return result.hasRecordType;
}
- (RecordType) recordType {
  return result.recordType;
}
- (RequestData_Builder*) setRecordType:(RecordType) value {
  result.hasRecordType = YES;
  result.recordType = value;
  return self;
}
- (RequestData_Builder*) clearRecordType {
  result.hasRecordType = NO;
  result.recordType = RecordTypeIdxTradingStatus;
  return self;
}
- (BOOL) hasGeneral {
  return result.hasGeneral;
}
- (NSString*) general {
  return result.general;
}
- (RequestData_Builder*) setGeneral:(NSString*) value {
  result.hasGeneral = YES;
  result.general = value;
  return self;
}
- (RequestData_Builder*) clearGeneral {
  result.hasGeneral = NO;
  result.general = @"";
  return self;
}
- (BOOL) hasMessageOrder {
  return result.hasMessageOrder;
}
- (NSString*) messageOrder {
  return result.messageOrder;
}
- (RequestData_Builder*) setMessageOrder:(NSString*) value {
  result.hasMessageOrder = YES;
  result.messageOrder = value;
  return self;
}
- (RequestData_Builder*) clearMessageOrder {
  result.hasMessageOrder = NO;
  result.messageOrder = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (RequestData_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (RequestData_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasQty {
  return result.hasQty;
}
- (int32_t) qty {
  return result.qty;
}
- (RequestData_Builder*) setQty:(int32_t) value {
  result.hasQty = YES;
  result.qty = value;
  return self;
}
- (RequestData_Builder*) clearQty {
  result.hasQty = NO;
  result.qty = 0;
  return self;
}
- (BOOL) hasSettleDate {
  return result.hasSettleDate;
}
- (int32_t) settleDate {
  return result.settleDate;
}
- (RequestData_Builder*) setSettleDate:(int32_t) value {
  result.hasSettleDate = YES;
  result.settleDate = value;
  return self;
}
- (RequestData_Builder*) clearSettleDate {
  result.hasSettleDate = NO;
  result.settleDate = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (DeviceType) deviceType {
  return result.deviceType;
}
- (RequestData_Builder*) setDeviceType:(DeviceType) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (RequestData_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = DeviceTypeDesktop;
  return self;
}
- (BOOL) hasOrderConditional {
  return result.hasOrderConditional;
}
- (OrderConditional*) orderConditional {
  return result.orderConditional;
}
- (RequestData_Builder*) setOrderConditional:(OrderConditional*) value {
  result.hasOrderConditional = YES;
  result.orderConditional = value;
  return self;
}
- (RequestData_Builder*) setOrderConditionalBuilder:(OrderConditional_Builder*) builderForValue {
  return [self setOrderConditional:[builderForValue build]];
}
- (RequestData_Builder*) mergeOrderConditional:(OrderConditional*) value {
  if (result.hasOrderConditional &&
      result.orderConditional != [OrderConditional defaultInstance]) {
    result.orderConditional =
      [[[OrderConditional builderWithPrototype:result.orderConditional] mergeFrom:value] buildPartial];
  } else {
    result.orderConditional = value;
  }
  result.hasOrderConditional = YES;
  return self;
}
- (RequestData_Builder*) clearOrderConditional {
  result.hasOrderConditional = NO;
  result.orderConditional = [OrderConditional defaultInstance];
  return self;
}
- (BOOL) hasCashWithdraw {
  return result.hasCashWithdraw;
}
- (CashWithdraw*) cashWithdraw {
  return result.cashWithdraw;
}
- (RequestData_Builder*) setCashWithdraw:(CashWithdraw*) value {
  result.hasCashWithdraw = YES;
  result.cashWithdraw = value;
  return self;
}
- (RequestData_Builder*) setCashWithdrawBuilder:(CashWithdraw_Builder*) builderForValue {
  return [self setCashWithdraw:[builderForValue build]];
}
- (RequestData_Builder*) mergeCashWithdraw:(CashWithdraw*) value {
  if (result.hasCashWithdraw &&
      result.cashWithdraw != [CashWithdraw defaultInstance]) {
    result.cashWithdraw =
      [[[CashWithdraw builderWithPrototype:result.cashWithdraw] mergeFrom:value] buildPartial];
  } else {
    result.cashWithdraw = value;
  }
  result.hasCashWithdraw = YES;
  return self;
}
- (RequestData_Builder*) clearCashWithdraw {
  result.hasCashWithdraw = NO;
  result.cashWithdraw = [CashWithdraw defaultInstance];
  return self;
}
@end

@interface TradingMessage ()
@property (strong) RequestData* recReqData;
@property (strong) NSMutableArray * recMPrivilegesArray;
@property (strong) NSMutableArray * recMOrderstatusArray;
@property (strong) NSMutableArray * recMOrdertypeArray;
@property (strong) NSMutableArray * recMMenuArray;
@property (strong) NSMutableArray * recMMarketcappingArray;
@property (strong) NSMutableArray * recMSharesinfoArray;
@property (strong) LoginData* recLoginData;
@property (strong) NSMutableArray * recMessBroadcastArray;
@property (strong) NSMutableArray * recClientListArray;
@property (strong) NSString* recPrivillegesUser;
@property (strong) NSString* recClordid;
@property (strong) CustomerPosition* recCustomerPosition;
@property Float64 recOrderPower;
@property Float64 recAvaiableStock;
@property (strong) NSMutableArray * recOrderlistArray;
@property (strong) NSMutableArray * recOrdergtcArray;
@property (strong) NSMutableArray * recTradeArray;
@property (strong) NSMutableArray * recNegoreceiveArray;
@property (strong) NSMutableArray * recOrderLifeCycleArray;
@property (strong) NSMutableArray * recTradedetailArray;
@property (strong) NSMutableArray * recMarginAlertArray;
@property (strong) AccountInfo* recAccountInfo;
@property RecordType recType;
@property StatusReturn recStatusReturn;
@property (strong) NSString* recStatusMessage;
@property (strong) NSString* recTime;
@property (strong) NSMutableArray * recPortfolioArray;
@property Float64 recStockInHand;
@property int32_t recRiskControl;
@property (strong) CashMutation* recCashMutation;
@property (strong) NSMutableArray * recCustomerExposureArray;
@property (strong) NSMutableArray * recAdvlistArray;
@property (strong) NSString* clientcode;
@property (strong) NSMutableArray * recGrouporderArray;
@property (strong) NSMutableArray * recGrouporderDetailArray;
@property (strong) NSMutableArray * recClientOverdueArray;
@property (strong) NSMutableArray * recHolidayArray;
@property (strong) NSMutableArray * recBranchArray;
@property (strong) NSMutableArray * recUserlistArray;
@property int32_t recAutomaticShortsell;
@property (strong) NSMutableArray * recOrderconditionalArray;
@property (strong) NSMutableArray * recTradingtargetArray;
@property (strong) NSMutableArray * recCashflowArray;
@property (strong) NSMutableArray * recPotonganpajakArray;
@property (strong) NSMutableArray * recOrdermobileArray;
@property (strong) NSString* recGeneralMessage;
@property (strong) NSMutableArray * recUnregularStocklistArray;
@property (strong) NSMutableArray * recRdnListArray;
@property (strong) NSString* rdn;
@property int32_t effectiveDate;
@property (strong) CashWithdraw* recCashWithdraw;
@property (strong) NSMutableArray * recCashWithdrawListArray;
@end

@implementation TradingMessage

- (BOOL) hasRecReqData {
  return !!hasRecReqData_;
}
- (void) setHasRecReqData:(BOOL) value {
  hasRecReqData_ = !!value;
}
@synthesize recReqData;
@synthesize recMPrivilegesArray;
@dynamic recMPrivileges;
@synthesize recMOrderstatusArray;
@dynamic recMOrderstatus;
@synthesize recMOrdertypeArray;
@dynamic recMOrdertype;
@synthesize recMMenuArray;
@dynamic recMMenu;
@synthesize recMMarketcappingArray;
@dynamic recMMarketcapping;
@synthesize recMSharesinfoArray;
@dynamic recMSharesinfo;
- (BOOL) hasRecLoginData {
  return !!hasRecLoginData_;
}
- (void) setHasRecLoginData:(BOOL) value {
  hasRecLoginData_ = !!value;
}
@synthesize recLoginData;
@synthesize recMessBroadcastArray;
@dynamic recMessBroadcast;
@synthesize recClientListArray;
@dynamic recClientList;
- (BOOL) hasRecPrivillegesUser {
  return !!hasRecPrivillegesUser_;
}
- (void) setHasRecPrivillegesUser:(BOOL) value {
  hasRecPrivillegesUser_ = !!value;
}
@synthesize recPrivillegesUser;
- (BOOL) hasRecClordid {
  return !!hasRecClordid_;
}
- (void) setHasRecClordid:(BOOL) value {
  hasRecClordid_ = !!value;
}
@synthesize recClordid;
- (BOOL) hasRecCustomerPosition {
  return !!hasRecCustomerPosition_;
}
- (void) setHasRecCustomerPosition:(BOOL) value {
  hasRecCustomerPosition_ = !!value;
}
@synthesize recCustomerPosition;
- (BOOL) hasRecOrderPower {
  return !!hasRecOrderPower_;
}
- (void) setHasRecOrderPower:(BOOL) value {
  hasRecOrderPower_ = !!value;
}
@synthesize recOrderPower;
- (BOOL) hasRecAvaiableStock {
  return !!hasRecAvaiableStock_;
}
- (void) setHasRecAvaiableStock:(BOOL) value {
  hasRecAvaiableStock_ = !!value;
}
@synthesize recAvaiableStock;
@synthesize recOrderlistArray;
@dynamic recOrderlist;
@synthesize recOrdergtcArray;
@dynamic recOrdergtc;
@synthesize recTradeArray;
@dynamic recTrade;
@synthesize recNegoreceiveArray;
@dynamic recNegoreceive;
@synthesize recOrderLifeCycleArray;
@dynamic recOrderLifeCycle;
@synthesize recTradedetailArray;
@dynamic recTradedetail;
@synthesize recMarginAlertArray;
@dynamic recMarginAlert;
- (BOOL) hasRecAccountInfo {
  return !!hasRecAccountInfo_;
}
- (void) setHasRecAccountInfo:(BOOL) value {
  hasRecAccountInfo_ = !!value;
}
@synthesize recAccountInfo;
- (BOOL) hasRecType {
  return !!hasRecType_;
}
- (void) setHasRecType:(BOOL) value {
  hasRecType_ = !!value;
}
@synthesize recType;
- (BOOL) hasRecStatusReturn {
  return !!hasRecStatusReturn_;
}
- (void) setHasRecStatusReturn:(BOOL) value {
  hasRecStatusReturn_ = !!value;
}
@synthesize recStatusReturn;
- (BOOL) hasRecStatusMessage {
  return !!hasRecStatusMessage_;
}
- (void) setHasRecStatusMessage:(BOOL) value {
  hasRecStatusMessage_ = !!value;
}
@synthesize recStatusMessage;
- (BOOL) hasRecTime {
  return !!hasRecTime_;
}
- (void) setHasRecTime:(BOOL) value {
  hasRecTime_ = !!value;
}
@synthesize recTime;
@synthesize recPortfolioArray;
@dynamic recPortfolio;
- (BOOL) hasRecStockInHand {
  return !!hasRecStockInHand_;
}
- (void) setHasRecStockInHand:(BOOL) value {
  hasRecStockInHand_ = !!value;
}
@synthesize recStockInHand;
- (BOOL) hasRecRiskControl {
  return !!hasRecRiskControl_;
}
- (void) setHasRecRiskControl:(BOOL) value {
  hasRecRiskControl_ = !!value;
}
@synthesize recRiskControl;
- (BOOL) hasRecCashMutation {
  return !!hasRecCashMutation_;
}
- (void) setHasRecCashMutation:(BOOL) value {
  hasRecCashMutation_ = !!value;
}
@synthesize recCashMutation;
@synthesize recCustomerExposureArray;
@dynamic recCustomerExposure;
@synthesize recAdvlistArray;
@dynamic recAdvlist;
- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
@synthesize recGrouporderArray;
@dynamic recGrouporder;
@synthesize recGrouporderDetailArray;
@dynamic recGrouporderDetail;
@synthesize recClientOverdueArray;
@dynamic recClientOverdue;
@synthesize recHolidayArray;
@dynamic recHoliday;
@synthesize recBranchArray;
@dynamic recBranch;
@synthesize recUserlistArray;
@dynamic recUserlist;
- (BOOL) hasRecAutomaticShortsell {
  return !!hasRecAutomaticShortsell_;
}
- (void) setHasRecAutomaticShortsell:(BOOL) value {
  hasRecAutomaticShortsell_ = !!value;
}
@synthesize recAutomaticShortsell;
@synthesize recOrderconditionalArray;
@dynamic recOrderconditional;
@synthesize recTradingtargetArray;
@dynamic recTradingtarget;
@synthesize recCashflowArray;
@dynamic recCashflow;
@synthesize recPotonganpajakArray;
@dynamic recPotonganpajak;
@synthesize recOrdermobileArray;
@dynamic recOrdermobile;
- (BOOL) hasRecGeneralMessage {
  return !!hasRecGeneralMessage_;
}
- (void) setHasRecGeneralMessage:(BOOL) value {
  hasRecGeneralMessage_ = !!value;
}
@synthesize recGeneralMessage;
@synthesize recUnregularStocklistArray;
@dynamic recUnregularStocklist;
@synthesize recRdnListArray;
@dynamic recRdnList;
- (BOOL) hasRdn {
  return !!hasRdn_;
}
- (void) setHasRdn:(BOOL) value {
  hasRdn_ = !!value;
}
@synthesize rdn;
- (BOOL) hasEffectiveDate {
  return !!hasEffectiveDate_;
}
- (void) setHasEffectiveDate:(BOOL) value {
  hasEffectiveDate_ = !!value;
}
@synthesize effectiveDate;
- (BOOL) hasRecCashWithdraw {
  return !!hasRecCashWithdraw_;
}
- (void) setHasRecCashWithdraw:(BOOL) value {
  hasRecCashWithdraw_ = !!value;
}
@synthesize recCashWithdraw;
@synthesize recCashWithdrawListArray;
@dynamic recCashWithdrawList;
- (id) init {
  if ((self = [super init])) {
    self.recReqData = [RequestData defaultInstance];
    self.recLoginData = [LoginData defaultInstance];
    self.recPrivillegesUser = @"";
    self.recClordid = @"";
    self.recCustomerPosition = [CustomerPosition defaultInstance];
    self.recOrderPower = 0;
    self.recAvaiableStock = 0;
    self.recAccountInfo = [AccountInfo defaultInstance];
    self.recType = RecordTypeIdxTradingStatus;
    self.recStatusReturn = StatusReturnNoresult;
    self.recStatusMessage = @"";
    self.recTime = @"";
    self.recStockInHand = 0;
    self.recRiskControl = 0;
    self.recCashMutation = [CashMutation defaultInstance];
    self.clientcode = @"";
    self.recAutomaticShortsell = 0;
    self.recGeneralMessage = @"";
    self.rdn = @"";
    self.effectiveDate = 0;
    self.recCashWithdraw = [CashWithdraw defaultInstance];
  }
  return self;
}
static TradingMessage* defaultTradingMessageInstance = nil;
+ (void) initialize {
  if (self == [TradingMessage class]) {
    defaultTradingMessageInstance = [[TradingMessage alloc] init];
  }
}
+ (TradingMessage*) defaultInstance {
  return defaultTradingMessageInstance;
}
- (TradingMessage*) defaultInstance {
  return defaultTradingMessageInstance;
}
- (NSArray *)recMPrivileges {
  return recMPrivilegesArray;
}
- (MasterData*)recMPrivilegesAtIndex:(NSUInteger)index {
  return [recMPrivilegesArray objectAtIndex:index];
}
- (NSArray *)recMOrderstatus {
  return recMOrderstatusArray;
}
- (MasterData*)recMOrderstatusAtIndex:(NSUInteger)index {
  return [recMOrderstatusArray objectAtIndex:index];
}
- (NSArray *)recMOrdertype {
  return recMOrdertypeArray;
}
- (MasterData*)recMOrdertypeAtIndex:(NSUInteger)index {
  return [recMOrdertypeArray objectAtIndex:index];
}
- (NSArray *)recMMenu {
  return recMMenuArray;
}
- (MenuData*)recMMenuAtIndex:(NSUInteger)index {
  return [recMMenuArray objectAtIndex:index];
}
- (NSArray *)recMMarketcapping {
  return recMMarketcappingArray;
}
- (MarketCapping*)recMMarketcappingAtIndex:(NSUInteger)index {
  return [recMMarketcappingArray objectAtIndex:index];
}
- (NSArray *)recMSharesinfo {
  return recMSharesinfoArray;
}
- (SharesInfo*)recMSharesinfoAtIndex:(NSUInteger)index {
  return [recMSharesinfoArray objectAtIndex:index];
}
- (NSArray *)recMessBroadcast {
  return recMessBroadcastArray;
}
- (MessageBroadcastData*)recMessBroadcastAtIndex:(NSUInteger)index {
  return [recMessBroadcastArray objectAtIndex:index];
}
- (NSArray *)recClientList {
  return recClientListArray;
}
- (ClientList*)recClientListAtIndex:(NSUInteger)index {
  return [recClientListArray objectAtIndex:index];
}
- (NSArray *)recOrderlist {
  return recOrderlistArray;
}
- (TxOrder*)recOrderlistAtIndex:(NSUInteger)index {
  return [recOrderlistArray objectAtIndex:index];
}
- (NSArray *)recOrdergtc {
  return recOrdergtcArray;
}
- (OrderGtc*)recOrdergtcAtIndex:(NSUInteger)index {
  return [recOrdergtcArray objectAtIndex:index];
}
- (NSArray *)recTrade {
  return recTradeArray;
}
- (TxTrade*)recTradeAtIndex:(NSUInteger)index {
  return [recTradeArray objectAtIndex:index];
}
- (NSArray *)recNegoreceive {
  return recNegoreceiveArray;
}
- (TxOrder*)recNegoreceiveAtIndex:(NSUInteger)index {
  return [recNegoreceiveArray objectAtIndex:index];
}
- (NSArray *)recOrderLifeCycle {
  return recOrderLifeCycleArray;
}
- (OrderLifeCycle*)recOrderLifeCycleAtIndex:(NSUInteger)index {
  return [recOrderLifeCycleArray objectAtIndex:index];
}
- (NSArray *)recTradedetail {
  return recTradedetailArray;
}
- (TradeDetail*)recTradedetailAtIndex:(NSUInteger)index {
  return [recTradedetailArray objectAtIndex:index];
}
- (NSArray *)recMarginAlert {
  return recMarginAlertArray;
}
- (MarginAlert*)recMarginAlertAtIndex:(NSUInteger)index {
  return [recMarginAlertArray objectAtIndex:index];
}
- (NSArray *)recPortfolio {
  return recPortfolioArray;
}
- (Portfolio*)recPortfolioAtIndex:(NSUInteger)index {
  return [recPortfolioArray objectAtIndex:index];
}
- (NSArray *)recCustomerExposure {
  return recCustomerExposureArray;
}
- (CustomerExposure*)recCustomerExposureAtIndex:(NSUInteger)index {
  return [recCustomerExposureArray objectAtIndex:index];
}
- (NSArray *)recAdvlist {
  return recAdvlistArray;
}
- (TxOrder*)recAdvlistAtIndex:(NSUInteger)index {
  return [recAdvlistArray objectAtIndex:index];
}
- (NSArray *)recGrouporder {
  return recGrouporderArray;
}
- (GroupOrder*)recGrouporderAtIndex:(NSUInteger)index {
  return [recGrouporderArray objectAtIndex:index];
}
- (NSArray *)recGrouporderDetail {
  return recGrouporderDetailArray;
}
- (GroupOrderDetail*)recGrouporderDetailAtIndex:(NSUInteger)index {
  return [recGrouporderDetailArray objectAtIndex:index];
}
- (NSArray *)recClientOverdue {
  return recClientOverdueArray;
}
- (ClientOverdue*)recClientOverdueAtIndex:(NSUInteger)index {
  return [recClientOverdueArray objectAtIndex:index];
}
- (NSArray *)recHoliday {
  return recHolidayArray;
}
- (MasterData*)recHolidayAtIndex:(NSUInteger)index {
  return [recHolidayArray objectAtIndex:index];
}
- (NSArray *)recBranch {
  return recBranchArray;
}
- (MasterBranch*)recBranchAtIndex:(NSUInteger)index {
  return [recBranchArray objectAtIndex:index];
}
- (NSArray *)recUserlist {
  return recUserlistArray;
}
- (MasterUserlist*)recUserlistAtIndex:(NSUInteger)index {
  return [recUserlistArray objectAtIndex:index];
}
- (NSArray *)recOrderconditional {
  return recOrderconditionalArray;
}
- (OrderConditional*)recOrderconditionalAtIndex:(NSUInteger)index {
  return [recOrderconditionalArray objectAtIndex:index];
}
- (NSArray *)recTradingtarget {
  return recTradingtargetArray;
}
- (TradingTarget*)recTradingtargetAtIndex:(NSUInteger)index {
  return [recTradingtargetArray objectAtIndex:index];
}
- (NSArray *)recCashflow {
  return recCashflowArray;
}
- (CashFlow*)recCashflowAtIndex:(NSUInteger)index {
  return [recCashflowArray objectAtIndex:index];
}
- (NSArray *)recPotonganpajak {
  return recPotonganpajakArray;
}
- (PotonganPajak*)recPotonganpajakAtIndex:(NSUInteger)index {
  return [recPotonganpajakArray objectAtIndex:index];
}
- (NSArray *)recOrdermobile {
  return recOrdermobileArray;
}
- (OrderMobile*)recOrdermobileAtIndex:(NSUInteger)index {
  return [recOrdermobileArray objectAtIndex:index];
}
- (NSArray *)recUnregularStocklist {
  return recUnregularStocklistArray;
}
- (UnregularStocklist*)recUnregularStocklistAtIndex:(NSUInteger)index {
  return [recUnregularStocklistArray objectAtIndex:index];
}
- (NSArray *)recRdnList {
  return recRdnListArray;
}
- (RDNList*)recRdnListAtIndex:(NSUInteger)index {
  return [recRdnListArray objectAtIndex:index];
}
- (NSArray *)recCashWithdrawList {
  return recCashWithdrawListArray;
}
- (CashWithdraw*)recCashWithdrawListAtIndex:(NSUInteger)index {
  return [recCashWithdrawListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRecReqData) {
    [output writeMessage:1 value:self.recReqData];
  }
  for (MasterData *element in self.recMPrivilegesArray) {
    [output writeMessage:2 value:element];
  }
  for (MasterData *element in self.recMOrderstatusArray) {
    [output writeMessage:3 value:element];
  }
  for (MasterData *element in self.recMOrdertypeArray) {
    [output writeMessage:4 value:element];
  }
  for (MenuData *element in self.recMMenuArray) {
    [output writeMessage:5 value:element];
  }
  for (MarketCapping *element in self.recMMarketcappingArray) {
    [output writeMessage:6 value:element];
  }
  for (SharesInfo *element in self.recMSharesinfoArray) {
    [output writeMessage:7 value:element];
  }
  if (self.hasRecLoginData) {
    [output writeMessage:8 value:self.recLoginData];
  }
  for (MessageBroadcastData *element in self.recMessBroadcastArray) {
    [output writeMessage:9 value:element];
  }
  for (ClientList *element in self.recClientListArray) {
    [output writeMessage:10 value:element];
  }
  if (self.hasRecPrivillegesUser) {
    [output writeString:11 value:self.recPrivillegesUser];
  }
  if (self.hasRecClordid) {
    [output writeString:12 value:self.recClordid];
  }
  if (self.hasRecCustomerPosition) {
    [output writeMessage:13 value:self.recCustomerPosition];
  }
  if (self.hasRecOrderPower) {
    [output writeDouble:14 value:self.recOrderPower];
  }
  if (self.hasRecAvaiableStock) {
    [output writeDouble:15 value:self.recAvaiableStock];
  }
  for (TxOrder *element in self.recOrderlistArray) {
    [output writeMessage:16 value:element];
  }
  for (OrderGtc *element in self.recOrdergtcArray) {
    [output writeMessage:17 value:element];
  }
  for (TxTrade *element in self.recTradeArray) {
    [output writeMessage:18 value:element];
  }
  for (TxOrder *element in self.recNegoreceiveArray) {
    [output writeMessage:19 value:element];
  }
  for (OrderLifeCycle *element in self.recOrderLifeCycleArray) {
    [output writeMessage:20 value:element];
  }
  for (TradeDetail *element in self.recTradedetailArray) {
    [output writeMessage:21 value:element];
  }
  for (MarginAlert *element in self.recMarginAlertArray) {
    [output writeMessage:22 value:element];
  }
  if (self.hasRecAccountInfo) {
    [output writeMessage:23 value:self.recAccountInfo];
  }
  if (self.hasRecType) {
    [output writeEnum:24 value:self.recType];
  }
  if (self.hasRecStatusReturn) {
    [output writeEnum:25 value:self.recStatusReturn];
  }
  if (self.hasRecStatusMessage) {
    [output writeString:26 value:self.recStatusMessage];
  }
  if (self.hasRecTime) {
    [output writeString:27 value:self.recTime];
  }
  for (Portfolio *element in self.recPortfolioArray) {
    [output writeMessage:28 value:element];
  }
  if (self.hasRecStockInHand) {
    [output writeDouble:29 value:self.recStockInHand];
  }
  if (self.hasRecRiskControl) {
    [output writeInt32:30 value:self.recRiskControl];
  }
  if (self.hasRecCashMutation) {
    [output writeMessage:31 value:self.recCashMutation];
  }
  for (CustomerExposure *element in self.recCustomerExposureArray) {
    [output writeMessage:32 value:element];
  }
  for (TxOrder *element in self.recAdvlistArray) {
    [output writeMessage:33 value:element];
  }
  if (self.hasClientcode) {
    [output writeString:34 value:self.clientcode];
  }
  for (GroupOrder *element in self.recGrouporderArray) {
    [output writeMessage:35 value:element];
  }
  for (GroupOrderDetail *element in self.recGrouporderDetailArray) {
    [output writeMessage:36 value:element];
  }
  for (ClientOverdue *element in self.recClientOverdueArray) {
    [output writeMessage:37 value:element];
  }
  for (MasterData *element in self.recHolidayArray) {
    [output writeMessage:38 value:element];
  }
  for (MasterBranch *element in self.recBranchArray) {
    [output writeMessage:39 value:element];
  }
  for (MasterUserlist *element in self.recUserlistArray) {
    [output writeMessage:40 value:element];
  }
  if (self.hasRecAutomaticShortsell) {
    [output writeInt32:41 value:self.recAutomaticShortsell];
  }
  for (OrderConditional *element in self.recOrderconditionalArray) {
    [output writeMessage:42 value:element];
  }
  for (TradingTarget *element in self.recTradingtargetArray) {
    [output writeMessage:43 value:element];
  }
  for (CashFlow *element in self.recCashflowArray) {
    [output writeMessage:44 value:element];
  }
  for (PotonganPajak *element in self.recPotonganpajakArray) {
    [output writeMessage:45 value:element];
  }
  for (OrderMobile *element in self.recOrdermobileArray) {
    [output writeMessage:46 value:element];
  }
  if (self.hasRecGeneralMessage) {
    [output writeString:47 value:self.recGeneralMessage];
  }
  for (UnregularStocklist *element in self.recUnregularStocklistArray) {
    [output writeMessage:48 value:element];
  }
  for (RDNList *element in self.recRdnListArray) {
    [output writeMessage:49 value:element];
  }
  if (self.hasRdn) {
    [output writeString:50 value:self.rdn];
  }
  if (self.hasEffectiveDate) {
    [output writeInt32:51 value:self.effectiveDate];
  }
  if (self.hasRecCashWithdraw) {
    [output writeMessage:52 value:self.recCashWithdraw];
  }
  for (CashWithdraw *element in self.recCashWithdrawListArray) {
    [output writeMessage:53 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRecReqData) {
    size += computeMessageSize(1, self.recReqData);
  }
  for (MasterData *element in self.recMPrivilegesArray) {
    size += computeMessageSize(2, element);
  }
  for (MasterData *element in self.recMOrderstatusArray) {
    size += computeMessageSize(3, element);
  }
  for (MasterData *element in self.recMOrdertypeArray) {
    size += computeMessageSize(4, element);
  }
  for (MenuData *element in self.recMMenuArray) {
    size += computeMessageSize(5, element);
  }
  for (MarketCapping *element in self.recMMarketcappingArray) {
    size += computeMessageSize(6, element);
  }
  for (SharesInfo *element in self.recMSharesinfoArray) {
    size += computeMessageSize(7, element);
  }
  if (self.hasRecLoginData) {
    size += computeMessageSize(8, self.recLoginData);
  }
  for (MessageBroadcastData *element in self.recMessBroadcastArray) {
    size += computeMessageSize(9, element);
  }
  for (ClientList *element in self.recClientListArray) {
    size += computeMessageSize(10, element);
  }
  if (self.hasRecPrivillegesUser) {
    size += computeStringSize(11, self.recPrivillegesUser);
  }
  if (self.hasRecClordid) {
    size += computeStringSize(12, self.recClordid);
  }
  if (self.hasRecCustomerPosition) {
    size += computeMessageSize(13, self.recCustomerPosition);
  }
  if (self.hasRecOrderPower) {
    size += computeDoubleSize(14, self.recOrderPower);
  }
  if (self.hasRecAvaiableStock) {
    size += computeDoubleSize(15, self.recAvaiableStock);
  }
  for (TxOrder *element in self.recOrderlistArray) {
    size += computeMessageSize(16, element);
  }
  for (OrderGtc *element in self.recOrdergtcArray) {
    size += computeMessageSize(17, element);
  }
  for (TxTrade *element in self.recTradeArray) {
    size += computeMessageSize(18, element);
  }
  for (TxOrder *element in self.recNegoreceiveArray) {
    size += computeMessageSize(19, element);
  }
  for (OrderLifeCycle *element in self.recOrderLifeCycleArray) {
    size += computeMessageSize(20, element);
  }
  for (TradeDetail *element in self.recTradedetailArray) {
    size += computeMessageSize(21, element);
  }
  for (MarginAlert *element in self.recMarginAlertArray) {
    size += computeMessageSize(22, element);
  }
  if (self.hasRecAccountInfo) {
    size += computeMessageSize(23, self.recAccountInfo);
  }
  if (self.hasRecType) {
    size += computeEnumSize(24, self.recType);
  }
  if (self.hasRecStatusReturn) {
    size += computeEnumSize(25, self.recStatusReturn);
  }
  if (self.hasRecStatusMessage) {
    size += computeStringSize(26, self.recStatusMessage);
  }
  if (self.hasRecTime) {
    size += computeStringSize(27, self.recTime);
  }
  for (Portfolio *element in self.recPortfolioArray) {
    size += computeMessageSize(28, element);
  }
  if (self.hasRecStockInHand) {
    size += computeDoubleSize(29, self.recStockInHand);
  }
  if (self.hasRecRiskControl) {
    size += computeInt32Size(30, self.recRiskControl);
  }
  if (self.hasRecCashMutation) {
    size += computeMessageSize(31, self.recCashMutation);
  }
  for (CustomerExposure *element in self.recCustomerExposureArray) {
    size += computeMessageSize(32, element);
  }
  for (TxOrder *element in self.recAdvlistArray) {
    size += computeMessageSize(33, element);
  }
  if (self.hasClientcode) {
    size += computeStringSize(34, self.clientcode);
  }
  for (GroupOrder *element in self.recGrouporderArray) {
    size += computeMessageSize(35, element);
  }
  for (GroupOrderDetail *element in self.recGrouporderDetailArray) {
    size += computeMessageSize(36, element);
  }
  for (ClientOverdue *element in self.recClientOverdueArray) {
    size += computeMessageSize(37, element);
  }
  for (MasterData *element in self.recHolidayArray) {
    size += computeMessageSize(38, element);
  }
  for (MasterBranch *element in self.recBranchArray) {
    size += computeMessageSize(39, element);
  }
  for (MasterUserlist *element in self.recUserlistArray) {
    size += computeMessageSize(40, element);
  }
  if (self.hasRecAutomaticShortsell) {
    size += computeInt32Size(41, self.recAutomaticShortsell);
  }
  for (OrderConditional *element in self.recOrderconditionalArray) {
    size += computeMessageSize(42, element);
  }
  for (TradingTarget *element in self.recTradingtargetArray) {
    size += computeMessageSize(43, element);
  }
  for (CashFlow *element in self.recCashflowArray) {
    size += computeMessageSize(44, element);
  }
  for (PotonganPajak *element in self.recPotonganpajakArray) {
    size += computeMessageSize(45, element);
  }
  for (OrderMobile *element in self.recOrdermobileArray) {
    size += computeMessageSize(46, element);
  }
  if (self.hasRecGeneralMessage) {
    size += computeStringSize(47, self.recGeneralMessage);
  }
  for (UnregularStocklist *element in self.recUnregularStocklistArray) {
    size += computeMessageSize(48, element);
  }
  for (RDNList *element in self.recRdnListArray) {
    size += computeMessageSize(49, element);
  }
  if (self.hasRdn) {
    size += computeStringSize(50, self.rdn);
  }
  if (self.hasEffectiveDate) {
    size += computeInt32Size(51, self.effectiveDate);
  }
  if (self.hasRecCashWithdraw) {
    size += computeMessageSize(52, self.recCashWithdraw);
  }
  for (CashWithdraw *element in self.recCashWithdrawListArray) {
    size += computeMessageSize(53, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TradingMessage*) parseFromData:(NSData*) data {
  return (TradingMessage*)[[[TradingMessage builder] mergeFromData:data] build];
}
+ (TradingMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradingMessage*)[[[TradingMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TradingMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TradingMessage*)[[[TradingMessage builder] mergeFromInputStream:input] build];
}
+ (TradingMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradingMessage*)[[[TradingMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TradingMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TradingMessage*)[[[TradingMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TradingMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradingMessage*)[[[TradingMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TradingMessage_Builder*) builder {
  return [[TradingMessage_Builder alloc] init];
}
+ (TradingMessage_Builder*) builderWithPrototype:(TradingMessage*) prototype {
  return [[TradingMessage builder] mergeFrom:prototype];
}
- (TradingMessage_Builder*) builder {
  return [TradingMessage builder];
}
- (TradingMessage_Builder*) toBuilder {
  return [TradingMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasRecReqData) {
    [output appendFormat:@"%@%@ {\n", indent, @"recReqData"];
    [self.recReqData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MasterData* element in self.recMPrivilegesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMPrivileges"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MasterData* element in self.recMOrderstatusArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMOrderstatus"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MasterData* element in self.recMOrdertypeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMOrdertype"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MenuData* element in self.recMMenuArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMMenu"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MarketCapping* element in self.recMMarketcappingArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMMarketcapping"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (SharesInfo* element in self.recMSharesinfoArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMSharesinfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecLoginData) {
    [output appendFormat:@"%@%@ {\n", indent, @"recLoginData"];
    [self.recLoginData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MessageBroadcastData* element in self.recMessBroadcastArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMessBroadcast"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ClientList* element in self.recClientListArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recClientList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecPrivillegesUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recPrivillegesUser", self.recPrivillegesUser];
  }
  if (self.hasRecClordid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recClordid", self.recClordid];
  }
  if (self.hasRecCustomerPosition) {
    [output appendFormat:@"%@%@ {\n", indent, @"recCustomerPosition"];
    [self.recCustomerPosition writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecOrderPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recOrderPower", [NSNumber numberWithDouble:self.recOrderPower]];
  }
  if (self.hasRecAvaiableStock) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recAvaiableStock", [NSNumber numberWithDouble:self.recAvaiableStock]];
  }
  for (TxOrder* element in self.recOrderlistArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recOrderlist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (OrderGtc* element in self.recOrdergtcArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recOrdergtc"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TxTrade* element in self.recTradeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recTrade"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TxOrder* element in self.recNegoreceiveArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recNegoreceive"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (OrderLifeCycle* element in self.recOrderLifeCycleArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recOrderLifeCycle"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TradeDetail* element in self.recTradedetailArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recTradedetail"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MarginAlert* element in self.recMarginAlertArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recMarginAlert"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecAccountInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"recAccountInfo"];
    [self.recAccountInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"recType", self.recType];
  }
  if (self.hasRecStatusReturn) {
    [output appendFormat:@"%@%@: %d\n", indent, @"recStatusReturn", self.recStatusReturn];
  }
  if (self.hasRecStatusMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recStatusMessage", self.recStatusMessage];
  }
  if (self.hasRecTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recTime", self.recTime];
  }
  for (Portfolio* element in self.recPortfolioArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recPortfolio"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecStockInHand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recStockInHand", [NSNumber numberWithDouble:self.recStockInHand]];
  }
  if (self.hasRecRiskControl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recRiskControl", [NSNumber numberWithInt:self.recRiskControl]];
  }
  if (self.hasRecCashMutation) {
    [output appendFormat:@"%@%@ {\n", indent, @"recCashMutation"];
    [self.recCashMutation writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CustomerExposure* element in self.recCustomerExposureArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recCustomerExposure"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TxOrder* element in self.recAdvlistArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recAdvlist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  for (GroupOrder* element in self.recGrouporderArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recGrouporder"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (GroupOrderDetail* element in self.recGrouporderDetailArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recGrouporderDetail"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ClientOverdue* element in self.recClientOverdueArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recClientOverdue"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MasterData* element in self.recHolidayArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recHoliday"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MasterBranch* element in self.recBranchArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recBranch"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MasterUserlist* element in self.recUserlistArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recUserlist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecAutomaticShortsell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recAutomaticShortsell", [NSNumber numberWithInt:self.recAutomaticShortsell]];
  }
  for (OrderConditional* element in self.recOrderconditionalArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recOrderconditional"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TradingTarget* element in self.recTradingtargetArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recTradingtarget"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CashFlow* element in self.recCashflowArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recCashflow"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (PotonganPajak* element in self.recPotonganpajakArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recPotonganpajak"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (OrderMobile* element in self.recOrdermobileArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recOrdermobile"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecGeneralMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recGeneralMessage", self.recGeneralMessage];
  }
  for (UnregularStocklist* element in self.recUnregularStocklistArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recUnregularStocklist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (RDNList* element in self.recRdnListArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recRdnList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRdn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rdn", self.rdn];
  }
  if (self.hasEffectiveDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"effectiveDate", [NSNumber numberWithInt:self.effectiveDate]];
  }
  if (self.hasRecCashWithdraw) {
    [output appendFormat:@"%@%@ {\n", indent, @"recCashWithdraw"];
    [self.recCashWithdraw writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CashWithdraw* element in self.recCashWithdrawListArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"recCashWithdrawList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TradingMessage class]]) {
    return NO;
  }
  TradingMessage *otherMessage = other;
  return
      self.hasRecReqData == otherMessage.hasRecReqData &&
      (!self.hasRecReqData || [self.recReqData isEqual:otherMessage.recReqData]) &&
      [self.recMPrivilegesArray isEqualToArray:otherMessage.recMPrivilegesArray] &&
      [self.recMOrderstatusArray isEqualToArray:otherMessage.recMOrderstatusArray] &&
      [self.recMOrdertypeArray isEqualToArray:otherMessage.recMOrdertypeArray] &&
      [self.recMMenuArray isEqualToArray:otherMessage.recMMenuArray] &&
      [self.recMMarketcappingArray isEqualToArray:otherMessage.recMMarketcappingArray] &&
      [self.recMSharesinfoArray isEqualToArray:otherMessage.recMSharesinfoArray] &&
      self.hasRecLoginData == otherMessage.hasRecLoginData &&
      (!self.hasRecLoginData || [self.recLoginData isEqual:otherMessage.recLoginData]) &&
      [self.recMessBroadcastArray isEqualToArray:otherMessage.recMessBroadcastArray] &&
      [self.recClientListArray isEqualToArray:otherMessage.recClientListArray] &&
      self.hasRecPrivillegesUser == otherMessage.hasRecPrivillegesUser &&
      (!self.hasRecPrivillegesUser || [self.recPrivillegesUser isEqual:otherMessage.recPrivillegesUser]) &&
      self.hasRecClordid == otherMessage.hasRecClordid &&
      (!self.hasRecClordid || [self.recClordid isEqual:otherMessage.recClordid]) &&
      self.hasRecCustomerPosition == otherMessage.hasRecCustomerPosition &&
      (!self.hasRecCustomerPosition || [self.recCustomerPosition isEqual:otherMessage.recCustomerPosition]) &&
      self.hasRecOrderPower == otherMessage.hasRecOrderPower &&
      (!self.hasRecOrderPower || self.recOrderPower == otherMessage.recOrderPower) &&
      self.hasRecAvaiableStock == otherMessage.hasRecAvaiableStock &&
      (!self.hasRecAvaiableStock || self.recAvaiableStock == otherMessage.recAvaiableStock) &&
      [self.recOrderlistArray isEqualToArray:otherMessage.recOrderlistArray] &&
      [self.recOrdergtcArray isEqualToArray:otherMessage.recOrdergtcArray] &&
      [self.recTradeArray isEqualToArray:otherMessage.recTradeArray] &&
      [self.recNegoreceiveArray isEqualToArray:otherMessage.recNegoreceiveArray] &&
      [self.recOrderLifeCycleArray isEqualToArray:otherMessage.recOrderLifeCycleArray] &&
      [self.recTradedetailArray isEqualToArray:otherMessage.recTradedetailArray] &&
      [self.recMarginAlertArray isEqualToArray:otherMessage.recMarginAlertArray] &&
      self.hasRecAccountInfo == otherMessage.hasRecAccountInfo &&
      (!self.hasRecAccountInfo || [self.recAccountInfo isEqual:otherMessage.recAccountInfo]) &&
      self.hasRecType == otherMessage.hasRecType &&
      (!self.hasRecType || self.recType != otherMessage.recType) &&
      self.hasRecStatusReturn == otherMessage.hasRecStatusReturn &&
      (!self.hasRecStatusReturn || self.recStatusReturn != otherMessage.recStatusReturn) &&
      self.hasRecStatusMessage == otherMessage.hasRecStatusMessage &&
      (!self.hasRecStatusMessage || [self.recStatusMessage isEqual:otherMessage.recStatusMessage]) &&
      self.hasRecTime == otherMessage.hasRecTime &&
      (!self.hasRecTime || [self.recTime isEqual:otherMessage.recTime]) &&
      [self.recPortfolioArray isEqualToArray:otherMessage.recPortfolioArray] &&
      self.hasRecStockInHand == otherMessage.hasRecStockInHand &&
      (!self.hasRecStockInHand || self.recStockInHand == otherMessage.recStockInHand) &&
      self.hasRecRiskControl == otherMessage.hasRecRiskControl &&
      (!self.hasRecRiskControl || self.recRiskControl == otherMessage.recRiskControl) &&
      self.hasRecCashMutation == otherMessage.hasRecCashMutation &&
      (!self.hasRecCashMutation || [self.recCashMutation isEqual:otherMessage.recCashMutation]) &&
      [self.recCustomerExposureArray isEqualToArray:otherMessage.recCustomerExposureArray] &&
      [self.recAdvlistArray isEqualToArray:otherMessage.recAdvlistArray] &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      [self.recGrouporderArray isEqualToArray:otherMessage.recGrouporderArray] &&
      [self.recGrouporderDetailArray isEqualToArray:otherMessage.recGrouporderDetailArray] &&
      [self.recClientOverdueArray isEqualToArray:otherMessage.recClientOverdueArray] &&
      [self.recHolidayArray isEqualToArray:otherMessage.recHolidayArray] &&
      [self.recBranchArray isEqualToArray:otherMessage.recBranchArray] &&
      [self.recUserlistArray isEqualToArray:otherMessage.recUserlistArray] &&
      self.hasRecAutomaticShortsell == otherMessage.hasRecAutomaticShortsell &&
      (!self.hasRecAutomaticShortsell || self.recAutomaticShortsell == otherMessage.recAutomaticShortsell) &&
      [self.recOrderconditionalArray isEqualToArray:otherMessage.recOrderconditionalArray] &&
      [self.recTradingtargetArray isEqualToArray:otherMessage.recTradingtargetArray] &&
      [self.recCashflowArray isEqualToArray:otherMessage.recCashflowArray] &&
      [self.recPotonganpajakArray isEqualToArray:otherMessage.recPotonganpajakArray] &&
      [self.recOrdermobileArray isEqualToArray:otherMessage.recOrdermobileArray] &&
      self.hasRecGeneralMessage == otherMessage.hasRecGeneralMessage &&
      (!self.hasRecGeneralMessage || [self.recGeneralMessage isEqual:otherMessage.recGeneralMessage]) &&
      [self.recUnregularStocklistArray isEqualToArray:otherMessage.recUnregularStocklistArray] &&
      [self.recRdnListArray isEqualToArray:otherMessage.recRdnListArray] &&
      self.hasRdn == otherMessage.hasRdn &&
      (!self.hasRdn || [self.rdn isEqual:otherMessage.rdn]) &&
      self.hasEffectiveDate == otherMessage.hasEffectiveDate &&
      (!self.hasEffectiveDate || self.effectiveDate == otherMessage.effectiveDate) &&
      self.hasRecCashWithdraw == otherMessage.hasRecCashWithdraw &&
      (!self.hasRecCashWithdraw || [self.recCashWithdraw isEqual:otherMessage.recCashWithdraw]) &&
      [self.recCashWithdrawListArray isEqualToArray:otherMessage.recCashWithdrawListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasRecReqData) {
    hashCode = hashCode * 31 + [self.recReqData hash];
  }
  for (MasterData* element in self.recMPrivilegesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MasterData* element in self.recMOrderstatusArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MasterData* element in self.recMOrdertypeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MenuData* element in self.recMMenuArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MarketCapping* element in self.recMMarketcappingArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (SharesInfo* element in self.recMSharesinfoArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRecLoginData) {
    hashCode = hashCode * 31 + [self.recLoginData hash];
  }
  for (MessageBroadcastData* element in self.recMessBroadcastArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ClientList* element in self.recClientListArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRecPrivillegesUser) {
    hashCode = hashCode * 31 + [self.recPrivillegesUser hash];
  }
  if (self.hasRecClordid) {
    hashCode = hashCode * 31 + [self.recClordid hash];
  }
  if (self.hasRecCustomerPosition) {
    hashCode = hashCode * 31 + [self.recCustomerPosition hash];
  }
  if (self.hasRecOrderPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.recOrderPower] hash];
  }
  if (self.hasRecAvaiableStock) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.recAvaiableStock] hash];
  }
  for (TxOrder* element in self.recOrderlistArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (OrderGtc* element in self.recOrdergtcArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TxTrade* element in self.recTradeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TxOrder* element in self.recNegoreceiveArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (OrderLifeCycle* element in self.recOrderLifeCycleArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TradeDetail* element in self.recTradedetailArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MarginAlert* element in self.recMarginAlertArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRecAccountInfo) {
    hashCode = hashCode * 31 + [self.recAccountInfo hash];
  }
  if (self.hasRecType) {
    hashCode = hashCode * 31 + self.recType;
  }
  if (self.hasRecStatusReturn) {
    hashCode = hashCode * 31 + self.recStatusReturn;
  }
  if (self.hasRecStatusMessage) {
    hashCode = hashCode * 31 + [self.recStatusMessage hash];
  }
  if (self.hasRecTime) {
    hashCode = hashCode * 31 + [self.recTime hash];
  }
  for (Portfolio* element in self.recPortfolioArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRecStockInHand) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.recStockInHand] hash];
  }
  if (self.hasRecRiskControl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.recRiskControl] hash];
  }
  if (self.hasRecCashMutation) {
    hashCode = hashCode * 31 + [self.recCashMutation hash];
  }
  for (CustomerExposure* element in self.recCustomerExposureArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TxOrder* element in self.recAdvlistArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  for (GroupOrder* element in self.recGrouporderArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (GroupOrderDetail* element in self.recGrouporderDetailArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ClientOverdue* element in self.recClientOverdueArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MasterData* element in self.recHolidayArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MasterBranch* element in self.recBranchArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MasterUserlist* element in self.recUserlistArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRecAutomaticShortsell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.recAutomaticShortsell] hash];
  }
  for (OrderConditional* element in self.recOrderconditionalArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TradingTarget* element in self.recTradingtargetArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CashFlow* element in self.recCashflowArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (PotonganPajak* element in self.recPotonganpajakArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (OrderMobile* element in self.recOrdermobileArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRecGeneralMessage) {
    hashCode = hashCode * 31 + [self.recGeneralMessage hash];
  }
  for (UnregularStocklist* element in self.recUnregularStocklistArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (RDNList* element in self.recRdnListArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRdn) {
    hashCode = hashCode * 31 + [self.rdn hash];
  }
  if (self.hasEffectiveDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.effectiveDate] hash];
  }
  if (self.hasRecCashWithdraw) {
    hashCode = hashCode * 31 + [self.recCashWithdraw hash];
  }
  for (CashWithdraw* element in self.recCashWithdrawListArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TradingMessage_Builder()
@property (strong) TradingMessage* result;
@end

@implementation TradingMessage_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TradingMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TradingMessage_Builder*) clear {
  self.result = [[TradingMessage alloc] init];
  return self;
}
- (TradingMessage_Builder*) clone {
  return [TradingMessage builderWithPrototype:result];
}
- (TradingMessage*) defaultInstance {
  return [TradingMessage defaultInstance];
}
- (TradingMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TradingMessage*) buildPartial {
  TradingMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TradingMessage_Builder*) mergeFrom:(TradingMessage*) other {
  if (other == [TradingMessage defaultInstance]) {
    return self;
  }
  if (other.hasRecReqData) {
    [self mergeRecReqData:other.recReqData];
  }
  if (other.recMPrivilegesArray.count > 0) {
    if (result.recMPrivilegesArray == nil) {
      result.recMPrivilegesArray = [[NSMutableArray alloc] initWithArray:other.recMPrivilegesArray];
    } else {
      [result.recMPrivilegesArray addObjectsFromArray:other.recMPrivilegesArray];
    }
  }
  if (other.recMOrderstatusArray.count > 0) {
    if (result.recMOrderstatusArray == nil) {
      result.recMOrderstatusArray = [[NSMutableArray alloc] initWithArray:other.recMOrderstatusArray];
    } else {
      [result.recMOrderstatusArray addObjectsFromArray:other.recMOrderstatusArray];
    }
  }
  if (other.recMOrdertypeArray.count > 0) {
    if (result.recMOrdertypeArray == nil) {
      result.recMOrdertypeArray = [[NSMutableArray alloc] initWithArray:other.recMOrdertypeArray];
    } else {
      [result.recMOrdertypeArray addObjectsFromArray:other.recMOrdertypeArray];
    }
  }
  if (other.recMMenuArray.count > 0) {
    if (result.recMMenuArray == nil) {
      result.recMMenuArray = [[NSMutableArray alloc] initWithArray:other.recMMenuArray];
    } else {
      [result.recMMenuArray addObjectsFromArray:other.recMMenuArray];
    }
  }
  if (other.recMMarketcappingArray.count > 0) {
    if (result.recMMarketcappingArray == nil) {
      result.recMMarketcappingArray = [[NSMutableArray alloc] initWithArray:other.recMMarketcappingArray];
    } else {
      [result.recMMarketcappingArray addObjectsFromArray:other.recMMarketcappingArray];
    }
  }
  if (other.recMSharesinfoArray.count > 0) {
    if (result.recMSharesinfoArray == nil) {
      result.recMSharesinfoArray = [[NSMutableArray alloc] initWithArray:other.recMSharesinfoArray];
    } else {
      [result.recMSharesinfoArray addObjectsFromArray:other.recMSharesinfoArray];
    }
  }
  if (other.hasRecLoginData) {
    [self mergeRecLoginData:other.recLoginData];
  }
  if (other.recMessBroadcastArray.count > 0) {
    if (result.recMessBroadcastArray == nil) {
      result.recMessBroadcastArray = [[NSMutableArray alloc] initWithArray:other.recMessBroadcastArray];
    } else {
      [result.recMessBroadcastArray addObjectsFromArray:other.recMessBroadcastArray];
    }
  }
  if (other.recClientListArray.count > 0) {
    if (result.recClientListArray == nil) {
      result.recClientListArray = [[NSMutableArray alloc] initWithArray:other.recClientListArray];
    } else {
      [result.recClientListArray addObjectsFromArray:other.recClientListArray];
    }
  }
  if (other.hasRecPrivillegesUser) {
    [self setRecPrivillegesUser:other.recPrivillegesUser];
  }
  if (other.hasRecClordid) {
    [self setRecClordid:other.recClordid];
  }
  if (other.hasRecCustomerPosition) {
    [self mergeRecCustomerPosition:other.recCustomerPosition];
  }
  if (other.hasRecOrderPower) {
    [self setRecOrderPower:other.recOrderPower];
  }
  if (other.hasRecAvaiableStock) {
    [self setRecAvaiableStock:other.recAvaiableStock];
  }
  if (other.recOrderlistArray.count > 0) {
    if (result.recOrderlistArray == nil) {
      result.recOrderlistArray = [[NSMutableArray alloc] initWithArray:other.recOrderlistArray];
    } else {
      [result.recOrderlistArray addObjectsFromArray:other.recOrderlistArray];
    }
  }
  if (other.recOrdergtcArray.count > 0) {
    if (result.recOrdergtcArray == nil) {
      result.recOrdergtcArray = [[NSMutableArray alloc] initWithArray:other.recOrdergtcArray];
    } else {
      [result.recOrdergtcArray addObjectsFromArray:other.recOrdergtcArray];
    }
  }
  if (other.recTradeArray.count > 0) {
    if (result.recTradeArray == nil) {
      result.recTradeArray = [[NSMutableArray alloc] initWithArray:other.recTradeArray];
    } else {
      [result.recTradeArray addObjectsFromArray:other.recTradeArray];
    }
  }
  if (other.recNegoreceiveArray.count > 0) {
    if (result.recNegoreceiveArray == nil) {
      result.recNegoreceiveArray = [[NSMutableArray alloc] initWithArray:other.recNegoreceiveArray];
    } else {
      [result.recNegoreceiveArray addObjectsFromArray:other.recNegoreceiveArray];
    }
  }
  if (other.recOrderLifeCycleArray.count > 0) {
    if (result.recOrderLifeCycleArray == nil) {
      result.recOrderLifeCycleArray = [[NSMutableArray alloc] initWithArray:other.recOrderLifeCycleArray];
    } else {
      [result.recOrderLifeCycleArray addObjectsFromArray:other.recOrderLifeCycleArray];
    }
  }
  if (other.recTradedetailArray.count > 0) {
    if (result.recTradedetailArray == nil) {
      result.recTradedetailArray = [[NSMutableArray alloc] initWithArray:other.recTradedetailArray];
    } else {
      [result.recTradedetailArray addObjectsFromArray:other.recTradedetailArray];
    }
  }
  if (other.recMarginAlertArray.count > 0) {
    if (result.recMarginAlertArray == nil) {
      result.recMarginAlertArray = [[NSMutableArray alloc] initWithArray:other.recMarginAlertArray];
    } else {
      [result.recMarginAlertArray addObjectsFromArray:other.recMarginAlertArray];
    }
  }
  if (other.hasRecAccountInfo) {
    [self mergeRecAccountInfo:other.recAccountInfo];
  }
  if (other.hasRecType) {
    [self setRecType:other.recType];
  }
  if (other.hasRecStatusReturn) {
    [self setRecStatusReturn:other.recStatusReturn];
  }
  if (other.hasRecStatusMessage) {
    [self setRecStatusMessage:other.recStatusMessage];
  }
  if (other.hasRecTime) {
    [self setRecTime:other.recTime];
  }
  if (other.recPortfolioArray.count > 0) {
    if (result.recPortfolioArray == nil) {
      result.recPortfolioArray = [[NSMutableArray alloc] initWithArray:other.recPortfolioArray];
    } else {
      [result.recPortfolioArray addObjectsFromArray:other.recPortfolioArray];
    }
  }
  if (other.hasRecStockInHand) {
    [self setRecStockInHand:other.recStockInHand];
  }
  if (other.hasRecRiskControl) {
    [self setRecRiskControl:other.recRiskControl];
  }
  if (other.hasRecCashMutation) {
    [self mergeRecCashMutation:other.recCashMutation];
  }
  if (other.recCustomerExposureArray.count > 0) {
    if (result.recCustomerExposureArray == nil) {
      result.recCustomerExposureArray = [[NSMutableArray alloc] initWithArray:other.recCustomerExposureArray];
    } else {
      [result.recCustomerExposureArray addObjectsFromArray:other.recCustomerExposureArray];
    }
  }
  if (other.recAdvlistArray.count > 0) {
    if (result.recAdvlistArray == nil) {
      result.recAdvlistArray = [[NSMutableArray alloc] initWithArray:other.recAdvlistArray];
    } else {
      [result.recAdvlistArray addObjectsFromArray:other.recAdvlistArray];
    }
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.recGrouporderArray.count > 0) {
    if (result.recGrouporderArray == nil) {
      result.recGrouporderArray = [[NSMutableArray alloc] initWithArray:other.recGrouporderArray];
    } else {
      [result.recGrouporderArray addObjectsFromArray:other.recGrouporderArray];
    }
  }
  if (other.recGrouporderDetailArray.count > 0) {
    if (result.recGrouporderDetailArray == nil) {
      result.recGrouporderDetailArray = [[NSMutableArray alloc] initWithArray:other.recGrouporderDetailArray];
    } else {
      [result.recGrouporderDetailArray addObjectsFromArray:other.recGrouporderDetailArray];
    }
  }
  if (other.recClientOverdueArray.count > 0) {
    if (result.recClientOverdueArray == nil) {
      result.recClientOverdueArray = [[NSMutableArray alloc] initWithArray:other.recClientOverdueArray];
    } else {
      [result.recClientOverdueArray addObjectsFromArray:other.recClientOverdueArray];
    }
  }
  if (other.recHolidayArray.count > 0) {
    if (result.recHolidayArray == nil) {
      result.recHolidayArray = [[NSMutableArray alloc] initWithArray:other.recHolidayArray];
    } else {
      [result.recHolidayArray addObjectsFromArray:other.recHolidayArray];
    }
  }
  if (other.recBranchArray.count > 0) {
    if (result.recBranchArray == nil) {
      result.recBranchArray = [[NSMutableArray alloc] initWithArray:other.recBranchArray];
    } else {
      [result.recBranchArray addObjectsFromArray:other.recBranchArray];
    }
  }
  if (other.recUserlistArray.count > 0) {
    if (result.recUserlistArray == nil) {
      result.recUserlistArray = [[NSMutableArray alloc] initWithArray:other.recUserlistArray];
    } else {
      [result.recUserlistArray addObjectsFromArray:other.recUserlistArray];
    }
  }
  if (other.hasRecAutomaticShortsell) {
    [self setRecAutomaticShortsell:other.recAutomaticShortsell];
  }
  if (other.recOrderconditionalArray.count > 0) {
    if (result.recOrderconditionalArray == nil) {
      result.recOrderconditionalArray = [[NSMutableArray alloc] initWithArray:other.recOrderconditionalArray];
    } else {
      [result.recOrderconditionalArray addObjectsFromArray:other.recOrderconditionalArray];
    }
  }
  if (other.recTradingtargetArray.count > 0) {
    if (result.recTradingtargetArray == nil) {
      result.recTradingtargetArray = [[NSMutableArray alloc] initWithArray:other.recTradingtargetArray];
    } else {
      [result.recTradingtargetArray addObjectsFromArray:other.recTradingtargetArray];
    }
  }
  if (other.recCashflowArray.count > 0) {
    if (result.recCashflowArray == nil) {
      result.recCashflowArray = [[NSMutableArray alloc] initWithArray:other.recCashflowArray];
    } else {
      [result.recCashflowArray addObjectsFromArray:other.recCashflowArray];
    }
  }
  if (other.recPotonganpajakArray.count > 0) {
    if (result.recPotonganpajakArray == nil) {
      result.recPotonganpajakArray = [[NSMutableArray alloc] initWithArray:other.recPotonganpajakArray];
    } else {
      [result.recPotonganpajakArray addObjectsFromArray:other.recPotonganpajakArray];
    }
  }
  if (other.recOrdermobileArray.count > 0) {
    if (result.recOrdermobileArray == nil) {
      result.recOrdermobileArray = [[NSMutableArray alloc] initWithArray:other.recOrdermobileArray];
    } else {
      [result.recOrdermobileArray addObjectsFromArray:other.recOrdermobileArray];
    }
  }
  if (other.hasRecGeneralMessage) {
    [self setRecGeneralMessage:other.recGeneralMessage];
  }
  if (other.recUnregularStocklistArray.count > 0) {
    if (result.recUnregularStocklistArray == nil) {
      result.recUnregularStocklistArray = [[NSMutableArray alloc] initWithArray:other.recUnregularStocklistArray];
    } else {
      [result.recUnregularStocklistArray addObjectsFromArray:other.recUnregularStocklistArray];
    }
  }
  if (other.recRdnListArray.count > 0) {
    if (result.recRdnListArray == nil) {
      result.recRdnListArray = [[NSMutableArray alloc] initWithArray:other.recRdnListArray];
    } else {
      [result.recRdnListArray addObjectsFromArray:other.recRdnListArray];
    }
  }
  if (other.hasRdn) {
    [self setRdn:other.rdn];
  }
  if (other.hasEffectiveDate) {
    [self setEffectiveDate:other.effectiveDate];
  }
  if (other.hasRecCashWithdraw) {
    [self mergeRecCashWithdraw:other.recCashWithdraw];
  }
  if (other.recCashWithdrawListArray.count > 0) {
    if (result.recCashWithdrawListArray == nil) {
      result.recCashWithdrawListArray = [[NSMutableArray alloc] initWithArray:other.recCashWithdrawListArray];
    } else {
      [result.recCashWithdrawListArray addObjectsFromArray:other.recCashWithdrawListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TradingMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TradingMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RequestData_Builder* subBuilder = [RequestData builder];
        if (self.hasRecReqData) {
          [subBuilder mergeFrom:self.recReqData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecReqData:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        MasterData_Builder* subBuilder = [MasterData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMPrivileges:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        MasterData_Builder* subBuilder = [MasterData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMOrderstatus:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        MasterData_Builder* subBuilder = [MasterData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMOrdertype:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        MenuData_Builder* subBuilder = [MenuData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMMenu:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MarketCapping_Builder* subBuilder = [MarketCapping builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMMarketcapping:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        SharesInfo_Builder* subBuilder = [SharesInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMSharesinfo:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        LoginData_Builder* subBuilder = [LoginData builder];
        if (self.hasRecLoginData) {
          [subBuilder mergeFrom:self.recLoginData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecLoginData:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        MessageBroadcastData_Builder* subBuilder = [MessageBroadcastData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMessBroadcast:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        ClientList_Builder* subBuilder = [ClientList builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecClientList:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setRecPrivillegesUser:[input readString]];
        break;
      }
      case 98: {
        [self setRecClordid:[input readString]];
        break;
      }
      case 106: {
        CustomerPosition_Builder* subBuilder = [CustomerPosition builder];
        if (self.hasRecCustomerPosition) {
          [subBuilder mergeFrom:self.recCustomerPosition];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecCustomerPosition:[subBuilder buildPartial]];
        break;
      }
      case 113: {
        [self setRecOrderPower:[input readDouble]];
        break;
      }
      case 121: {
        [self setRecAvaiableStock:[input readDouble]];
        break;
      }
      case 130: {
        TxOrder_Builder* subBuilder = [TxOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecOrderlist:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        OrderGtc_Builder* subBuilder = [OrderGtc builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecOrdergtc:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TxTrade_Builder* subBuilder = [TxTrade builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecTrade:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        TxOrder_Builder* subBuilder = [TxOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecNegoreceive:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        OrderLifeCycle_Builder* subBuilder = [OrderLifeCycle builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecOrderLifeCycle:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        TradeDetail_Builder* subBuilder = [TradeDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecTradedetail:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        MarginAlert_Builder* subBuilder = [MarginAlert builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecMarginAlert:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        AccountInfo_Builder* subBuilder = [AccountInfo builder];
        if (self.hasRecAccountInfo) {
          [subBuilder mergeFrom:self.recAccountInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecAccountInfo:[subBuilder buildPartial]];
        break;
      }
      case 192: {
        int32_t value = [input readEnum];
        if (RecordTypeIsValidValue(value)) {
          [self setRecType:value];
        } else {
          [unknownFields mergeVarintField:24 value:value];
        }
        break;
      }
      case 200: {
        int32_t value = [input readEnum];
        if (StatusReturnIsValidValue(value)) {
          [self setRecStatusReturn:value];
        } else {
          [unknownFields mergeVarintField:25 value:value];
        }
        break;
      }
      case 210: {
        [self setRecStatusMessage:[input readString]];
        break;
      }
      case 218: {
        [self setRecTime:[input readString]];
        break;
      }
      case 226: {
        Portfolio_Builder* subBuilder = [Portfolio builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecPortfolio:[subBuilder buildPartial]];
        break;
      }
      case 233: {
        [self setRecStockInHand:[input readDouble]];
        break;
      }
      case 240: {
        [self setRecRiskControl:[input readInt32]];
        break;
      }
      case 250: {
        CashMutation_Builder* subBuilder = [CashMutation builder];
        if (self.hasRecCashMutation) {
          [subBuilder mergeFrom:self.recCashMutation];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecCashMutation:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        CustomerExposure_Builder* subBuilder = [CustomerExposure builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecCustomerExposure:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        TxOrder_Builder* subBuilder = [TxOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecAdvlist:[subBuilder buildPartial]];
        break;
      }
      case 274: {
        [self setClientcode:[input readString]];
        break;
      }
      case 282: {
        GroupOrder_Builder* subBuilder = [GroupOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecGrouporder:[subBuilder buildPartial]];
        break;
      }
      case 290: {
        GroupOrderDetail_Builder* subBuilder = [GroupOrderDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecGrouporderDetail:[subBuilder buildPartial]];
        break;
      }
      case 298: {
        ClientOverdue_Builder* subBuilder = [ClientOverdue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecClientOverdue:[subBuilder buildPartial]];
        break;
      }
      case 306: {
        MasterData_Builder* subBuilder = [MasterData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecHoliday:[subBuilder buildPartial]];
        break;
      }
      case 314: {
        MasterBranch_Builder* subBuilder = [MasterBranch builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecBranch:[subBuilder buildPartial]];
        break;
      }
      case 322: {
        MasterUserlist_Builder* subBuilder = [MasterUserlist builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecUserlist:[subBuilder buildPartial]];
        break;
      }
      case 328: {
        [self setRecAutomaticShortsell:[input readInt32]];
        break;
      }
      case 338: {
        OrderConditional_Builder* subBuilder = [OrderConditional builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecOrderconditional:[subBuilder buildPartial]];
        break;
      }
      case 346: {
        TradingTarget_Builder* subBuilder = [TradingTarget builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecTradingtarget:[subBuilder buildPartial]];
        break;
      }
      case 354: {
        CashFlow_Builder* subBuilder = [CashFlow builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecCashflow:[subBuilder buildPartial]];
        break;
      }
      case 362: {
        PotonganPajak_Builder* subBuilder = [PotonganPajak builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecPotonganpajak:[subBuilder buildPartial]];
        break;
      }
      case 370: {
        OrderMobile_Builder* subBuilder = [OrderMobile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecOrdermobile:[subBuilder buildPartial]];
        break;
      }
      case 378: {
        [self setRecGeneralMessage:[input readString]];
        break;
      }
      case 386: {
        UnregularStocklist_Builder* subBuilder = [UnregularStocklist builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecUnregularStocklist:[subBuilder buildPartial]];
        break;
      }
      case 394: {
        RDNList_Builder* subBuilder = [RDNList builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecRdnList:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        [self setRdn:[input readString]];
        break;
      }
      case 408: {
        [self setEffectiveDate:[input readInt32]];
        break;
      }
      case 418: {
        CashWithdraw_Builder* subBuilder = [CashWithdraw builder];
        if (self.hasRecCashWithdraw) {
          [subBuilder mergeFrom:self.recCashWithdraw];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecCashWithdraw:[subBuilder buildPartial]];
        break;
      }
      case 426: {
        CashWithdraw_Builder* subBuilder = [CashWithdraw builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecCashWithdrawList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRecReqData {
  return result.hasRecReqData;
}
- (RequestData*) recReqData {
  return result.recReqData;
}
- (TradingMessage_Builder*) setRecReqData:(RequestData*) value {
  result.hasRecReqData = YES;
  result.recReqData = value;
  return self;
}
- (TradingMessage_Builder*) setRecReqDataBuilder:(RequestData_Builder*) builderForValue {
  return [self setRecReqData:[builderForValue build]];
}
- (TradingMessage_Builder*) mergeRecReqData:(RequestData*) value {
  if (result.hasRecReqData &&
      result.recReqData != [RequestData defaultInstance]) {
    result.recReqData =
      [[[RequestData builderWithPrototype:result.recReqData] mergeFrom:value] buildPartial];
  } else {
    result.recReqData = value;
  }
  result.hasRecReqData = YES;
  return self;
}
- (TradingMessage_Builder*) clearRecReqData {
  result.hasRecReqData = NO;
  result.recReqData = [RequestData defaultInstance];
  return self;
}
- (NSMutableArray *)recMPrivileges {
  return result.recMPrivilegesArray;
}
- (MasterData*)recMPrivilegesAtIndex:(NSUInteger)index {
  return [result recMPrivilegesAtIndex:index];
}
- (TradingMessage_Builder *)addRecMPrivileges:(MasterData*)value {
  if (result.recMPrivilegesArray == nil) {
    result.recMPrivilegesArray = [[NSMutableArray alloc]init];
  }
  [result.recMPrivilegesArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMPrivilegesArray:(NSArray *)array {
  result.recMPrivilegesArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMPrivileges {
  result.recMPrivilegesArray = nil;
  return self;
}
- (NSMutableArray *)recMOrderstatus {
  return result.recMOrderstatusArray;
}
- (MasterData*)recMOrderstatusAtIndex:(NSUInteger)index {
  return [result recMOrderstatusAtIndex:index];
}
- (TradingMessage_Builder *)addRecMOrderstatus:(MasterData*)value {
  if (result.recMOrderstatusArray == nil) {
    result.recMOrderstatusArray = [[NSMutableArray alloc]init];
  }
  [result.recMOrderstatusArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMOrderstatusArray:(NSArray *)array {
  result.recMOrderstatusArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMOrderstatus {
  result.recMOrderstatusArray = nil;
  return self;
}
- (NSMutableArray *)recMOrdertype {
  return result.recMOrdertypeArray;
}
- (MasterData*)recMOrdertypeAtIndex:(NSUInteger)index {
  return [result recMOrdertypeAtIndex:index];
}
- (TradingMessage_Builder *)addRecMOrdertype:(MasterData*)value {
  if (result.recMOrdertypeArray == nil) {
    result.recMOrdertypeArray = [[NSMutableArray alloc]init];
  }
  [result.recMOrdertypeArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMOrdertypeArray:(NSArray *)array {
  result.recMOrdertypeArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMOrdertype {
  result.recMOrdertypeArray = nil;
  return self;
}
- (NSMutableArray *)recMMenu {
  return result.recMMenuArray;
}
- (MenuData*)recMMenuAtIndex:(NSUInteger)index {
  return [result recMMenuAtIndex:index];
}
- (TradingMessage_Builder *)addRecMMenu:(MenuData*)value {
  if (result.recMMenuArray == nil) {
    result.recMMenuArray = [[NSMutableArray alloc]init];
  }
  [result.recMMenuArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMMenuArray:(NSArray *)array {
  result.recMMenuArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMMenu {
  result.recMMenuArray = nil;
  return self;
}
- (NSMutableArray *)recMMarketcapping {
  return result.recMMarketcappingArray;
}
- (MarketCapping*)recMMarketcappingAtIndex:(NSUInteger)index {
  return [result recMMarketcappingAtIndex:index];
}
- (TradingMessage_Builder *)addRecMMarketcapping:(MarketCapping*)value {
  if (result.recMMarketcappingArray == nil) {
    result.recMMarketcappingArray = [[NSMutableArray alloc]init];
  }
  [result.recMMarketcappingArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMMarketcappingArray:(NSArray *)array {
  result.recMMarketcappingArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMMarketcapping {
  result.recMMarketcappingArray = nil;
  return self;
}
- (NSMutableArray *)recMSharesinfo {
  return result.recMSharesinfoArray;
}
- (SharesInfo*)recMSharesinfoAtIndex:(NSUInteger)index {
  return [result recMSharesinfoAtIndex:index];
}
- (TradingMessage_Builder *)addRecMSharesinfo:(SharesInfo*)value {
  if (result.recMSharesinfoArray == nil) {
    result.recMSharesinfoArray = [[NSMutableArray alloc]init];
  }
  [result.recMSharesinfoArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMSharesinfoArray:(NSArray *)array {
  result.recMSharesinfoArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMSharesinfo {
  result.recMSharesinfoArray = nil;
  return self;
}
- (BOOL) hasRecLoginData {
  return result.hasRecLoginData;
}
- (LoginData*) recLoginData {
  return result.recLoginData;
}
- (TradingMessage_Builder*) setRecLoginData:(LoginData*) value {
  result.hasRecLoginData = YES;
  result.recLoginData = value;
  return self;
}
- (TradingMessage_Builder*) setRecLoginDataBuilder:(LoginData_Builder*) builderForValue {
  return [self setRecLoginData:[builderForValue build]];
}
- (TradingMessage_Builder*) mergeRecLoginData:(LoginData*) value {
  if (result.hasRecLoginData &&
      result.recLoginData != [LoginData defaultInstance]) {
    result.recLoginData =
      [[[LoginData builderWithPrototype:result.recLoginData] mergeFrom:value] buildPartial];
  } else {
    result.recLoginData = value;
  }
  result.hasRecLoginData = YES;
  return self;
}
- (TradingMessage_Builder*) clearRecLoginData {
  result.hasRecLoginData = NO;
  result.recLoginData = [LoginData defaultInstance];
  return self;
}
- (NSMutableArray *)recMessBroadcast {
  return result.recMessBroadcastArray;
}
- (MessageBroadcastData*)recMessBroadcastAtIndex:(NSUInteger)index {
  return [result recMessBroadcastAtIndex:index];
}
- (TradingMessage_Builder *)addRecMessBroadcast:(MessageBroadcastData*)value {
  if (result.recMessBroadcastArray == nil) {
    result.recMessBroadcastArray = [[NSMutableArray alloc]init];
  }
  [result.recMessBroadcastArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMessBroadcastArray:(NSArray *)array {
  result.recMessBroadcastArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMessBroadcast {
  result.recMessBroadcastArray = nil;
  return self;
}
- (NSMutableArray *)recClientList {
  return result.recClientListArray;
}
- (ClientList*)recClientListAtIndex:(NSUInteger)index {
  return [result recClientListAtIndex:index];
}
- (TradingMessage_Builder *)addRecClientList:(ClientList*)value {
  if (result.recClientListArray == nil) {
    result.recClientListArray = [[NSMutableArray alloc]init];
  }
  [result.recClientListArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecClientListArray:(NSArray *)array {
  result.recClientListArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecClientList {
  result.recClientListArray = nil;
  return self;
}
- (BOOL) hasRecPrivillegesUser {
  return result.hasRecPrivillegesUser;
}
- (NSString*) recPrivillegesUser {
  return result.recPrivillegesUser;
}
- (TradingMessage_Builder*) setRecPrivillegesUser:(NSString*) value {
  result.hasRecPrivillegesUser = YES;
  result.recPrivillegesUser = value;
  return self;
}
- (TradingMessage_Builder*) clearRecPrivillegesUser {
  result.hasRecPrivillegesUser = NO;
  result.recPrivillegesUser = @"";
  return self;
}
- (BOOL) hasRecClordid {
  return result.hasRecClordid;
}
- (NSString*) recClordid {
  return result.recClordid;
}
- (TradingMessage_Builder*) setRecClordid:(NSString*) value {
  result.hasRecClordid = YES;
  result.recClordid = value;
  return self;
}
- (TradingMessage_Builder*) clearRecClordid {
  result.hasRecClordid = NO;
  result.recClordid = @"";
  return self;
}
- (BOOL) hasRecCustomerPosition {
  return result.hasRecCustomerPosition;
}
- (CustomerPosition*) recCustomerPosition {
  return result.recCustomerPosition;
}
- (TradingMessage_Builder*) setRecCustomerPosition:(CustomerPosition*) value {
  result.hasRecCustomerPosition = YES;
  result.recCustomerPosition = value;
  return self;
}
- (TradingMessage_Builder*) setRecCustomerPositionBuilder:(CustomerPosition_Builder*) builderForValue {
  return [self setRecCustomerPosition:[builderForValue build]];
}
- (TradingMessage_Builder*) mergeRecCustomerPosition:(CustomerPosition*) value {
  if (result.hasRecCustomerPosition &&
      result.recCustomerPosition != [CustomerPosition defaultInstance]) {
    result.recCustomerPosition =
      [[[CustomerPosition builderWithPrototype:result.recCustomerPosition] mergeFrom:value] buildPartial];
  } else {
    result.recCustomerPosition = value;
  }
  result.hasRecCustomerPosition = YES;
  return self;
}
- (TradingMessage_Builder*) clearRecCustomerPosition {
  result.hasRecCustomerPosition = NO;
  result.recCustomerPosition = [CustomerPosition defaultInstance];
  return self;
}
- (BOOL) hasRecOrderPower {
  return result.hasRecOrderPower;
}
- (Float64) recOrderPower {
  return result.recOrderPower;
}
- (TradingMessage_Builder*) setRecOrderPower:(Float64) value {
  result.hasRecOrderPower = YES;
  result.recOrderPower = value;
  return self;
}
- (TradingMessage_Builder*) clearRecOrderPower {
  result.hasRecOrderPower = NO;
  result.recOrderPower = 0;
  return self;
}
- (BOOL) hasRecAvaiableStock {
  return result.hasRecAvaiableStock;
}
- (Float64) recAvaiableStock {
  return result.recAvaiableStock;
}
- (TradingMessage_Builder*) setRecAvaiableStock:(Float64) value {
  result.hasRecAvaiableStock = YES;
  result.recAvaiableStock = value;
  return self;
}
- (TradingMessage_Builder*) clearRecAvaiableStock {
  result.hasRecAvaiableStock = NO;
  result.recAvaiableStock = 0;
  return self;
}
- (NSMutableArray *)recOrderlist {
  return result.recOrderlistArray;
}
- (TxOrder*)recOrderlistAtIndex:(NSUInteger)index {
  return [result recOrderlistAtIndex:index];
}
- (TradingMessage_Builder *)addRecOrderlist:(TxOrder*)value {
  if (result.recOrderlistArray == nil) {
    result.recOrderlistArray = [[NSMutableArray alloc]init];
  }
  [result.recOrderlistArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecOrderlistArray:(NSArray *)array {
  result.recOrderlistArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecOrderlist {
  result.recOrderlistArray = nil;
  return self;
}
- (NSMutableArray *)recOrdergtc {
  return result.recOrdergtcArray;
}
- (OrderGtc*)recOrdergtcAtIndex:(NSUInteger)index {
  return [result recOrdergtcAtIndex:index];
}
- (TradingMessage_Builder *)addRecOrdergtc:(OrderGtc*)value {
  if (result.recOrdergtcArray == nil) {
    result.recOrdergtcArray = [[NSMutableArray alloc]init];
  }
  [result.recOrdergtcArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecOrdergtcArray:(NSArray *)array {
  result.recOrdergtcArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecOrdergtc {
  result.recOrdergtcArray = nil;
  return self;
}
- (NSMutableArray *)recTrade {
  return result.recTradeArray;
}
- (TxTrade*)recTradeAtIndex:(NSUInteger)index {
  return [result recTradeAtIndex:index];
}
- (TradingMessage_Builder *)addRecTrade:(TxTrade*)value {
  if (result.recTradeArray == nil) {
    result.recTradeArray = [[NSMutableArray alloc]init];
  }
  [result.recTradeArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecTradeArray:(NSArray *)array {
  result.recTradeArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecTrade {
  result.recTradeArray = nil;
  return self;
}
- (NSMutableArray *)recNegoreceive {
  return result.recNegoreceiveArray;
}
- (TxOrder*)recNegoreceiveAtIndex:(NSUInteger)index {
  return [result recNegoreceiveAtIndex:index];
}
- (TradingMessage_Builder *)addRecNegoreceive:(TxOrder*)value {
  if (result.recNegoreceiveArray == nil) {
    result.recNegoreceiveArray = [[NSMutableArray alloc]init];
  }
  [result.recNegoreceiveArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecNegoreceiveArray:(NSArray *)array {
  result.recNegoreceiveArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecNegoreceive {
  result.recNegoreceiveArray = nil;
  return self;
}
- (NSMutableArray *)recOrderLifeCycle {
  return result.recOrderLifeCycleArray;
}
- (OrderLifeCycle*)recOrderLifeCycleAtIndex:(NSUInteger)index {
  return [result recOrderLifeCycleAtIndex:index];
}
- (TradingMessage_Builder *)addRecOrderLifeCycle:(OrderLifeCycle*)value {
  if (result.recOrderLifeCycleArray == nil) {
    result.recOrderLifeCycleArray = [[NSMutableArray alloc]init];
  }
  [result.recOrderLifeCycleArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecOrderLifeCycleArray:(NSArray *)array {
  result.recOrderLifeCycleArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecOrderLifeCycle {
  result.recOrderLifeCycleArray = nil;
  return self;
}
- (NSMutableArray *)recTradedetail {
  return result.recTradedetailArray;
}
- (TradeDetail*)recTradedetailAtIndex:(NSUInteger)index {
  return [result recTradedetailAtIndex:index];
}
- (TradingMessage_Builder *)addRecTradedetail:(TradeDetail*)value {
  if (result.recTradedetailArray == nil) {
    result.recTradedetailArray = [[NSMutableArray alloc]init];
  }
  [result.recTradedetailArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecTradedetailArray:(NSArray *)array {
  result.recTradedetailArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecTradedetail {
  result.recTradedetailArray = nil;
  return self;
}
- (NSMutableArray *)recMarginAlert {
  return result.recMarginAlertArray;
}
- (MarginAlert*)recMarginAlertAtIndex:(NSUInteger)index {
  return [result recMarginAlertAtIndex:index];
}
- (TradingMessage_Builder *)addRecMarginAlert:(MarginAlert*)value {
  if (result.recMarginAlertArray == nil) {
    result.recMarginAlertArray = [[NSMutableArray alloc]init];
  }
  [result.recMarginAlertArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecMarginAlertArray:(NSArray *)array {
  result.recMarginAlertArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecMarginAlert {
  result.recMarginAlertArray = nil;
  return self;
}
- (BOOL) hasRecAccountInfo {
  return result.hasRecAccountInfo;
}
- (AccountInfo*) recAccountInfo {
  return result.recAccountInfo;
}
- (TradingMessage_Builder*) setRecAccountInfo:(AccountInfo*) value {
  result.hasRecAccountInfo = YES;
  result.recAccountInfo = value;
  return self;
}
- (TradingMessage_Builder*) setRecAccountInfoBuilder:(AccountInfo_Builder*) builderForValue {
  return [self setRecAccountInfo:[builderForValue build]];
}
- (TradingMessage_Builder*) mergeRecAccountInfo:(AccountInfo*) value {
  if (result.hasRecAccountInfo &&
      result.recAccountInfo != [AccountInfo defaultInstance]) {
    result.recAccountInfo =
      [[[AccountInfo builderWithPrototype:result.recAccountInfo] mergeFrom:value] buildPartial];
  } else {
    result.recAccountInfo = value;
  }
  result.hasRecAccountInfo = YES;
  return self;
}
- (TradingMessage_Builder*) clearRecAccountInfo {
  result.hasRecAccountInfo = NO;
  result.recAccountInfo = [AccountInfo defaultInstance];
  return self;
}
- (BOOL) hasRecType {
  return result.hasRecType;
}
- (RecordType) recType {
  return result.recType;
}
- (TradingMessage_Builder*) setRecType:(RecordType) value {
  result.hasRecType = YES;
  result.recType = value;
  return self;
}
- (TradingMessage_Builder*) clearRecType {
  result.hasRecType = NO;
  result.recType = RecordTypeIdxTradingStatus;
  return self;
}
- (BOOL) hasRecStatusReturn {
  return result.hasRecStatusReturn;
}
- (StatusReturn) recStatusReturn {
  return result.recStatusReturn;
}
- (TradingMessage_Builder*) setRecStatusReturn:(StatusReturn) value {
  result.hasRecStatusReturn = YES;
  result.recStatusReturn = value;
  return self;
}
- (TradingMessage_Builder*) clearRecStatusReturn {
  result.hasRecStatusReturn = NO;
  result.recStatusReturn = StatusReturnNoresult;
  return self;
}
- (BOOL) hasRecStatusMessage {
  return result.hasRecStatusMessage;
}
- (NSString*) recStatusMessage {
  return result.recStatusMessage;
}
- (TradingMessage_Builder*) setRecStatusMessage:(NSString*) value {
  result.hasRecStatusMessage = YES;
  result.recStatusMessage = value;
  return self;
}
- (TradingMessage_Builder*) clearRecStatusMessage {
  result.hasRecStatusMessage = NO;
  result.recStatusMessage = @"";
  return self;
}
- (BOOL) hasRecTime {
  return result.hasRecTime;
}
- (NSString*) recTime {
  return result.recTime;
}
- (TradingMessage_Builder*) setRecTime:(NSString*) value {
  result.hasRecTime = YES;
  result.recTime = value;
  return self;
}
- (TradingMessage_Builder*) clearRecTime {
  result.hasRecTime = NO;
  result.recTime = @"";
  return self;
}
- (NSMutableArray *)recPortfolio {
  return result.recPortfolioArray;
}
- (Portfolio*)recPortfolioAtIndex:(NSUInteger)index {
  return [result recPortfolioAtIndex:index];
}
- (TradingMessage_Builder *)addRecPortfolio:(Portfolio*)value {
  if (result.recPortfolioArray == nil) {
    result.recPortfolioArray = [[NSMutableArray alloc]init];
  }
  [result.recPortfolioArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecPortfolioArray:(NSArray *)array {
  result.recPortfolioArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecPortfolio {
  result.recPortfolioArray = nil;
  return self;
}
- (BOOL) hasRecStockInHand {
  return result.hasRecStockInHand;
}
- (Float64) recStockInHand {
  return result.recStockInHand;
}
- (TradingMessage_Builder*) setRecStockInHand:(Float64) value {
  result.hasRecStockInHand = YES;
  result.recStockInHand = value;
  return self;
}
- (TradingMessage_Builder*) clearRecStockInHand {
  result.hasRecStockInHand = NO;
  result.recStockInHand = 0;
  return self;
}
- (BOOL) hasRecRiskControl {
  return result.hasRecRiskControl;
}
- (int32_t) recRiskControl {
  return result.recRiskControl;
}
- (TradingMessage_Builder*) setRecRiskControl:(int32_t) value {
  result.hasRecRiskControl = YES;
  result.recRiskControl = value;
  return self;
}
- (TradingMessage_Builder*) clearRecRiskControl {
  result.hasRecRiskControl = NO;
  result.recRiskControl = 0;
  return self;
}
- (BOOL) hasRecCashMutation {
  return result.hasRecCashMutation;
}
- (CashMutation*) recCashMutation {
  return result.recCashMutation;
}
- (TradingMessage_Builder*) setRecCashMutation:(CashMutation*) value {
  result.hasRecCashMutation = YES;
  result.recCashMutation = value;
  return self;
}
- (TradingMessage_Builder*) setRecCashMutationBuilder:(CashMutation_Builder*) builderForValue {
  return [self setRecCashMutation:[builderForValue build]];
}
- (TradingMessage_Builder*) mergeRecCashMutation:(CashMutation*) value {
  if (result.hasRecCashMutation &&
      result.recCashMutation != [CashMutation defaultInstance]) {
    result.recCashMutation =
      [[[CashMutation builderWithPrototype:result.recCashMutation] mergeFrom:value] buildPartial];
  } else {
    result.recCashMutation = value;
  }
  result.hasRecCashMutation = YES;
  return self;
}
- (TradingMessage_Builder*) clearRecCashMutation {
  result.hasRecCashMutation = NO;
  result.recCashMutation = [CashMutation defaultInstance];
  return self;
}
- (NSMutableArray *)recCustomerExposure {
  return result.recCustomerExposureArray;
}
- (CustomerExposure*)recCustomerExposureAtIndex:(NSUInteger)index {
  return [result recCustomerExposureAtIndex:index];
}
- (TradingMessage_Builder *)addRecCustomerExposure:(CustomerExposure*)value {
  if (result.recCustomerExposureArray == nil) {
    result.recCustomerExposureArray = [[NSMutableArray alloc]init];
  }
  [result.recCustomerExposureArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecCustomerExposureArray:(NSArray *)array {
  result.recCustomerExposureArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecCustomerExposure {
  result.recCustomerExposureArray = nil;
  return self;
}
- (NSMutableArray *)recAdvlist {
  return result.recAdvlistArray;
}
- (TxOrder*)recAdvlistAtIndex:(NSUInteger)index {
  return [result recAdvlistAtIndex:index];
}
- (TradingMessage_Builder *)addRecAdvlist:(TxOrder*)value {
  if (result.recAdvlistArray == nil) {
    result.recAdvlistArray = [[NSMutableArray alloc]init];
  }
  [result.recAdvlistArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecAdvlistArray:(NSArray *)array {
  result.recAdvlistArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecAdvlist {
  result.recAdvlistArray = nil;
  return self;
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (TradingMessage_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (TradingMessage_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (NSMutableArray *)recGrouporder {
  return result.recGrouporderArray;
}
- (GroupOrder*)recGrouporderAtIndex:(NSUInteger)index {
  return [result recGrouporderAtIndex:index];
}
- (TradingMessage_Builder *)addRecGrouporder:(GroupOrder*)value {
  if (result.recGrouporderArray == nil) {
    result.recGrouporderArray = [[NSMutableArray alloc]init];
  }
  [result.recGrouporderArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecGrouporderArray:(NSArray *)array {
  result.recGrouporderArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecGrouporder {
  result.recGrouporderArray = nil;
  return self;
}
- (NSMutableArray *)recGrouporderDetail {
  return result.recGrouporderDetailArray;
}
- (GroupOrderDetail*)recGrouporderDetailAtIndex:(NSUInteger)index {
  return [result recGrouporderDetailAtIndex:index];
}
- (TradingMessage_Builder *)addRecGrouporderDetail:(GroupOrderDetail*)value {
  if (result.recGrouporderDetailArray == nil) {
    result.recGrouporderDetailArray = [[NSMutableArray alloc]init];
  }
  [result.recGrouporderDetailArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecGrouporderDetailArray:(NSArray *)array {
  result.recGrouporderDetailArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecGrouporderDetail {
  result.recGrouporderDetailArray = nil;
  return self;
}
- (NSMutableArray *)recClientOverdue {
  return result.recClientOverdueArray;
}
- (ClientOverdue*)recClientOverdueAtIndex:(NSUInteger)index {
  return [result recClientOverdueAtIndex:index];
}
- (TradingMessage_Builder *)addRecClientOverdue:(ClientOverdue*)value {
  if (result.recClientOverdueArray == nil) {
    result.recClientOverdueArray = [[NSMutableArray alloc]init];
  }
  [result.recClientOverdueArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecClientOverdueArray:(NSArray *)array {
  result.recClientOverdueArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecClientOverdue {
  result.recClientOverdueArray = nil;
  return self;
}
- (NSMutableArray *)recHoliday {
  return result.recHolidayArray;
}
- (MasterData*)recHolidayAtIndex:(NSUInteger)index {
  return [result recHolidayAtIndex:index];
}
- (TradingMessage_Builder *)addRecHoliday:(MasterData*)value {
  if (result.recHolidayArray == nil) {
    result.recHolidayArray = [[NSMutableArray alloc]init];
  }
  [result.recHolidayArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecHolidayArray:(NSArray *)array {
  result.recHolidayArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecHoliday {
  result.recHolidayArray = nil;
  return self;
}
- (NSMutableArray *)recBranch {
  return result.recBranchArray;
}
- (MasterBranch*)recBranchAtIndex:(NSUInteger)index {
  return [result recBranchAtIndex:index];
}
- (TradingMessage_Builder *)addRecBranch:(MasterBranch*)value {
  if (result.recBranchArray == nil) {
    result.recBranchArray = [[NSMutableArray alloc]init];
  }
  [result.recBranchArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecBranchArray:(NSArray *)array {
  result.recBranchArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecBranch {
  result.recBranchArray = nil;
  return self;
}
- (NSMutableArray *)recUserlist {
  return result.recUserlistArray;
}
- (MasterUserlist*)recUserlistAtIndex:(NSUInteger)index {
  return [result recUserlistAtIndex:index];
}
- (TradingMessage_Builder *)addRecUserlist:(MasterUserlist*)value {
  if (result.recUserlistArray == nil) {
    result.recUserlistArray = [[NSMutableArray alloc]init];
  }
  [result.recUserlistArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecUserlistArray:(NSArray *)array {
  result.recUserlistArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecUserlist {
  result.recUserlistArray = nil;
  return self;
}
- (BOOL) hasRecAutomaticShortsell {
  return result.hasRecAutomaticShortsell;
}
- (int32_t) recAutomaticShortsell {
  return result.recAutomaticShortsell;
}
- (TradingMessage_Builder*) setRecAutomaticShortsell:(int32_t) value {
  result.hasRecAutomaticShortsell = YES;
  result.recAutomaticShortsell = value;
  return self;
}
- (TradingMessage_Builder*) clearRecAutomaticShortsell {
  result.hasRecAutomaticShortsell = NO;
  result.recAutomaticShortsell = 0;
  return self;
}
- (NSMutableArray *)recOrderconditional {
  return result.recOrderconditionalArray;
}
- (OrderConditional*)recOrderconditionalAtIndex:(NSUInteger)index {
  return [result recOrderconditionalAtIndex:index];
}
- (TradingMessage_Builder *)addRecOrderconditional:(OrderConditional*)value {
  if (result.recOrderconditionalArray == nil) {
    result.recOrderconditionalArray = [[NSMutableArray alloc]init];
  }
  [result.recOrderconditionalArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecOrderconditionalArray:(NSArray *)array {
  result.recOrderconditionalArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecOrderconditional {
  result.recOrderconditionalArray = nil;
  return self;
}
- (NSMutableArray *)recTradingtarget {
  return result.recTradingtargetArray;
}
- (TradingTarget*)recTradingtargetAtIndex:(NSUInteger)index {
  return [result recTradingtargetAtIndex:index];
}
- (TradingMessage_Builder *)addRecTradingtarget:(TradingTarget*)value {
  if (result.recTradingtargetArray == nil) {
    result.recTradingtargetArray = [[NSMutableArray alloc]init];
  }
  [result.recTradingtargetArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecTradingtargetArray:(NSArray *)array {
  result.recTradingtargetArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecTradingtarget {
  result.recTradingtargetArray = nil;
  return self;
}
- (NSMutableArray *)recCashflow {
  return result.recCashflowArray;
}
- (CashFlow*)recCashflowAtIndex:(NSUInteger)index {
  return [result recCashflowAtIndex:index];
}
- (TradingMessage_Builder *)addRecCashflow:(CashFlow*)value {
  if (result.recCashflowArray == nil) {
    result.recCashflowArray = [[NSMutableArray alloc]init];
  }
  [result.recCashflowArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecCashflowArray:(NSArray *)array {
  result.recCashflowArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecCashflow {
  result.recCashflowArray = nil;
  return self;
}
- (NSMutableArray *)recPotonganpajak {
  return result.recPotonganpajakArray;
}
- (PotonganPajak*)recPotonganpajakAtIndex:(NSUInteger)index {
  return [result recPotonganpajakAtIndex:index];
}
- (TradingMessage_Builder *)addRecPotonganpajak:(PotonganPajak*)value {
  if (result.recPotonganpajakArray == nil) {
    result.recPotonganpajakArray = [[NSMutableArray alloc]init];
  }
  [result.recPotonganpajakArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecPotonganpajakArray:(NSArray *)array {
  result.recPotonganpajakArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecPotonganpajak {
  result.recPotonganpajakArray = nil;
  return self;
}
- (NSMutableArray *)recOrdermobile {
  return result.recOrdermobileArray;
}
- (OrderMobile*)recOrdermobileAtIndex:(NSUInteger)index {
  return [result recOrdermobileAtIndex:index];
}
- (TradingMessage_Builder *)addRecOrdermobile:(OrderMobile*)value {
  if (result.recOrdermobileArray == nil) {
    result.recOrdermobileArray = [[NSMutableArray alloc]init];
  }
  [result.recOrdermobileArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecOrdermobileArray:(NSArray *)array {
  result.recOrdermobileArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecOrdermobile {
  result.recOrdermobileArray = nil;
  return self;
}
- (BOOL) hasRecGeneralMessage {
  return result.hasRecGeneralMessage;
}
- (NSString*) recGeneralMessage {
  return result.recGeneralMessage;
}
- (TradingMessage_Builder*) setRecGeneralMessage:(NSString*) value {
  result.hasRecGeneralMessage = YES;
  result.recGeneralMessage = value;
  return self;
}
- (TradingMessage_Builder*) clearRecGeneralMessage {
  result.hasRecGeneralMessage = NO;
  result.recGeneralMessage = @"";
  return self;
}
- (NSMutableArray *)recUnregularStocklist {
  return result.recUnregularStocklistArray;
}
- (UnregularStocklist*)recUnregularStocklistAtIndex:(NSUInteger)index {
  return [result recUnregularStocklistAtIndex:index];
}
- (TradingMessage_Builder *)addRecUnregularStocklist:(UnregularStocklist*)value {
  if (result.recUnregularStocklistArray == nil) {
    result.recUnregularStocklistArray = [[NSMutableArray alloc]init];
  }
  [result.recUnregularStocklistArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecUnregularStocklistArray:(NSArray *)array {
  result.recUnregularStocklistArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecUnregularStocklist {
  result.recUnregularStocklistArray = nil;
  return self;
}
- (NSMutableArray *)recRdnList {
  return result.recRdnListArray;
}
- (RDNList*)recRdnListAtIndex:(NSUInteger)index {
  return [result recRdnListAtIndex:index];
}
- (TradingMessage_Builder *)addRecRdnList:(RDNList*)value {
  if (result.recRdnListArray == nil) {
    result.recRdnListArray = [[NSMutableArray alloc]init];
  }
  [result.recRdnListArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecRdnListArray:(NSArray *)array {
  result.recRdnListArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecRdnList {
  result.recRdnListArray = nil;
  return self;
}
- (BOOL) hasRdn {
  return result.hasRdn;
}
- (NSString*) rdn {
  return result.rdn;
}
- (TradingMessage_Builder*) setRdn:(NSString*) value {
  result.hasRdn = YES;
  result.rdn = value;
  return self;
}
- (TradingMessage_Builder*) clearRdn {
  result.hasRdn = NO;
  result.rdn = @"";
  return self;
}
- (BOOL) hasEffectiveDate {
  return result.hasEffectiveDate;
}
- (int32_t) effectiveDate {
  return result.effectiveDate;
}
- (TradingMessage_Builder*) setEffectiveDate:(int32_t) value {
  result.hasEffectiveDate = YES;
  result.effectiveDate = value;
  return self;
}
- (TradingMessage_Builder*) clearEffectiveDate {
  result.hasEffectiveDate = NO;
  result.effectiveDate = 0;
  return self;
}
- (BOOL) hasRecCashWithdraw {
  return result.hasRecCashWithdraw;
}
- (CashWithdraw*) recCashWithdraw {
  return result.recCashWithdraw;
}
- (TradingMessage_Builder*) setRecCashWithdraw:(CashWithdraw*) value {
  result.hasRecCashWithdraw = YES;
  result.recCashWithdraw = value;
  return self;
}
- (TradingMessage_Builder*) setRecCashWithdrawBuilder:(CashWithdraw_Builder*) builderForValue {
  return [self setRecCashWithdraw:[builderForValue build]];
}
- (TradingMessage_Builder*) mergeRecCashWithdraw:(CashWithdraw*) value {
  if (result.hasRecCashWithdraw &&
      result.recCashWithdraw != [CashWithdraw defaultInstance]) {
    result.recCashWithdraw =
      [[[CashWithdraw builderWithPrototype:result.recCashWithdraw] mergeFrom:value] buildPartial];
  } else {
    result.recCashWithdraw = value;
  }
  result.hasRecCashWithdraw = YES;
  return self;
}
- (TradingMessage_Builder*) clearRecCashWithdraw {
  result.hasRecCashWithdraw = NO;
  result.recCashWithdraw = [CashWithdraw defaultInstance];
  return self;
}
- (NSMutableArray *)recCashWithdrawList {
  return result.recCashWithdrawListArray;
}
- (CashWithdraw*)recCashWithdrawListAtIndex:(NSUInteger)index {
  return [result recCashWithdrawListAtIndex:index];
}
- (TradingMessage_Builder *)addRecCashWithdrawList:(CashWithdraw*)value {
  if (result.recCashWithdrawListArray == nil) {
    result.recCashWithdrawListArray = [[NSMutableArray alloc]init];
  }
  [result.recCashWithdrawListArray addObject:value];
  return self;
}
- (TradingMessage_Builder *)setRecCashWithdrawListArray:(NSArray *)array {
  result.recCashWithdrawListArray = [[NSMutableArray alloc]init];
  return self;
}
- (TradingMessage_Builder *)clearRecCashWithdrawList {
  result.recCashWithdrawListArray = nil;
  return self;
}
@end

@interface MasterBranch ()
@property (strong) NSString* code;
@property (strong) NSString* branchname;
@end

@implementation MasterBranch

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasBranchname {
  return !!hasBranchname_;
}
- (void) setHasBranchname:(BOOL) value {
  hasBranchname_ = !!value;
}
@synthesize branchname;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.branchname = @"";
  }
  return self;
}
static MasterBranch* defaultMasterBranchInstance = nil;
+ (void) initialize {
  if (self == [MasterBranch class]) {
    defaultMasterBranchInstance = [[MasterBranch alloc] init];
  }
}
+ (MasterBranch*) defaultInstance {
  return defaultMasterBranchInstance;
}
- (MasterBranch*) defaultInstance {
  return defaultMasterBranchInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasBranchname) {
    [output writeString:2 value:self.branchname];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasBranchname) {
    size += computeStringSize(2, self.branchname);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MasterBranch*) parseFromData:(NSData*) data {
  return (MasterBranch*)[[[MasterBranch builder] mergeFromData:data] build];
}
+ (MasterBranch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterBranch*)[[[MasterBranch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MasterBranch*) parseFromInputStream:(NSInputStream*) input {
  return (MasterBranch*)[[[MasterBranch builder] mergeFromInputStream:input] build];
}
+ (MasterBranch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterBranch*)[[[MasterBranch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MasterBranch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MasterBranch*)[[[MasterBranch builder] mergeFromCodedInputStream:input] build];
}
+ (MasterBranch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterBranch*)[[[MasterBranch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MasterBranch_Builder*) builder {
  return [[MasterBranch_Builder alloc] init];
}
+ (MasterBranch_Builder*) builderWithPrototype:(MasterBranch*) prototype {
  return [[MasterBranch builder] mergeFrom:prototype];
}
- (MasterBranch_Builder*) builder {
  return [MasterBranch builder];
}
- (MasterBranch_Builder*) toBuilder {
  return [MasterBranch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasBranchname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"branchname", self.branchname];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MasterBranch class]]) {
    return NO;
  }
  MasterBranch *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasBranchname == otherMessage.hasBranchname &&
      (!self.hasBranchname || [self.branchname isEqual:otherMessage.branchname]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasBranchname) {
    hashCode = hashCode * 31 + [self.branchname hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MasterBranch_Builder()
@property (strong) MasterBranch* result;
@end

@implementation MasterBranch_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MasterBranch alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MasterBranch_Builder*) clear {
  self.result = [[MasterBranch alloc] init];
  return self;
}
- (MasterBranch_Builder*) clone {
  return [MasterBranch builderWithPrototype:result];
}
- (MasterBranch*) defaultInstance {
  return [MasterBranch defaultInstance];
}
- (MasterBranch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MasterBranch*) buildPartial {
  MasterBranch* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MasterBranch_Builder*) mergeFrom:(MasterBranch*) other {
  if (other == [MasterBranch defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasBranchname) {
    [self setBranchname:other.branchname];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MasterBranch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MasterBranch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setBranchname:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (MasterBranch_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (MasterBranch_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasBranchname {
  return result.hasBranchname;
}
- (NSString*) branchname {
  return result.branchname;
}
- (MasterBranch_Builder*) setBranchname:(NSString*) value {
  result.hasBranchname = YES;
  result.branchname = value;
  return self;
}
- (MasterBranch_Builder*) clearBranchname {
  result.hasBranchname = NO;
  result.branchname = @"";
  return self;
}
@end

@interface MasterUserlist ()
@property (strong) NSString* username;
@property (strong) NSString* fullname;
@property (strong) NSString* usertype;
@property (strong) NSString* officercode;
@property (strong) NSString* branchmanager;
@property (strong) NSString* csBranch;
@end

@implementation MasterUserlist

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasFullname {
  return !!hasFullname_;
}
- (void) setHasFullname:(BOOL) value {
  hasFullname_ = !!value;
}
@synthesize fullname;
- (BOOL) hasUsertype {
  return !!hasUsertype_;
}
- (void) setHasUsertype:(BOOL) value {
  hasUsertype_ = !!value;
}
@synthesize usertype;
- (BOOL) hasOfficercode {
  return !!hasOfficercode_;
}
- (void) setHasOfficercode:(BOOL) value {
  hasOfficercode_ = !!value;
}
@synthesize officercode;
- (BOOL) hasBranchmanager {
  return !!hasBranchmanager_;
}
- (void) setHasBranchmanager:(BOOL) value {
  hasBranchmanager_ = !!value;
}
@synthesize branchmanager;
- (BOOL) hasCsBranch {
  return !!hasCsBranch_;
}
- (void) setHasCsBranch:(BOOL) value {
  hasCsBranch_ = !!value;
}
@synthesize csBranch;
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.fullname = @"";
    self.usertype = @"";
    self.officercode = @"";
    self.branchmanager = @"";
    self.csBranch = @"";
  }
  return self;
}
static MasterUserlist* defaultMasterUserlistInstance = nil;
+ (void) initialize {
  if (self == [MasterUserlist class]) {
    defaultMasterUserlistInstance = [[MasterUserlist alloc] init];
  }
}
+ (MasterUserlist*) defaultInstance {
  return defaultMasterUserlistInstance;
}
- (MasterUserlist*) defaultInstance {
  return defaultMasterUserlistInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasFullname) {
    [output writeString:2 value:self.fullname];
  }
  if (self.hasUsertype) {
    [output writeString:3 value:self.usertype];
  }
  if (self.hasOfficercode) {
    [output writeString:4 value:self.officercode];
  }
  if (self.hasBranchmanager) {
    [output writeString:5 value:self.branchmanager];
  }
  if (self.hasCsBranch) {
    [output writeString:6 value:self.csBranch];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsername) {
    size += computeStringSize(1, self.username);
  }
  if (self.hasFullname) {
    size += computeStringSize(2, self.fullname);
  }
  if (self.hasUsertype) {
    size += computeStringSize(3, self.usertype);
  }
  if (self.hasOfficercode) {
    size += computeStringSize(4, self.officercode);
  }
  if (self.hasBranchmanager) {
    size += computeStringSize(5, self.branchmanager);
  }
  if (self.hasCsBranch) {
    size += computeStringSize(6, self.csBranch);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MasterUserlist*) parseFromData:(NSData*) data {
  return (MasterUserlist*)[[[MasterUserlist builder] mergeFromData:data] build];
}
+ (MasterUserlist*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterUserlist*)[[[MasterUserlist builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MasterUserlist*) parseFromInputStream:(NSInputStream*) input {
  return (MasterUserlist*)[[[MasterUserlist builder] mergeFromInputStream:input] build];
}
+ (MasterUserlist*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterUserlist*)[[[MasterUserlist builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MasterUserlist*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MasterUserlist*)[[[MasterUserlist builder] mergeFromCodedInputStream:input] build];
}
+ (MasterUserlist*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterUserlist*)[[[MasterUserlist builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MasterUserlist_Builder*) builder {
  return [[MasterUserlist_Builder alloc] init];
}
+ (MasterUserlist_Builder*) builderWithPrototype:(MasterUserlist*) prototype {
  return [[MasterUserlist builder] mergeFrom:prototype];
}
- (MasterUserlist_Builder*) builder {
  return [MasterUserlist builder];
}
- (MasterUserlist_Builder*) toBuilder {
  return [MasterUserlist builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasFullname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fullname", self.fullname];
  }
  if (self.hasUsertype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"usertype", self.usertype];
  }
  if (self.hasOfficercode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"officercode", self.officercode];
  }
  if (self.hasBranchmanager) {
    [output appendFormat:@"%@%@: %@\n", indent, @"branchmanager", self.branchmanager];
  }
  if (self.hasCsBranch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"csBranch", self.csBranch];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MasterUserlist class]]) {
    return NO;
  }
  MasterUserlist *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasFullname == otherMessage.hasFullname &&
      (!self.hasFullname || [self.fullname isEqual:otherMessage.fullname]) &&
      self.hasUsertype == otherMessage.hasUsertype &&
      (!self.hasUsertype || [self.usertype isEqual:otherMessage.usertype]) &&
      self.hasOfficercode == otherMessage.hasOfficercode &&
      (!self.hasOfficercode || [self.officercode isEqual:otherMessage.officercode]) &&
      self.hasBranchmanager == otherMessage.hasBranchmanager &&
      (!self.hasBranchmanager || [self.branchmanager isEqual:otherMessage.branchmanager]) &&
      self.hasCsBranch == otherMessage.hasCsBranch &&
      (!self.hasCsBranch || [self.csBranch isEqual:otherMessage.csBranch]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasFullname) {
    hashCode = hashCode * 31 + [self.fullname hash];
  }
  if (self.hasUsertype) {
    hashCode = hashCode * 31 + [self.usertype hash];
  }
  if (self.hasOfficercode) {
    hashCode = hashCode * 31 + [self.officercode hash];
  }
  if (self.hasBranchmanager) {
    hashCode = hashCode * 31 + [self.branchmanager hash];
  }
  if (self.hasCsBranch) {
    hashCode = hashCode * 31 + [self.csBranch hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MasterUserlist_Builder()
@property (strong) MasterUserlist* result;
@end

@implementation MasterUserlist_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MasterUserlist alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MasterUserlist_Builder*) clear {
  self.result = [[MasterUserlist alloc] init];
  return self;
}
- (MasterUserlist_Builder*) clone {
  return [MasterUserlist builderWithPrototype:result];
}
- (MasterUserlist*) defaultInstance {
  return [MasterUserlist defaultInstance];
}
- (MasterUserlist*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MasterUserlist*) buildPartial {
  MasterUserlist* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MasterUserlist_Builder*) mergeFrom:(MasterUserlist*) other {
  if (other == [MasterUserlist defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasFullname) {
    [self setFullname:other.fullname];
  }
  if (other.hasUsertype) {
    [self setUsertype:other.usertype];
  }
  if (other.hasOfficercode) {
    [self setOfficercode:other.officercode];
  }
  if (other.hasBranchmanager) {
    [self setBranchmanager:other.branchmanager];
  }
  if (other.hasCsBranch) {
    [self setCsBranch:other.csBranch];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MasterUserlist_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MasterUserlist_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setFullname:[input readString]];
        break;
      }
      case 26: {
        [self setUsertype:[input readString]];
        break;
      }
      case 34: {
        [self setOfficercode:[input readString]];
        break;
      }
      case 42: {
        [self setBranchmanager:[input readString]];
        break;
      }
      case 50: {
        [self setCsBranch:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (MasterUserlist_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (MasterUserlist_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasFullname {
  return result.hasFullname;
}
- (NSString*) fullname {
  return result.fullname;
}
- (MasterUserlist_Builder*) setFullname:(NSString*) value {
  result.hasFullname = YES;
  result.fullname = value;
  return self;
}
- (MasterUserlist_Builder*) clearFullname {
  result.hasFullname = NO;
  result.fullname = @"";
  return self;
}
- (BOOL) hasUsertype {
  return result.hasUsertype;
}
- (NSString*) usertype {
  return result.usertype;
}
- (MasterUserlist_Builder*) setUsertype:(NSString*) value {
  result.hasUsertype = YES;
  result.usertype = value;
  return self;
}
- (MasterUserlist_Builder*) clearUsertype {
  result.hasUsertype = NO;
  result.usertype = @"";
  return self;
}
- (BOOL) hasOfficercode {
  return result.hasOfficercode;
}
- (NSString*) officercode {
  return result.officercode;
}
- (MasterUserlist_Builder*) setOfficercode:(NSString*) value {
  result.hasOfficercode = YES;
  result.officercode = value;
  return self;
}
- (MasterUserlist_Builder*) clearOfficercode {
  result.hasOfficercode = NO;
  result.officercode = @"";
  return self;
}
- (BOOL) hasBranchmanager {
  return result.hasBranchmanager;
}
- (NSString*) branchmanager {
  return result.branchmanager;
}
- (MasterUserlist_Builder*) setBranchmanager:(NSString*) value {
  result.hasBranchmanager = YES;
  result.branchmanager = value;
  return self;
}
- (MasterUserlist_Builder*) clearBranchmanager {
  result.hasBranchmanager = NO;
  result.branchmanager = @"";
  return self;
}
- (BOOL) hasCsBranch {
  return result.hasCsBranch;
}
- (NSString*) csBranch {
  return result.csBranch;
}
- (MasterUserlist_Builder*) setCsBranch:(NSString*) value {
  result.hasCsBranch = YES;
  result.csBranch = value;
  return self;
}
- (MasterUserlist_Builder*) clearCsBranch {
  result.hasCsBranch = NO;
  result.csBranch = @"";
  return self;
}
@end

@interface MasterData ()
@property int32_t idMaster;
@property (strong) NSString* description;
@end

@implementation MasterData

- (BOOL) hasIdMaster {
  return !!hasIdMaster_;
}
- (void) setHasIdMaster:(BOOL) value {
  hasIdMaster_ = !!value;
}
@synthesize idMaster;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (id) init {
  if ((self = [super init])) {
    self.idMaster = 0;
    self.description = @"";
  }
  return self;
}
static MasterData* defaultMasterDataInstance = nil;
+ (void) initialize {
  if (self == [MasterData class]) {
    defaultMasterDataInstance = [[MasterData alloc] init];
  }
}
+ (MasterData*) defaultInstance {
  return defaultMasterDataInstance;
}
- (MasterData*) defaultInstance {
  return defaultMasterDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDescription) {
    [output writeString:1 value:self.description];
  }
  if (self.hasIdMaster) {
    [output writeInt32:2 value:self.idMaster];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDescription) {
    size += computeStringSize(1, self.description);
  }
  if (self.hasIdMaster) {
    size += computeInt32Size(2, self.idMaster);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MasterData*) parseFromData:(NSData*) data {
  return (MasterData*)[[[MasterData builder] mergeFromData:data] build];
}
+ (MasterData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterData*)[[[MasterData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MasterData*) parseFromInputStream:(NSInputStream*) input {
  return (MasterData*)[[[MasterData builder] mergeFromInputStream:input] build];
}
+ (MasterData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterData*)[[[MasterData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MasterData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MasterData*)[[[MasterData builder] mergeFromCodedInputStream:input] build];
}
+ (MasterData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MasterData*)[[[MasterData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MasterData_Builder*) builder {
  return [[MasterData_Builder alloc] init];
}
+ (MasterData_Builder*) builderWithPrototype:(MasterData*) prototype {
  return [[MasterData builder] mergeFrom:prototype];
}
- (MasterData_Builder*) builder {
  return [MasterData builder];
}
- (MasterData_Builder*) toBuilder {
  return [MasterData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasIdMaster) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idMaster", [NSNumber numberWithInt:self.idMaster]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MasterData class]]) {
    return NO;
  }
  MasterData *otherMessage = other;
  return
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasIdMaster == otherMessage.hasIdMaster &&
      (!self.hasIdMaster || self.idMaster == otherMessage.idMaster) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasIdMaster) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.idMaster] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MasterData_Builder()
@property (strong) MasterData* result;
@end

@implementation MasterData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MasterData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MasterData_Builder*) clear {
  self.result = [[MasterData alloc] init];
  return self;
}
- (MasterData_Builder*) clone {
  return [MasterData builderWithPrototype:result];
}
- (MasterData*) defaultInstance {
  return [MasterData defaultInstance];
}
- (MasterData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MasterData*) buildPartial {
  MasterData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MasterData_Builder*) mergeFrom:(MasterData*) other {
  if (other == [MasterData defaultInstance]) {
    return self;
  }
  if (other.hasIdMaster) {
    [self setIdMaster:other.idMaster];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MasterData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MasterData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDescription:[input readString]];
        break;
      }
      case 16: {
        [self setIdMaster:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasIdMaster {
  return result.hasIdMaster;
}
- (int32_t) idMaster {
  return result.idMaster;
}
- (MasterData_Builder*) setIdMaster:(int32_t) value {
  result.hasIdMaster = YES;
  result.idMaster = value;
  return self;
}
- (MasterData_Builder*) clearIdMaster {
  result.hasIdMaster = NO;
  result.idMaster = 0;
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (MasterData_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (MasterData_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
@end

@interface MenuData ()
@property int32_t menuId;
@property int32_t appType;
@property (strong) NSString* menuName;
@property int32_t parentId;
@property int32_t weight;
@property int32_t depth;
@property (strong) NSString* shortcut;
@property int32_t maxWindow;
@property int32_t menuGroup;
@property int32_t enable;
@end

@implementation MenuData

- (BOOL) hasMenuId {
  return !!hasMenuId_;
}
- (void) setHasMenuId:(BOOL) value {
  hasMenuId_ = !!value;
}
@synthesize menuId;
- (BOOL) hasAppType {
  return !!hasAppType_;
}
- (void) setHasAppType:(BOOL) value {
  hasAppType_ = !!value;
}
@synthesize appType;
- (BOOL) hasMenuName {
  return !!hasMenuName_;
}
- (void) setHasMenuName:(BOOL) value {
  hasMenuName_ = !!value;
}
@synthesize menuName;
- (BOOL) hasParentId {
  return !!hasParentId_;
}
- (void) setHasParentId:(BOOL) value {
  hasParentId_ = !!value;
}
@synthesize parentId;
- (BOOL) hasWeight {
  return !!hasWeight_;
}
- (void) setHasWeight:(BOOL) value {
  hasWeight_ = !!value;
}
@synthesize weight;
- (BOOL) hasDepth {
  return !!hasDepth_;
}
- (void) setHasDepth:(BOOL) value {
  hasDepth_ = !!value;
}
@synthesize depth;
- (BOOL) hasShortcut {
  return !!hasShortcut_;
}
- (void) setHasShortcut:(BOOL) value {
  hasShortcut_ = !!value;
}
@synthesize shortcut;
- (BOOL) hasMaxWindow {
  return !!hasMaxWindow_;
}
- (void) setHasMaxWindow:(BOOL) value {
  hasMaxWindow_ = !!value;
}
@synthesize maxWindow;
- (BOOL) hasMenuGroup {
  return !!hasMenuGroup_;
}
- (void) setHasMenuGroup:(BOOL) value {
  hasMenuGroup_ = !!value;
}
@synthesize menuGroup;
- (BOOL) hasEnable {
  return !!hasEnable_;
}
- (void) setHasEnable:(BOOL) value {
  hasEnable_ = !!value;
}
@synthesize enable;
- (id) init {
  if ((self = [super init])) {
    self.menuId = 0;
    self.appType = 0;
    self.menuName = @"";
    self.parentId = 0;
    self.weight = 0;
    self.depth = 0;
    self.shortcut = @"";
    self.maxWindow = 0;
    self.menuGroup = 0;
    self.enable = 0;
  }
  return self;
}
static MenuData* defaultMenuDataInstance = nil;
+ (void) initialize {
  if (self == [MenuData class]) {
    defaultMenuDataInstance = [[MenuData alloc] init];
  }
}
+ (MenuData*) defaultInstance {
  return defaultMenuDataInstance;
}
- (MenuData*) defaultInstance {
  return defaultMenuDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppType) {
    [output writeInt32:1 value:self.appType];
  }
  if (self.hasMenuName) {
    [output writeString:2 value:self.menuName];
  }
  if (self.hasParentId) {
    [output writeInt32:3 value:self.parentId];
  }
  if (self.hasWeight) {
    [output writeInt32:4 value:self.weight];
  }
  if (self.hasDepth) {
    [output writeInt32:5 value:self.depth];
  }
  if (self.hasShortcut) {
    [output writeString:6 value:self.shortcut];
  }
  if (self.hasMaxWindow) {
    [output writeInt32:7 value:self.maxWindow];
  }
  if (self.hasMenuGroup) {
    [output writeInt32:8 value:self.menuGroup];
  }
  if (self.hasEnable) {
    [output writeInt32:9 value:self.enable];
  }
  if (self.hasMenuId) {
    [output writeInt32:10 value:self.menuId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAppType) {
    size += computeInt32Size(1, self.appType);
  }
  if (self.hasMenuName) {
    size += computeStringSize(2, self.menuName);
  }
  if (self.hasParentId) {
    size += computeInt32Size(3, self.parentId);
  }
  if (self.hasWeight) {
    size += computeInt32Size(4, self.weight);
  }
  if (self.hasDepth) {
    size += computeInt32Size(5, self.depth);
  }
  if (self.hasShortcut) {
    size += computeStringSize(6, self.shortcut);
  }
  if (self.hasMaxWindow) {
    size += computeInt32Size(7, self.maxWindow);
  }
  if (self.hasMenuGroup) {
    size += computeInt32Size(8, self.menuGroup);
  }
  if (self.hasEnable) {
    size += computeInt32Size(9, self.enable);
  }
  if (self.hasMenuId) {
    size += computeInt32Size(10, self.menuId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MenuData*) parseFromData:(NSData*) data {
  return (MenuData*)[[[MenuData builder] mergeFromData:data] build];
}
+ (MenuData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MenuData*)[[[MenuData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MenuData*) parseFromInputStream:(NSInputStream*) input {
  return (MenuData*)[[[MenuData builder] mergeFromInputStream:input] build];
}
+ (MenuData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MenuData*)[[[MenuData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MenuData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MenuData*)[[[MenuData builder] mergeFromCodedInputStream:input] build];
}
+ (MenuData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MenuData*)[[[MenuData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MenuData_Builder*) builder {
  return [[MenuData_Builder alloc] init];
}
+ (MenuData_Builder*) builderWithPrototype:(MenuData*) prototype {
  return [[MenuData builder] mergeFrom:prototype];
}
- (MenuData_Builder*) builder {
  return [MenuData builder];
}
- (MenuData_Builder*) toBuilder {
  return [MenuData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasAppType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appType", [NSNumber numberWithInt:self.appType]];
  }
  if (self.hasMenuName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"menuName", self.menuName];
  }
  if (self.hasParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [NSNumber numberWithInt:self.parentId]];
  }
  if (self.hasWeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weight", [NSNumber numberWithInt:self.weight]];
  }
  if (self.hasDepth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"depth", [NSNumber numberWithInt:self.depth]];
  }
  if (self.hasShortcut) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortcut", self.shortcut];
  }
  if (self.hasMaxWindow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxWindow", [NSNumber numberWithInt:self.maxWindow]];
  }
  if (self.hasMenuGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"menuGroup", [NSNumber numberWithInt:self.menuGroup]];
  }
  if (self.hasEnable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enable", [NSNumber numberWithInt:self.enable]];
  }
  if (self.hasMenuId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"menuId", [NSNumber numberWithInt:self.menuId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MenuData class]]) {
    return NO;
  }
  MenuData *otherMessage = other;
  return
      self.hasAppType == otherMessage.hasAppType &&
      (!self.hasAppType || self.appType == otherMessage.appType) &&
      self.hasMenuName == otherMessage.hasMenuName &&
      (!self.hasMenuName || [self.menuName isEqual:otherMessage.menuName]) &&
      self.hasParentId == otherMessage.hasParentId &&
      (!self.hasParentId || self.parentId == otherMessage.parentId) &&
      self.hasWeight == otherMessage.hasWeight &&
      (!self.hasWeight || self.weight == otherMessage.weight) &&
      self.hasDepth == otherMessage.hasDepth &&
      (!self.hasDepth || self.depth == otherMessage.depth) &&
      self.hasShortcut == otherMessage.hasShortcut &&
      (!self.hasShortcut || [self.shortcut isEqual:otherMessage.shortcut]) &&
      self.hasMaxWindow == otherMessage.hasMaxWindow &&
      (!self.hasMaxWindow || self.maxWindow == otherMessage.maxWindow) &&
      self.hasMenuGroup == otherMessage.hasMenuGroup &&
      (!self.hasMenuGroup || self.menuGroup == otherMessage.menuGroup) &&
      self.hasEnable == otherMessage.hasEnable &&
      (!self.hasEnable || self.enable == otherMessage.enable) &&
      self.hasMenuId == otherMessage.hasMenuId &&
      (!self.hasMenuId || self.menuId == otherMessage.menuId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasAppType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.appType] hash];
  }
  if (self.hasMenuName) {
    hashCode = hashCode * 31 + [self.menuName hash];
  }
  if (self.hasParentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentId] hash];
  }
  if (self.hasWeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.weight] hash];
  }
  if (self.hasDepth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.depth] hash];
  }
  if (self.hasShortcut) {
    hashCode = hashCode * 31 + [self.shortcut hash];
  }
  if (self.hasMaxWindow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.maxWindow] hash];
  }
  if (self.hasMenuGroup) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.menuGroup] hash];
  }
  if (self.hasEnable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.enable] hash];
  }
  if (self.hasMenuId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.menuId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MenuData_Builder()
@property (strong) MenuData* result;
@end

@implementation MenuData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MenuData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MenuData_Builder*) clear {
  self.result = [[MenuData alloc] init];
  return self;
}
- (MenuData_Builder*) clone {
  return [MenuData builderWithPrototype:result];
}
- (MenuData*) defaultInstance {
  return [MenuData defaultInstance];
}
- (MenuData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MenuData*) buildPartial {
  MenuData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MenuData_Builder*) mergeFrom:(MenuData*) other {
  if (other == [MenuData defaultInstance]) {
    return self;
  }
  if (other.hasMenuId) {
    [self setMenuId:other.menuId];
  }
  if (other.hasAppType) {
    [self setAppType:other.appType];
  }
  if (other.hasMenuName) {
    [self setMenuName:other.menuName];
  }
  if (other.hasParentId) {
    [self setParentId:other.parentId];
  }
  if (other.hasWeight) {
    [self setWeight:other.weight];
  }
  if (other.hasDepth) {
    [self setDepth:other.depth];
  }
  if (other.hasShortcut) {
    [self setShortcut:other.shortcut];
  }
  if (other.hasMaxWindow) {
    [self setMaxWindow:other.maxWindow];
  }
  if (other.hasMenuGroup) {
    [self setMenuGroup:other.menuGroup];
  }
  if (other.hasEnable) {
    [self setEnable:other.enable];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MenuData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MenuData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAppType:[input readInt32]];
        break;
      }
      case 18: {
        [self setMenuName:[input readString]];
        break;
      }
      case 24: {
        [self setParentId:[input readInt32]];
        break;
      }
      case 32: {
        [self setWeight:[input readInt32]];
        break;
      }
      case 40: {
        [self setDepth:[input readInt32]];
        break;
      }
      case 50: {
        [self setShortcut:[input readString]];
        break;
      }
      case 56: {
        [self setMaxWindow:[input readInt32]];
        break;
      }
      case 64: {
        [self setMenuGroup:[input readInt32]];
        break;
      }
      case 72: {
        [self setEnable:[input readInt32]];
        break;
      }
      case 80: {
        [self setMenuId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMenuId {
  return result.hasMenuId;
}
- (int32_t) menuId {
  return result.menuId;
}
- (MenuData_Builder*) setMenuId:(int32_t) value {
  result.hasMenuId = YES;
  result.menuId = value;
  return self;
}
- (MenuData_Builder*) clearMenuId {
  result.hasMenuId = NO;
  result.menuId = 0;
  return self;
}
- (BOOL) hasAppType {
  return result.hasAppType;
}
- (int32_t) appType {
  return result.appType;
}
- (MenuData_Builder*) setAppType:(int32_t) value {
  result.hasAppType = YES;
  result.appType = value;
  return self;
}
- (MenuData_Builder*) clearAppType {
  result.hasAppType = NO;
  result.appType = 0;
  return self;
}
- (BOOL) hasMenuName {
  return result.hasMenuName;
}
- (NSString*) menuName {
  return result.menuName;
}
- (MenuData_Builder*) setMenuName:(NSString*) value {
  result.hasMenuName = YES;
  result.menuName = value;
  return self;
}
- (MenuData_Builder*) clearMenuName {
  result.hasMenuName = NO;
  result.menuName = @"";
  return self;
}
- (BOOL) hasParentId {
  return result.hasParentId;
}
- (int32_t) parentId {
  return result.parentId;
}
- (MenuData_Builder*) setParentId:(int32_t) value {
  result.hasParentId = YES;
  result.parentId = value;
  return self;
}
- (MenuData_Builder*) clearParentId {
  result.hasParentId = NO;
  result.parentId = 0;
  return self;
}
- (BOOL) hasWeight {
  return result.hasWeight;
}
- (int32_t) weight {
  return result.weight;
}
- (MenuData_Builder*) setWeight:(int32_t) value {
  result.hasWeight = YES;
  result.weight = value;
  return self;
}
- (MenuData_Builder*) clearWeight {
  result.hasWeight = NO;
  result.weight = 0;
  return self;
}
- (BOOL) hasDepth {
  return result.hasDepth;
}
- (int32_t) depth {
  return result.depth;
}
- (MenuData_Builder*) setDepth:(int32_t) value {
  result.hasDepth = YES;
  result.depth = value;
  return self;
}
- (MenuData_Builder*) clearDepth {
  result.hasDepth = NO;
  result.depth = 0;
  return self;
}
- (BOOL) hasShortcut {
  return result.hasShortcut;
}
- (NSString*) shortcut {
  return result.shortcut;
}
- (MenuData_Builder*) setShortcut:(NSString*) value {
  result.hasShortcut = YES;
  result.shortcut = value;
  return self;
}
- (MenuData_Builder*) clearShortcut {
  result.hasShortcut = NO;
  result.shortcut = @"";
  return self;
}
- (BOOL) hasMaxWindow {
  return result.hasMaxWindow;
}
- (int32_t) maxWindow {
  return result.maxWindow;
}
- (MenuData_Builder*) setMaxWindow:(int32_t) value {
  result.hasMaxWindow = YES;
  result.maxWindow = value;
  return self;
}
- (MenuData_Builder*) clearMaxWindow {
  result.hasMaxWindow = NO;
  result.maxWindow = 0;
  return self;
}
- (BOOL) hasMenuGroup {
  return result.hasMenuGroup;
}
- (int32_t) menuGroup {
  return result.menuGroup;
}
- (MenuData_Builder*) setMenuGroup:(int32_t) value {
  result.hasMenuGroup = YES;
  result.menuGroup = value;
  return self;
}
- (MenuData_Builder*) clearMenuGroup {
  result.hasMenuGroup = NO;
  result.menuGroup = 0;
  return self;
}
- (BOOL) hasEnable {
  return result.hasEnable;
}
- (int32_t) enable {
  return result.enable;
}
- (MenuData_Builder*) setEnable:(int32_t) value {
  result.hasEnable = YES;
  result.enable = value;
  return self;
}
- (MenuData_Builder*) clearEnable {
  result.hasEnable = NO;
  result.enable = 0;
  return self;
}
@end

@interface MarketCapping ()
@property Float64 capping;
@property Float64 marking;
@property (strong) NSString* type;
@property (strong) NSString* stockcode;
@property (strong) NSString* stockname;
@end

@implementation MarketCapping

- (BOOL) hasCapping {
  return !!hasCapping_;
}
- (void) setHasCapping:(BOOL) value {
  hasCapping_ = !!value;
}
@synthesize capping;
- (BOOL) hasMarking {
  return !!hasMarking_;
}
- (void) setHasMarking:(BOOL) value {
  hasMarking_ = !!value;
}
@synthesize marking;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasStockname {
  return !!hasStockname_;
}
- (void) setHasStockname:(BOOL) value {
  hasStockname_ = !!value;
}
@synthesize stockname;
- (id) init {
  if ((self = [super init])) {
    self.capping = 0;
    self.marking = 0;
    self.type = @"";
    self.stockcode = @"";
    self.stockname = @"";
  }
  return self;
}
static MarketCapping* defaultMarketCappingInstance = nil;
+ (void) initialize {
  if (self == [MarketCapping class]) {
    defaultMarketCappingInstance = [[MarketCapping alloc] init];
  }
}
+ (MarketCapping*) defaultInstance {
  return defaultMarketCappingInstance;
}
- (MarketCapping*) defaultInstance {
  return defaultMarketCappingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCapping) {
    [output writeDouble:1 value:self.capping];
  }
  if (self.hasMarking) {
    [output writeDouble:2 value:self.marking];
  }
  if (self.hasType) {
    [output writeString:3 value:self.type];
  }
  if (self.hasStockcode) {
    [output writeString:4 value:self.stockcode];
  }
  if (self.hasStockname) {
    [output writeString:5 value:self.stockname];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCapping) {
    size += computeDoubleSize(1, self.capping);
  }
  if (self.hasMarking) {
    size += computeDoubleSize(2, self.marking);
  }
  if (self.hasType) {
    size += computeStringSize(3, self.type);
  }
  if (self.hasStockcode) {
    size += computeStringSize(4, self.stockcode);
  }
  if (self.hasStockname) {
    size += computeStringSize(5, self.stockname);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MarketCapping*) parseFromData:(NSData*) data {
  return (MarketCapping*)[[[MarketCapping builder] mergeFromData:data] build];
}
+ (MarketCapping*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketCapping*)[[[MarketCapping builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MarketCapping*) parseFromInputStream:(NSInputStream*) input {
  return (MarketCapping*)[[[MarketCapping builder] mergeFromInputStream:input] build];
}
+ (MarketCapping*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketCapping*)[[[MarketCapping builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketCapping*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MarketCapping*)[[[MarketCapping builder] mergeFromCodedInputStream:input] build];
}
+ (MarketCapping*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketCapping*)[[[MarketCapping builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketCapping_Builder*) builder {
  return [[MarketCapping_Builder alloc] init];
}
+ (MarketCapping_Builder*) builderWithPrototype:(MarketCapping*) prototype {
  return [[MarketCapping builder] mergeFrom:prototype];
}
- (MarketCapping_Builder*) builder {
  return [MarketCapping builder];
}
- (MarketCapping_Builder*) toBuilder {
  return [MarketCapping builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCapping) {
    [output appendFormat:@"%@%@: %@\n", indent, @"capping", [NSNumber numberWithDouble:self.capping]];
  }
  if (self.hasMarking) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marking", [NSNumber numberWithDouble:self.marking]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasStockname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockname", self.stockname];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MarketCapping class]]) {
    return NO;
  }
  MarketCapping *otherMessage = other;
  return
      self.hasCapping == otherMessage.hasCapping &&
      (!self.hasCapping || self.capping == otherMessage.capping) &&
      self.hasMarking == otherMessage.hasMarking &&
      (!self.hasMarking || self.marking == otherMessage.marking) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasStockname == otherMessage.hasStockname &&
      (!self.hasStockname || [self.stockname isEqual:otherMessage.stockname]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCapping) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.capping] hash];
  }
  if (self.hasMarking) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.marking] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasStockname) {
    hashCode = hashCode * 31 + [self.stockname hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MarketCapping_Builder()
@property (strong) MarketCapping* result;
@end

@implementation MarketCapping_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MarketCapping alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MarketCapping_Builder*) clear {
  self.result = [[MarketCapping alloc] init];
  return self;
}
- (MarketCapping_Builder*) clone {
  return [MarketCapping builderWithPrototype:result];
}
- (MarketCapping*) defaultInstance {
  return [MarketCapping defaultInstance];
}
- (MarketCapping*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MarketCapping*) buildPartial {
  MarketCapping* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MarketCapping_Builder*) mergeFrom:(MarketCapping*) other {
  if (other == [MarketCapping defaultInstance]) {
    return self;
  }
  if (other.hasCapping) {
    [self setCapping:other.capping];
  }
  if (other.hasMarking) {
    [self setMarking:other.marking];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasStockname) {
    [self setStockname:other.stockname];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MarketCapping_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MarketCapping_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setCapping:[input readDouble]];
        break;
      }
      case 17: {
        [self setMarking:[input readDouble]];
        break;
      }
      case 26: {
        [self setType:[input readString]];
        break;
      }
      case 34: {
        [self setStockcode:[input readString]];
        break;
      }
      case 42: {
        [self setStockname:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCapping {
  return result.hasCapping;
}
- (Float64) capping {
  return result.capping;
}
- (MarketCapping_Builder*) setCapping:(Float64) value {
  result.hasCapping = YES;
  result.capping = value;
  return self;
}
- (MarketCapping_Builder*) clearCapping {
  result.hasCapping = NO;
  result.capping = 0;
  return self;
}
- (BOOL) hasMarking {
  return result.hasMarking;
}
- (Float64) marking {
  return result.marking;
}
- (MarketCapping_Builder*) setMarking:(Float64) value {
  result.hasMarking = YES;
  result.marking = value;
  return self;
}
- (MarketCapping_Builder*) clearMarking {
  result.hasMarking = NO;
  result.marking = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (MarketCapping_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MarketCapping_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (MarketCapping_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (MarketCapping_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasStockname {
  return result.hasStockname;
}
- (NSString*) stockname {
  return result.stockname;
}
- (MarketCapping_Builder*) setStockname:(NSString*) value {
  result.hasStockname = YES;
  result.stockname = value;
  return self;
}
- (MarketCapping_Builder*) clearStockname {
  result.hasStockname = NO;
  result.stockname = @"";
  return self;
}
@end

@interface SharesInfo ()
@property (strong) NSString* stockcode;
@property (strong) NSString* cltype;
@property (strong) NSString* regularBoard;
@property (strong) NSString* negotiatedBoard;
@property (strong) NSString* cashBoard;
@property (strong) NSString* crossingBoard;
@property (strong) NSString* regularTrx;
@property (strong) NSString* tplusTrx;
@property (strong) NSString* marginTrx;
@property (strong) NSString* preopeningFlag;
@end

@implementation SharesInfo

- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasCltype {
  return !!hasCltype_;
}
- (void) setHasCltype:(BOOL) value {
  hasCltype_ = !!value;
}
@synthesize cltype;
- (BOOL) hasRegularBoard {
  return !!hasRegularBoard_;
}
- (void) setHasRegularBoard:(BOOL) value {
  hasRegularBoard_ = !!value;
}
@synthesize regularBoard;
- (BOOL) hasNegotiatedBoard {
  return !!hasNegotiatedBoard_;
}
- (void) setHasNegotiatedBoard:(BOOL) value {
  hasNegotiatedBoard_ = !!value;
}
@synthesize negotiatedBoard;
- (BOOL) hasCashBoard {
  return !!hasCashBoard_;
}
- (void) setHasCashBoard:(BOOL) value {
  hasCashBoard_ = !!value;
}
@synthesize cashBoard;
- (BOOL) hasCrossingBoard {
  return !!hasCrossingBoard_;
}
- (void) setHasCrossingBoard:(BOOL) value {
  hasCrossingBoard_ = !!value;
}
@synthesize crossingBoard;
- (BOOL) hasRegularTrx {
  return !!hasRegularTrx_;
}
- (void) setHasRegularTrx:(BOOL) value {
  hasRegularTrx_ = !!value;
}
@synthesize regularTrx;
- (BOOL) hasTplusTrx {
  return !!hasTplusTrx_;
}
- (void) setHasTplusTrx:(BOOL) value {
  hasTplusTrx_ = !!value;
}
@synthesize tplusTrx;
- (BOOL) hasMarginTrx {
  return !!hasMarginTrx_;
}
- (void) setHasMarginTrx:(BOOL) value {
  hasMarginTrx_ = !!value;
}
@synthesize marginTrx;
- (BOOL) hasPreopeningFlag {
  return !!hasPreopeningFlag_;
}
- (void) setHasPreopeningFlag:(BOOL) value {
  hasPreopeningFlag_ = !!value;
}
@synthesize preopeningFlag;
- (id) init {
  if ((self = [super init])) {
    self.stockcode = @"";
    self.cltype = @"";
    self.regularBoard = @"";
    self.negotiatedBoard = @"";
    self.cashBoard = @"";
    self.crossingBoard = @"";
    self.regularTrx = @"";
    self.tplusTrx = @"";
    self.marginTrx = @"";
    self.preopeningFlag = @"";
  }
  return self;
}
static SharesInfo* defaultSharesInfoInstance = nil;
+ (void) initialize {
  if (self == [SharesInfo class]) {
    defaultSharesInfoInstance = [[SharesInfo alloc] init];
  }
}
+ (SharesInfo*) defaultInstance {
  return defaultSharesInfoInstance;
}
- (SharesInfo*) defaultInstance {
  return defaultSharesInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCltype) {
    [output writeString:1 value:self.cltype];
  }
  if (self.hasRegularBoard) {
    [output writeString:2 value:self.regularBoard];
  }
  if (self.hasNegotiatedBoard) {
    [output writeString:3 value:self.negotiatedBoard];
  }
  if (self.hasCashBoard) {
    [output writeString:4 value:self.cashBoard];
  }
  if (self.hasCrossingBoard) {
    [output writeString:5 value:self.crossingBoard];
  }
  if (self.hasRegularTrx) {
    [output writeString:6 value:self.regularTrx];
  }
  if (self.hasTplusTrx) {
    [output writeString:7 value:self.tplusTrx];
  }
  if (self.hasMarginTrx) {
    [output writeString:8 value:self.marginTrx];
  }
  if (self.hasPreopeningFlag) {
    [output writeString:9 value:self.preopeningFlag];
  }
  if (self.hasStockcode) {
    [output writeString:10 value:self.stockcode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCltype) {
    size += computeStringSize(1, self.cltype);
  }
  if (self.hasRegularBoard) {
    size += computeStringSize(2, self.regularBoard);
  }
  if (self.hasNegotiatedBoard) {
    size += computeStringSize(3, self.negotiatedBoard);
  }
  if (self.hasCashBoard) {
    size += computeStringSize(4, self.cashBoard);
  }
  if (self.hasCrossingBoard) {
    size += computeStringSize(5, self.crossingBoard);
  }
  if (self.hasRegularTrx) {
    size += computeStringSize(6, self.regularTrx);
  }
  if (self.hasTplusTrx) {
    size += computeStringSize(7, self.tplusTrx);
  }
  if (self.hasMarginTrx) {
    size += computeStringSize(8, self.marginTrx);
  }
  if (self.hasPreopeningFlag) {
    size += computeStringSize(9, self.preopeningFlag);
  }
  if (self.hasStockcode) {
    size += computeStringSize(10, self.stockcode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SharesInfo*) parseFromData:(NSData*) data {
  return (SharesInfo*)[[[SharesInfo builder] mergeFromData:data] build];
}
+ (SharesInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SharesInfo*)[[[SharesInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SharesInfo*) parseFromInputStream:(NSInputStream*) input {
  return (SharesInfo*)[[[SharesInfo builder] mergeFromInputStream:input] build];
}
+ (SharesInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SharesInfo*)[[[SharesInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SharesInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SharesInfo*)[[[SharesInfo builder] mergeFromCodedInputStream:input] build];
}
+ (SharesInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SharesInfo*)[[[SharesInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SharesInfo_Builder*) builder {
  return [[SharesInfo_Builder alloc] init];
}
+ (SharesInfo_Builder*) builderWithPrototype:(SharesInfo*) prototype {
  return [[SharesInfo builder] mergeFrom:prototype];
}
- (SharesInfo_Builder*) builder {
  return [SharesInfo builder];
}
- (SharesInfo_Builder*) toBuilder {
  return [SharesInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCltype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cltype", self.cltype];
  }
  if (self.hasRegularBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regularBoard", self.regularBoard];
  }
  if (self.hasNegotiatedBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negotiatedBoard", self.negotiatedBoard];
  }
  if (self.hasCashBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashBoard", self.cashBoard];
  }
  if (self.hasCrossingBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crossingBoard", self.crossingBoard];
  }
  if (self.hasRegularTrx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regularTrx", self.regularTrx];
  }
  if (self.hasTplusTrx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tplusTrx", self.tplusTrx];
  }
  if (self.hasMarginTrx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marginTrx", self.marginTrx];
  }
  if (self.hasPreopeningFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preopeningFlag", self.preopeningFlag];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SharesInfo class]]) {
    return NO;
  }
  SharesInfo *otherMessage = other;
  return
      self.hasCltype == otherMessage.hasCltype &&
      (!self.hasCltype || [self.cltype isEqual:otherMessage.cltype]) &&
      self.hasRegularBoard == otherMessage.hasRegularBoard &&
      (!self.hasRegularBoard || [self.regularBoard isEqual:otherMessage.regularBoard]) &&
      self.hasNegotiatedBoard == otherMessage.hasNegotiatedBoard &&
      (!self.hasNegotiatedBoard || [self.negotiatedBoard isEqual:otherMessage.negotiatedBoard]) &&
      self.hasCashBoard == otherMessage.hasCashBoard &&
      (!self.hasCashBoard || [self.cashBoard isEqual:otherMessage.cashBoard]) &&
      self.hasCrossingBoard == otherMessage.hasCrossingBoard &&
      (!self.hasCrossingBoard || [self.crossingBoard isEqual:otherMessage.crossingBoard]) &&
      self.hasRegularTrx == otherMessage.hasRegularTrx &&
      (!self.hasRegularTrx || [self.regularTrx isEqual:otherMessage.regularTrx]) &&
      self.hasTplusTrx == otherMessage.hasTplusTrx &&
      (!self.hasTplusTrx || [self.tplusTrx isEqual:otherMessage.tplusTrx]) &&
      self.hasMarginTrx == otherMessage.hasMarginTrx &&
      (!self.hasMarginTrx || [self.marginTrx isEqual:otherMessage.marginTrx]) &&
      self.hasPreopeningFlag == otherMessage.hasPreopeningFlag &&
      (!self.hasPreopeningFlag || [self.preopeningFlag isEqual:otherMessage.preopeningFlag]) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCltype) {
    hashCode = hashCode * 31 + [self.cltype hash];
  }
  if (self.hasRegularBoard) {
    hashCode = hashCode * 31 + [self.regularBoard hash];
  }
  if (self.hasNegotiatedBoard) {
    hashCode = hashCode * 31 + [self.negotiatedBoard hash];
  }
  if (self.hasCashBoard) {
    hashCode = hashCode * 31 + [self.cashBoard hash];
  }
  if (self.hasCrossingBoard) {
    hashCode = hashCode * 31 + [self.crossingBoard hash];
  }
  if (self.hasRegularTrx) {
    hashCode = hashCode * 31 + [self.regularTrx hash];
  }
  if (self.hasTplusTrx) {
    hashCode = hashCode * 31 + [self.tplusTrx hash];
  }
  if (self.hasMarginTrx) {
    hashCode = hashCode * 31 + [self.marginTrx hash];
  }
  if (self.hasPreopeningFlag) {
    hashCode = hashCode * 31 + [self.preopeningFlag hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SharesInfo_Builder()
@property (strong) SharesInfo* result;
@end

@implementation SharesInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SharesInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SharesInfo_Builder*) clear {
  self.result = [[SharesInfo alloc] init];
  return self;
}
- (SharesInfo_Builder*) clone {
  return [SharesInfo builderWithPrototype:result];
}
- (SharesInfo*) defaultInstance {
  return [SharesInfo defaultInstance];
}
- (SharesInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SharesInfo*) buildPartial {
  SharesInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SharesInfo_Builder*) mergeFrom:(SharesInfo*) other {
  if (other == [SharesInfo defaultInstance]) {
    return self;
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasCltype) {
    [self setCltype:other.cltype];
  }
  if (other.hasRegularBoard) {
    [self setRegularBoard:other.regularBoard];
  }
  if (other.hasNegotiatedBoard) {
    [self setNegotiatedBoard:other.negotiatedBoard];
  }
  if (other.hasCashBoard) {
    [self setCashBoard:other.cashBoard];
  }
  if (other.hasCrossingBoard) {
    [self setCrossingBoard:other.crossingBoard];
  }
  if (other.hasRegularTrx) {
    [self setRegularTrx:other.regularTrx];
  }
  if (other.hasTplusTrx) {
    [self setTplusTrx:other.tplusTrx];
  }
  if (other.hasMarginTrx) {
    [self setMarginTrx:other.marginTrx];
  }
  if (other.hasPreopeningFlag) {
    [self setPreopeningFlag:other.preopeningFlag];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SharesInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SharesInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCltype:[input readString]];
        break;
      }
      case 18: {
        [self setRegularBoard:[input readString]];
        break;
      }
      case 26: {
        [self setNegotiatedBoard:[input readString]];
        break;
      }
      case 34: {
        [self setCashBoard:[input readString]];
        break;
      }
      case 42: {
        [self setCrossingBoard:[input readString]];
        break;
      }
      case 50: {
        [self setRegularTrx:[input readString]];
        break;
      }
      case 58: {
        [self setTplusTrx:[input readString]];
        break;
      }
      case 66: {
        [self setMarginTrx:[input readString]];
        break;
      }
      case 74: {
        [self setPreopeningFlag:[input readString]];
        break;
      }
      case 82: {
        [self setStockcode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (SharesInfo_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (SharesInfo_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasCltype {
  return result.hasCltype;
}
- (NSString*) cltype {
  return result.cltype;
}
- (SharesInfo_Builder*) setCltype:(NSString*) value {
  result.hasCltype = YES;
  result.cltype = value;
  return self;
}
- (SharesInfo_Builder*) clearCltype {
  result.hasCltype = NO;
  result.cltype = @"";
  return self;
}
- (BOOL) hasRegularBoard {
  return result.hasRegularBoard;
}
- (NSString*) regularBoard {
  return result.regularBoard;
}
- (SharesInfo_Builder*) setRegularBoard:(NSString*) value {
  result.hasRegularBoard = YES;
  result.regularBoard = value;
  return self;
}
- (SharesInfo_Builder*) clearRegularBoard {
  result.hasRegularBoard = NO;
  result.regularBoard = @"";
  return self;
}
- (BOOL) hasNegotiatedBoard {
  return result.hasNegotiatedBoard;
}
- (NSString*) negotiatedBoard {
  return result.negotiatedBoard;
}
- (SharesInfo_Builder*) setNegotiatedBoard:(NSString*) value {
  result.hasNegotiatedBoard = YES;
  result.negotiatedBoard = value;
  return self;
}
- (SharesInfo_Builder*) clearNegotiatedBoard {
  result.hasNegotiatedBoard = NO;
  result.negotiatedBoard = @"";
  return self;
}
- (BOOL) hasCashBoard {
  return result.hasCashBoard;
}
- (NSString*) cashBoard {
  return result.cashBoard;
}
- (SharesInfo_Builder*) setCashBoard:(NSString*) value {
  result.hasCashBoard = YES;
  result.cashBoard = value;
  return self;
}
- (SharesInfo_Builder*) clearCashBoard {
  result.hasCashBoard = NO;
  result.cashBoard = @"";
  return self;
}
- (BOOL) hasCrossingBoard {
  return result.hasCrossingBoard;
}
- (NSString*) crossingBoard {
  return result.crossingBoard;
}
- (SharesInfo_Builder*) setCrossingBoard:(NSString*) value {
  result.hasCrossingBoard = YES;
  result.crossingBoard = value;
  return self;
}
- (SharesInfo_Builder*) clearCrossingBoard {
  result.hasCrossingBoard = NO;
  result.crossingBoard = @"";
  return self;
}
- (BOOL) hasRegularTrx {
  return result.hasRegularTrx;
}
- (NSString*) regularTrx {
  return result.regularTrx;
}
- (SharesInfo_Builder*) setRegularTrx:(NSString*) value {
  result.hasRegularTrx = YES;
  result.regularTrx = value;
  return self;
}
- (SharesInfo_Builder*) clearRegularTrx {
  result.hasRegularTrx = NO;
  result.regularTrx = @"";
  return self;
}
- (BOOL) hasTplusTrx {
  return result.hasTplusTrx;
}
- (NSString*) tplusTrx {
  return result.tplusTrx;
}
- (SharesInfo_Builder*) setTplusTrx:(NSString*) value {
  result.hasTplusTrx = YES;
  result.tplusTrx = value;
  return self;
}
- (SharesInfo_Builder*) clearTplusTrx {
  result.hasTplusTrx = NO;
  result.tplusTrx = @"";
  return self;
}
- (BOOL) hasMarginTrx {
  return result.hasMarginTrx;
}
- (NSString*) marginTrx {
  return result.marginTrx;
}
- (SharesInfo_Builder*) setMarginTrx:(NSString*) value {
  result.hasMarginTrx = YES;
  result.marginTrx = value;
  return self;
}
- (SharesInfo_Builder*) clearMarginTrx {
  result.hasMarginTrx = NO;
  result.marginTrx = @"";
  return self;
}
- (BOOL) hasPreopeningFlag {
  return result.hasPreopeningFlag;
}
- (NSString*) preopeningFlag {
  return result.preopeningFlag;
}
- (SharesInfo_Builder*) setPreopeningFlag:(NSString*) value {
  result.hasPreopeningFlag = YES;
  result.preopeningFlag = value;
  return self;
}
- (SharesInfo_Builder*) clearPreopeningFlag {
  result.hasPreopeningFlag = NO;
  result.preopeningFlag = @"";
  return self;
}
@end

@interface LoginData ()
@property (strong) NSString* username;
@property (strong) NSString* fullname;
@property (strong) NSString* usertype;
@property (strong) NSString* sessionMi;
@property (strong) NSString* sessionOl;
@property (strong) NSString* ipMarket;
@property (strong) NSString* ipTrade;
@property BOOL isLogout;
@property ChangePassword changePassword;
@property ChangePassword changePin;
@property (strong) NSString* userId;
@property (strong) NSString* loginStatus;
@property (strong) NSString* downloadUpdate;
@property Float64 limitByQuantity;
@property Float64 limitByValue;
@property (strong) NSString* userPriv;
@property int32_t allowOrders;
@property int32_t allowTrades;
@property ServerType serverType;
@property (strong) NSString* ipMarketWebservice;
@property (strong) NSString* ipTradeWebservice;
@property int32_t lotSize;
@property (strong) NSString* ipProxy;
@property (strong) NSString* generalMsg;
@end

@implementation LoginData

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasFullname {
  return !!hasFullname_;
}
- (void) setHasFullname:(BOOL) value {
  hasFullname_ = !!value;
}
@synthesize fullname;
- (BOOL) hasUsertype {
  return !!hasUsertype_;
}
- (void) setHasUsertype:(BOOL) value {
  hasUsertype_ = !!value;
}
@synthesize usertype;
- (BOOL) hasSessionMi {
  return !!hasSessionMi_;
}
- (void) setHasSessionMi:(BOOL) value {
  hasSessionMi_ = !!value;
}
@synthesize sessionMi;
- (BOOL) hasSessionOl {
  return !!hasSessionOl_;
}
- (void) setHasSessionOl:(BOOL) value {
  hasSessionOl_ = !!value;
}
@synthesize sessionOl;
- (BOOL) hasIpMarket {
  return !!hasIpMarket_;
}
- (void) setHasIpMarket:(BOOL) value {
  hasIpMarket_ = !!value;
}
@synthesize ipMarket;
- (BOOL) hasIpTrade {
  return !!hasIpTrade_;
}
- (void) setHasIpTrade:(BOOL) value {
  hasIpTrade_ = !!value;
}
@synthesize ipTrade;
- (BOOL) hasIsLogout {
  return !!hasIsLogout_;
}
- (void) setHasIsLogout:(BOOL) value {
  hasIsLogout_ = !!value;
}
- (BOOL) isLogout {
  return !!isLogout_;
}
- (void) setIsLogout:(BOOL) value {
  isLogout_ = !!value;
}
- (BOOL) hasChangePassword {
  return !!hasChangePassword_;
}
- (void) setHasChangePassword:(BOOL) value {
  hasChangePassword_ = !!value;
}
@synthesize changePassword;
- (BOOL) hasChangePin {
  return !!hasChangePin_;
}
- (void) setHasChangePin:(BOOL) value {
  hasChangePin_ = !!value;
}
@synthesize changePin;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasLoginStatus {
  return !!hasLoginStatus_;
}
- (void) setHasLoginStatus:(BOOL) value {
  hasLoginStatus_ = !!value;
}
@synthesize loginStatus;
- (BOOL) hasDownloadUpdate {
  return !!hasDownloadUpdate_;
}
- (void) setHasDownloadUpdate:(BOOL) value {
  hasDownloadUpdate_ = !!value;
}
@synthesize downloadUpdate;
- (BOOL) hasLimitByQuantity {
  return !!hasLimitByQuantity_;
}
- (void) setHasLimitByQuantity:(BOOL) value {
  hasLimitByQuantity_ = !!value;
}
@synthesize limitByQuantity;
- (BOOL) hasLimitByValue {
  return !!hasLimitByValue_;
}
- (void) setHasLimitByValue:(BOOL) value {
  hasLimitByValue_ = !!value;
}
@synthesize limitByValue;
- (BOOL) hasUserPriv {
  return !!hasUserPriv_;
}
- (void) setHasUserPriv:(BOOL) value {
  hasUserPriv_ = !!value;
}
@synthesize userPriv;
- (BOOL) hasAllowOrders {
  return !!hasAllowOrders_;
}
- (void) setHasAllowOrders:(BOOL) value {
  hasAllowOrders_ = !!value;
}
@synthesize allowOrders;
- (BOOL) hasAllowTrades {
  return !!hasAllowTrades_;
}
- (void) setHasAllowTrades:(BOOL) value {
  hasAllowTrades_ = !!value;
}
@synthesize allowTrades;
- (BOOL) hasServerType {
  return !!hasServerType_;
}
- (void) setHasServerType:(BOOL) value {
  hasServerType_ = !!value;
}
@synthesize serverType;
- (BOOL) hasIpMarketWebservice {
  return !!hasIpMarketWebservice_;
}
- (void) setHasIpMarketWebservice:(BOOL) value {
  hasIpMarketWebservice_ = !!value;
}
@synthesize ipMarketWebservice;
- (BOOL) hasIpTradeWebservice {
  return !!hasIpTradeWebservice_;
}
- (void) setHasIpTradeWebservice:(BOOL) value {
  hasIpTradeWebservice_ = !!value;
}
@synthesize ipTradeWebservice;
- (BOOL) hasLotSize {
  return !!hasLotSize_;
}
- (void) setHasLotSize:(BOOL) value {
  hasLotSize_ = !!value;
}
@synthesize lotSize;
- (BOOL) hasIpProxy {
  return !!hasIpProxy_;
}
- (void) setHasIpProxy:(BOOL) value {
  hasIpProxy_ = !!value;
}
@synthesize ipProxy;
- (BOOL) hasGeneralMsg {
  return !!hasGeneralMsg_;
}
- (void) setHasGeneralMsg:(BOOL) value {
  hasGeneralMsg_ = !!value;
}
@synthesize generalMsg;
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.fullname = @"";
    self.usertype = @"";
    self.sessionMi = @"";
    self.sessionOl = @"";
    self.ipMarket = @"";
    self.ipTrade = @"";
    self.isLogout = NO;
    self.changePassword = ChangePasswordSuccess;
    self.changePin = ChangePasswordSuccess;
    self.userId = @"";
    self.loginStatus = @"";
    self.downloadUpdate = @"";
    self.limitByQuantity = 0;
    self.limitByValue = 0;
    self.userPriv = @"";
    self.allowOrders = 0;
    self.allowTrades = 0;
    self.serverType = ServerTypeSystemAdmin;
    self.ipMarketWebservice = @"";
    self.ipTradeWebservice = @"";
    self.lotSize = 0;
    self.ipProxy = @"";
    self.generalMsg = @"";
  }
  return self;
}
static LoginData* defaultLoginDataInstance = nil;
+ (void) initialize {
  if (self == [LoginData class]) {
    defaultLoginDataInstance = [[LoginData alloc] init];
  }
}
+ (LoginData*) defaultInstance {
  return defaultLoginDataInstance;
}
- (LoginData*) defaultInstance {
  return defaultLoginDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasFullname) {
    [output writeString:2 value:self.fullname];
  }
  if (self.hasUsertype) {
    [output writeString:3 value:self.usertype];
  }
  if (self.hasSessionMi) {
    [output writeString:4 value:self.sessionMi];
  }
  if (self.hasSessionOl) {
    [output writeString:5 value:self.sessionOl];
  }
  if (self.hasIpMarket) {
    [output writeString:6 value:self.ipMarket];
  }
  if (self.hasIpTrade) {
    [output writeString:7 value:self.ipTrade];
  }
  if (self.hasIsLogout) {
    [output writeBool:8 value:self.isLogout];
  }
  if (self.hasChangePassword) {
    [output writeEnum:9 value:self.changePassword];
  }
  if (self.hasChangePin) {
    [output writeEnum:10 value:self.changePin];
  }
  if (self.hasUserId) {
    [output writeString:11 value:self.userId];
  }
  if (self.hasLoginStatus) {
    [output writeString:12 value:self.loginStatus];
  }
  if (self.hasDownloadUpdate) {
    [output writeString:13 value:self.downloadUpdate];
  }
  if (self.hasLimitByQuantity) {
    [output writeDouble:14 value:self.limitByQuantity];
  }
  if (self.hasLimitByValue) {
    [output writeDouble:15 value:self.limitByValue];
  }
  if (self.hasUserPriv) {
    [output writeString:16 value:self.userPriv];
  }
  if (self.hasAllowOrders) {
    [output writeInt32:17 value:self.allowOrders];
  }
  if (self.hasAllowTrades) {
    [output writeInt32:18 value:self.allowTrades];
  }
  if (self.hasServerType) {
    [output writeEnum:19 value:self.serverType];
  }
  if (self.hasIpMarketWebservice) {
    [output writeString:20 value:self.ipMarketWebservice];
  }
  if (self.hasIpTradeWebservice) {
    [output writeString:21 value:self.ipTradeWebservice];
  }
  if (self.hasLotSize) {
    [output writeInt32:22 value:self.lotSize];
  }
  if (self.hasIpProxy) {
    [output writeString:23 value:self.ipProxy];
  }
  if (self.hasGeneralMsg) {
    [output writeString:24 value:self.generalMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsername) {
    size += computeStringSize(1, self.username);
  }
  if (self.hasFullname) {
    size += computeStringSize(2, self.fullname);
  }
  if (self.hasUsertype) {
    size += computeStringSize(3, self.usertype);
  }
  if (self.hasSessionMi) {
    size += computeStringSize(4, self.sessionMi);
  }
  if (self.hasSessionOl) {
    size += computeStringSize(5, self.sessionOl);
  }
  if (self.hasIpMarket) {
    size += computeStringSize(6, self.ipMarket);
  }
  if (self.hasIpTrade) {
    size += computeStringSize(7, self.ipTrade);
  }
  if (self.hasIsLogout) {
    size += computeBoolSize(8, self.isLogout);
  }
  if (self.hasChangePassword) {
    size += computeEnumSize(9, self.changePassword);
  }
  if (self.hasChangePin) {
    size += computeEnumSize(10, self.changePin);
  }
  if (self.hasUserId) {
    size += computeStringSize(11, self.userId);
  }
  if (self.hasLoginStatus) {
    size += computeStringSize(12, self.loginStatus);
  }
  if (self.hasDownloadUpdate) {
    size += computeStringSize(13, self.downloadUpdate);
  }
  if (self.hasLimitByQuantity) {
    size += computeDoubleSize(14, self.limitByQuantity);
  }
  if (self.hasLimitByValue) {
    size += computeDoubleSize(15, self.limitByValue);
  }
  if (self.hasUserPriv) {
    size += computeStringSize(16, self.userPriv);
  }
  if (self.hasAllowOrders) {
    size += computeInt32Size(17, self.allowOrders);
  }
  if (self.hasAllowTrades) {
    size += computeInt32Size(18, self.allowTrades);
  }
  if (self.hasServerType) {
    size += computeEnumSize(19, self.serverType);
  }
  if (self.hasIpMarketWebservice) {
    size += computeStringSize(20, self.ipMarketWebservice);
  }
  if (self.hasIpTradeWebservice) {
    size += computeStringSize(21, self.ipTradeWebservice);
  }
  if (self.hasLotSize) {
    size += computeInt32Size(22, self.lotSize);
  }
  if (self.hasIpProxy) {
    size += computeStringSize(23, self.ipProxy);
  }
  if (self.hasGeneralMsg) {
    size += computeStringSize(24, self.generalMsg);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LoginData*) parseFromData:(NSData*) data {
  return (LoginData*)[[[LoginData builder] mergeFromData:data] build];
}
+ (LoginData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginData*)[[[LoginData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginData*) parseFromInputStream:(NSInputStream*) input {
  return (LoginData*)[[[LoginData builder] mergeFromInputStream:input] build];
}
+ (LoginData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginData*)[[[LoginData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginData*)[[[LoginData builder] mergeFromCodedInputStream:input] build];
}
+ (LoginData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginData*)[[[LoginData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginData_Builder*) builder {
  return [[LoginData_Builder alloc] init];
}
+ (LoginData_Builder*) builderWithPrototype:(LoginData*) prototype {
  return [[LoginData builder] mergeFrom:prototype];
}
- (LoginData_Builder*) builder {
  return [LoginData builder];
}
- (LoginData_Builder*) toBuilder {
  return [LoginData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasFullname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fullname", self.fullname];
  }
  if (self.hasUsertype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"usertype", self.usertype];
  }
  if (self.hasSessionMi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionMi", self.sessionMi];
  }
  if (self.hasSessionOl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionOl", self.sessionOl];
  }
  if (self.hasIpMarket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipMarket", self.ipMarket];
  }
  if (self.hasIpTrade) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipTrade", self.ipTrade];
  }
  if (self.hasIsLogout) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isLogout", [NSNumber numberWithBool:self.isLogout]];
  }
  if (self.hasChangePassword) {
    [output appendFormat:@"%@%@: %d\n", indent, @"changePassword", self.changePassword];
  }
  if (self.hasChangePin) {
    [output appendFormat:@"%@%@: %d\n", indent, @"changePin", self.changePin];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasLoginStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginStatus", self.loginStatus];
  }
  if (self.hasDownloadUpdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downloadUpdate", self.downloadUpdate];
  }
  if (self.hasLimitByQuantity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limitByQuantity", [NSNumber numberWithDouble:self.limitByQuantity]];
  }
  if (self.hasLimitByValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limitByValue", [NSNumber numberWithDouble:self.limitByValue]];
  }
  if (self.hasUserPriv) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userPriv", self.userPriv];
  }
  if (self.hasAllowOrders) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowOrders", [NSNumber numberWithInt:self.allowOrders]];
  }
  if (self.hasAllowTrades) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowTrades", [NSNumber numberWithInt:self.allowTrades]];
  }
  if (self.hasServerType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"serverType", self.serverType];
  }
  if (self.hasIpMarketWebservice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipMarketWebservice", self.ipMarketWebservice];
  }
  if (self.hasIpTradeWebservice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipTradeWebservice", self.ipTradeWebservice];
  }
  if (self.hasLotSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lotSize", [NSNumber numberWithInt:self.lotSize]];
  }
  if (self.hasIpProxy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ipProxy", self.ipProxy];
  }
  if (self.hasGeneralMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"generalMsg", self.generalMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginData class]]) {
    return NO;
  }
  LoginData *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasFullname == otherMessage.hasFullname &&
      (!self.hasFullname || [self.fullname isEqual:otherMessage.fullname]) &&
      self.hasUsertype == otherMessage.hasUsertype &&
      (!self.hasUsertype || [self.usertype isEqual:otherMessage.usertype]) &&
      self.hasSessionMi == otherMessage.hasSessionMi &&
      (!self.hasSessionMi || [self.sessionMi isEqual:otherMessage.sessionMi]) &&
      self.hasSessionOl == otherMessage.hasSessionOl &&
      (!self.hasSessionOl || [self.sessionOl isEqual:otherMessage.sessionOl]) &&
      self.hasIpMarket == otherMessage.hasIpMarket &&
      (!self.hasIpMarket || [self.ipMarket isEqual:otherMessage.ipMarket]) &&
      self.hasIpTrade == otherMessage.hasIpTrade &&
      (!self.hasIpTrade || [self.ipTrade isEqual:otherMessage.ipTrade]) &&
      self.hasIsLogout == otherMessage.hasIsLogout &&
      (!self.hasIsLogout || self.isLogout == otherMessage.isLogout) &&
      self.hasChangePassword == otherMessage.hasChangePassword &&
      (!self.hasChangePassword || self.changePassword != otherMessage.changePassword) &&
      self.hasChangePin == otherMessage.hasChangePin &&
      (!self.hasChangePin || self.changePin != otherMessage.changePin) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasLoginStatus == otherMessage.hasLoginStatus &&
      (!self.hasLoginStatus || [self.loginStatus isEqual:otherMessage.loginStatus]) &&
      self.hasDownloadUpdate == otherMessage.hasDownloadUpdate &&
      (!self.hasDownloadUpdate || [self.downloadUpdate isEqual:otherMessage.downloadUpdate]) &&
      self.hasLimitByQuantity == otherMessage.hasLimitByQuantity &&
      (!self.hasLimitByQuantity || self.limitByQuantity == otherMessage.limitByQuantity) &&
      self.hasLimitByValue == otherMessage.hasLimitByValue &&
      (!self.hasLimitByValue || self.limitByValue == otherMessage.limitByValue) &&
      self.hasUserPriv == otherMessage.hasUserPriv &&
      (!self.hasUserPriv || [self.userPriv isEqual:otherMessage.userPriv]) &&
      self.hasAllowOrders == otherMessage.hasAllowOrders &&
      (!self.hasAllowOrders || self.allowOrders == otherMessage.allowOrders) &&
      self.hasAllowTrades == otherMessage.hasAllowTrades &&
      (!self.hasAllowTrades || self.allowTrades == otherMessage.allowTrades) &&
      self.hasServerType == otherMessage.hasServerType &&
      (!self.hasServerType || self.serverType != otherMessage.serverType) &&
      self.hasIpMarketWebservice == otherMessage.hasIpMarketWebservice &&
      (!self.hasIpMarketWebservice || [self.ipMarketWebservice isEqual:otherMessage.ipMarketWebservice]) &&
      self.hasIpTradeWebservice == otherMessage.hasIpTradeWebservice &&
      (!self.hasIpTradeWebservice || [self.ipTradeWebservice isEqual:otherMessage.ipTradeWebservice]) &&
      self.hasLotSize == otherMessage.hasLotSize &&
      (!self.hasLotSize || self.lotSize == otherMessage.lotSize) &&
      self.hasIpProxy == otherMessage.hasIpProxy &&
      (!self.hasIpProxy || [self.ipProxy isEqual:otherMessage.ipProxy]) &&
      self.hasGeneralMsg == otherMessage.hasGeneralMsg &&
      (!self.hasGeneralMsg || [self.generalMsg isEqual:otherMessage.generalMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasFullname) {
    hashCode = hashCode * 31 + [self.fullname hash];
  }
  if (self.hasUsertype) {
    hashCode = hashCode * 31 + [self.usertype hash];
  }
  if (self.hasSessionMi) {
    hashCode = hashCode * 31 + [self.sessionMi hash];
  }
  if (self.hasSessionOl) {
    hashCode = hashCode * 31 + [self.sessionOl hash];
  }
  if (self.hasIpMarket) {
    hashCode = hashCode * 31 + [self.ipMarket hash];
  }
  if (self.hasIpTrade) {
    hashCode = hashCode * 31 + [self.ipTrade hash];
  }
  if (self.hasIsLogout) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isLogout] hash];
  }
  if (self.hasChangePassword) {
    hashCode = hashCode * 31 + self.changePassword;
  }
  if (self.hasChangePin) {
    hashCode = hashCode * 31 + self.changePin;
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasLoginStatus) {
    hashCode = hashCode * 31 + [self.loginStatus hash];
  }
  if (self.hasDownloadUpdate) {
    hashCode = hashCode * 31 + [self.downloadUpdate hash];
  }
  if (self.hasLimitByQuantity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.limitByQuantity] hash];
  }
  if (self.hasLimitByValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.limitByValue] hash];
  }
  if (self.hasUserPriv) {
    hashCode = hashCode * 31 + [self.userPriv hash];
  }
  if (self.hasAllowOrders) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.allowOrders] hash];
  }
  if (self.hasAllowTrades) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.allowTrades] hash];
  }
  if (self.hasServerType) {
    hashCode = hashCode * 31 + self.serverType;
  }
  if (self.hasIpMarketWebservice) {
    hashCode = hashCode * 31 + [self.ipMarketWebservice hash];
  }
  if (self.hasIpTradeWebservice) {
    hashCode = hashCode * 31 + [self.ipTradeWebservice hash];
  }
  if (self.hasLotSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lotSize] hash];
  }
  if (self.hasIpProxy) {
    hashCode = hashCode * 31 + [self.ipProxy hash];
  }
  if (self.hasGeneralMsg) {
    hashCode = hashCode * 31 + [self.generalMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginData_Builder()
@property (strong) LoginData* result;
@end

@implementation LoginData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LoginData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LoginData_Builder*) clear {
  self.result = [[LoginData alloc] init];
  return self;
}
- (LoginData_Builder*) clone {
  return [LoginData builderWithPrototype:result];
}
- (LoginData*) defaultInstance {
  return [LoginData defaultInstance];
}
- (LoginData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginData*) buildPartial {
  LoginData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LoginData_Builder*) mergeFrom:(LoginData*) other {
  if (other == [LoginData defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasFullname) {
    [self setFullname:other.fullname];
  }
  if (other.hasUsertype) {
    [self setUsertype:other.usertype];
  }
  if (other.hasSessionMi) {
    [self setSessionMi:other.sessionMi];
  }
  if (other.hasSessionOl) {
    [self setSessionOl:other.sessionOl];
  }
  if (other.hasIpMarket) {
    [self setIpMarket:other.ipMarket];
  }
  if (other.hasIpTrade) {
    [self setIpTrade:other.ipTrade];
  }
  if (other.hasIsLogout) {
    [self setIsLogout:other.isLogout];
  }
  if (other.hasChangePassword) {
    [self setChangePassword:other.changePassword];
  }
  if (other.hasChangePin) {
    [self setChangePin:other.changePin];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLoginStatus) {
    [self setLoginStatus:other.loginStatus];
  }
  if (other.hasDownloadUpdate) {
    [self setDownloadUpdate:other.downloadUpdate];
  }
  if (other.hasLimitByQuantity) {
    [self setLimitByQuantity:other.limitByQuantity];
  }
  if (other.hasLimitByValue) {
    [self setLimitByValue:other.limitByValue];
  }
  if (other.hasUserPriv) {
    [self setUserPriv:other.userPriv];
  }
  if (other.hasAllowOrders) {
    [self setAllowOrders:other.allowOrders];
  }
  if (other.hasAllowTrades) {
    [self setAllowTrades:other.allowTrades];
  }
  if (other.hasServerType) {
    [self setServerType:other.serverType];
  }
  if (other.hasIpMarketWebservice) {
    [self setIpMarketWebservice:other.ipMarketWebservice];
  }
  if (other.hasIpTradeWebservice) {
    [self setIpTradeWebservice:other.ipTradeWebservice];
  }
  if (other.hasLotSize) {
    [self setLotSize:other.lotSize];
  }
  if (other.hasIpProxy) {
    [self setIpProxy:other.ipProxy];
  }
  if (other.hasGeneralMsg) {
    [self setGeneralMsg:other.generalMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setFullname:[input readString]];
        break;
      }
      case 26: {
        [self setUsertype:[input readString]];
        break;
      }
      case 34: {
        [self setSessionMi:[input readString]];
        break;
      }
      case 42: {
        [self setSessionOl:[input readString]];
        break;
      }
      case 50: {
        [self setIpMarket:[input readString]];
        break;
      }
      case 58: {
        [self setIpTrade:[input readString]];
        break;
      }
      case 64: {
        [self setIsLogout:[input readBool]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (ChangePasswordIsValidValue(value)) {
          [self setChangePassword:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        int32_t value = [input readEnum];
        if (ChangePasswordIsValidValue(value)) {
          [self setChangePin:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 90: {
        [self setUserId:[input readString]];
        break;
      }
      case 98: {
        [self setLoginStatus:[input readString]];
        break;
      }
      case 106: {
        [self setDownloadUpdate:[input readString]];
        break;
      }
      case 113: {
        [self setLimitByQuantity:[input readDouble]];
        break;
      }
      case 121: {
        [self setLimitByValue:[input readDouble]];
        break;
      }
      case 130: {
        [self setUserPriv:[input readString]];
        break;
      }
      case 136: {
        [self setAllowOrders:[input readInt32]];
        break;
      }
      case 144: {
        [self setAllowTrades:[input readInt32]];
        break;
      }
      case 152: {
        int32_t value = [input readEnum];
        if (ServerTypeIsValidValue(value)) {
          [self setServerType:value];
        } else {
          [unknownFields mergeVarintField:19 value:value];
        }
        break;
      }
      case 162: {
        [self setIpMarketWebservice:[input readString]];
        break;
      }
      case 170: {
        [self setIpTradeWebservice:[input readString]];
        break;
      }
      case 176: {
        [self setLotSize:[input readInt32]];
        break;
      }
      case 186: {
        [self setIpProxy:[input readString]];
        break;
      }
      case 194: {
        [self setGeneralMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (LoginData_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (LoginData_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasFullname {
  return result.hasFullname;
}
- (NSString*) fullname {
  return result.fullname;
}
- (LoginData_Builder*) setFullname:(NSString*) value {
  result.hasFullname = YES;
  result.fullname = value;
  return self;
}
- (LoginData_Builder*) clearFullname {
  result.hasFullname = NO;
  result.fullname = @"";
  return self;
}
- (BOOL) hasUsertype {
  return result.hasUsertype;
}
- (NSString*) usertype {
  return result.usertype;
}
- (LoginData_Builder*) setUsertype:(NSString*) value {
  result.hasUsertype = YES;
  result.usertype = value;
  return self;
}
- (LoginData_Builder*) clearUsertype {
  result.hasUsertype = NO;
  result.usertype = @"";
  return self;
}
- (BOOL) hasSessionMi {
  return result.hasSessionMi;
}
- (NSString*) sessionMi {
  return result.sessionMi;
}
- (LoginData_Builder*) setSessionMi:(NSString*) value {
  result.hasSessionMi = YES;
  result.sessionMi = value;
  return self;
}
- (LoginData_Builder*) clearSessionMi {
  result.hasSessionMi = NO;
  result.sessionMi = @"";
  return self;
}
- (BOOL) hasSessionOl {
  return result.hasSessionOl;
}
- (NSString*) sessionOl {
  return result.sessionOl;
}
- (LoginData_Builder*) setSessionOl:(NSString*) value {
  result.hasSessionOl = YES;
  result.sessionOl = value;
  return self;
}
- (LoginData_Builder*) clearSessionOl {
  result.hasSessionOl = NO;
  result.sessionOl = @"";
  return self;
}
- (BOOL) hasIpMarket {
  return result.hasIpMarket;
}
- (NSString*) ipMarket {
  return result.ipMarket;
}
- (LoginData_Builder*) setIpMarket:(NSString*) value {
  result.hasIpMarket = YES;
  result.ipMarket = value;
  return self;
}
- (LoginData_Builder*) clearIpMarket {
  result.hasIpMarket = NO;
  result.ipMarket = @"";
  return self;
}
- (BOOL) hasIpTrade {
  return result.hasIpTrade;
}
- (NSString*) ipTrade {
  return result.ipTrade;
}
- (LoginData_Builder*) setIpTrade:(NSString*) value {
  result.hasIpTrade = YES;
  result.ipTrade = value;
  return self;
}
- (LoginData_Builder*) clearIpTrade {
  result.hasIpTrade = NO;
  result.ipTrade = @"";
  return self;
}
- (BOOL) hasIsLogout {
  return result.hasIsLogout;
}
- (BOOL) isLogout {
  return result.isLogout;
}
- (LoginData_Builder*) setIsLogout:(BOOL) value {
  result.hasIsLogout = YES;
  result.isLogout = value;
  return self;
}
- (LoginData_Builder*) clearIsLogout {
  result.hasIsLogout = NO;
  result.isLogout = NO;
  return self;
}
- (BOOL) hasChangePassword {
  return result.hasChangePassword;
}
- (ChangePassword) changePassword {
  return result.changePassword;
}
- (LoginData_Builder*) setChangePassword:(ChangePassword) value {
  result.hasChangePassword = YES;
  result.changePassword = value;
  return self;
}
- (LoginData_Builder*) clearChangePassword {
  result.hasChangePassword = NO;
  result.changePassword = ChangePasswordSuccess;
  return self;
}
- (BOOL) hasChangePin {
  return result.hasChangePin;
}
- (ChangePassword) changePin {
  return result.changePin;
}
- (LoginData_Builder*) setChangePin:(ChangePassword) value {
  result.hasChangePin = YES;
  result.changePin = value;
  return self;
}
- (LoginData_Builder*) clearChangePin {
  result.hasChangePin = NO;
  result.changePin = ChangePasswordSuccess;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (LoginData_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (LoginData_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasLoginStatus {
  return result.hasLoginStatus;
}
- (NSString*) loginStatus {
  return result.loginStatus;
}
- (LoginData_Builder*) setLoginStatus:(NSString*) value {
  result.hasLoginStatus = YES;
  result.loginStatus = value;
  return self;
}
- (LoginData_Builder*) clearLoginStatus {
  result.hasLoginStatus = NO;
  result.loginStatus = @"";
  return self;
}
- (BOOL) hasDownloadUpdate {
  return result.hasDownloadUpdate;
}
- (NSString*) downloadUpdate {
  return result.downloadUpdate;
}
- (LoginData_Builder*) setDownloadUpdate:(NSString*) value {
  result.hasDownloadUpdate = YES;
  result.downloadUpdate = value;
  return self;
}
- (LoginData_Builder*) clearDownloadUpdate {
  result.hasDownloadUpdate = NO;
  result.downloadUpdate = @"";
  return self;
}
- (BOOL) hasLimitByQuantity {
  return result.hasLimitByQuantity;
}
- (Float64) limitByQuantity {
  return result.limitByQuantity;
}
- (LoginData_Builder*) setLimitByQuantity:(Float64) value {
  result.hasLimitByQuantity = YES;
  result.limitByQuantity = value;
  return self;
}
- (LoginData_Builder*) clearLimitByQuantity {
  result.hasLimitByQuantity = NO;
  result.limitByQuantity = 0;
  return self;
}
- (BOOL) hasLimitByValue {
  return result.hasLimitByValue;
}
- (Float64) limitByValue {
  return result.limitByValue;
}
- (LoginData_Builder*) setLimitByValue:(Float64) value {
  result.hasLimitByValue = YES;
  result.limitByValue = value;
  return self;
}
- (LoginData_Builder*) clearLimitByValue {
  result.hasLimitByValue = NO;
  result.limitByValue = 0;
  return self;
}
- (BOOL) hasUserPriv {
  return result.hasUserPriv;
}
- (NSString*) userPriv {
  return result.userPriv;
}
- (LoginData_Builder*) setUserPriv:(NSString*) value {
  result.hasUserPriv = YES;
  result.userPriv = value;
  return self;
}
- (LoginData_Builder*) clearUserPriv {
  result.hasUserPriv = NO;
  result.userPriv = @"";
  return self;
}
- (BOOL) hasAllowOrders {
  return result.hasAllowOrders;
}
- (int32_t) allowOrders {
  return result.allowOrders;
}
- (LoginData_Builder*) setAllowOrders:(int32_t) value {
  result.hasAllowOrders = YES;
  result.allowOrders = value;
  return self;
}
- (LoginData_Builder*) clearAllowOrders {
  result.hasAllowOrders = NO;
  result.allowOrders = 0;
  return self;
}
- (BOOL) hasAllowTrades {
  return result.hasAllowTrades;
}
- (int32_t) allowTrades {
  return result.allowTrades;
}
- (LoginData_Builder*) setAllowTrades:(int32_t) value {
  result.hasAllowTrades = YES;
  result.allowTrades = value;
  return self;
}
- (LoginData_Builder*) clearAllowTrades {
  result.hasAllowTrades = NO;
  result.allowTrades = 0;
  return self;
}
- (BOOL) hasServerType {
  return result.hasServerType;
}
- (ServerType) serverType {
  return result.serverType;
}
- (LoginData_Builder*) setServerType:(ServerType) value {
  result.hasServerType = YES;
  result.serverType = value;
  return self;
}
- (LoginData_Builder*) clearServerType {
  result.hasServerType = NO;
  result.serverType = ServerTypeSystemAdmin;
  return self;
}
- (BOOL) hasIpMarketWebservice {
  return result.hasIpMarketWebservice;
}
- (NSString*) ipMarketWebservice {
  return result.ipMarketWebservice;
}
- (LoginData_Builder*) setIpMarketWebservice:(NSString*) value {
  result.hasIpMarketWebservice = YES;
  result.ipMarketWebservice = value;
  return self;
}
- (LoginData_Builder*) clearIpMarketWebservice {
  result.hasIpMarketWebservice = NO;
  result.ipMarketWebservice = @"";
  return self;
}
- (BOOL) hasIpTradeWebservice {
  return result.hasIpTradeWebservice;
}
- (NSString*) ipTradeWebservice {
  return result.ipTradeWebservice;
}
- (LoginData_Builder*) setIpTradeWebservice:(NSString*) value {
  result.hasIpTradeWebservice = YES;
  result.ipTradeWebservice = value;
  return self;
}
- (LoginData_Builder*) clearIpTradeWebservice {
  result.hasIpTradeWebservice = NO;
  result.ipTradeWebservice = @"";
  return self;
}
- (BOOL) hasLotSize {
  return result.hasLotSize;
}
- (int32_t) lotSize {
  return result.lotSize;
}
- (LoginData_Builder*) setLotSize:(int32_t) value {
  result.hasLotSize = YES;
  result.lotSize = value;
  return self;
}
- (LoginData_Builder*) clearLotSize {
  result.hasLotSize = NO;
  result.lotSize = 0;
  return self;
}
- (BOOL) hasIpProxy {
  return result.hasIpProxy;
}
- (NSString*) ipProxy {
  return result.ipProxy;
}
- (LoginData_Builder*) setIpProxy:(NSString*) value {
  result.hasIpProxy = YES;
  result.ipProxy = value;
  return self;
}
- (LoginData_Builder*) clearIpProxy {
  result.hasIpProxy = NO;
  result.ipProxy = @"";
  return self;
}
- (BOOL) hasGeneralMsg {
  return result.hasGeneralMsg;
}
- (NSString*) generalMsg {
  return result.generalMsg;
}
- (LoginData_Builder*) setGeneralMsg:(NSString*) value {
  result.hasGeneralMsg = YES;
  result.generalMsg = value;
  return self;
}
- (LoginData_Builder*) clearGeneralMsg {
  result.hasGeneralMsg = NO;
  result.generalMsg = @"";
  return self;
}
@end

@interface MessageBroadcastData ()
@property int32_t msgId;
@property (strong) NSString* title;
@property (strong) NSString* content;
@property (strong) NSString* publishedAt;
@property (strong) NSString* createdAt;
@end

@implementation MessageBroadcastData

- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) value {
  hasMsgId_ = !!value;
}
@synthesize msgId;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasPublishedAt {
  return !!hasPublishedAt_;
}
- (void) setHasPublishedAt:(BOOL) value {
  hasPublishedAt_ = !!value;
}
@synthesize publishedAt;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value {
  hasCreatedAt_ = !!value;
}
@synthesize createdAt;
- (id) init {
  if ((self = [super init])) {
    self.msgId = 0;
    self.title = @"";
    self.content = @"";
    self.publishedAt = @"";
    self.createdAt = @"";
  }
  return self;
}
static MessageBroadcastData* defaultMessageBroadcastDataInstance = nil;
+ (void) initialize {
  if (self == [MessageBroadcastData class]) {
    defaultMessageBroadcastDataInstance = [[MessageBroadcastData alloc] init];
  }
}
+ (MessageBroadcastData*) defaultInstance {
  return defaultMessageBroadcastDataInstance;
}
- (MessageBroadcastData*) defaultInstance {
  return defaultMessageBroadcastDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  if (self.hasPublishedAt) {
    [output writeString:3 value:self.publishedAt];
  }
  if (self.hasCreatedAt) {
    [output writeString:4 value:self.createdAt];
  }
  if (self.hasMsgId) {
    [output writeInt32:5 value:self.msgId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTitle) {
    size += computeStringSize(1, self.title);
  }
  if (self.hasContent) {
    size += computeStringSize(2, self.content);
  }
  if (self.hasPublishedAt) {
    size += computeStringSize(3, self.publishedAt);
  }
  if (self.hasCreatedAt) {
    size += computeStringSize(4, self.createdAt);
  }
  if (self.hasMsgId) {
    size += computeInt32Size(5, self.msgId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MessageBroadcastData*) parseFromData:(NSData*) data {
  return (MessageBroadcastData*)[[[MessageBroadcastData builder] mergeFromData:data] build];
}
+ (MessageBroadcastData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBroadcastData*)[[[MessageBroadcastData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MessageBroadcastData*) parseFromInputStream:(NSInputStream*) input {
  return (MessageBroadcastData*)[[[MessageBroadcastData builder] mergeFromInputStream:input] build];
}
+ (MessageBroadcastData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBroadcastData*)[[[MessageBroadcastData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBroadcastData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MessageBroadcastData*)[[[MessageBroadcastData builder] mergeFromCodedInputStream:input] build];
}
+ (MessageBroadcastData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBroadcastData*)[[[MessageBroadcastData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBroadcastData_Builder*) builder {
  return [[MessageBroadcastData_Builder alloc] init];
}
+ (MessageBroadcastData_Builder*) builderWithPrototype:(MessageBroadcastData*) prototype {
  return [[MessageBroadcastData builder] mergeFrom:prototype];
}
- (MessageBroadcastData_Builder*) builder {
  return [MessageBroadcastData builder];
}
- (MessageBroadcastData_Builder*) toBuilder {
  return [MessageBroadcastData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasPublishedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publishedAt", self.publishedAt];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", self.createdAt];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", [NSNumber numberWithInt:self.msgId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MessageBroadcastData class]]) {
    return NO;
  }
  MessageBroadcastData *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasPublishedAt == otherMessage.hasPublishedAt &&
      (!self.hasPublishedAt || [self.publishedAt isEqual:otherMessage.publishedAt]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || [self.createdAt isEqual:otherMessage.createdAt]) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || self.msgId == otherMessage.msgId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasPublishedAt) {
    hashCode = hashCode * 31 + [self.publishedAt hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [self.createdAt hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.msgId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MessageBroadcastData_Builder()
@property (strong) MessageBroadcastData* result;
@end

@implementation MessageBroadcastData_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MessageBroadcastData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MessageBroadcastData_Builder*) clear {
  self.result = [[MessageBroadcastData alloc] init];
  return self;
}
- (MessageBroadcastData_Builder*) clone {
  return [MessageBroadcastData builderWithPrototype:result];
}
- (MessageBroadcastData*) defaultInstance {
  return [MessageBroadcastData defaultInstance];
}
- (MessageBroadcastData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MessageBroadcastData*) buildPartial {
  MessageBroadcastData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MessageBroadcastData_Builder*) mergeFrom:(MessageBroadcastData*) other {
  if (other == [MessageBroadcastData defaultInstance]) {
    return self;
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasPublishedAt) {
    [self setPublishedAt:other.publishedAt];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessageBroadcastData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MessageBroadcastData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 26: {
        [self setPublishedAt:[input readString]];
        break;
      }
      case 34: {
        [self setCreatedAt:[input readString]];
        break;
      }
      case 40: {
        [self setMsgId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMsgId {
  return result.hasMsgId;
}
- (int32_t) msgId {
  return result.msgId;
}
- (MessageBroadcastData_Builder*) setMsgId:(int32_t) value {
  result.hasMsgId = YES;
  result.msgId = value;
  return self;
}
- (MessageBroadcastData_Builder*) clearMsgId {
  result.hasMsgId = NO;
  result.msgId = 0;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MessageBroadcastData_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MessageBroadcastData_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MessageBroadcastData_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MessageBroadcastData_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasPublishedAt {
  return result.hasPublishedAt;
}
- (NSString*) publishedAt {
  return result.publishedAt;
}
- (MessageBroadcastData_Builder*) setPublishedAt:(NSString*) value {
  result.hasPublishedAt = YES;
  result.publishedAt = value;
  return self;
}
- (MessageBroadcastData_Builder*) clearPublishedAt {
  result.hasPublishedAt = NO;
  result.publishedAt = @"";
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (NSString*) createdAt {
  return result.createdAt;
}
- (MessageBroadcastData_Builder*) setCreatedAt:(NSString*) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (MessageBroadcastData_Builder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = @"";
  return self;
}
@end

@interface ClientList ()
@property (strong) NSString* typeName;
@property (strong) NSString* clientcode;
@property (strong) NSString* name;
@property (strong) NSString* sid;
@property (strong) NSString* foreigner;
@property BOOL isMargin;
@property Float64 tradingLimit;
@property int32_t riskControl;
@property Float64 minCommission;
@property Float64 regCommission;
@property Float64 negoBuyCommission;
@property Float64 negoSellCommission;
@property (strong) NSString* general;
@end

@implementation ClientList

- (BOOL) hasTypeName {
  return !!hasTypeName_;
}
- (void) setHasTypeName:(BOOL) value {
  hasTypeName_ = !!value;
}
@synthesize typeName;
- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) value {
  hasSid_ = !!value;
}
@synthesize sid;
- (BOOL) hasForeigner {
  return !!hasForeigner_;
}
- (void) setHasForeigner:(BOOL) value {
  hasForeigner_ = !!value;
}
@synthesize foreigner;
- (BOOL) hasIsMargin {
  return !!hasIsMargin_;
}
- (void) setHasIsMargin:(BOOL) value {
  hasIsMargin_ = !!value;
}
- (BOOL) isMargin {
  return !!isMargin_;
}
- (void) setIsMargin:(BOOL) value {
  isMargin_ = !!value;
}
- (BOOL) hasTradingLimit {
  return !!hasTradingLimit_;
}
- (void) setHasTradingLimit:(BOOL) value {
  hasTradingLimit_ = !!value;
}
@synthesize tradingLimit;
- (BOOL) hasRiskControl {
  return !!hasRiskControl_;
}
- (void) setHasRiskControl:(BOOL) value {
  hasRiskControl_ = !!value;
}
@synthesize riskControl;
- (BOOL) hasMinCommission {
  return !!hasMinCommission_;
}
- (void) setHasMinCommission:(BOOL) value {
  hasMinCommission_ = !!value;
}
@synthesize minCommission;
- (BOOL) hasRegCommission {
  return !!hasRegCommission_;
}
- (void) setHasRegCommission:(BOOL) value {
  hasRegCommission_ = !!value;
}
@synthesize regCommission;
- (BOOL) hasNegoBuyCommission {
  return !!hasNegoBuyCommission_;
}
- (void) setHasNegoBuyCommission:(BOOL) value {
  hasNegoBuyCommission_ = !!value;
}
@synthesize negoBuyCommission;
- (BOOL) hasNegoSellCommission {
  return !!hasNegoSellCommission_;
}
- (void) setHasNegoSellCommission:(BOOL) value {
  hasNegoSellCommission_ = !!value;
}
@synthesize negoSellCommission;
- (BOOL) hasGeneral {
  return !!hasGeneral_;
}
- (void) setHasGeneral:(BOOL) value {
  hasGeneral_ = !!value;
}
@synthesize general;
- (id) init {
  if ((self = [super init])) {
    self.typeName = @"";
    self.clientcode = @"";
    self.name = @"";
    self.sid = @"";
    self.foreigner = @"";
    self.isMargin = NO;
    self.tradingLimit = 0;
    self.riskControl = 0;
    self.minCommission = 0;
    self.regCommission = 0;
    self.negoBuyCommission = 0;
    self.negoSellCommission = 0;
    self.general = @"";
  }
  return self;
}
static ClientList* defaultClientListInstance = nil;
+ (void) initialize {
  if (self == [ClientList class]) {
    defaultClientListInstance = [[ClientList alloc] init];
  }
}
+ (ClientList*) defaultInstance {
  return defaultClientListInstance;
}
- (ClientList*) defaultInstance {
  return defaultClientListInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTypeName) {
    [output writeString:1 value:self.typeName];
  }
  if (self.hasClientcode) {
    [output writeString:2 value:self.clientcode];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasSid) {
    [output writeString:4 value:self.sid];
  }
  if (self.hasForeigner) {
    [output writeString:5 value:self.foreigner];
  }
  if (self.hasIsMargin) {
    [output writeBool:6 value:self.isMargin];
  }
  if (self.hasTradingLimit) {
    [output writeDouble:7 value:self.tradingLimit];
  }
  if (self.hasRiskControl) {
    [output writeInt32:8 value:self.riskControl];
  }
  if (self.hasMinCommission) {
    [output writeDouble:9 value:self.minCommission];
  }
  if (self.hasRegCommission) {
    [output writeDouble:10 value:self.regCommission];
  }
  if (self.hasNegoBuyCommission) {
    [output writeDouble:11 value:self.negoBuyCommission];
  }
  if (self.hasNegoSellCommission) {
    [output writeDouble:12 value:self.negoSellCommission];
  }
  if (self.hasGeneral) {
    [output writeString:13 value:self.general];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTypeName) {
    size += computeStringSize(1, self.typeName);
  }
  if (self.hasClientcode) {
    size += computeStringSize(2, self.clientcode);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasSid) {
    size += computeStringSize(4, self.sid);
  }
  if (self.hasForeigner) {
    size += computeStringSize(5, self.foreigner);
  }
  if (self.hasIsMargin) {
    size += computeBoolSize(6, self.isMargin);
  }
  if (self.hasTradingLimit) {
    size += computeDoubleSize(7, self.tradingLimit);
  }
  if (self.hasRiskControl) {
    size += computeInt32Size(8, self.riskControl);
  }
  if (self.hasMinCommission) {
    size += computeDoubleSize(9, self.minCommission);
  }
  if (self.hasRegCommission) {
    size += computeDoubleSize(10, self.regCommission);
  }
  if (self.hasNegoBuyCommission) {
    size += computeDoubleSize(11, self.negoBuyCommission);
  }
  if (self.hasNegoSellCommission) {
    size += computeDoubleSize(12, self.negoSellCommission);
  }
  if (self.hasGeneral) {
    size += computeStringSize(13, self.general);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ClientList*) parseFromData:(NSData*) data {
  return (ClientList*)[[[ClientList builder] mergeFromData:data] build];
}
+ (ClientList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientList*)[[[ClientList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientList*) parseFromInputStream:(NSInputStream*) input {
  return (ClientList*)[[[ClientList builder] mergeFromInputStream:input] build];
}
+ (ClientList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientList*)[[[ClientList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientList*)[[[ClientList builder] mergeFromCodedInputStream:input] build];
}
+ (ClientList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientList*)[[[ClientList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientList_Builder*) builder {
  return [[ClientList_Builder alloc] init];
}
+ (ClientList_Builder*) builderWithPrototype:(ClientList*) prototype {
  return [[ClientList builder] mergeFrom:prototype];
}
- (ClientList_Builder*) builder {
  return [ClientList builder];
}
- (ClientList_Builder*) toBuilder {
  return [ClientList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTypeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeName", self.typeName];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sid", self.sid];
  }
  if (self.hasForeigner) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreigner", self.foreigner];
  }
  if (self.hasIsMargin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isMargin", [NSNumber numberWithBool:self.isMargin]];
  }
  if (self.hasTradingLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradingLimit", [NSNumber numberWithDouble:self.tradingLimit]];
  }
  if (self.hasRiskControl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"riskControl", [NSNumber numberWithInt:self.riskControl]];
  }
  if (self.hasMinCommission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minCommission", [NSNumber numberWithDouble:self.minCommission]];
  }
  if (self.hasRegCommission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regCommission", [NSNumber numberWithDouble:self.regCommission]];
  }
  if (self.hasNegoBuyCommission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negoBuyCommission", [NSNumber numberWithDouble:self.negoBuyCommission]];
  }
  if (self.hasNegoSellCommission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negoSellCommission", [NSNumber numberWithDouble:self.negoSellCommission]];
  }
  if (self.hasGeneral) {
    [output appendFormat:@"%@%@: %@\n", indent, @"general", self.general];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientList class]]) {
    return NO;
  }
  ClientList *otherMessage = other;
  return
      self.hasTypeName == otherMessage.hasTypeName &&
      (!self.hasTypeName || [self.typeName isEqual:otherMessage.typeName]) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSid == otherMessage.hasSid &&
      (!self.hasSid || [self.sid isEqual:otherMessage.sid]) &&
      self.hasForeigner == otherMessage.hasForeigner &&
      (!self.hasForeigner || [self.foreigner isEqual:otherMessage.foreigner]) &&
      self.hasIsMargin == otherMessage.hasIsMargin &&
      (!self.hasIsMargin || self.isMargin == otherMessage.isMargin) &&
      self.hasTradingLimit == otherMessage.hasTradingLimit &&
      (!self.hasTradingLimit || self.tradingLimit == otherMessage.tradingLimit) &&
      self.hasRiskControl == otherMessage.hasRiskControl &&
      (!self.hasRiskControl || self.riskControl == otherMessage.riskControl) &&
      self.hasMinCommission == otherMessage.hasMinCommission &&
      (!self.hasMinCommission || self.minCommission == otherMessage.minCommission) &&
      self.hasRegCommission == otherMessage.hasRegCommission &&
      (!self.hasRegCommission || self.regCommission == otherMessage.regCommission) &&
      self.hasNegoBuyCommission == otherMessage.hasNegoBuyCommission &&
      (!self.hasNegoBuyCommission || self.negoBuyCommission == otherMessage.negoBuyCommission) &&
      self.hasNegoSellCommission == otherMessage.hasNegoSellCommission &&
      (!self.hasNegoSellCommission || self.negoSellCommission == otherMessage.negoSellCommission) &&
      self.hasGeneral == otherMessage.hasGeneral &&
      (!self.hasGeneral || [self.general isEqual:otherMessage.general]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTypeName) {
    hashCode = hashCode * 31 + [self.typeName hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSid) {
    hashCode = hashCode * 31 + [self.sid hash];
  }
  if (self.hasForeigner) {
    hashCode = hashCode * 31 + [self.foreigner hash];
  }
  if (self.hasIsMargin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isMargin] hash];
  }
  if (self.hasTradingLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tradingLimit] hash];
  }
  if (self.hasRiskControl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.riskControl] hash];
  }
  if (self.hasMinCommission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.minCommission] hash];
  }
  if (self.hasRegCommission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.regCommission] hash];
  }
  if (self.hasNegoBuyCommission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.negoBuyCommission] hash];
  }
  if (self.hasNegoSellCommission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.negoSellCommission] hash];
  }
  if (self.hasGeneral) {
    hashCode = hashCode * 31 + [self.general hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientList_Builder()
@property (strong) ClientList* result;
@end

@implementation ClientList_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientList_Builder*) clear {
  self.result = [[ClientList alloc] init];
  return self;
}
- (ClientList_Builder*) clone {
  return [ClientList builderWithPrototype:result];
}
- (ClientList*) defaultInstance {
  return [ClientList defaultInstance];
}
- (ClientList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientList*) buildPartial {
  ClientList* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientList_Builder*) mergeFrom:(ClientList*) other {
  if (other == [ClientList defaultInstance]) {
    return self;
  }
  if (other.hasTypeName) {
    [self setTypeName:other.typeName];
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasForeigner) {
    [self setForeigner:other.foreigner];
  }
  if (other.hasIsMargin) {
    [self setIsMargin:other.isMargin];
  }
  if (other.hasTradingLimit) {
    [self setTradingLimit:other.tradingLimit];
  }
  if (other.hasRiskControl) {
    [self setRiskControl:other.riskControl];
  }
  if (other.hasMinCommission) {
    [self setMinCommission:other.minCommission];
  }
  if (other.hasRegCommission) {
    [self setRegCommission:other.regCommission];
  }
  if (other.hasNegoBuyCommission) {
    [self setNegoBuyCommission:other.negoBuyCommission];
  }
  if (other.hasNegoSellCommission) {
    [self setNegoSellCommission:other.negoSellCommission];
  }
  if (other.hasGeneral) {
    [self setGeneral:other.general];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTypeName:[input readString]];
        break;
      }
      case 18: {
        [self setClientcode:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setSid:[input readString]];
        break;
      }
      case 42: {
        [self setForeigner:[input readString]];
        break;
      }
      case 48: {
        [self setIsMargin:[input readBool]];
        break;
      }
      case 57: {
        [self setTradingLimit:[input readDouble]];
        break;
      }
      case 64: {
        [self setRiskControl:[input readInt32]];
        break;
      }
      case 73: {
        [self setMinCommission:[input readDouble]];
        break;
      }
      case 81: {
        [self setRegCommission:[input readDouble]];
        break;
      }
      case 89: {
        [self setNegoBuyCommission:[input readDouble]];
        break;
      }
      case 97: {
        [self setNegoSellCommission:[input readDouble]];
        break;
      }
      case 106: {
        [self setGeneral:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTypeName {
  return result.hasTypeName;
}
- (NSString*) typeName {
  return result.typeName;
}
- (ClientList_Builder*) setTypeName:(NSString*) value {
  result.hasTypeName = YES;
  result.typeName = value;
  return self;
}
- (ClientList_Builder*) clearTypeName {
  result.hasTypeName = NO;
  result.typeName = @"";
  return self;
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (ClientList_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (ClientList_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (ClientList_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (ClientList_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasSid {
  return result.hasSid;
}
- (NSString*) sid {
  return result.sid;
}
- (ClientList_Builder*) setSid:(NSString*) value {
  result.hasSid = YES;
  result.sid = value;
  return self;
}
- (ClientList_Builder*) clearSid {
  result.hasSid = NO;
  result.sid = @"";
  return self;
}
- (BOOL) hasForeigner {
  return result.hasForeigner;
}
- (NSString*) foreigner {
  return result.foreigner;
}
- (ClientList_Builder*) setForeigner:(NSString*) value {
  result.hasForeigner = YES;
  result.foreigner = value;
  return self;
}
- (ClientList_Builder*) clearForeigner {
  result.hasForeigner = NO;
  result.foreigner = @"";
  return self;
}
- (BOOL) hasIsMargin {
  return result.hasIsMargin;
}
- (BOOL) isMargin {
  return result.isMargin;
}
- (ClientList_Builder*) setIsMargin:(BOOL) value {
  result.hasIsMargin = YES;
  result.isMargin = value;
  return self;
}
- (ClientList_Builder*) clearIsMargin {
  result.hasIsMargin = NO;
  result.isMargin = NO;
  return self;
}
- (BOOL) hasTradingLimit {
  return result.hasTradingLimit;
}
- (Float64) tradingLimit {
  return result.tradingLimit;
}
- (ClientList_Builder*) setTradingLimit:(Float64) value {
  result.hasTradingLimit = YES;
  result.tradingLimit = value;
  return self;
}
- (ClientList_Builder*) clearTradingLimit {
  result.hasTradingLimit = NO;
  result.tradingLimit = 0;
  return self;
}
- (BOOL) hasRiskControl {
  return result.hasRiskControl;
}
- (int32_t) riskControl {
  return result.riskControl;
}
- (ClientList_Builder*) setRiskControl:(int32_t) value {
  result.hasRiskControl = YES;
  result.riskControl = value;
  return self;
}
- (ClientList_Builder*) clearRiskControl {
  result.hasRiskControl = NO;
  result.riskControl = 0;
  return self;
}
- (BOOL) hasMinCommission {
  return result.hasMinCommission;
}
- (Float64) minCommission {
  return result.minCommission;
}
- (ClientList_Builder*) setMinCommission:(Float64) value {
  result.hasMinCommission = YES;
  result.minCommission = value;
  return self;
}
- (ClientList_Builder*) clearMinCommission {
  result.hasMinCommission = NO;
  result.minCommission = 0;
  return self;
}
- (BOOL) hasRegCommission {
  return result.hasRegCommission;
}
- (Float64) regCommission {
  return result.regCommission;
}
- (ClientList_Builder*) setRegCommission:(Float64) value {
  result.hasRegCommission = YES;
  result.regCommission = value;
  return self;
}
- (ClientList_Builder*) clearRegCommission {
  result.hasRegCommission = NO;
  result.regCommission = 0;
  return self;
}
- (BOOL) hasNegoBuyCommission {
  return result.hasNegoBuyCommission;
}
- (Float64) negoBuyCommission {
  return result.negoBuyCommission;
}
- (ClientList_Builder*) setNegoBuyCommission:(Float64) value {
  result.hasNegoBuyCommission = YES;
  result.negoBuyCommission = value;
  return self;
}
- (ClientList_Builder*) clearNegoBuyCommission {
  result.hasNegoBuyCommission = NO;
  result.negoBuyCommission = 0;
  return self;
}
- (BOOL) hasNegoSellCommission {
  return result.hasNegoSellCommission;
}
- (Float64) negoSellCommission {
  return result.negoSellCommission;
}
- (ClientList_Builder*) setNegoSellCommission:(Float64) value {
  result.hasNegoSellCommission = YES;
  result.negoSellCommission = value;
  return self;
}
- (ClientList_Builder*) clearNegoSellCommission {
  result.hasNegoSellCommission = NO;
  result.negoSellCommission = 0;
  return self;
}
- (BOOL) hasGeneral {
  return result.hasGeneral;
}
- (NSString*) general {
  return result.general;
}
- (ClientList_Builder*) setGeneral:(NSString*) value {
  result.hasGeneral = YES;
  result.general = value;
  return self;
}
- (ClientList_Builder*) clearGeneral {
  result.hasGeneral = NO;
  result.general = @"";
  return self;
}
@end

@interface RDNList ()
@property (strong) NSString* clientcode;
@property (strong) NSString* rdn;
@property int32_t effectiveDate;
@end

@implementation RDNList

- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasRdn {
  return !!hasRdn_;
}
- (void) setHasRdn:(BOOL) value {
  hasRdn_ = !!value;
}
@synthesize rdn;
- (BOOL) hasEffectiveDate {
  return !!hasEffectiveDate_;
}
- (void) setHasEffectiveDate:(BOOL) value {
  hasEffectiveDate_ = !!value;
}
@synthesize effectiveDate;
- (id) init {
  if ((self = [super init])) {
    self.clientcode = @"";
    self.rdn = @"";
    self.effectiveDate = 0;
  }
  return self;
}
static RDNList* defaultRDNListInstance = nil;
+ (void) initialize {
  if (self == [RDNList class]) {
    defaultRDNListInstance = [[RDNList alloc] init];
  }
}
+ (RDNList*) defaultInstance {
  return defaultRDNListInstance;
}
- (RDNList*) defaultInstance {
  return defaultRDNListInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClientcode) {
    [output writeString:1 value:self.clientcode];
  }
  if (self.hasRdn) {
    [output writeString:2 value:self.rdn];
  }
  if (self.hasEffectiveDate) {
    [output writeInt32:3 value:self.effectiveDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasClientcode) {
    size += computeStringSize(1, self.clientcode);
  }
  if (self.hasRdn) {
    size += computeStringSize(2, self.rdn);
  }
  if (self.hasEffectiveDate) {
    size += computeInt32Size(3, self.effectiveDate);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RDNList*) parseFromData:(NSData*) data {
  return (RDNList*)[[[RDNList builder] mergeFromData:data] build];
}
+ (RDNList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RDNList*)[[[RDNList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RDNList*) parseFromInputStream:(NSInputStream*) input {
  return (RDNList*)[[[RDNList builder] mergeFromInputStream:input] build];
}
+ (RDNList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RDNList*)[[[RDNList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RDNList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RDNList*)[[[RDNList builder] mergeFromCodedInputStream:input] build];
}
+ (RDNList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RDNList*)[[[RDNList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RDNList_Builder*) builder {
  return [[RDNList_Builder alloc] init];
}
+ (RDNList_Builder*) builderWithPrototype:(RDNList*) prototype {
  return [[RDNList builder] mergeFrom:prototype];
}
- (RDNList_Builder*) builder {
  return [RDNList builder];
}
- (RDNList_Builder*) toBuilder {
  return [RDNList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasRdn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rdn", self.rdn];
  }
  if (self.hasEffectiveDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"effectiveDate", [NSNumber numberWithInt:self.effectiveDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RDNList class]]) {
    return NO;
  }
  RDNList *otherMessage = other;
  return
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasRdn == otherMessage.hasRdn &&
      (!self.hasRdn || [self.rdn isEqual:otherMessage.rdn]) &&
      self.hasEffectiveDate == otherMessage.hasEffectiveDate &&
      (!self.hasEffectiveDate || self.effectiveDate == otherMessage.effectiveDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasRdn) {
    hashCode = hashCode * 31 + [self.rdn hash];
  }
  if (self.hasEffectiveDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.effectiveDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RDNList_Builder()
@property (strong) RDNList* result;
@end

@implementation RDNList_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[RDNList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RDNList_Builder*) clear {
  self.result = [[RDNList alloc] init];
  return self;
}
- (RDNList_Builder*) clone {
  return [RDNList builderWithPrototype:result];
}
- (RDNList*) defaultInstance {
  return [RDNList defaultInstance];
}
- (RDNList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RDNList*) buildPartial {
  RDNList* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (RDNList_Builder*) mergeFrom:(RDNList*) other {
  if (other == [RDNList defaultInstance]) {
    return self;
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasRdn) {
    [self setRdn:other.rdn];
  }
  if (other.hasEffectiveDate) {
    [self setEffectiveDate:other.effectiveDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RDNList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RDNList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClientcode:[input readString]];
        break;
      }
      case 18: {
        [self setRdn:[input readString]];
        break;
      }
      case 24: {
        [self setEffectiveDate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (RDNList_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (RDNList_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasRdn {
  return result.hasRdn;
}
- (NSString*) rdn {
  return result.rdn;
}
- (RDNList_Builder*) setRdn:(NSString*) value {
  result.hasRdn = YES;
  result.rdn = value;
  return self;
}
- (RDNList_Builder*) clearRdn {
  result.hasRdn = NO;
  result.rdn = @"";
  return self;
}
- (BOOL) hasEffectiveDate {
  return result.hasEffectiveDate;
}
- (int32_t) effectiveDate {
  return result.effectiveDate;
}
- (RDNList_Builder*) setEffectiveDate:(int32_t) value {
  result.hasEffectiveDate = YES;
  result.effectiveDate = value;
  return self;
}
- (RDNList_Builder*) clearEffectiveDate {
  result.hasEffectiveDate = NO;
  result.effectiveDate = 0;
  return self;
}
@end

@interface Portfolio ()
@property Float64 lot;
@property Float64 stockInHand;
@property Float64 avgPrice;
@property Float64 potentialProfitLoss;
@property Float64 potentialProfitLossPct;
@property (strong) NSString* stockcode;
@property Float64 outstanding;
@property (strong) NSString* clientcode;
@property (strong) NSString* privileges;
@end

@implementation Portfolio

- (BOOL) hasLot {
  return !!hasLot_;
}
- (void) setHasLot:(BOOL) value {
  hasLot_ = !!value;
}
@synthesize lot;
- (BOOL) hasStockInHand {
  return !!hasStockInHand_;
}
- (void) setHasStockInHand:(BOOL) value {
  hasStockInHand_ = !!value;
}
@synthesize stockInHand;
- (BOOL) hasAvgPrice {
  return !!hasAvgPrice_;
}
- (void) setHasAvgPrice:(BOOL) value {
  hasAvgPrice_ = !!value;
}
@synthesize avgPrice;
- (BOOL) hasPotentialProfitLoss {
  return !!hasPotentialProfitLoss_;
}
- (void) setHasPotentialProfitLoss:(BOOL) value {
  hasPotentialProfitLoss_ = !!value;
}
@synthesize potentialProfitLoss;
- (BOOL) hasPotentialProfitLossPct {
  return !!hasPotentialProfitLossPct_;
}
- (void) setHasPotentialProfitLossPct:(BOOL) value {
  hasPotentialProfitLossPct_ = !!value;
}
@synthesize potentialProfitLossPct;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasOutstanding {
  return !!hasOutstanding_;
}
- (void) setHasOutstanding:(BOOL) value {
  hasOutstanding_ = !!value;
}
@synthesize outstanding;
- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasPrivileges {
  return !!hasPrivileges_;
}
- (void) setHasPrivileges:(BOOL) value {
  hasPrivileges_ = !!value;
}
@synthesize privileges;
- (id) init {
  if ((self = [super init])) {
    self.lot = 0;
    self.stockInHand = 0;
    self.avgPrice = 0;
    self.potentialProfitLoss = 0;
    self.potentialProfitLossPct = 0;
    self.stockcode = @"";
    self.outstanding = 0;
    self.clientcode = @"";
    self.privileges = @"";
  }
  return self;
}
static Portfolio* defaultPortfolioInstance = nil;
+ (void) initialize {
  if (self == [Portfolio class]) {
    defaultPortfolioInstance = [[Portfolio alloc] init];
  }
}
+ (Portfolio*) defaultInstance {
  return defaultPortfolioInstance;
}
- (Portfolio*) defaultInstance {
  return defaultPortfolioInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLot) {
    [output writeDouble:1 value:self.lot];
  }
  if (self.hasStockInHand) {
    [output writeDouble:2 value:self.stockInHand];
  }
  if (self.hasAvgPrice) {
    [output writeDouble:3 value:self.avgPrice];
  }
  if (self.hasPotentialProfitLoss) {
    [output writeDouble:4 value:self.potentialProfitLoss];
  }
  if (self.hasPotentialProfitLossPct) {
    [output writeDouble:5 value:self.potentialProfitLossPct];
  }
  if (self.hasStockcode) {
    [output writeString:6 value:self.stockcode];
  }
  if (self.hasOutstanding) {
    [output writeDouble:7 value:self.outstanding];
  }
  if (self.hasClientcode) {
    [output writeString:8 value:self.clientcode];
  }
  if (self.hasPrivileges) {
    [output writeString:9 value:self.privileges];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLot) {
    size += computeDoubleSize(1, self.lot);
  }
  if (self.hasStockInHand) {
    size += computeDoubleSize(2, self.stockInHand);
  }
  if (self.hasAvgPrice) {
    size += computeDoubleSize(3, self.avgPrice);
  }
  if (self.hasPotentialProfitLoss) {
    size += computeDoubleSize(4, self.potentialProfitLoss);
  }
  if (self.hasPotentialProfitLossPct) {
    size += computeDoubleSize(5, self.potentialProfitLossPct);
  }
  if (self.hasStockcode) {
    size += computeStringSize(6, self.stockcode);
  }
  if (self.hasOutstanding) {
    size += computeDoubleSize(7, self.outstanding);
  }
  if (self.hasClientcode) {
    size += computeStringSize(8, self.clientcode);
  }
  if (self.hasPrivileges) {
    size += computeStringSize(9, self.privileges);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Portfolio*) parseFromData:(NSData*) data {
  return (Portfolio*)[[[Portfolio builder] mergeFromData:data] build];
}
+ (Portfolio*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Portfolio*)[[[Portfolio builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Portfolio*) parseFromInputStream:(NSInputStream*) input {
  return (Portfolio*)[[[Portfolio builder] mergeFromInputStream:input] build];
}
+ (Portfolio*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Portfolio*)[[[Portfolio builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Portfolio*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Portfolio*)[[[Portfolio builder] mergeFromCodedInputStream:input] build];
}
+ (Portfolio*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Portfolio*)[[[Portfolio builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Portfolio_Builder*) builder {
  return [[Portfolio_Builder alloc] init];
}
+ (Portfolio_Builder*) builderWithPrototype:(Portfolio*) prototype {
  return [[Portfolio builder] mergeFrom:prototype];
}
- (Portfolio_Builder*) builder {
  return [Portfolio builder];
}
- (Portfolio_Builder*) toBuilder {
  return [Portfolio builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasLot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lot", [NSNumber numberWithDouble:self.lot]];
  }
  if (self.hasStockInHand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockInHand", [NSNumber numberWithDouble:self.stockInHand]];
  }
  if (self.hasAvgPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avgPrice", [NSNumber numberWithDouble:self.avgPrice]];
  }
  if (self.hasPotentialProfitLoss) {
    [output appendFormat:@"%@%@: %@\n", indent, @"potentialProfitLoss", [NSNumber numberWithDouble:self.potentialProfitLoss]];
  }
  if (self.hasPotentialProfitLossPct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"potentialProfitLossPct", [NSNumber numberWithDouble:self.potentialProfitLossPct]];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasOutstanding) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outstanding", [NSNumber numberWithDouble:self.outstanding]];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasPrivileges) {
    [output appendFormat:@"%@%@: %@\n", indent, @"privileges", self.privileges];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Portfolio class]]) {
    return NO;
  }
  Portfolio *otherMessage = other;
  return
      self.hasLot == otherMessage.hasLot &&
      (!self.hasLot || self.lot == otherMessage.lot) &&
      self.hasStockInHand == otherMessage.hasStockInHand &&
      (!self.hasStockInHand || self.stockInHand == otherMessage.stockInHand) &&
      self.hasAvgPrice == otherMessage.hasAvgPrice &&
      (!self.hasAvgPrice || self.avgPrice == otherMessage.avgPrice) &&
      self.hasPotentialProfitLoss == otherMessage.hasPotentialProfitLoss &&
      (!self.hasPotentialProfitLoss || self.potentialProfitLoss == otherMessage.potentialProfitLoss) &&
      self.hasPotentialProfitLossPct == otherMessage.hasPotentialProfitLossPct &&
      (!self.hasPotentialProfitLossPct || self.potentialProfitLossPct == otherMessage.potentialProfitLossPct) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasOutstanding == otherMessage.hasOutstanding &&
      (!self.hasOutstanding || self.outstanding == otherMessage.outstanding) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasPrivileges == otherMessage.hasPrivileges &&
      (!self.hasPrivileges || [self.privileges isEqual:otherMessage.privileges]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasLot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lot] hash];
  }
  if (self.hasStockInHand) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.stockInHand] hash];
  }
  if (self.hasAvgPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.avgPrice] hash];
  }
  if (self.hasPotentialProfitLoss) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.potentialProfitLoss] hash];
  }
  if (self.hasPotentialProfitLossPct) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.potentialProfitLossPct] hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasOutstanding) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.outstanding] hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasPrivileges) {
    hashCode = hashCode * 31 + [self.privileges hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Portfolio_Builder()
@property (strong) Portfolio* result;
@end

@implementation Portfolio_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Portfolio alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Portfolio_Builder*) clear {
  self.result = [[Portfolio alloc] init];
  return self;
}
- (Portfolio_Builder*) clone {
  return [Portfolio builderWithPrototype:result];
}
- (Portfolio*) defaultInstance {
  return [Portfolio defaultInstance];
}
- (Portfolio*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Portfolio*) buildPartial {
  Portfolio* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Portfolio_Builder*) mergeFrom:(Portfolio*) other {
  if (other == [Portfolio defaultInstance]) {
    return self;
  }
  if (other.hasLot) {
    [self setLot:other.lot];
  }
  if (other.hasStockInHand) {
    [self setStockInHand:other.stockInHand];
  }
  if (other.hasAvgPrice) {
    [self setAvgPrice:other.avgPrice];
  }
  if (other.hasPotentialProfitLoss) {
    [self setPotentialProfitLoss:other.potentialProfitLoss];
  }
  if (other.hasPotentialProfitLossPct) {
    [self setPotentialProfitLossPct:other.potentialProfitLossPct];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasOutstanding) {
    [self setOutstanding:other.outstanding];
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasPrivileges) {
    [self setPrivileges:other.privileges];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Portfolio_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Portfolio_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLot:[input readDouble]];
        break;
      }
      case 17: {
        [self setStockInHand:[input readDouble]];
        break;
      }
      case 25: {
        [self setAvgPrice:[input readDouble]];
        break;
      }
      case 33: {
        [self setPotentialProfitLoss:[input readDouble]];
        break;
      }
      case 41: {
        [self setPotentialProfitLossPct:[input readDouble]];
        break;
      }
      case 50: {
        [self setStockcode:[input readString]];
        break;
      }
      case 57: {
        [self setOutstanding:[input readDouble]];
        break;
      }
      case 66: {
        [self setClientcode:[input readString]];
        break;
      }
      case 74: {
        [self setPrivileges:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLot {
  return result.hasLot;
}
- (Float64) lot {
  return result.lot;
}
- (Portfolio_Builder*) setLot:(Float64) value {
  result.hasLot = YES;
  result.lot = value;
  return self;
}
- (Portfolio_Builder*) clearLot {
  result.hasLot = NO;
  result.lot = 0;
  return self;
}
- (BOOL) hasStockInHand {
  return result.hasStockInHand;
}
- (Float64) stockInHand {
  return result.stockInHand;
}
- (Portfolio_Builder*) setStockInHand:(Float64) value {
  result.hasStockInHand = YES;
  result.stockInHand = value;
  return self;
}
- (Portfolio_Builder*) clearStockInHand {
  result.hasStockInHand = NO;
  result.stockInHand = 0;
  return self;
}
- (BOOL) hasAvgPrice {
  return result.hasAvgPrice;
}
- (Float64) avgPrice {
  return result.avgPrice;
}
- (Portfolio_Builder*) setAvgPrice:(Float64) value {
  result.hasAvgPrice = YES;
  result.avgPrice = value;
  return self;
}
- (Portfolio_Builder*) clearAvgPrice {
  result.hasAvgPrice = NO;
  result.avgPrice = 0;
  return self;
}
- (BOOL) hasPotentialProfitLoss {
  return result.hasPotentialProfitLoss;
}
- (Float64) potentialProfitLoss {
  return result.potentialProfitLoss;
}
- (Portfolio_Builder*) setPotentialProfitLoss:(Float64) value {
  result.hasPotentialProfitLoss = YES;
  result.potentialProfitLoss = value;
  return self;
}
- (Portfolio_Builder*) clearPotentialProfitLoss {
  result.hasPotentialProfitLoss = NO;
  result.potentialProfitLoss = 0;
  return self;
}
- (BOOL) hasPotentialProfitLossPct {
  return result.hasPotentialProfitLossPct;
}
- (Float64) potentialProfitLossPct {
  return result.potentialProfitLossPct;
}
- (Portfolio_Builder*) setPotentialProfitLossPct:(Float64) value {
  result.hasPotentialProfitLossPct = YES;
  result.potentialProfitLossPct = value;
  return self;
}
- (Portfolio_Builder*) clearPotentialProfitLossPct {
  result.hasPotentialProfitLossPct = NO;
  result.potentialProfitLossPct = 0;
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (Portfolio_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (Portfolio_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasOutstanding {
  return result.hasOutstanding;
}
- (Float64) outstanding {
  return result.outstanding;
}
- (Portfolio_Builder*) setOutstanding:(Float64) value {
  result.hasOutstanding = YES;
  result.outstanding = value;
  return self;
}
- (Portfolio_Builder*) clearOutstanding {
  result.hasOutstanding = NO;
  result.outstanding = 0;
  return self;
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (Portfolio_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (Portfolio_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasPrivileges {
  return result.hasPrivileges;
}
- (NSString*) privileges {
  return result.privileges;
}
- (Portfolio_Builder*) setPrivileges:(NSString*) value {
  result.hasPrivileges = YES;
  result.privileges = value;
  return self;
}
- (Portfolio_Builder*) clearPrivileges {
  result.hasPrivileges = NO;
  result.privileges = @"";
  return self;
}
@end

@interface CustomerPosition ()
@property (strong) NSString* clientcode;
@property (strong) NSString* name;
@property (strong) NSString* type;
@property (strong) NSString* investorAcc;
@property (strong) NSString* sid;
@property Float64 orderPower;
@property Float64 loanBalance;
@property Float64 tradingLimit;
@property Float64 loanRatio;
@property Float64 marketValue;
@property Float64 modifiedMarketValue;
@property Float64 modifiedLoanValue;
@property (strong) NSString* rating;
@property Float64 buyingPower;
@property Float64 outstanding;
@property Float64 buyTradeValue;
@property Float64 buyOrderValue;
@property Float64 sellTradeValue;
@property Float64 nettProfitLoss;
@property Float64 nettProfitLossPct;
@end

@implementation CustomerPosition

- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasInvestorAcc {
  return !!hasInvestorAcc_;
}
- (void) setHasInvestorAcc:(BOOL) value {
  hasInvestorAcc_ = !!value;
}
@synthesize investorAcc;
- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) value {
  hasSid_ = !!value;
}
@synthesize sid;
- (BOOL) hasOrderPower {
  return !!hasOrderPower_;
}
- (void) setHasOrderPower:(BOOL) value {
  hasOrderPower_ = !!value;
}
@synthesize orderPower;
- (BOOL) hasLoanBalance {
  return !!hasLoanBalance_;
}
- (void) setHasLoanBalance:(BOOL) value {
  hasLoanBalance_ = !!value;
}
@synthesize loanBalance;
- (BOOL) hasTradingLimit {
  return !!hasTradingLimit_;
}
- (void) setHasTradingLimit:(BOOL) value {
  hasTradingLimit_ = !!value;
}
@synthesize tradingLimit;
- (BOOL) hasLoanRatio {
  return !!hasLoanRatio_;
}
- (void) setHasLoanRatio:(BOOL) value {
  hasLoanRatio_ = !!value;
}
@synthesize loanRatio;
- (BOOL) hasMarketValue {
  return !!hasMarketValue_;
}
- (void) setHasMarketValue:(BOOL) value {
  hasMarketValue_ = !!value;
}
@synthesize marketValue;
- (BOOL) hasModifiedMarketValue {
  return !!hasModifiedMarketValue_;
}
- (void) setHasModifiedMarketValue:(BOOL) value {
  hasModifiedMarketValue_ = !!value;
}
@synthesize modifiedMarketValue;
- (BOOL) hasModifiedLoanValue {
  return !!hasModifiedLoanValue_;
}
- (void) setHasModifiedLoanValue:(BOOL) value {
  hasModifiedLoanValue_ = !!value;
}
@synthesize modifiedLoanValue;
- (BOOL) hasRating {
  return !!hasRating_;
}
- (void) setHasRating:(BOOL) value {
  hasRating_ = !!value;
}
@synthesize rating;
- (BOOL) hasBuyingPower {
  return !!hasBuyingPower_;
}
- (void) setHasBuyingPower:(BOOL) value {
  hasBuyingPower_ = !!value;
}
@synthesize buyingPower;
- (BOOL) hasOutstanding {
  return !!hasOutstanding_;
}
- (void) setHasOutstanding:(BOOL) value {
  hasOutstanding_ = !!value;
}
@synthesize outstanding;
- (BOOL) hasBuyTradeValue {
  return !!hasBuyTradeValue_;
}
- (void) setHasBuyTradeValue:(BOOL) value {
  hasBuyTradeValue_ = !!value;
}
@synthesize buyTradeValue;
- (BOOL) hasBuyOrderValue {
  return !!hasBuyOrderValue_;
}
- (void) setHasBuyOrderValue:(BOOL) value {
  hasBuyOrderValue_ = !!value;
}
@synthesize buyOrderValue;
- (BOOL) hasSellTradeValue {
  return !!hasSellTradeValue_;
}
- (void) setHasSellTradeValue:(BOOL) value {
  hasSellTradeValue_ = !!value;
}
@synthesize sellTradeValue;
- (BOOL) hasNettProfitLoss {
  return !!hasNettProfitLoss_;
}
- (void) setHasNettProfitLoss:(BOOL) value {
  hasNettProfitLoss_ = !!value;
}
@synthesize nettProfitLoss;
- (BOOL) hasNettProfitLossPct {
  return !!hasNettProfitLossPct_;
}
- (void) setHasNettProfitLossPct:(BOOL) value {
  hasNettProfitLossPct_ = !!value;
}
@synthesize nettProfitLossPct;
- (id) init {
  if ((self = [super init])) {
    self.clientcode = @"";
    self.name = @"";
    self.type = @"";
    self.investorAcc = @"";
    self.sid = @"";
    self.orderPower = 0;
    self.loanBalance = 0;
    self.tradingLimit = 0;
    self.loanRatio = 0;
    self.marketValue = 0;
    self.modifiedMarketValue = 0;
    self.modifiedLoanValue = 0;
    self.rating = @"";
    self.buyingPower = 0;
    self.outstanding = 0;
    self.buyTradeValue = 0;
    self.buyOrderValue = 0;
    self.sellTradeValue = 0;
    self.nettProfitLoss = 0;
    self.nettProfitLossPct = 0;
  }
  return self;
}
static CustomerPosition* defaultCustomerPositionInstance = nil;
+ (void) initialize {
  if (self == [CustomerPosition class]) {
    defaultCustomerPositionInstance = [[CustomerPosition alloc] init];
  }
}
+ (CustomerPosition*) defaultInstance {
  return defaultCustomerPositionInstance;
}
- (CustomerPosition*) defaultInstance {
  return defaultCustomerPositionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasInvestorAcc) {
    [output writeString:3 value:self.investorAcc];
  }
  if (self.hasSid) {
    [output writeString:4 value:self.sid];
  }
  if (self.hasOrderPower) {
    [output writeDouble:5 value:self.orderPower];
  }
  if (self.hasLoanBalance) {
    [output writeDouble:6 value:self.loanBalance];
  }
  if (self.hasTradingLimit) {
    [output writeDouble:7 value:self.tradingLimit];
  }
  if (self.hasLoanRatio) {
    [output writeDouble:8 value:self.loanRatio];
  }
  if (self.hasMarketValue) {
    [output writeDouble:9 value:self.marketValue];
  }
  if (self.hasModifiedMarketValue) {
    [output writeDouble:10 value:self.modifiedMarketValue];
  }
  if (self.hasModifiedLoanValue) {
    [output writeDouble:11 value:self.modifiedLoanValue];
  }
  if (self.hasRating) {
    [output writeString:12 value:self.rating];
  }
  if (self.hasBuyingPower) {
    [output writeDouble:13 value:self.buyingPower];
  }
  if (self.hasOutstanding) {
    [output writeDouble:14 value:self.outstanding];
  }
  if (self.hasBuyTradeValue) {
    [output writeDouble:15 value:self.buyTradeValue];
  }
  if (self.hasBuyOrderValue) {
    [output writeDouble:16 value:self.buyOrderValue];
  }
  if (self.hasSellTradeValue) {
    [output writeDouble:17 value:self.sellTradeValue];
  }
  if (self.hasNettProfitLoss) {
    [output writeDouble:18 value:self.nettProfitLoss];
  }
  if (self.hasNettProfitLossPct) {
    [output writeDouble:19 value:self.nettProfitLossPct];
  }
  if (self.hasClientcode) {
    [output writeString:20 value:self.clientcode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasType) {
    size += computeStringSize(2, self.type);
  }
  if (self.hasInvestorAcc) {
    size += computeStringSize(3, self.investorAcc);
  }
  if (self.hasSid) {
    size += computeStringSize(4, self.sid);
  }
  if (self.hasOrderPower) {
    size += computeDoubleSize(5, self.orderPower);
  }
  if (self.hasLoanBalance) {
    size += computeDoubleSize(6, self.loanBalance);
  }
  if (self.hasTradingLimit) {
    size += computeDoubleSize(7, self.tradingLimit);
  }
  if (self.hasLoanRatio) {
    size += computeDoubleSize(8, self.loanRatio);
  }
  if (self.hasMarketValue) {
    size += computeDoubleSize(9, self.marketValue);
  }
  if (self.hasModifiedMarketValue) {
    size += computeDoubleSize(10, self.modifiedMarketValue);
  }
  if (self.hasModifiedLoanValue) {
    size += computeDoubleSize(11, self.modifiedLoanValue);
  }
  if (self.hasRating) {
    size += computeStringSize(12, self.rating);
  }
  if (self.hasBuyingPower) {
    size += computeDoubleSize(13, self.buyingPower);
  }
  if (self.hasOutstanding) {
    size += computeDoubleSize(14, self.outstanding);
  }
  if (self.hasBuyTradeValue) {
    size += computeDoubleSize(15, self.buyTradeValue);
  }
  if (self.hasBuyOrderValue) {
    size += computeDoubleSize(16, self.buyOrderValue);
  }
  if (self.hasSellTradeValue) {
    size += computeDoubleSize(17, self.sellTradeValue);
  }
  if (self.hasNettProfitLoss) {
    size += computeDoubleSize(18, self.nettProfitLoss);
  }
  if (self.hasNettProfitLossPct) {
    size += computeDoubleSize(19, self.nettProfitLossPct);
  }
  if (self.hasClientcode) {
    size += computeStringSize(20, self.clientcode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CustomerPosition*) parseFromData:(NSData*) data {
  return (CustomerPosition*)[[[CustomerPosition builder] mergeFromData:data] build];
}
+ (CustomerPosition*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerPosition*)[[[CustomerPosition builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CustomerPosition*) parseFromInputStream:(NSInputStream*) input {
  return (CustomerPosition*)[[[CustomerPosition builder] mergeFromInputStream:input] build];
}
+ (CustomerPosition*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerPosition*)[[[CustomerPosition builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerPosition*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CustomerPosition*)[[[CustomerPosition builder] mergeFromCodedInputStream:input] build];
}
+ (CustomerPosition*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerPosition*)[[[CustomerPosition builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerPosition_Builder*) builder {
  return [[CustomerPosition_Builder alloc] init];
}
+ (CustomerPosition_Builder*) builderWithPrototype:(CustomerPosition*) prototype {
  return [[CustomerPosition builder] mergeFrom:prototype];
}
- (CustomerPosition_Builder*) builder {
  return [CustomerPosition builder];
}
- (CustomerPosition_Builder*) toBuilder {
  return [CustomerPosition builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasInvestorAcc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"investorAcc", self.investorAcc];
  }
  if (self.hasSid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sid", self.sid];
  }
  if (self.hasOrderPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderPower", [NSNumber numberWithDouble:self.orderPower]];
  }
  if (self.hasLoanBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loanBalance", [NSNumber numberWithDouble:self.loanBalance]];
  }
  if (self.hasTradingLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradingLimit", [NSNumber numberWithDouble:self.tradingLimit]];
  }
  if (self.hasLoanRatio) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loanRatio", [NSNumber numberWithDouble:self.loanRatio]];
  }
  if (self.hasMarketValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketValue", [NSNumber numberWithDouble:self.marketValue]];
  }
  if (self.hasModifiedMarketValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedMarketValue", [NSNumber numberWithDouble:self.modifiedMarketValue]];
  }
  if (self.hasModifiedLoanValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedLoanValue", [NSNumber numberWithDouble:self.modifiedLoanValue]];
  }
  if (self.hasRating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rating", self.rating];
  }
  if (self.hasBuyingPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyingPower", [NSNumber numberWithDouble:self.buyingPower]];
  }
  if (self.hasOutstanding) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outstanding", [NSNumber numberWithDouble:self.outstanding]];
  }
  if (self.hasBuyTradeValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyTradeValue", [NSNumber numberWithDouble:self.buyTradeValue]];
  }
  if (self.hasBuyOrderValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyOrderValue", [NSNumber numberWithDouble:self.buyOrderValue]];
  }
  if (self.hasSellTradeValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellTradeValue", [NSNumber numberWithDouble:self.sellTradeValue]];
  }
  if (self.hasNettProfitLoss) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nettProfitLoss", [NSNumber numberWithDouble:self.nettProfitLoss]];
  }
  if (self.hasNettProfitLossPct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nettProfitLossPct", [NSNumber numberWithDouble:self.nettProfitLossPct]];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CustomerPosition class]]) {
    return NO;
  }
  CustomerPosition *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasInvestorAcc == otherMessage.hasInvestorAcc &&
      (!self.hasInvestorAcc || [self.investorAcc isEqual:otherMessage.investorAcc]) &&
      self.hasSid == otherMessage.hasSid &&
      (!self.hasSid || [self.sid isEqual:otherMessage.sid]) &&
      self.hasOrderPower == otherMessage.hasOrderPower &&
      (!self.hasOrderPower || self.orderPower == otherMessage.orderPower) &&
      self.hasLoanBalance == otherMessage.hasLoanBalance &&
      (!self.hasLoanBalance || self.loanBalance == otherMessage.loanBalance) &&
      self.hasTradingLimit == otherMessage.hasTradingLimit &&
      (!self.hasTradingLimit || self.tradingLimit == otherMessage.tradingLimit) &&
      self.hasLoanRatio == otherMessage.hasLoanRatio &&
      (!self.hasLoanRatio || self.loanRatio == otherMessage.loanRatio) &&
      self.hasMarketValue == otherMessage.hasMarketValue &&
      (!self.hasMarketValue || self.marketValue == otherMessage.marketValue) &&
      self.hasModifiedMarketValue == otherMessage.hasModifiedMarketValue &&
      (!self.hasModifiedMarketValue || self.modifiedMarketValue == otherMessage.modifiedMarketValue) &&
      self.hasModifiedLoanValue == otherMessage.hasModifiedLoanValue &&
      (!self.hasModifiedLoanValue || self.modifiedLoanValue == otherMessage.modifiedLoanValue) &&
      self.hasRating == otherMessage.hasRating &&
      (!self.hasRating || [self.rating isEqual:otherMessage.rating]) &&
      self.hasBuyingPower == otherMessage.hasBuyingPower &&
      (!self.hasBuyingPower || self.buyingPower == otherMessage.buyingPower) &&
      self.hasOutstanding == otherMessage.hasOutstanding &&
      (!self.hasOutstanding || self.outstanding == otherMessage.outstanding) &&
      self.hasBuyTradeValue == otherMessage.hasBuyTradeValue &&
      (!self.hasBuyTradeValue || self.buyTradeValue == otherMessage.buyTradeValue) &&
      self.hasBuyOrderValue == otherMessage.hasBuyOrderValue &&
      (!self.hasBuyOrderValue || self.buyOrderValue == otherMessage.buyOrderValue) &&
      self.hasSellTradeValue == otherMessage.hasSellTradeValue &&
      (!self.hasSellTradeValue || self.sellTradeValue == otherMessage.sellTradeValue) &&
      self.hasNettProfitLoss == otherMessage.hasNettProfitLoss &&
      (!self.hasNettProfitLoss || self.nettProfitLoss == otherMessage.nettProfitLoss) &&
      self.hasNettProfitLossPct == otherMessage.hasNettProfitLossPct &&
      (!self.hasNettProfitLossPct || self.nettProfitLossPct == otherMessage.nettProfitLossPct) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasInvestorAcc) {
    hashCode = hashCode * 31 + [self.investorAcc hash];
  }
  if (self.hasSid) {
    hashCode = hashCode * 31 + [self.sid hash];
  }
  if (self.hasOrderPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderPower] hash];
  }
  if (self.hasLoanBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.loanBalance] hash];
  }
  if (self.hasTradingLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tradingLimit] hash];
  }
  if (self.hasLoanRatio) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.loanRatio] hash];
  }
  if (self.hasMarketValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.marketValue] hash];
  }
  if (self.hasModifiedMarketValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.modifiedMarketValue] hash];
  }
  if (self.hasModifiedLoanValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.modifiedLoanValue] hash];
  }
  if (self.hasRating) {
    hashCode = hashCode * 31 + [self.rating hash];
  }
  if (self.hasBuyingPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.buyingPower] hash];
  }
  if (self.hasOutstanding) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.outstanding] hash];
  }
  if (self.hasBuyTradeValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.buyTradeValue] hash];
  }
  if (self.hasBuyOrderValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.buyOrderValue] hash];
  }
  if (self.hasSellTradeValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.sellTradeValue] hash];
  }
  if (self.hasNettProfitLoss) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.nettProfitLoss] hash];
  }
  if (self.hasNettProfitLossPct) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.nettProfitLossPct] hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CustomerPosition_Builder()
@property (strong) CustomerPosition* result;
@end

@implementation CustomerPosition_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CustomerPosition alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CustomerPosition_Builder*) clear {
  self.result = [[CustomerPosition alloc] init];
  return self;
}
- (CustomerPosition_Builder*) clone {
  return [CustomerPosition builderWithPrototype:result];
}
- (CustomerPosition*) defaultInstance {
  return [CustomerPosition defaultInstance];
}
- (CustomerPosition*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CustomerPosition*) buildPartial {
  CustomerPosition* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CustomerPosition_Builder*) mergeFrom:(CustomerPosition*) other {
  if (other == [CustomerPosition defaultInstance]) {
    return self;
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasInvestorAcc) {
    [self setInvestorAcc:other.investorAcc];
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasOrderPower) {
    [self setOrderPower:other.orderPower];
  }
  if (other.hasLoanBalance) {
    [self setLoanBalance:other.loanBalance];
  }
  if (other.hasTradingLimit) {
    [self setTradingLimit:other.tradingLimit];
  }
  if (other.hasLoanRatio) {
    [self setLoanRatio:other.loanRatio];
  }
  if (other.hasMarketValue) {
    [self setMarketValue:other.marketValue];
  }
  if (other.hasModifiedMarketValue) {
    [self setModifiedMarketValue:other.modifiedMarketValue];
  }
  if (other.hasModifiedLoanValue) {
    [self setModifiedLoanValue:other.modifiedLoanValue];
  }
  if (other.hasRating) {
    [self setRating:other.rating];
  }
  if (other.hasBuyingPower) {
    [self setBuyingPower:other.buyingPower];
  }
  if (other.hasOutstanding) {
    [self setOutstanding:other.outstanding];
  }
  if (other.hasBuyTradeValue) {
    [self setBuyTradeValue:other.buyTradeValue];
  }
  if (other.hasBuyOrderValue) {
    [self setBuyOrderValue:other.buyOrderValue];
  }
  if (other.hasSellTradeValue) {
    [self setSellTradeValue:other.sellTradeValue];
  }
  if (other.hasNettProfitLoss) {
    [self setNettProfitLoss:other.nettProfitLoss];
  }
  if (other.hasNettProfitLossPct) {
    [self setNettProfitLossPct:other.nettProfitLossPct];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CustomerPosition_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CustomerPosition_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 26: {
        [self setInvestorAcc:[input readString]];
        break;
      }
      case 34: {
        [self setSid:[input readString]];
        break;
      }
      case 41: {
        [self setOrderPower:[input readDouble]];
        break;
      }
      case 49: {
        [self setLoanBalance:[input readDouble]];
        break;
      }
      case 57: {
        [self setTradingLimit:[input readDouble]];
        break;
      }
      case 65: {
        [self setLoanRatio:[input readDouble]];
        break;
      }
      case 73: {
        [self setMarketValue:[input readDouble]];
        break;
      }
      case 81: {
        [self setModifiedMarketValue:[input readDouble]];
        break;
      }
      case 89: {
        [self setModifiedLoanValue:[input readDouble]];
        break;
      }
      case 98: {
        [self setRating:[input readString]];
        break;
      }
      case 105: {
        [self setBuyingPower:[input readDouble]];
        break;
      }
      case 113: {
        [self setOutstanding:[input readDouble]];
        break;
      }
      case 121: {
        [self setBuyTradeValue:[input readDouble]];
        break;
      }
      case 129: {
        [self setBuyOrderValue:[input readDouble]];
        break;
      }
      case 137: {
        [self setSellTradeValue:[input readDouble]];
        break;
      }
      case 145: {
        [self setNettProfitLoss:[input readDouble]];
        break;
      }
      case 153: {
        [self setNettProfitLossPct:[input readDouble]];
        break;
      }
      case 162: {
        [self setClientcode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (CustomerPosition_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (CustomerPosition_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CustomerPosition_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CustomerPosition_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (CustomerPosition_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (CustomerPosition_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasInvestorAcc {
  return result.hasInvestorAcc;
}
- (NSString*) investorAcc {
  return result.investorAcc;
}
- (CustomerPosition_Builder*) setInvestorAcc:(NSString*) value {
  result.hasInvestorAcc = YES;
  result.investorAcc = value;
  return self;
}
- (CustomerPosition_Builder*) clearInvestorAcc {
  result.hasInvestorAcc = NO;
  result.investorAcc = @"";
  return self;
}
- (BOOL) hasSid {
  return result.hasSid;
}
- (NSString*) sid {
  return result.sid;
}
- (CustomerPosition_Builder*) setSid:(NSString*) value {
  result.hasSid = YES;
  result.sid = value;
  return self;
}
- (CustomerPosition_Builder*) clearSid {
  result.hasSid = NO;
  result.sid = @"";
  return self;
}
- (BOOL) hasOrderPower {
  return result.hasOrderPower;
}
- (Float64) orderPower {
  return result.orderPower;
}
- (CustomerPosition_Builder*) setOrderPower:(Float64) value {
  result.hasOrderPower = YES;
  result.orderPower = value;
  return self;
}
- (CustomerPosition_Builder*) clearOrderPower {
  result.hasOrderPower = NO;
  result.orderPower = 0;
  return self;
}
- (BOOL) hasLoanBalance {
  return result.hasLoanBalance;
}
- (Float64) loanBalance {
  return result.loanBalance;
}
- (CustomerPosition_Builder*) setLoanBalance:(Float64) value {
  result.hasLoanBalance = YES;
  result.loanBalance = value;
  return self;
}
- (CustomerPosition_Builder*) clearLoanBalance {
  result.hasLoanBalance = NO;
  result.loanBalance = 0;
  return self;
}
- (BOOL) hasTradingLimit {
  return result.hasTradingLimit;
}
- (Float64) tradingLimit {
  return result.tradingLimit;
}
- (CustomerPosition_Builder*) setTradingLimit:(Float64) value {
  result.hasTradingLimit = YES;
  result.tradingLimit = value;
  return self;
}
- (CustomerPosition_Builder*) clearTradingLimit {
  result.hasTradingLimit = NO;
  result.tradingLimit = 0;
  return self;
}
- (BOOL) hasLoanRatio {
  return result.hasLoanRatio;
}
- (Float64) loanRatio {
  return result.loanRatio;
}
- (CustomerPosition_Builder*) setLoanRatio:(Float64) value {
  result.hasLoanRatio = YES;
  result.loanRatio = value;
  return self;
}
- (CustomerPosition_Builder*) clearLoanRatio {
  result.hasLoanRatio = NO;
  result.loanRatio = 0;
  return self;
}
- (BOOL) hasMarketValue {
  return result.hasMarketValue;
}
- (Float64) marketValue {
  return result.marketValue;
}
- (CustomerPosition_Builder*) setMarketValue:(Float64) value {
  result.hasMarketValue = YES;
  result.marketValue = value;
  return self;
}
- (CustomerPosition_Builder*) clearMarketValue {
  result.hasMarketValue = NO;
  result.marketValue = 0;
  return self;
}
- (BOOL) hasModifiedMarketValue {
  return result.hasModifiedMarketValue;
}
- (Float64) modifiedMarketValue {
  return result.modifiedMarketValue;
}
- (CustomerPosition_Builder*) setModifiedMarketValue:(Float64) value {
  result.hasModifiedMarketValue = YES;
  result.modifiedMarketValue = value;
  return self;
}
- (CustomerPosition_Builder*) clearModifiedMarketValue {
  result.hasModifiedMarketValue = NO;
  result.modifiedMarketValue = 0;
  return self;
}
- (BOOL) hasModifiedLoanValue {
  return result.hasModifiedLoanValue;
}
- (Float64) modifiedLoanValue {
  return result.modifiedLoanValue;
}
- (CustomerPosition_Builder*) setModifiedLoanValue:(Float64) value {
  result.hasModifiedLoanValue = YES;
  result.modifiedLoanValue = value;
  return self;
}
- (CustomerPosition_Builder*) clearModifiedLoanValue {
  result.hasModifiedLoanValue = NO;
  result.modifiedLoanValue = 0;
  return self;
}
- (BOOL) hasRating {
  return result.hasRating;
}
- (NSString*) rating {
  return result.rating;
}
- (CustomerPosition_Builder*) setRating:(NSString*) value {
  result.hasRating = YES;
  result.rating = value;
  return self;
}
- (CustomerPosition_Builder*) clearRating {
  result.hasRating = NO;
  result.rating = @"";
  return self;
}
- (BOOL) hasBuyingPower {
  return result.hasBuyingPower;
}
- (Float64) buyingPower {
  return result.buyingPower;
}
- (CustomerPosition_Builder*) setBuyingPower:(Float64) value {
  result.hasBuyingPower = YES;
  result.buyingPower = value;
  return self;
}
- (CustomerPosition_Builder*) clearBuyingPower {
  result.hasBuyingPower = NO;
  result.buyingPower = 0;
  return self;
}
- (BOOL) hasOutstanding {
  return result.hasOutstanding;
}
- (Float64) outstanding {
  return result.outstanding;
}
- (CustomerPosition_Builder*) setOutstanding:(Float64) value {
  result.hasOutstanding = YES;
  result.outstanding = value;
  return self;
}
- (CustomerPosition_Builder*) clearOutstanding {
  result.hasOutstanding = NO;
  result.outstanding = 0;
  return self;
}
- (BOOL) hasBuyTradeValue {
  return result.hasBuyTradeValue;
}
- (Float64) buyTradeValue {
  return result.buyTradeValue;
}
- (CustomerPosition_Builder*) setBuyTradeValue:(Float64) value {
  result.hasBuyTradeValue = YES;
  result.buyTradeValue = value;
  return self;
}
- (CustomerPosition_Builder*) clearBuyTradeValue {
  result.hasBuyTradeValue = NO;
  result.buyTradeValue = 0;
  return self;
}
- (BOOL) hasBuyOrderValue {
  return result.hasBuyOrderValue;
}
- (Float64) buyOrderValue {
  return result.buyOrderValue;
}
- (CustomerPosition_Builder*) setBuyOrderValue:(Float64) value {
  result.hasBuyOrderValue = YES;
  result.buyOrderValue = value;
  return self;
}
- (CustomerPosition_Builder*) clearBuyOrderValue {
  result.hasBuyOrderValue = NO;
  result.buyOrderValue = 0;
  return self;
}
- (BOOL) hasSellTradeValue {
  return result.hasSellTradeValue;
}
- (Float64) sellTradeValue {
  return result.sellTradeValue;
}
- (CustomerPosition_Builder*) setSellTradeValue:(Float64) value {
  result.hasSellTradeValue = YES;
  result.sellTradeValue = value;
  return self;
}
- (CustomerPosition_Builder*) clearSellTradeValue {
  result.hasSellTradeValue = NO;
  result.sellTradeValue = 0;
  return self;
}
- (BOOL) hasNettProfitLoss {
  return result.hasNettProfitLoss;
}
- (Float64) nettProfitLoss {
  return result.nettProfitLoss;
}
- (CustomerPosition_Builder*) setNettProfitLoss:(Float64) value {
  result.hasNettProfitLoss = YES;
  result.nettProfitLoss = value;
  return self;
}
- (CustomerPosition_Builder*) clearNettProfitLoss {
  result.hasNettProfitLoss = NO;
  result.nettProfitLoss = 0;
  return self;
}
- (BOOL) hasNettProfitLossPct {
  return result.hasNettProfitLossPct;
}
- (Float64) nettProfitLossPct {
  return result.nettProfitLossPct;
}
- (CustomerPosition_Builder*) setNettProfitLossPct:(Float64) value {
  result.hasNettProfitLossPct = YES;
  result.nettProfitLossPct = value;
  return self;
}
- (CustomerPosition_Builder*) clearNettProfitLossPct {
  result.hasNettProfitLossPct = NO;
  result.nettProfitLossPct = 0;
  return self;
}
@end

@interface CashFlow ()
@property Float64 t1;
@property Float64 t2;
@property Float64 t3;
@property (strong) NSString* description;
@property Float64 t0;
@end

@implementation CashFlow

- (BOOL) hasT1 {
  return !!hasT1_;
}
- (void) setHasT1:(BOOL) value {
  hasT1_ = !!value;
}
@synthesize t1;
- (BOOL) hasT2 {
  return !!hasT2_;
}
- (void) setHasT2:(BOOL) value {
  hasT2_ = !!value;
}
@synthesize t2;
- (BOOL) hasT3 {
  return !!hasT3_;
}
- (void) setHasT3:(BOOL) value {
  hasT3_ = !!value;
}
@synthesize t3;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasT0 {
  return !!hasT0_;
}
- (void) setHasT0:(BOOL) value {
  hasT0_ = !!value;
}
@synthesize t0;
- (id) init {
  if ((self = [super init])) {
    self.t1 = 0;
    self.t2 = 0;
    self.t3 = 0;
    self.description = @"";
    self.t0 = 0;
  }
  return self;
}
static CashFlow* defaultCashFlowInstance = nil;
+ (void) initialize {
  if (self == [CashFlow class]) {
    defaultCashFlowInstance = [[CashFlow alloc] init];
  }
}
+ (CashFlow*) defaultInstance {
  return defaultCashFlowInstance;
}
- (CashFlow*) defaultInstance {
  return defaultCashFlowInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasT1) {
    [output writeDouble:1 value:self.t1];
  }
  if (self.hasT2) {
    [output writeDouble:2 value:self.t2];
  }
  if (self.hasT3) {
    [output writeDouble:3 value:self.t3];
  }
  if (self.hasDescription) {
    [output writeString:4 value:self.description];
  }
  if (self.hasT0) {
    [output writeDouble:5 value:self.t0];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasT1) {
    size += computeDoubleSize(1, self.t1);
  }
  if (self.hasT2) {
    size += computeDoubleSize(2, self.t2);
  }
  if (self.hasT3) {
    size += computeDoubleSize(3, self.t3);
  }
  if (self.hasDescription) {
    size += computeStringSize(4, self.description);
  }
  if (self.hasT0) {
    size += computeDoubleSize(5, self.t0);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CashFlow*) parseFromData:(NSData*) data {
  return (CashFlow*)[[[CashFlow builder] mergeFromData:data] build];
}
+ (CashFlow*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashFlow*)[[[CashFlow builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CashFlow*) parseFromInputStream:(NSInputStream*) input {
  return (CashFlow*)[[[CashFlow builder] mergeFromInputStream:input] build];
}
+ (CashFlow*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashFlow*)[[[CashFlow builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CashFlow*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CashFlow*)[[[CashFlow builder] mergeFromCodedInputStream:input] build];
}
+ (CashFlow*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashFlow*)[[[CashFlow builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CashFlow_Builder*) builder {
  return [[CashFlow_Builder alloc] init];
}
+ (CashFlow_Builder*) builderWithPrototype:(CashFlow*) prototype {
  return [[CashFlow builder] mergeFrom:prototype];
}
- (CashFlow_Builder*) builder {
  return [CashFlow builder];
}
- (CashFlow_Builder*) toBuilder {
  return [CashFlow builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasT1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t1", [NSNumber numberWithDouble:self.t1]];
  }
  if (self.hasT2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t2", [NSNumber numberWithDouble:self.t2]];
  }
  if (self.hasT3) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t3", [NSNumber numberWithDouble:self.t3]];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasT0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t0", [NSNumber numberWithDouble:self.t0]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CashFlow class]]) {
    return NO;
  }
  CashFlow *otherMessage = other;
  return
      self.hasT1 == otherMessage.hasT1 &&
      (!self.hasT1 || self.t1 == otherMessage.t1) &&
      self.hasT2 == otherMessage.hasT2 &&
      (!self.hasT2 || self.t2 == otherMessage.t2) &&
      self.hasT3 == otherMessage.hasT3 &&
      (!self.hasT3 || self.t3 == otherMessage.t3) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasT0 == otherMessage.hasT0 &&
      (!self.hasT0 || self.t0 == otherMessage.t0) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasT1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.t1] hash];
  }
  if (self.hasT2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.t2] hash];
  }
  if (self.hasT3) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.t3] hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasT0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.t0] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CashFlow_Builder()
@property (strong) CashFlow* result;
@end

@implementation CashFlow_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CashFlow alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CashFlow_Builder*) clear {
  self.result = [[CashFlow alloc] init];
  return self;
}
- (CashFlow_Builder*) clone {
  return [CashFlow builderWithPrototype:result];
}
- (CashFlow*) defaultInstance {
  return [CashFlow defaultInstance];
}
- (CashFlow*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CashFlow*) buildPartial {
  CashFlow* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CashFlow_Builder*) mergeFrom:(CashFlow*) other {
  if (other == [CashFlow defaultInstance]) {
    return self;
  }
  if (other.hasT1) {
    [self setT1:other.t1];
  }
  if (other.hasT2) {
    [self setT2:other.t2];
  }
  if (other.hasT3) {
    [self setT3:other.t3];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasT0) {
    [self setT0:other.t0];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CashFlow_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CashFlow_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setT1:[input readDouble]];
        break;
      }
      case 17: {
        [self setT2:[input readDouble]];
        break;
      }
      case 25: {
        [self setT3:[input readDouble]];
        break;
      }
      case 34: {
        [self setDescription:[input readString]];
        break;
      }
      case 41: {
        [self setT0:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasT1 {
  return result.hasT1;
}
- (Float64) t1 {
  return result.t1;
}
- (CashFlow_Builder*) setT1:(Float64) value {
  result.hasT1 = YES;
  result.t1 = value;
  return self;
}
- (CashFlow_Builder*) clearT1 {
  result.hasT1 = NO;
  result.t1 = 0;
  return self;
}
- (BOOL) hasT2 {
  return result.hasT2;
}
- (Float64) t2 {
  return result.t2;
}
- (CashFlow_Builder*) setT2:(Float64) value {
  result.hasT2 = YES;
  result.t2 = value;
  return self;
}
- (CashFlow_Builder*) clearT2 {
  result.hasT2 = NO;
  result.t2 = 0;
  return self;
}
- (BOOL) hasT3 {
  return result.hasT3;
}
- (Float64) t3 {
  return result.t3;
}
- (CashFlow_Builder*) setT3:(Float64) value {
  result.hasT3 = YES;
  result.t3 = value;
  return self;
}
- (CashFlow_Builder*) clearT3 {
  result.hasT3 = NO;
  result.t3 = 0;
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (CashFlow_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (CashFlow_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasT0 {
  return result.hasT0;
}
- (Float64) t0 {
  return result.t0;
}
- (CashFlow_Builder*) setT0:(Float64) value {
  result.hasT0 = YES;
  result.t0 = value;
  return self;
}
- (CashFlow_Builder*) clearT0 {
  result.hasT0 = NO;
  result.t0 = 0;
  return self;
}
@end

@interface CustomerExposure ()
@property (strong) NSString* clientname;
@property (strong) NSString* type;
@property Float64 qty;
@property (strong) NSString* stockcode;
@property (strong) NSString* officercode;
@end

@implementation CustomerExposure

- (BOOL) hasClientname {
  return !!hasClientname_;
}
- (void) setHasClientname:(BOOL) value {
  hasClientname_ = !!value;
}
@synthesize clientname;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasQty {
  return !!hasQty_;
}
- (void) setHasQty:(BOOL) value {
  hasQty_ = !!value;
}
@synthesize qty;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasOfficercode {
  return !!hasOfficercode_;
}
- (void) setHasOfficercode:(BOOL) value {
  hasOfficercode_ = !!value;
}
@synthesize officercode;
- (id) init {
  if ((self = [super init])) {
    self.clientname = @"";
    self.type = @"";
    self.qty = 0;
    self.stockcode = @"";
    self.officercode = @"";
  }
  return self;
}
static CustomerExposure* defaultCustomerExposureInstance = nil;
+ (void) initialize {
  if (self == [CustomerExposure class]) {
    defaultCustomerExposureInstance = [[CustomerExposure alloc] init];
  }
}
+ (CustomerExposure*) defaultInstance {
  return defaultCustomerExposureInstance;
}
- (CustomerExposure*) defaultInstance {
  return defaultCustomerExposureInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClientname) {
    [output writeString:1 value:self.clientname];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasQty) {
    [output writeDouble:3 value:self.qty];
  }
  if (self.hasStockcode) {
    [output writeString:4 value:self.stockcode];
  }
  if (self.hasOfficercode) {
    [output writeString:5 value:self.officercode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasClientname) {
    size += computeStringSize(1, self.clientname);
  }
  if (self.hasType) {
    size += computeStringSize(2, self.type);
  }
  if (self.hasQty) {
    size += computeDoubleSize(3, self.qty);
  }
  if (self.hasStockcode) {
    size += computeStringSize(4, self.stockcode);
  }
  if (self.hasOfficercode) {
    size += computeStringSize(5, self.officercode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CustomerExposure*) parseFromData:(NSData*) data {
  return (CustomerExposure*)[[[CustomerExposure builder] mergeFromData:data] build];
}
+ (CustomerExposure*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerExposure*)[[[CustomerExposure builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CustomerExposure*) parseFromInputStream:(NSInputStream*) input {
  return (CustomerExposure*)[[[CustomerExposure builder] mergeFromInputStream:input] build];
}
+ (CustomerExposure*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerExposure*)[[[CustomerExposure builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerExposure*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CustomerExposure*)[[[CustomerExposure builder] mergeFromCodedInputStream:input] build];
}
+ (CustomerExposure*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerExposure*)[[[CustomerExposure builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerExposure_Builder*) builder {
  return [[CustomerExposure_Builder alloc] init];
}
+ (CustomerExposure_Builder*) builderWithPrototype:(CustomerExposure*) prototype {
  return [[CustomerExposure builder] mergeFrom:prototype];
}
- (CustomerExposure_Builder*) builder {
  return [CustomerExposure builder];
}
- (CustomerExposure_Builder*) toBuilder {
  return [CustomerExposure builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasClientname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientname", self.clientname];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qty", [NSNumber numberWithDouble:self.qty]];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasOfficercode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"officercode", self.officercode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CustomerExposure class]]) {
    return NO;
  }
  CustomerExposure *otherMessage = other;
  return
      self.hasClientname == otherMessage.hasClientname &&
      (!self.hasClientname || [self.clientname isEqual:otherMessage.clientname]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasQty == otherMessage.hasQty &&
      (!self.hasQty || self.qty == otherMessage.qty) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasOfficercode == otherMessage.hasOfficercode &&
      (!self.hasOfficercode || [self.officercode isEqual:otherMessage.officercode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasClientname) {
    hashCode = hashCode * 31 + [self.clientname hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.qty] hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasOfficercode) {
    hashCode = hashCode * 31 + [self.officercode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CustomerExposure_Builder()
@property (strong) CustomerExposure* result;
@end

@implementation CustomerExposure_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CustomerExposure alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CustomerExposure_Builder*) clear {
  self.result = [[CustomerExposure alloc] init];
  return self;
}
- (CustomerExposure_Builder*) clone {
  return [CustomerExposure builderWithPrototype:result];
}
- (CustomerExposure*) defaultInstance {
  return [CustomerExposure defaultInstance];
}
- (CustomerExposure*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CustomerExposure*) buildPartial {
  CustomerExposure* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CustomerExposure_Builder*) mergeFrom:(CustomerExposure*) other {
  if (other == [CustomerExposure defaultInstance]) {
    return self;
  }
  if (other.hasClientname) {
    [self setClientname:other.clientname];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasQty) {
    [self setQty:other.qty];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasOfficercode) {
    [self setOfficercode:other.officercode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CustomerExposure_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CustomerExposure_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClientname:[input readString]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 25: {
        [self setQty:[input readDouble]];
        break;
      }
      case 34: {
        [self setStockcode:[input readString]];
        break;
      }
      case 42: {
        [self setOfficercode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClientname {
  return result.hasClientname;
}
- (NSString*) clientname {
  return result.clientname;
}
- (CustomerExposure_Builder*) setClientname:(NSString*) value {
  result.hasClientname = YES;
  result.clientname = value;
  return self;
}
- (CustomerExposure_Builder*) clearClientname {
  result.hasClientname = NO;
  result.clientname = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (CustomerExposure_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (CustomerExposure_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasQty {
  return result.hasQty;
}
- (Float64) qty {
  return result.qty;
}
- (CustomerExposure_Builder*) setQty:(Float64) value {
  result.hasQty = YES;
  result.qty = value;
  return self;
}
- (CustomerExposure_Builder*) clearQty {
  result.hasQty = NO;
  result.qty = 0;
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (CustomerExposure_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (CustomerExposure_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasOfficercode {
  return result.hasOfficercode;
}
- (NSString*) officercode {
  return result.officercode;
}
- (CustomerExposure_Builder*) setOfficercode:(NSString*) value {
  result.hasOfficercode = YES;
  result.officercode = value;
  return self;
}
- (CustomerExposure_Builder*) clearOfficercode {
  result.hasOfficercode = NO;
  result.officercode = @"";
  return self;
}
@end

@interface OrderMobile ()
@property (strong) NSString* jatsOrderId;
@property (strong) NSString* clientCode;
@property (strong) NSString* clientName;
@property (strong) NSString* orderStatus;
@property (strong) NSString* board;
@property int32_t side;
@property (strong) NSString* securityCode;
@property Float64 orderQty;
@property int32_t price;
@property Float64 leavesQty;
@property Float64 cumQty;
@property (strong) NSString* createdTime;
@property (strong) NSString* description;
@property int32_t sequenceNo;
@property (strong) NSString* orderId;
@property Float64 tradeQty;
@property int32_t tradePrice;
@property (strong) NSString* tradeTime;
@end

@implementation OrderMobile

- (BOOL) hasJatsOrderId {
  return !!hasJatsOrderId_;
}
- (void) setHasJatsOrderId:(BOOL) value {
  hasJatsOrderId_ = !!value;
}
@synthesize jatsOrderId;
- (BOOL) hasClientCode {
  return !!hasClientCode_;
}
- (void) setHasClientCode:(BOOL) value {
  hasClientCode_ = !!value;
}
@synthesize clientCode;
- (BOOL) hasClientName {
  return !!hasClientName_;
}
- (void) setHasClientName:(BOOL) value {
  hasClientName_ = !!value;
}
@synthesize clientName;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) value {
  hasOrderStatus_ = !!value;
}
@synthesize orderStatus;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasSecurityCode {
  return !!hasSecurityCode_;
}
- (void) setHasSecurityCode:(BOOL) value {
  hasSecurityCode_ = !!value;
}
@synthesize securityCode;
- (BOOL) hasOrderQty {
  return !!hasOrderQty_;
}
- (void) setHasOrderQty:(BOOL) value {
  hasOrderQty_ = !!value;
}
@synthesize orderQty;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasLeavesQty {
  return !!hasLeavesQty_;
}
- (void) setHasLeavesQty:(BOOL) value {
  hasLeavesQty_ = !!value;
}
@synthesize leavesQty;
- (BOOL) hasCumQty {
  return !!hasCumQty_;
}
- (void) setHasCumQty:(BOOL) value {
  hasCumQty_ = !!value;
}
@synthesize cumQty;
- (BOOL) hasCreatedTime {
  return !!hasCreatedTime_;
}
- (void) setHasCreatedTime:(BOOL) value {
  hasCreatedTime_ = !!value;
}
@synthesize createdTime;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasSequenceNo {
  return !!hasSequenceNo_;
}
- (void) setHasSequenceNo:(BOOL) value {
  hasSequenceNo_ = !!value;
}
@synthesize sequenceNo;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasTradeQty {
  return !!hasTradeQty_;
}
- (void) setHasTradeQty:(BOOL) value {
  hasTradeQty_ = !!value;
}
@synthesize tradeQty;
- (BOOL) hasTradePrice {
  return !!hasTradePrice_;
}
- (void) setHasTradePrice:(BOOL) value {
  hasTradePrice_ = !!value;
}
@synthesize tradePrice;
- (BOOL) hasTradeTime {
  return !!hasTradeTime_;
}
- (void) setHasTradeTime:(BOOL) value {
  hasTradeTime_ = !!value;
}
@synthesize tradeTime;
- (id) init {
  if ((self = [super init])) {
    self.jatsOrderId = @"";
    self.clientCode = @"";
    self.clientName = @"";
    self.orderStatus = @"";
    self.board = @"";
    self.side = 0;
    self.securityCode = @"";
    self.orderQty = 0;
    self.price = 0;
    self.leavesQty = 0;
    self.cumQty = 0;
    self.createdTime = @"";
    self.description = @"";
    self.sequenceNo = 0;
    self.orderId = @"";
    self.tradeQty = 0;
    self.tradePrice = 0;
    self.tradeTime = @"";
  }
  return self;
}
static OrderMobile* defaultOrderMobileInstance = nil;
+ (void) initialize {
  if (self == [OrderMobile class]) {
    defaultOrderMobileInstance = [[OrderMobile alloc] init];
  }
}
+ (OrderMobile*) defaultInstance {
  return defaultOrderMobileInstance;
}
- (OrderMobile*) defaultInstance {
  return defaultOrderMobileInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasJatsOrderId) {
    [output writeString:1 value:self.jatsOrderId];
  }
  if (self.hasClientCode) {
    [output writeString:2 value:self.clientCode];
  }
  if (self.hasClientName) {
    [output writeString:3 value:self.clientName];
  }
  if (self.hasOrderStatus) {
    [output writeString:4 value:self.orderStatus];
  }
  if (self.hasBoard) {
    [output writeString:5 value:self.board];
  }
  if (self.hasSide) {
    [output writeInt32:6 value:self.side];
  }
  if (self.hasSecurityCode) {
    [output writeString:7 value:self.securityCode];
  }
  if (self.hasOrderQty) {
    [output writeDouble:8 value:self.orderQty];
  }
  if (self.hasPrice) {
    [output writeInt32:9 value:self.price];
  }
  if (self.hasLeavesQty) {
    [output writeDouble:10 value:self.leavesQty];
  }
  if (self.hasCumQty) {
    [output writeDouble:11 value:self.cumQty];
  }
  if (self.hasCreatedTime) {
    [output writeString:12 value:self.createdTime];
  }
  if (self.hasDescription) {
    [output writeString:13 value:self.description];
  }
  if (self.hasSequenceNo) {
    [output writeInt32:14 value:self.sequenceNo];
  }
  if (self.hasOrderId) {
    [output writeString:15 value:self.orderId];
  }
  if (self.hasTradeQty) {
    [output writeDouble:16 value:self.tradeQty];
  }
  if (self.hasTradePrice) {
    [output writeInt32:17 value:self.tradePrice];
  }
  if (self.hasTradeTime) {
    [output writeString:18 value:self.tradeTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasJatsOrderId) {
    size += computeStringSize(1, self.jatsOrderId);
  }
  if (self.hasClientCode) {
    size += computeStringSize(2, self.clientCode);
  }
  if (self.hasClientName) {
    size += computeStringSize(3, self.clientName);
  }
  if (self.hasOrderStatus) {
    size += computeStringSize(4, self.orderStatus);
  }
  if (self.hasBoard) {
    size += computeStringSize(5, self.board);
  }
  if (self.hasSide) {
    size += computeInt32Size(6, self.side);
  }
  if (self.hasSecurityCode) {
    size += computeStringSize(7, self.securityCode);
  }
  if (self.hasOrderQty) {
    size += computeDoubleSize(8, self.orderQty);
  }
  if (self.hasPrice) {
    size += computeInt32Size(9, self.price);
  }
  if (self.hasLeavesQty) {
    size += computeDoubleSize(10, self.leavesQty);
  }
  if (self.hasCumQty) {
    size += computeDoubleSize(11, self.cumQty);
  }
  if (self.hasCreatedTime) {
    size += computeStringSize(12, self.createdTime);
  }
  if (self.hasDescription) {
    size += computeStringSize(13, self.description);
  }
  if (self.hasSequenceNo) {
    size += computeInt32Size(14, self.sequenceNo);
  }
  if (self.hasOrderId) {
    size += computeStringSize(15, self.orderId);
  }
  if (self.hasTradeQty) {
    size += computeDoubleSize(16, self.tradeQty);
  }
  if (self.hasTradePrice) {
    size += computeInt32Size(17, self.tradePrice);
  }
  if (self.hasTradeTime) {
    size += computeStringSize(18, self.tradeTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OrderMobile*) parseFromData:(NSData*) data {
  return (OrderMobile*)[[[OrderMobile builder] mergeFromData:data] build];
}
+ (OrderMobile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderMobile*)[[[OrderMobile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OrderMobile*) parseFromInputStream:(NSInputStream*) input {
  return (OrderMobile*)[[[OrderMobile builder] mergeFromInputStream:input] build];
}
+ (OrderMobile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderMobile*)[[[OrderMobile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderMobile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OrderMobile*)[[[OrderMobile builder] mergeFromCodedInputStream:input] build];
}
+ (OrderMobile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderMobile*)[[[OrderMobile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderMobile_Builder*) builder {
  return [[OrderMobile_Builder alloc] init];
}
+ (OrderMobile_Builder*) builderWithPrototype:(OrderMobile*) prototype {
  return [[OrderMobile builder] mergeFrom:prototype];
}
- (OrderMobile_Builder*) builder {
  return [OrderMobile builder];
}
- (OrderMobile_Builder*) toBuilder {
  return [OrderMobile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasJatsOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jatsOrderId", self.jatsOrderId];
  }
  if (self.hasClientCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientCode", self.clientCode];
  }
  if (self.hasClientName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientName", self.clientName];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", self.orderStatus];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"board", self.board];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasSecurityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityCode", self.securityCode];
  }
  if (self.hasOrderQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderQty", [NSNumber numberWithDouble:self.orderQty]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasLeavesQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leavesQty", [NSNumber numberWithDouble:self.leavesQty]];
  }
  if (self.hasCumQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cumQty", [NSNumber numberWithDouble:self.cumQty]];
  }
  if (self.hasCreatedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdTime", self.createdTime];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasSequenceNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceNo", [NSNumber numberWithInt:self.sequenceNo]];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasTradeQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeQty", [NSNumber numberWithDouble:self.tradeQty]];
  }
  if (self.hasTradePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradePrice", [NSNumber numberWithInt:self.tradePrice]];
  }
  if (self.hasTradeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeTime", self.tradeTime];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OrderMobile class]]) {
    return NO;
  }
  OrderMobile *otherMessage = other;
  return
      self.hasJatsOrderId == otherMessage.hasJatsOrderId &&
      (!self.hasJatsOrderId || [self.jatsOrderId isEqual:otherMessage.jatsOrderId]) &&
      self.hasClientCode == otherMessage.hasClientCode &&
      (!self.hasClientCode || [self.clientCode isEqual:otherMessage.clientCode]) &&
      self.hasClientName == otherMessage.hasClientName &&
      (!self.hasClientName || [self.clientName isEqual:otherMessage.clientName]) &&
      self.hasOrderStatus == otherMessage.hasOrderStatus &&
      (!self.hasOrderStatus || [self.orderStatus isEqual:otherMessage.orderStatus]) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || [self.board isEqual:otherMessage.board]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasSecurityCode == otherMessage.hasSecurityCode &&
      (!self.hasSecurityCode || [self.securityCode isEqual:otherMessage.securityCode]) &&
      self.hasOrderQty == otherMessage.hasOrderQty &&
      (!self.hasOrderQty || self.orderQty == otherMessage.orderQty) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasLeavesQty == otherMessage.hasLeavesQty &&
      (!self.hasLeavesQty || self.leavesQty == otherMessage.leavesQty) &&
      self.hasCumQty == otherMessage.hasCumQty &&
      (!self.hasCumQty || self.cumQty == otherMessage.cumQty) &&
      self.hasCreatedTime == otherMessage.hasCreatedTime &&
      (!self.hasCreatedTime || [self.createdTime isEqual:otherMessage.createdTime]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasSequenceNo == otherMessage.hasSequenceNo &&
      (!self.hasSequenceNo || self.sequenceNo == otherMessage.sequenceNo) &&
      self.hasOrderId == otherMessage.hasOrderId &&
      (!self.hasOrderId || [self.orderId isEqual:otherMessage.orderId]) &&
      self.hasTradeQty == otherMessage.hasTradeQty &&
      (!self.hasTradeQty || self.tradeQty == otherMessage.tradeQty) &&
      self.hasTradePrice == otherMessage.hasTradePrice &&
      (!self.hasTradePrice || self.tradePrice == otherMessage.tradePrice) &&
      self.hasTradeTime == otherMessage.hasTradeTime &&
      (!self.hasTradeTime || [self.tradeTime isEqual:otherMessage.tradeTime]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasJatsOrderId) {
    hashCode = hashCode * 31 + [self.jatsOrderId hash];
  }
  if (self.hasClientCode) {
    hashCode = hashCode * 31 + [self.clientCode hash];
  }
  if (self.hasClientName) {
    hashCode = hashCode * 31 + [self.clientName hash];
  }
  if (self.hasOrderStatus) {
    hashCode = hashCode * 31 + [self.orderStatus hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + [self.board hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasSecurityCode) {
    hashCode = hashCode * 31 + [self.securityCode hash];
  }
  if (self.hasOrderQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderQty] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasLeavesQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.leavesQty] hash];
  }
  if (self.hasCumQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.cumQty] hash];
  }
  if (self.hasCreatedTime) {
    hashCode = hashCode * 31 + [self.createdTime hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasSequenceNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequenceNo] hash];
  }
  if (self.hasOrderId) {
    hashCode = hashCode * 31 + [self.orderId hash];
  }
  if (self.hasTradeQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tradeQty] hash];
  }
  if (self.hasTradePrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tradePrice] hash];
  }
  if (self.hasTradeTime) {
    hashCode = hashCode * 31 + [self.tradeTime hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OrderMobile_Builder()
@property (strong) OrderMobile* result;
@end

@implementation OrderMobile_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OrderMobile alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OrderMobile_Builder*) clear {
  self.result = [[OrderMobile alloc] init];
  return self;
}
- (OrderMobile_Builder*) clone {
  return [OrderMobile builderWithPrototype:result];
}
- (OrderMobile*) defaultInstance {
  return [OrderMobile defaultInstance];
}
- (OrderMobile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OrderMobile*) buildPartial {
  OrderMobile* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OrderMobile_Builder*) mergeFrom:(OrderMobile*) other {
  if (other == [OrderMobile defaultInstance]) {
    return self;
  }
  if (other.hasJatsOrderId) {
    [self setJatsOrderId:other.jatsOrderId];
  }
  if (other.hasClientCode) {
    [self setClientCode:other.clientCode];
  }
  if (other.hasClientName) {
    [self setClientName:other.clientName];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasSecurityCode) {
    [self setSecurityCode:other.securityCode];
  }
  if (other.hasOrderQty) {
    [self setOrderQty:other.orderQty];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasLeavesQty) {
    [self setLeavesQty:other.leavesQty];
  }
  if (other.hasCumQty) {
    [self setCumQty:other.cumQty];
  }
  if (other.hasCreatedTime) {
    [self setCreatedTime:other.createdTime];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasSequenceNo) {
    [self setSequenceNo:other.sequenceNo];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasTradeQty) {
    [self setTradeQty:other.tradeQty];
  }
  if (other.hasTradePrice) {
    [self setTradePrice:other.tradePrice];
  }
  if (other.hasTradeTime) {
    [self setTradeTime:other.tradeTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OrderMobile_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OrderMobile_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setJatsOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setClientCode:[input readString]];
        break;
      }
      case 26: {
        [self setClientName:[input readString]];
        break;
      }
      case 34: {
        [self setOrderStatus:[input readString]];
        break;
      }
      case 42: {
        [self setBoard:[input readString]];
        break;
      }
      case 48: {
        [self setSide:[input readInt32]];
        break;
      }
      case 58: {
        [self setSecurityCode:[input readString]];
        break;
      }
      case 65: {
        [self setOrderQty:[input readDouble]];
        break;
      }
      case 72: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 81: {
        [self setLeavesQty:[input readDouble]];
        break;
      }
      case 89: {
        [self setCumQty:[input readDouble]];
        break;
      }
      case 98: {
        [self setCreatedTime:[input readString]];
        break;
      }
      case 106: {
        [self setDescription:[input readString]];
        break;
      }
      case 112: {
        [self setSequenceNo:[input readInt32]];
        break;
      }
      case 122: {
        [self setOrderId:[input readString]];
        break;
      }
      case 129: {
        [self setTradeQty:[input readDouble]];
        break;
      }
      case 136: {
        [self setTradePrice:[input readInt32]];
        break;
      }
      case 146: {
        [self setTradeTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasJatsOrderId {
  return result.hasJatsOrderId;
}
- (NSString*) jatsOrderId {
  return result.jatsOrderId;
}
- (OrderMobile_Builder*) setJatsOrderId:(NSString*) value {
  result.hasJatsOrderId = YES;
  result.jatsOrderId = value;
  return self;
}
- (OrderMobile_Builder*) clearJatsOrderId {
  result.hasJatsOrderId = NO;
  result.jatsOrderId = @"";
  return self;
}
- (BOOL) hasClientCode {
  return result.hasClientCode;
}
- (NSString*) clientCode {
  return result.clientCode;
}
- (OrderMobile_Builder*) setClientCode:(NSString*) value {
  result.hasClientCode = YES;
  result.clientCode = value;
  return self;
}
- (OrderMobile_Builder*) clearClientCode {
  result.hasClientCode = NO;
  result.clientCode = @"";
  return self;
}
- (BOOL) hasClientName {
  return result.hasClientName;
}
- (NSString*) clientName {
  return result.clientName;
}
- (OrderMobile_Builder*) setClientName:(NSString*) value {
  result.hasClientName = YES;
  result.clientName = value;
  return self;
}
- (OrderMobile_Builder*) clearClientName {
  result.hasClientName = NO;
  result.clientName = @"";
  return self;
}
- (BOOL) hasOrderStatus {
  return result.hasOrderStatus;
}
- (NSString*) orderStatus {
  return result.orderStatus;
}
- (OrderMobile_Builder*) setOrderStatus:(NSString*) value {
  result.hasOrderStatus = YES;
  result.orderStatus = value;
  return self;
}
- (OrderMobile_Builder*) clearOrderStatus {
  result.hasOrderStatus = NO;
  result.orderStatus = @"";
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (NSString*) board {
  return result.board;
}
- (OrderMobile_Builder*) setBoard:(NSString*) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (OrderMobile_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (OrderMobile_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (OrderMobile_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasSecurityCode {
  return result.hasSecurityCode;
}
- (NSString*) securityCode {
  return result.securityCode;
}
- (OrderMobile_Builder*) setSecurityCode:(NSString*) value {
  result.hasSecurityCode = YES;
  result.securityCode = value;
  return self;
}
- (OrderMobile_Builder*) clearSecurityCode {
  result.hasSecurityCode = NO;
  result.securityCode = @"";
  return self;
}
- (BOOL) hasOrderQty {
  return result.hasOrderQty;
}
- (Float64) orderQty {
  return result.orderQty;
}
- (OrderMobile_Builder*) setOrderQty:(Float64) value {
  result.hasOrderQty = YES;
  result.orderQty = value;
  return self;
}
- (OrderMobile_Builder*) clearOrderQty {
  result.hasOrderQty = NO;
  result.orderQty = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (OrderMobile_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (OrderMobile_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasLeavesQty {
  return result.hasLeavesQty;
}
- (Float64) leavesQty {
  return result.leavesQty;
}
- (OrderMobile_Builder*) setLeavesQty:(Float64) value {
  result.hasLeavesQty = YES;
  result.leavesQty = value;
  return self;
}
- (OrderMobile_Builder*) clearLeavesQty {
  result.hasLeavesQty = NO;
  result.leavesQty = 0;
  return self;
}
- (BOOL) hasCumQty {
  return result.hasCumQty;
}
- (Float64) cumQty {
  return result.cumQty;
}
- (OrderMobile_Builder*) setCumQty:(Float64) value {
  result.hasCumQty = YES;
  result.cumQty = value;
  return self;
}
- (OrderMobile_Builder*) clearCumQty {
  result.hasCumQty = NO;
  result.cumQty = 0;
  return self;
}
- (BOOL) hasCreatedTime {
  return result.hasCreatedTime;
}
- (NSString*) createdTime {
  return result.createdTime;
}
- (OrderMobile_Builder*) setCreatedTime:(NSString*) value {
  result.hasCreatedTime = YES;
  result.createdTime = value;
  return self;
}
- (OrderMobile_Builder*) clearCreatedTime {
  result.hasCreatedTime = NO;
  result.createdTime = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (OrderMobile_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (OrderMobile_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasSequenceNo {
  return result.hasSequenceNo;
}
- (int32_t) sequenceNo {
  return result.sequenceNo;
}
- (OrderMobile_Builder*) setSequenceNo:(int32_t) value {
  result.hasSequenceNo = YES;
  result.sequenceNo = value;
  return self;
}
- (OrderMobile_Builder*) clearSequenceNo {
  result.hasSequenceNo = NO;
  result.sequenceNo = 0;
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (NSString*) orderId {
  return result.orderId;
}
- (OrderMobile_Builder*) setOrderId:(NSString*) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (OrderMobile_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = @"";
  return self;
}
- (BOOL) hasTradeQty {
  return result.hasTradeQty;
}
- (Float64) tradeQty {
  return result.tradeQty;
}
- (OrderMobile_Builder*) setTradeQty:(Float64) value {
  result.hasTradeQty = YES;
  result.tradeQty = value;
  return self;
}
- (OrderMobile_Builder*) clearTradeQty {
  result.hasTradeQty = NO;
  result.tradeQty = 0;
  return self;
}
- (BOOL) hasTradePrice {
  return result.hasTradePrice;
}
- (int32_t) tradePrice {
  return result.tradePrice;
}
- (OrderMobile_Builder*) setTradePrice:(int32_t) value {
  result.hasTradePrice = YES;
  result.tradePrice = value;
  return self;
}
- (OrderMobile_Builder*) clearTradePrice {
  result.hasTradePrice = NO;
  result.tradePrice = 0;
  return self;
}
- (BOOL) hasTradeTime {
  return result.hasTradeTime;
}
- (NSString*) tradeTime {
  return result.tradeTime;
}
- (OrderMobile_Builder*) setTradeTime:(NSString*) value {
  result.hasTradeTime = YES;
  result.tradeTime = value;
  return self;
}
- (OrderMobile_Builder*) clearTradeTime {
  result.hasTradeTime = NO;
  result.tradeTime = @"";
  return self;
}
@end

@interface OrderGtc ()
@property (strong) NSString* gtcId;
@property int32_t gtcStatus;
@property (strong) NSString* isPooled;
@property (strong) NSString* maintenanceDate;
@property int32_t executionFlag;
@property int32_t expiredFlag;
@property (strong) TxOrder* orders;
@property (strong) NSString* description;
@end

@implementation OrderGtc

- (BOOL) hasGtcId {
  return !!hasGtcId_;
}
- (void) setHasGtcId:(BOOL) value {
  hasGtcId_ = !!value;
}
@synthesize gtcId;
- (BOOL) hasGtcStatus {
  return !!hasGtcStatus_;
}
- (void) setHasGtcStatus:(BOOL) value {
  hasGtcStatus_ = !!value;
}
@synthesize gtcStatus;
- (BOOL) hasIsPooled {
  return !!hasIsPooled_;
}
- (void) setHasIsPooled:(BOOL) value {
  hasIsPooled_ = !!value;
}
@synthesize isPooled;
- (BOOL) hasMaintenanceDate {
  return !!hasMaintenanceDate_;
}
- (void) setHasMaintenanceDate:(BOOL) value {
  hasMaintenanceDate_ = !!value;
}
@synthesize maintenanceDate;
- (BOOL) hasExecutionFlag {
  return !!hasExecutionFlag_;
}
- (void) setHasExecutionFlag:(BOOL) value {
  hasExecutionFlag_ = !!value;
}
@synthesize executionFlag;
- (BOOL) hasExpiredFlag {
  return !!hasExpiredFlag_;
}
- (void) setHasExpiredFlag:(BOOL) value {
  hasExpiredFlag_ = !!value;
}
@synthesize expiredFlag;
- (BOOL) hasOrders {
  return !!hasOrders_;
}
- (void) setHasOrders:(BOOL) value {
  hasOrders_ = !!value;
}
@synthesize orders;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (id) init {
  if ((self = [super init])) {
    self.gtcId = @"";
    self.gtcStatus = 0;
    self.isPooled = @"";
    self.maintenanceDate = @"";
    self.executionFlag = 0;
    self.expiredFlag = 0;
    self.orders = [TxOrder defaultInstance];
    self.description = @"";
  }
  return self;
}
static OrderGtc* defaultOrderGtcInstance = nil;
+ (void) initialize {
  if (self == [OrderGtc class]) {
    defaultOrderGtcInstance = [[OrderGtc alloc] init];
  }
}
+ (OrderGtc*) defaultInstance {
  return defaultOrderGtcInstance;
}
- (OrderGtc*) defaultInstance {
  return defaultOrderGtcInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGtcId) {
    [output writeString:1 value:self.gtcId];
  }
  if (self.hasGtcStatus) {
    [output writeInt32:2 value:self.gtcStatus];
  }
  if (self.hasIsPooled) {
    [output writeString:3 value:self.isPooled];
  }
  if (self.hasMaintenanceDate) {
    [output writeString:4 value:self.maintenanceDate];
  }
  if (self.hasExecutionFlag) {
    [output writeInt32:5 value:self.executionFlag];
  }
  if (self.hasExpiredFlag) {
    [output writeInt32:6 value:self.expiredFlag];
  }
  if (self.hasOrders) {
    [output writeMessage:7 value:self.orders];
  }
  if (self.hasDescription) {
    [output writeString:8 value:self.description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGtcId) {
    size += computeStringSize(1, self.gtcId);
  }
  if (self.hasGtcStatus) {
    size += computeInt32Size(2, self.gtcStatus);
  }
  if (self.hasIsPooled) {
    size += computeStringSize(3, self.isPooled);
  }
  if (self.hasMaintenanceDate) {
    size += computeStringSize(4, self.maintenanceDate);
  }
  if (self.hasExecutionFlag) {
    size += computeInt32Size(5, self.executionFlag);
  }
  if (self.hasExpiredFlag) {
    size += computeInt32Size(6, self.expiredFlag);
  }
  if (self.hasOrders) {
    size += computeMessageSize(7, self.orders);
  }
  if (self.hasDescription) {
    size += computeStringSize(8, self.description);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OrderGtc*) parseFromData:(NSData*) data {
  return (OrderGtc*)[[[OrderGtc builder] mergeFromData:data] build];
}
+ (OrderGtc*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderGtc*)[[[OrderGtc builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OrderGtc*) parseFromInputStream:(NSInputStream*) input {
  return (OrderGtc*)[[[OrderGtc builder] mergeFromInputStream:input] build];
}
+ (OrderGtc*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderGtc*)[[[OrderGtc builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderGtc*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OrderGtc*)[[[OrderGtc builder] mergeFromCodedInputStream:input] build];
}
+ (OrderGtc*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderGtc*)[[[OrderGtc builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderGtc_Builder*) builder {
  return [[OrderGtc_Builder alloc] init];
}
+ (OrderGtc_Builder*) builderWithPrototype:(OrderGtc*) prototype {
  return [[OrderGtc builder] mergeFrom:prototype];
}
- (OrderGtc_Builder*) builder {
  return [OrderGtc builder];
}
- (OrderGtc_Builder*) toBuilder {
  return [OrderGtc builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasGtcId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gtcId", self.gtcId];
  }
  if (self.hasGtcStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gtcStatus", [NSNumber numberWithInt:self.gtcStatus]];
  }
  if (self.hasIsPooled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isPooled", self.isPooled];
  }
  if (self.hasMaintenanceDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maintenanceDate", self.maintenanceDate];
  }
  if (self.hasExecutionFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executionFlag", [NSNumber numberWithInt:self.executionFlag]];
  }
  if (self.hasExpiredFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiredFlag", [NSNumber numberWithInt:self.expiredFlag]];
  }
  if (self.hasOrders) {
    [output appendFormat:@"%@%@ {\n", indent, @"orders"];
    [self.orders writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OrderGtc class]]) {
    return NO;
  }
  OrderGtc *otherMessage = other;
  return
      self.hasGtcId == otherMessage.hasGtcId &&
      (!self.hasGtcId || [self.gtcId isEqual:otherMessage.gtcId]) &&
      self.hasGtcStatus == otherMessage.hasGtcStatus &&
      (!self.hasGtcStatus || self.gtcStatus == otherMessage.gtcStatus) &&
      self.hasIsPooled == otherMessage.hasIsPooled &&
      (!self.hasIsPooled || [self.isPooled isEqual:otherMessage.isPooled]) &&
      self.hasMaintenanceDate == otherMessage.hasMaintenanceDate &&
      (!self.hasMaintenanceDate || [self.maintenanceDate isEqual:otherMessage.maintenanceDate]) &&
      self.hasExecutionFlag == otherMessage.hasExecutionFlag &&
      (!self.hasExecutionFlag || self.executionFlag == otherMessage.executionFlag) &&
      self.hasExpiredFlag == otherMessage.hasExpiredFlag &&
      (!self.hasExpiredFlag || self.expiredFlag == otherMessage.expiredFlag) &&
      self.hasOrders == otherMessage.hasOrders &&
      (!self.hasOrders || [self.orders isEqual:otherMessage.orders]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasGtcId) {
    hashCode = hashCode * 31 + [self.gtcId hash];
  }
  if (self.hasGtcStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gtcStatus] hash];
  }
  if (self.hasIsPooled) {
    hashCode = hashCode * 31 + [self.isPooled hash];
  }
  if (self.hasMaintenanceDate) {
    hashCode = hashCode * 31 + [self.maintenanceDate hash];
  }
  if (self.hasExecutionFlag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.executionFlag] hash];
  }
  if (self.hasExpiredFlag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.expiredFlag] hash];
  }
  if (self.hasOrders) {
    hashCode = hashCode * 31 + [self.orders hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OrderGtc_Builder()
@property (strong) OrderGtc* result;
@end

@implementation OrderGtc_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OrderGtc alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OrderGtc_Builder*) clear {
  self.result = [[OrderGtc alloc] init];
  return self;
}
- (OrderGtc_Builder*) clone {
  return [OrderGtc builderWithPrototype:result];
}
- (OrderGtc*) defaultInstance {
  return [OrderGtc defaultInstance];
}
- (OrderGtc*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OrderGtc*) buildPartial {
  OrderGtc* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OrderGtc_Builder*) mergeFrom:(OrderGtc*) other {
  if (other == [OrderGtc defaultInstance]) {
    return self;
  }
  if (other.hasGtcId) {
    [self setGtcId:other.gtcId];
  }
  if (other.hasGtcStatus) {
    [self setGtcStatus:other.gtcStatus];
  }
  if (other.hasIsPooled) {
    [self setIsPooled:other.isPooled];
  }
  if (other.hasMaintenanceDate) {
    [self setMaintenanceDate:other.maintenanceDate];
  }
  if (other.hasExecutionFlag) {
    [self setExecutionFlag:other.executionFlag];
  }
  if (other.hasExpiredFlag) {
    [self setExpiredFlag:other.expiredFlag];
  }
  if (other.hasOrders) {
    [self mergeOrders:other.orders];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OrderGtc_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OrderGtc_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGtcId:[input readString]];
        break;
      }
      case 16: {
        [self setGtcStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setIsPooled:[input readString]];
        break;
      }
      case 34: {
        [self setMaintenanceDate:[input readString]];
        break;
      }
      case 40: {
        [self setExecutionFlag:[input readInt32]];
        break;
      }
      case 48: {
        [self setExpiredFlag:[input readInt32]];
        break;
      }
      case 58: {
        TxOrder_Builder* subBuilder = [TxOrder builder];
        if (self.hasOrders) {
          [subBuilder mergeFrom:self.orders];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrders:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGtcId {
  return result.hasGtcId;
}
- (NSString*) gtcId {
  return result.gtcId;
}
- (OrderGtc_Builder*) setGtcId:(NSString*) value {
  result.hasGtcId = YES;
  result.gtcId = value;
  return self;
}
- (OrderGtc_Builder*) clearGtcId {
  result.hasGtcId = NO;
  result.gtcId = @"";
  return self;
}
- (BOOL) hasGtcStatus {
  return result.hasGtcStatus;
}
- (int32_t) gtcStatus {
  return result.gtcStatus;
}
- (OrderGtc_Builder*) setGtcStatus:(int32_t) value {
  result.hasGtcStatus = YES;
  result.gtcStatus = value;
  return self;
}
- (OrderGtc_Builder*) clearGtcStatus {
  result.hasGtcStatus = NO;
  result.gtcStatus = 0;
  return self;
}
- (BOOL) hasIsPooled {
  return result.hasIsPooled;
}
- (NSString*) isPooled {
  return result.isPooled;
}
- (OrderGtc_Builder*) setIsPooled:(NSString*) value {
  result.hasIsPooled = YES;
  result.isPooled = value;
  return self;
}
- (OrderGtc_Builder*) clearIsPooled {
  result.hasIsPooled = NO;
  result.isPooled = @"";
  return self;
}
- (BOOL) hasMaintenanceDate {
  return result.hasMaintenanceDate;
}
- (NSString*) maintenanceDate {
  return result.maintenanceDate;
}
- (OrderGtc_Builder*) setMaintenanceDate:(NSString*) value {
  result.hasMaintenanceDate = YES;
  result.maintenanceDate = value;
  return self;
}
- (OrderGtc_Builder*) clearMaintenanceDate {
  result.hasMaintenanceDate = NO;
  result.maintenanceDate = @"";
  return self;
}
- (BOOL) hasExecutionFlag {
  return result.hasExecutionFlag;
}
- (int32_t) executionFlag {
  return result.executionFlag;
}
- (OrderGtc_Builder*) setExecutionFlag:(int32_t) value {
  result.hasExecutionFlag = YES;
  result.executionFlag = value;
  return self;
}
- (OrderGtc_Builder*) clearExecutionFlag {
  result.hasExecutionFlag = NO;
  result.executionFlag = 0;
  return self;
}
- (BOOL) hasExpiredFlag {
  return result.hasExpiredFlag;
}
- (int32_t) expiredFlag {
  return result.expiredFlag;
}
- (OrderGtc_Builder*) setExpiredFlag:(int32_t) value {
  result.hasExpiredFlag = YES;
  result.expiredFlag = value;
  return self;
}
- (OrderGtc_Builder*) clearExpiredFlag {
  result.hasExpiredFlag = NO;
  result.expiredFlag = 0;
  return self;
}
- (BOOL) hasOrders {
  return result.hasOrders;
}
- (TxOrder*) orders {
  return result.orders;
}
- (OrderGtc_Builder*) setOrders:(TxOrder*) value {
  result.hasOrders = YES;
  result.orders = value;
  return self;
}
- (OrderGtc_Builder*) setOrdersBuilder:(TxOrder_Builder*) builderForValue {
  return [self setOrders:[builderForValue build]];
}
- (OrderGtc_Builder*) mergeOrders:(TxOrder*) value {
  if (result.hasOrders &&
      result.orders != [TxOrder defaultInstance]) {
    result.orders =
      [[[TxOrder builderWithPrototype:result.orders] mergeFrom:value] buildPartial];
  } else {
    result.orders = value;
  }
  result.hasOrders = YES;
  return self;
}
- (OrderGtc_Builder*) clearOrders {
  result.hasOrders = NO;
  result.orders = [TxOrder defaultInstance];
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (OrderGtc_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (OrderGtc_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
@end

@interface OrderConditional ()
@property int32_t ocid;
@property (strong) NSString* stockcode;
@property int32_t side;
@property int32_t rules;
@property int32_t trend;
@property (strong) NSString* when1;
@property (strong) NSString* whencomp1;
@property int32_t price;
@property (strong) NSString* when2;
@property (strong) NSString* whencomp2;
@property int32_t qty;
@property int32_t priceDiff;
@property (strong) NSString* clordid;
@property int32_t status;
@property int32_t ordstatus;
@property int32_t matchqty;
@property (strong) NSString* ownerid;
@property (strong) NSString* terminateAct;
@property (strong) NSString* createdDate;
@property (strong) NSString* lastUpdated;
@property (strong) TxOrder* orders;
@property int32_t priceBound;
@property (strong) NSString* timeBound;
@property (strong) NSString* gtdDate;
@end

@implementation OrderConditional

- (BOOL) hasOcid {
  return !!hasOcid_;
}
- (void) setHasOcid:(BOOL) value {
  hasOcid_ = !!value;
}
@synthesize ocid;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasRules {
  return !!hasRules_;
}
- (void) setHasRules:(BOOL) value {
  hasRules_ = !!value;
}
@synthesize rules;
- (BOOL) hasTrend {
  return !!hasTrend_;
}
- (void) setHasTrend:(BOOL) value {
  hasTrend_ = !!value;
}
@synthesize trend;
- (BOOL) hasWhen1 {
  return !!hasWhen1_;
}
- (void) setHasWhen1:(BOOL) value {
  hasWhen1_ = !!value;
}
@synthesize when1;
- (BOOL) hasWhencomp1 {
  return !!hasWhencomp1_;
}
- (void) setHasWhencomp1:(BOOL) value {
  hasWhencomp1_ = !!value;
}
@synthesize whencomp1;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasWhen2 {
  return !!hasWhen2_;
}
- (void) setHasWhen2:(BOOL) value {
  hasWhen2_ = !!value;
}
@synthesize when2;
- (BOOL) hasWhencomp2 {
  return !!hasWhencomp2_;
}
- (void) setHasWhencomp2:(BOOL) value {
  hasWhencomp2_ = !!value;
}
@synthesize whencomp2;
- (BOOL) hasQty {
  return !!hasQty_;
}
- (void) setHasQty:(BOOL) value {
  hasQty_ = !!value;
}
@synthesize qty;
- (BOOL) hasPriceDiff {
  return !!hasPriceDiff_;
}
- (void) setHasPriceDiff:(BOOL) value {
  hasPriceDiff_ = !!value;
}
@synthesize priceDiff;
- (BOOL) hasClordid {
  return !!hasClordid_;
}
- (void) setHasClordid:(BOOL) value {
  hasClordid_ = !!value;
}
@synthesize clordid;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasOrdstatus {
  return !!hasOrdstatus_;
}
- (void) setHasOrdstatus:(BOOL) value {
  hasOrdstatus_ = !!value;
}
@synthesize ordstatus;
- (BOOL) hasMatchqty {
  return !!hasMatchqty_;
}
- (void) setHasMatchqty:(BOOL) value {
  hasMatchqty_ = !!value;
}
@synthesize matchqty;
- (BOOL) hasOwnerid {
  return !!hasOwnerid_;
}
- (void) setHasOwnerid:(BOOL) value {
  hasOwnerid_ = !!value;
}
@synthesize ownerid;
- (BOOL) hasTerminateAct {
  return !!hasTerminateAct_;
}
- (void) setHasTerminateAct:(BOOL) value {
  hasTerminateAct_ = !!value;
}
@synthesize terminateAct;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) value {
  hasCreatedDate_ = !!value;
}
@synthesize createdDate;
- (BOOL) hasLastUpdated {
  return !!hasLastUpdated_;
}
- (void) setHasLastUpdated:(BOOL) value {
  hasLastUpdated_ = !!value;
}
@synthesize lastUpdated;
- (BOOL) hasOrders {
  return !!hasOrders_;
}
- (void) setHasOrders:(BOOL) value {
  hasOrders_ = !!value;
}
@synthesize orders;
- (BOOL) hasPriceBound {
  return !!hasPriceBound_;
}
- (void) setHasPriceBound:(BOOL) value {
  hasPriceBound_ = !!value;
}
@synthesize priceBound;
- (BOOL) hasTimeBound {
  return !!hasTimeBound_;
}
- (void) setHasTimeBound:(BOOL) value {
  hasTimeBound_ = !!value;
}
@synthesize timeBound;
- (BOOL) hasGtdDate {
  return !!hasGtdDate_;
}
- (void) setHasGtdDate:(BOOL) value {
  hasGtdDate_ = !!value;
}
@synthesize gtdDate;
- (id) init {
  if ((self = [super init])) {
    self.ocid = 0;
    self.stockcode = @"";
    self.side = 0;
    self.rules = 0;
    self.trend = 0;
    self.when1 = @"";
    self.whencomp1 = @"";
    self.price = 0;
    self.when2 = @"";
    self.whencomp2 = @"";
    self.qty = 0;
    self.priceDiff = 0;
    self.clordid = @"";
    self.status = 0;
    self.ordstatus = 0;
    self.matchqty = 0;
    self.ownerid = @"";
    self.terminateAct = @"";
    self.createdDate = @"";
    self.lastUpdated = @"";
    self.orders = [TxOrder defaultInstance];
    self.priceBound = 0;
    self.timeBound = @"";
    self.gtdDate = @"";
  }
  return self;
}
static OrderConditional* defaultOrderConditionalInstance = nil;
+ (void) initialize {
  if (self == [OrderConditional class]) {
    defaultOrderConditionalInstance = [[OrderConditional alloc] init];
  }
}
+ (OrderConditional*) defaultInstance {
  return defaultOrderConditionalInstance;
}
- (OrderConditional*) defaultInstance {
  return defaultOrderConditionalInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOcid) {
    [output writeInt32:1 value:self.ocid];
  }
  if (self.hasStockcode) {
    [output writeString:2 value:self.stockcode];
  }
  if (self.hasSide) {
    [output writeInt32:3 value:self.side];
  }
  if (self.hasRules) {
    [output writeInt32:4 value:self.rules];
  }
  if (self.hasTrend) {
    [output writeInt32:5 value:self.trend];
  }
  if (self.hasWhen1) {
    [output writeString:6 value:self.when1];
  }
  if (self.hasWhencomp1) {
    [output writeString:7 value:self.whencomp1];
  }
  if (self.hasPrice) {
    [output writeInt32:8 value:self.price];
  }
  if (self.hasWhen2) {
    [output writeString:9 value:self.when2];
  }
  if (self.hasWhencomp2) {
    [output writeString:10 value:self.whencomp2];
  }
  if (self.hasQty) {
    [output writeInt32:11 value:self.qty];
  }
  if (self.hasPriceDiff) {
    [output writeInt32:12 value:self.priceDiff];
  }
  if (self.hasClordid) {
    [output writeString:13 value:self.clordid];
  }
  if (self.hasStatus) {
    [output writeInt32:14 value:self.status];
  }
  if (self.hasOrdstatus) {
    [output writeInt32:15 value:self.ordstatus];
  }
  if (self.hasMatchqty) {
    [output writeInt32:16 value:self.matchqty];
  }
  if (self.hasOwnerid) {
    [output writeString:17 value:self.ownerid];
  }
  if (self.hasTerminateAct) {
    [output writeString:18 value:self.terminateAct];
  }
  if (self.hasCreatedDate) {
    [output writeString:19 value:self.createdDate];
  }
  if (self.hasLastUpdated) {
    [output writeString:20 value:self.lastUpdated];
  }
  if (self.hasOrders) {
    [output writeMessage:21 value:self.orders];
  }
  if (self.hasPriceBound) {
    [output writeInt32:22 value:self.priceBound];
  }
  if (self.hasTimeBound) {
    [output writeString:23 value:self.timeBound];
  }
  if (self.hasGtdDate) {
    [output writeString:24 value:self.gtdDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOcid) {
    size += computeInt32Size(1, self.ocid);
  }
  if (self.hasStockcode) {
    size += computeStringSize(2, self.stockcode);
  }
  if (self.hasSide) {
    size += computeInt32Size(3, self.side);
  }
  if (self.hasRules) {
    size += computeInt32Size(4, self.rules);
  }
  if (self.hasTrend) {
    size += computeInt32Size(5, self.trend);
  }
  if (self.hasWhen1) {
    size += computeStringSize(6, self.when1);
  }
  if (self.hasWhencomp1) {
    size += computeStringSize(7, self.whencomp1);
  }
  if (self.hasPrice) {
    size += computeInt32Size(8, self.price);
  }
  if (self.hasWhen2) {
    size += computeStringSize(9, self.when2);
  }
  if (self.hasWhencomp2) {
    size += computeStringSize(10, self.whencomp2);
  }
  if (self.hasQty) {
    size += computeInt32Size(11, self.qty);
  }
  if (self.hasPriceDiff) {
    size += computeInt32Size(12, self.priceDiff);
  }
  if (self.hasClordid) {
    size += computeStringSize(13, self.clordid);
  }
  if (self.hasStatus) {
    size += computeInt32Size(14, self.status);
  }
  if (self.hasOrdstatus) {
    size += computeInt32Size(15, self.ordstatus);
  }
  if (self.hasMatchqty) {
    size += computeInt32Size(16, self.matchqty);
  }
  if (self.hasOwnerid) {
    size += computeStringSize(17, self.ownerid);
  }
  if (self.hasTerminateAct) {
    size += computeStringSize(18, self.terminateAct);
  }
  if (self.hasCreatedDate) {
    size += computeStringSize(19, self.createdDate);
  }
  if (self.hasLastUpdated) {
    size += computeStringSize(20, self.lastUpdated);
  }
  if (self.hasOrders) {
    size += computeMessageSize(21, self.orders);
  }
  if (self.hasPriceBound) {
    size += computeInt32Size(22, self.priceBound);
  }
  if (self.hasTimeBound) {
    size += computeStringSize(23, self.timeBound);
  }
  if (self.hasGtdDate) {
    size += computeStringSize(24, self.gtdDate);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OrderConditional*) parseFromData:(NSData*) data {
  return (OrderConditional*)[[[OrderConditional builder] mergeFromData:data] build];
}
+ (OrderConditional*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderConditional*)[[[OrderConditional builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OrderConditional*) parseFromInputStream:(NSInputStream*) input {
  return (OrderConditional*)[[[OrderConditional builder] mergeFromInputStream:input] build];
}
+ (OrderConditional*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderConditional*)[[[OrderConditional builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderConditional*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OrderConditional*)[[[OrderConditional builder] mergeFromCodedInputStream:input] build];
}
+ (OrderConditional*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderConditional*)[[[OrderConditional builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderConditional_Builder*) builder {
  return [[OrderConditional_Builder alloc] init];
}
+ (OrderConditional_Builder*) builderWithPrototype:(OrderConditional*) prototype {
  return [[OrderConditional builder] mergeFrom:prototype];
}
- (OrderConditional_Builder*) builder {
  return [OrderConditional builder];
}
- (OrderConditional_Builder*) toBuilder {
  return [OrderConditional builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasOcid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ocid", [NSNumber numberWithInt:self.ocid]];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasRules) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rules", [NSNumber numberWithInt:self.rules]];
  }
  if (self.hasTrend) {
    [output appendFormat:@"%@%@: %@\n", indent, @"trend", [NSNumber numberWithInt:self.trend]];
  }
  if (self.hasWhen1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"when1", self.when1];
  }
  if (self.hasWhencomp1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"whencomp1", self.whencomp1];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasWhen2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"when2", self.when2];
  }
  if (self.hasWhencomp2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"whencomp2", self.whencomp2];
  }
  if (self.hasQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qty", [NSNumber numberWithInt:self.qty]];
  }
  if (self.hasPriceDiff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priceDiff", [NSNumber numberWithInt:self.priceDiff]];
  }
  if (self.hasClordid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clordid", self.clordid];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInt:self.status]];
  }
  if (self.hasOrdstatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ordstatus", [NSNumber numberWithInt:self.ordstatus]];
  }
  if (self.hasMatchqty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchqty", [NSNumber numberWithInt:self.matchqty]];
  }
  if (self.hasOwnerid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerid", self.ownerid];
  }
  if (self.hasTerminateAct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"terminateAct", self.terminateAct];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", self.createdDate];
  }
  if (self.hasLastUpdated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastUpdated", self.lastUpdated];
  }
  if (self.hasOrders) {
    [output appendFormat:@"%@%@ {\n", indent, @"orders"];
    [self.orders writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPriceBound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priceBound", [NSNumber numberWithInt:self.priceBound]];
  }
  if (self.hasTimeBound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeBound", self.timeBound];
  }
  if (self.hasGtdDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gtdDate", self.gtdDate];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OrderConditional class]]) {
    return NO;
  }
  OrderConditional *otherMessage = other;
  return
      self.hasOcid == otherMessage.hasOcid &&
      (!self.hasOcid || self.ocid == otherMessage.ocid) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasRules == otherMessage.hasRules &&
      (!self.hasRules || self.rules == otherMessage.rules) &&
      self.hasTrend == otherMessage.hasTrend &&
      (!self.hasTrend || self.trend == otherMessage.trend) &&
      self.hasWhen1 == otherMessage.hasWhen1 &&
      (!self.hasWhen1 || [self.when1 isEqual:otherMessage.when1]) &&
      self.hasWhencomp1 == otherMessage.hasWhencomp1 &&
      (!self.hasWhencomp1 || [self.whencomp1 isEqual:otherMessage.whencomp1]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasWhen2 == otherMessage.hasWhen2 &&
      (!self.hasWhen2 || [self.when2 isEqual:otherMessage.when2]) &&
      self.hasWhencomp2 == otherMessage.hasWhencomp2 &&
      (!self.hasWhencomp2 || [self.whencomp2 isEqual:otherMessage.whencomp2]) &&
      self.hasQty == otherMessage.hasQty &&
      (!self.hasQty || self.qty == otherMessage.qty) &&
      self.hasPriceDiff == otherMessage.hasPriceDiff &&
      (!self.hasPriceDiff || self.priceDiff == otherMessage.priceDiff) &&
      self.hasClordid == otherMessage.hasClordid &&
      (!self.hasClordid || [self.clordid isEqual:otherMessage.clordid]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasOrdstatus == otherMessage.hasOrdstatus &&
      (!self.hasOrdstatus || self.ordstatus == otherMessage.ordstatus) &&
      self.hasMatchqty == otherMessage.hasMatchqty &&
      (!self.hasMatchqty || self.matchqty == otherMessage.matchqty) &&
      self.hasOwnerid == otherMessage.hasOwnerid &&
      (!self.hasOwnerid || [self.ownerid isEqual:otherMessage.ownerid]) &&
      self.hasTerminateAct == otherMessage.hasTerminateAct &&
      (!self.hasTerminateAct || [self.terminateAct isEqual:otherMessage.terminateAct]) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || [self.createdDate isEqual:otherMessage.createdDate]) &&
      self.hasLastUpdated == otherMessage.hasLastUpdated &&
      (!self.hasLastUpdated || [self.lastUpdated isEqual:otherMessage.lastUpdated]) &&
      self.hasOrders == otherMessage.hasOrders &&
      (!self.hasOrders || [self.orders isEqual:otherMessage.orders]) &&
      self.hasPriceBound == otherMessage.hasPriceBound &&
      (!self.hasPriceBound || self.priceBound == otherMessage.priceBound) &&
      self.hasTimeBound == otherMessage.hasTimeBound &&
      (!self.hasTimeBound || [self.timeBound isEqual:otherMessage.timeBound]) &&
      self.hasGtdDate == otherMessage.hasGtdDate &&
      (!self.hasGtdDate || [self.gtdDate isEqual:otherMessage.gtdDate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasOcid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.ocid] hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasRules) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rules] hash];
  }
  if (self.hasTrend) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.trend] hash];
  }
  if (self.hasWhen1) {
    hashCode = hashCode * 31 + [self.when1 hash];
  }
  if (self.hasWhencomp1) {
    hashCode = hashCode * 31 + [self.whencomp1 hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasWhen2) {
    hashCode = hashCode * 31 + [self.when2 hash];
  }
  if (self.hasWhencomp2) {
    hashCode = hashCode * 31 + [self.whencomp2 hash];
  }
  if (self.hasQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.qty] hash];
  }
  if (self.hasPriceDiff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.priceDiff] hash];
  }
  if (self.hasClordid) {
    hashCode = hashCode * 31 + [self.clordid hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.status] hash];
  }
  if (self.hasOrdstatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.ordstatus] hash];
  }
  if (self.hasMatchqty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchqty] hash];
  }
  if (self.hasOwnerid) {
    hashCode = hashCode * 31 + [self.ownerid hash];
  }
  if (self.hasTerminateAct) {
    hashCode = hashCode * 31 + [self.terminateAct hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [self.createdDate hash];
  }
  if (self.hasLastUpdated) {
    hashCode = hashCode * 31 + [self.lastUpdated hash];
  }
  if (self.hasOrders) {
    hashCode = hashCode * 31 + [self.orders hash];
  }
  if (self.hasPriceBound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.priceBound] hash];
  }
  if (self.hasTimeBound) {
    hashCode = hashCode * 31 + [self.timeBound hash];
  }
  if (self.hasGtdDate) {
    hashCode = hashCode * 31 + [self.gtdDate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OrderConditional_Builder()
@property (strong) OrderConditional* result;
@end

@implementation OrderConditional_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OrderConditional alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OrderConditional_Builder*) clear {
  self.result = [[OrderConditional alloc] init];
  return self;
}
- (OrderConditional_Builder*) clone {
  return [OrderConditional builderWithPrototype:result];
}
- (OrderConditional*) defaultInstance {
  return [OrderConditional defaultInstance];
}
- (OrderConditional*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OrderConditional*) buildPartial {
  OrderConditional* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OrderConditional_Builder*) mergeFrom:(OrderConditional*) other {
  if (other == [OrderConditional defaultInstance]) {
    return self;
  }
  if (other.hasOcid) {
    [self setOcid:other.ocid];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasRules) {
    [self setRules:other.rules];
  }
  if (other.hasTrend) {
    [self setTrend:other.trend];
  }
  if (other.hasWhen1) {
    [self setWhen1:other.when1];
  }
  if (other.hasWhencomp1) {
    [self setWhencomp1:other.whencomp1];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasWhen2) {
    [self setWhen2:other.when2];
  }
  if (other.hasWhencomp2) {
    [self setWhencomp2:other.whencomp2];
  }
  if (other.hasQty) {
    [self setQty:other.qty];
  }
  if (other.hasPriceDiff) {
    [self setPriceDiff:other.priceDiff];
  }
  if (other.hasClordid) {
    [self setClordid:other.clordid];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasOrdstatus) {
    [self setOrdstatus:other.ordstatus];
  }
  if (other.hasMatchqty) {
    [self setMatchqty:other.matchqty];
  }
  if (other.hasOwnerid) {
    [self setOwnerid:other.ownerid];
  }
  if (other.hasTerminateAct) {
    [self setTerminateAct:other.terminateAct];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasLastUpdated) {
    [self setLastUpdated:other.lastUpdated];
  }
  if (other.hasOrders) {
    [self mergeOrders:other.orders];
  }
  if (other.hasPriceBound) {
    [self setPriceBound:other.priceBound];
  }
  if (other.hasTimeBound) {
    [self setTimeBound:other.timeBound];
  }
  if (other.hasGtdDate) {
    [self setGtdDate:other.gtdDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OrderConditional_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OrderConditional_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOcid:[input readInt32]];
        break;
      }
      case 18: {
        [self setStockcode:[input readString]];
        break;
      }
      case 24: {
        [self setSide:[input readInt32]];
        break;
      }
      case 32: {
        [self setRules:[input readInt32]];
        break;
      }
      case 40: {
        [self setTrend:[input readInt32]];
        break;
      }
      case 50: {
        [self setWhen1:[input readString]];
        break;
      }
      case 58: {
        [self setWhencomp1:[input readString]];
        break;
      }
      case 64: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 74: {
        [self setWhen2:[input readString]];
        break;
      }
      case 82: {
        [self setWhencomp2:[input readString]];
        break;
      }
      case 88: {
        [self setQty:[input readInt32]];
        break;
      }
      case 96: {
        [self setPriceDiff:[input readInt32]];
        break;
      }
      case 106: {
        [self setClordid:[input readString]];
        break;
      }
      case 112: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 120: {
        [self setOrdstatus:[input readInt32]];
        break;
      }
      case 128: {
        [self setMatchqty:[input readInt32]];
        break;
      }
      case 138: {
        [self setOwnerid:[input readString]];
        break;
      }
      case 146: {
        [self setTerminateAct:[input readString]];
        break;
      }
      case 154: {
        [self setCreatedDate:[input readString]];
        break;
      }
      case 162: {
        [self setLastUpdated:[input readString]];
        break;
      }
      case 170: {
        TxOrder_Builder* subBuilder = [TxOrder builder];
        if (self.hasOrders) {
          [subBuilder mergeFrom:self.orders];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrders:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setPriceBound:[input readInt32]];
        break;
      }
      case 186: {
        [self setTimeBound:[input readString]];
        break;
      }
      case 194: {
        [self setGtdDate:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOcid {
  return result.hasOcid;
}
- (int32_t) ocid {
  return result.ocid;
}
- (OrderConditional_Builder*) setOcid:(int32_t) value {
  result.hasOcid = YES;
  result.ocid = value;
  return self;
}
- (OrderConditional_Builder*) clearOcid {
  result.hasOcid = NO;
  result.ocid = 0;
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (OrderConditional_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (OrderConditional_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (OrderConditional_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (OrderConditional_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasRules {
  return result.hasRules;
}
- (int32_t) rules {
  return result.rules;
}
- (OrderConditional_Builder*) setRules:(int32_t) value {
  result.hasRules = YES;
  result.rules = value;
  return self;
}
- (OrderConditional_Builder*) clearRules {
  result.hasRules = NO;
  result.rules = 0;
  return self;
}
- (BOOL) hasTrend {
  return result.hasTrend;
}
- (int32_t) trend {
  return result.trend;
}
- (OrderConditional_Builder*) setTrend:(int32_t) value {
  result.hasTrend = YES;
  result.trend = value;
  return self;
}
- (OrderConditional_Builder*) clearTrend {
  result.hasTrend = NO;
  result.trend = 0;
  return self;
}
- (BOOL) hasWhen1 {
  return result.hasWhen1;
}
- (NSString*) when1 {
  return result.when1;
}
- (OrderConditional_Builder*) setWhen1:(NSString*) value {
  result.hasWhen1 = YES;
  result.when1 = value;
  return self;
}
- (OrderConditional_Builder*) clearWhen1 {
  result.hasWhen1 = NO;
  result.when1 = @"";
  return self;
}
- (BOOL) hasWhencomp1 {
  return result.hasWhencomp1;
}
- (NSString*) whencomp1 {
  return result.whencomp1;
}
- (OrderConditional_Builder*) setWhencomp1:(NSString*) value {
  result.hasWhencomp1 = YES;
  result.whencomp1 = value;
  return self;
}
- (OrderConditional_Builder*) clearWhencomp1 {
  result.hasWhencomp1 = NO;
  result.whencomp1 = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (OrderConditional_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (OrderConditional_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasWhen2 {
  return result.hasWhen2;
}
- (NSString*) when2 {
  return result.when2;
}
- (OrderConditional_Builder*) setWhen2:(NSString*) value {
  result.hasWhen2 = YES;
  result.when2 = value;
  return self;
}
- (OrderConditional_Builder*) clearWhen2 {
  result.hasWhen2 = NO;
  result.when2 = @"";
  return self;
}
- (BOOL) hasWhencomp2 {
  return result.hasWhencomp2;
}
- (NSString*) whencomp2 {
  return result.whencomp2;
}
- (OrderConditional_Builder*) setWhencomp2:(NSString*) value {
  result.hasWhencomp2 = YES;
  result.whencomp2 = value;
  return self;
}
- (OrderConditional_Builder*) clearWhencomp2 {
  result.hasWhencomp2 = NO;
  result.whencomp2 = @"";
  return self;
}
- (BOOL) hasQty {
  return result.hasQty;
}
- (int32_t) qty {
  return result.qty;
}
- (OrderConditional_Builder*) setQty:(int32_t) value {
  result.hasQty = YES;
  result.qty = value;
  return self;
}
- (OrderConditional_Builder*) clearQty {
  result.hasQty = NO;
  result.qty = 0;
  return self;
}
- (BOOL) hasPriceDiff {
  return result.hasPriceDiff;
}
- (int32_t) priceDiff {
  return result.priceDiff;
}
- (OrderConditional_Builder*) setPriceDiff:(int32_t) value {
  result.hasPriceDiff = YES;
  result.priceDiff = value;
  return self;
}
- (OrderConditional_Builder*) clearPriceDiff {
  result.hasPriceDiff = NO;
  result.priceDiff = 0;
  return self;
}
- (BOOL) hasClordid {
  return result.hasClordid;
}
- (NSString*) clordid {
  return result.clordid;
}
- (OrderConditional_Builder*) setClordid:(NSString*) value {
  result.hasClordid = YES;
  result.clordid = value;
  return self;
}
- (OrderConditional_Builder*) clearClordid {
  result.hasClordid = NO;
  result.clordid = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (OrderConditional_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (OrderConditional_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasOrdstatus {
  return result.hasOrdstatus;
}
- (int32_t) ordstatus {
  return result.ordstatus;
}
- (OrderConditional_Builder*) setOrdstatus:(int32_t) value {
  result.hasOrdstatus = YES;
  result.ordstatus = value;
  return self;
}
- (OrderConditional_Builder*) clearOrdstatus {
  result.hasOrdstatus = NO;
  result.ordstatus = 0;
  return self;
}
- (BOOL) hasMatchqty {
  return result.hasMatchqty;
}
- (int32_t) matchqty {
  return result.matchqty;
}
- (OrderConditional_Builder*) setMatchqty:(int32_t) value {
  result.hasMatchqty = YES;
  result.matchqty = value;
  return self;
}
- (OrderConditional_Builder*) clearMatchqty {
  result.hasMatchqty = NO;
  result.matchqty = 0;
  return self;
}
- (BOOL) hasOwnerid {
  return result.hasOwnerid;
}
- (NSString*) ownerid {
  return result.ownerid;
}
- (OrderConditional_Builder*) setOwnerid:(NSString*) value {
  result.hasOwnerid = YES;
  result.ownerid = value;
  return self;
}
- (OrderConditional_Builder*) clearOwnerid {
  result.hasOwnerid = NO;
  result.ownerid = @"";
  return self;
}
- (BOOL) hasTerminateAct {
  return result.hasTerminateAct;
}
- (NSString*) terminateAct {
  return result.terminateAct;
}
- (OrderConditional_Builder*) setTerminateAct:(NSString*) value {
  result.hasTerminateAct = YES;
  result.terminateAct = value;
  return self;
}
- (OrderConditional_Builder*) clearTerminateAct {
  result.hasTerminateAct = NO;
  result.terminateAct = @"";
  return self;
}
- (BOOL) hasCreatedDate {
  return result.hasCreatedDate;
}
- (NSString*) createdDate {
  return result.createdDate;
}
- (OrderConditional_Builder*) setCreatedDate:(NSString*) value {
  result.hasCreatedDate = YES;
  result.createdDate = value;
  return self;
}
- (OrderConditional_Builder*) clearCreatedDate {
  result.hasCreatedDate = NO;
  result.createdDate = @"";
  return self;
}
- (BOOL) hasLastUpdated {
  return result.hasLastUpdated;
}
- (NSString*) lastUpdated {
  return result.lastUpdated;
}
- (OrderConditional_Builder*) setLastUpdated:(NSString*) value {
  result.hasLastUpdated = YES;
  result.lastUpdated = value;
  return self;
}
- (OrderConditional_Builder*) clearLastUpdated {
  result.hasLastUpdated = NO;
  result.lastUpdated = @"";
  return self;
}
- (BOOL) hasOrders {
  return result.hasOrders;
}
- (TxOrder*) orders {
  return result.orders;
}
- (OrderConditional_Builder*) setOrders:(TxOrder*) value {
  result.hasOrders = YES;
  result.orders = value;
  return self;
}
- (OrderConditional_Builder*) setOrdersBuilder:(TxOrder_Builder*) builderForValue {
  return [self setOrders:[builderForValue build]];
}
- (OrderConditional_Builder*) mergeOrders:(TxOrder*) value {
  if (result.hasOrders &&
      result.orders != [TxOrder defaultInstance]) {
    result.orders =
      [[[TxOrder builderWithPrototype:result.orders] mergeFrom:value] buildPartial];
  } else {
    result.orders = value;
  }
  result.hasOrders = YES;
  return self;
}
- (OrderConditional_Builder*) clearOrders {
  result.hasOrders = NO;
  result.orders = [TxOrder defaultInstance];
  return self;
}
- (BOOL) hasPriceBound {
  return result.hasPriceBound;
}
- (int32_t) priceBound {
  return result.priceBound;
}
- (OrderConditional_Builder*) setPriceBound:(int32_t) value {
  result.hasPriceBound = YES;
  result.priceBound = value;
  return self;
}
- (OrderConditional_Builder*) clearPriceBound {
  result.hasPriceBound = NO;
  result.priceBound = 0;
  return self;
}
- (BOOL) hasTimeBound {
  return result.hasTimeBound;
}
- (NSString*) timeBound {
  return result.timeBound;
}
- (OrderConditional_Builder*) setTimeBound:(NSString*) value {
  result.hasTimeBound = YES;
  result.timeBound = value;
  return self;
}
- (OrderConditional_Builder*) clearTimeBound {
  result.hasTimeBound = NO;
  result.timeBound = @"";
  return self;
}
- (BOOL) hasGtdDate {
  return result.hasGtdDate;
}
- (NSString*) gtdDate {
  return result.gtdDate;
}
- (OrderConditional_Builder*) setGtdDate:(NSString*) value {
  result.hasGtdDate = YES;
  result.gtdDate = value;
  return self;
}
- (OrderConditional_Builder*) clearGtdDate {
  result.hasGtdDate = NO;
  result.gtdDate = @"";
  return self;
}
@end

@interface TradingTarget ()
@property (strong) NSString* securityCode;
@property (strong) NSString* clientcode;
@property (strong) NSString* clientname;
@property int32_t side;
@property Float64 initialShare;
@property Float64 initialPrice;
@property int32_t status;
@property int32_t ttid;
@property Float64 initialValue;
@property Float64 doneShare;
@property Float64 donePrice;
@property Float64 doneValue;
@property Float64 nextShare;
@property Float64 nextPrice;
@property Float64 nextValue;
@property Float64 orderShare;
@property Float64 orderPrice;
@property Float64 orderValue;
@property int32_t isAvgPrice;
@end

@implementation TradingTarget

- (BOOL) hasSecurityCode {
  return !!hasSecurityCode_;
}
- (void) setHasSecurityCode:(BOOL) value {
  hasSecurityCode_ = !!value;
}
@synthesize securityCode;
- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasClientname {
  return !!hasClientname_;
}
- (void) setHasClientname:(BOOL) value {
  hasClientname_ = !!value;
}
@synthesize clientname;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasInitialShare {
  return !!hasInitialShare_;
}
- (void) setHasInitialShare:(BOOL) value {
  hasInitialShare_ = !!value;
}
@synthesize initialShare;
- (BOOL) hasInitialPrice {
  return !!hasInitialPrice_;
}
- (void) setHasInitialPrice:(BOOL) value {
  hasInitialPrice_ = !!value;
}
@synthesize initialPrice;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasTtid {
  return !!hasTtid_;
}
- (void) setHasTtid:(BOOL) value {
  hasTtid_ = !!value;
}
@synthesize ttid;
- (BOOL) hasInitialValue {
  return !!hasInitialValue_;
}
- (void) setHasInitialValue:(BOOL) value {
  hasInitialValue_ = !!value;
}
@synthesize initialValue;
- (BOOL) hasDoneShare {
  return !!hasDoneShare_;
}
- (void) setHasDoneShare:(BOOL) value {
  hasDoneShare_ = !!value;
}
@synthesize doneShare;
- (BOOL) hasDonePrice {
  return !!hasDonePrice_;
}
- (void) setHasDonePrice:(BOOL) value {
  hasDonePrice_ = !!value;
}
@synthesize donePrice;
- (BOOL) hasDoneValue {
  return !!hasDoneValue_;
}
- (void) setHasDoneValue:(BOOL) value {
  hasDoneValue_ = !!value;
}
@synthesize doneValue;
- (BOOL) hasNextShare {
  return !!hasNextShare_;
}
- (void) setHasNextShare:(BOOL) value {
  hasNextShare_ = !!value;
}
@synthesize nextShare;
- (BOOL) hasNextPrice {
  return !!hasNextPrice_;
}
- (void) setHasNextPrice:(BOOL) value {
  hasNextPrice_ = !!value;
}
@synthesize nextPrice;
- (BOOL) hasNextValue {
  return !!hasNextValue_;
}
- (void) setHasNextValue:(BOOL) value {
  hasNextValue_ = !!value;
}
@synthesize nextValue;
- (BOOL) hasOrderShare {
  return !!hasOrderShare_;
}
- (void) setHasOrderShare:(BOOL) value {
  hasOrderShare_ = !!value;
}
@synthesize orderShare;
- (BOOL) hasOrderPrice {
  return !!hasOrderPrice_;
}
- (void) setHasOrderPrice:(BOOL) value {
  hasOrderPrice_ = !!value;
}
@synthesize orderPrice;
- (BOOL) hasOrderValue {
  return !!hasOrderValue_;
}
- (void) setHasOrderValue:(BOOL) value {
  hasOrderValue_ = !!value;
}
@synthesize orderValue;
- (BOOL) hasIsAvgPrice {
  return !!hasIsAvgPrice_;
}
- (void) setHasIsAvgPrice:(BOOL) value {
  hasIsAvgPrice_ = !!value;
}
@synthesize isAvgPrice;
- (id) init {
  if ((self = [super init])) {
    self.securityCode = @"";
    self.clientcode = @"";
    self.clientname = @"";
    self.side = 0;
    self.initialShare = 0;
    self.initialPrice = 0;
    self.status = 0;
    self.ttid = 0;
    self.initialValue = 0;
    self.doneShare = 0;
    self.donePrice = 0;
    self.doneValue = 0;
    self.nextShare = 0;
    self.nextPrice = 0;
    self.nextValue = 0;
    self.orderShare = 0;
    self.orderPrice = 0;
    self.orderValue = 0;
    self.isAvgPrice = 0;
  }
  return self;
}
static TradingTarget* defaultTradingTargetInstance = nil;
+ (void) initialize {
  if (self == [TradingTarget class]) {
    defaultTradingTargetInstance = [[TradingTarget alloc] init];
  }
}
+ (TradingTarget*) defaultInstance {
  return defaultTradingTargetInstance;
}
- (TradingTarget*) defaultInstance {
  return defaultTradingTargetInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSecurityCode) {
    [output writeString:1 value:self.securityCode];
  }
  if (self.hasClientcode) {
    [output writeString:2 value:self.clientcode];
  }
  if (self.hasClientname) {
    [output writeString:3 value:self.clientname];
  }
  if (self.hasSide) {
    [output writeInt32:4 value:self.side];
  }
  if (self.hasInitialShare) {
    [output writeDouble:5 value:self.initialShare];
  }
  if (self.hasInitialPrice) {
    [output writeDouble:6 value:self.initialPrice];
  }
  if (self.hasStatus) {
    [output writeInt32:7 value:self.status];
  }
  if (self.hasTtid) {
    [output writeInt32:8 value:self.ttid];
  }
  if (self.hasInitialValue) {
    [output writeDouble:9 value:self.initialValue];
  }
  if (self.hasDoneShare) {
    [output writeDouble:10 value:self.doneShare];
  }
  if (self.hasDonePrice) {
    [output writeDouble:11 value:self.donePrice];
  }
  if (self.hasDoneValue) {
    [output writeDouble:12 value:self.doneValue];
  }
  if (self.hasNextShare) {
    [output writeDouble:13 value:self.nextShare];
  }
  if (self.hasNextPrice) {
    [output writeDouble:14 value:self.nextPrice];
  }
  if (self.hasNextValue) {
    [output writeDouble:15 value:self.nextValue];
  }
  if (self.hasOrderShare) {
    [output writeDouble:16 value:self.orderShare];
  }
  if (self.hasOrderPrice) {
    [output writeDouble:17 value:self.orderPrice];
  }
  if (self.hasOrderValue) {
    [output writeDouble:18 value:self.orderValue];
  }
  if (self.hasIsAvgPrice) {
    [output writeInt32:19 value:self.isAvgPrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSecurityCode) {
    size += computeStringSize(1, self.securityCode);
  }
  if (self.hasClientcode) {
    size += computeStringSize(2, self.clientcode);
  }
  if (self.hasClientname) {
    size += computeStringSize(3, self.clientname);
  }
  if (self.hasSide) {
    size += computeInt32Size(4, self.side);
  }
  if (self.hasInitialShare) {
    size += computeDoubleSize(5, self.initialShare);
  }
  if (self.hasInitialPrice) {
    size += computeDoubleSize(6, self.initialPrice);
  }
  if (self.hasStatus) {
    size += computeInt32Size(7, self.status);
  }
  if (self.hasTtid) {
    size += computeInt32Size(8, self.ttid);
  }
  if (self.hasInitialValue) {
    size += computeDoubleSize(9, self.initialValue);
  }
  if (self.hasDoneShare) {
    size += computeDoubleSize(10, self.doneShare);
  }
  if (self.hasDonePrice) {
    size += computeDoubleSize(11, self.donePrice);
  }
  if (self.hasDoneValue) {
    size += computeDoubleSize(12, self.doneValue);
  }
  if (self.hasNextShare) {
    size += computeDoubleSize(13, self.nextShare);
  }
  if (self.hasNextPrice) {
    size += computeDoubleSize(14, self.nextPrice);
  }
  if (self.hasNextValue) {
    size += computeDoubleSize(15, self.nextValue);
  }
  if (self.hasOrderShare) {
    size += computeDoubleSize(16, self.orderShare);
  }
  if (self.hasOrderPrice) {
    size += computeDoubleSize(17, self.orderPrice);
  }
  if (self.hasOrderValue) {
    size += computeDoubleSize(18, self.orderValue);
  }
  if (self.hasIsAvgPrice) {
    size += computeInt32Size(19, self.isAvgPrice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TradingTarget*) parseFromData:(NSData*) data {
  return (TradingTarget*)[[[TradingTarget builder] mergeFromData:data] build];
}
+ (TradingTarget*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradingTarget*)[[[TradingTarget builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TradingTarget*) parseFromInputStream:(NSInputStream*) input {
  return (TradingTarget*)[[[TradingTarget builder] mergeFromInputStream:input] build];
}
+ (TradingTarget*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradingTarget*)[[[TradingTarget builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TradingTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TradingTarget*)[[[TradingTarget builder] mergeFromCodedInputStream:input] build];
}
+ (TradingTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradingTarget*)[[[TradingTarget builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TradingTarget_Builder*) builder {
  return [[TradingTarget_Builder alloc] init];
}
+ (TradingTarget_Builder*) builderWithPrototype:(TradingTarget*) prototype {
  return [[TradingTarget builder] mergeFrom:prototype];
}
- (TradingTarget_Builder*) builder {
  return [TradingTarget builder];
}
- (TradingTarget_Builder*) toBuilder {
  return [TradingTarget builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasSecurityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityCode", self.securityCode];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasClientname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientname", self.clientname];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasInitialShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialShare", [NSNumber numberWithDouble:self.initialShare]];
  }
  if (self.hasInitialPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialPrice", [NSNumber numberWithDouble:self.initialPrice]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInt:self.status]];
  }
  if (self.hasTtid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ttid", [NSNumber numberWithInt:self.ttid]];
  }
  if (self.hasInitialValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialValue", [NSNumber numberWithDouble:self.initialValue]];
  }
  if (self.hasDoneShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"doneShare", [NSNumber numberWithDouble:self.doneShare]];
  }
  if (self.hasDonePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"donePrice", [NSNumber numberWithDouble:self.donePrice]];
  }
  if (self.hasDoneValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"doneValue", [NSNumber numberWithDouble:self.doneValue]];
  }
  if (self.hasNextShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextShare", [NSNumber numberWithDouble:self.nextShare]];
  }
  if (self.hasNextPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPrice", [NSNumber numberWithDouble:self.nextPrice]];
  }
  if (self.hasNextValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextValue", [NSNumber numberWithDouble:self.nextValue]];
  }
  if (self.hasOrderShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderShare", [NSNumber numberWithDouble:self.orderShare]];
  }
  if (self.hasOrderPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderPrice", [NSNumber numberWithDouble:self.orderPrice]];
  }
  if (self.hasOrderValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderValue", [NSNumber numberWithDouble:self.orderValue]];
  }
  if (self.hasIsAvgPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAvgPrice", [NSNumber numberWithInt:self.isAvgPrice]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TradingTarget class]]) {
    return NO;
  }
  TradingTarget *otherMessage = other;
  return
      self.hasSecurityCode == otherMessage.hasSecurityCode &&
      (!self.hasSecurityCode || [self.securityCode isEqual:otherMessage.securityCode]) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasClientname == otherMessage.hasClientname &&
      (!self.hasClientname || [self.clientname isEqual:otherMessage.clientname]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasInitialShare == otherMessage.hasInitialShare &&
      (!self.hasInitialShare || self.initialShare == otherMessage.initialShare) &&
      self.hasInitialPrice == otherMessage.hasInitialPrice &&
      (!self.hasInitialPrice || self.initialPrice == otherMessage.initialPrice) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasTtid == otherMessage.hasTtid &&
      (!self.hasTtid || self.ttid == otherMessage.ttid) &&
      self.hasInitialValue == otherMessage.hasInitialValue &&
      (!self.hasInitialValue || self.initialValue == otherMessage.initialValue) &&
      self.hasDoneShare == otherMessage.hasDoneShare &&
      (!self.hasDoneShare || self.doneShare == otherMessage.doneShare) &&
      self.hasDonePrice == otherMessage.hasDonePrice &&
      (!self.hasDonePrice || self.donePrice == otherMessage.donePrice) &&
      self.hasDoneValue == otherMessage.hasDoneValue &&
      (!self.hasDoneValue || self.doneValue == otherMessage.doneValue) &&
      self.hasNextShare == otherMessage.hasNextShare &&
      (!self.hasNextShare || self.nextShare == otherMessage.nextShare) &&
      self.hasNextPrice == otherMessage.hasNextPrice &&
      (!self.hasNextPrice || self.nextPrice == otherMessage.nextPrice) &&
      self.hasNextValue == otherMessage.hasNextValue &&
      (!self.hasNextValue || self.nextValue == otherMessage.nextValue) &&
      self.hasOrderShare == otherMessage.hasOrderShare &&
      (!self.hasOrderShare || self.orderShare == otherMessage.orderShare) &&
      self.hasOrderPrice == otherMessage.hasOrderPrice &&
      (!self.hasOrderPrice || self.orderPrice == otherMessage.orderPrice) &&
      self.hasOrderValue == otherMessage.hasOrderValue &&
      (!self.hasOrderValue || self.orderValue == otherMessage.orderValue) &&
      self.hasIsAvgPrice == otherMessage.hasIsAvgPrice &&
      (!self.hasIsAvgPrice || self.isAvgPrice == otherMessage.isAvgPrice) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasSecurityCode) {
    hashCode = hashCode * 31 + [self.securityCode hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasClientname) {
    hashCode = hashCode * 31 + [self.clientname hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasInitialShare) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.initialShare] hash];
  }
  if (self.hasInitialPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.initialPrice] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.status] hash];
  }
  if (self.hasTtid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.ttid] hash];
  }
  if (self.hasInitialValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.initialValue] hash];
  }
  if (self.hasDoneShare) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.doneShare] hash];
  }
  if (self.hasDonePrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.donePrice] hash];
  }
  if (self.hasDoneValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.doneValue] hash];
  }
  if (self.hasNextShare) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.nextShare] hash];
  }
  if (self.hasNextPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.nextPrice] hash];
  }
  if (self.hasNextValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.nextValue] hash];
  }
  if (self.hasOrderShare) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderShare] hash];
  }
  if (self.hasOrderPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderPrice] hash];
  }
  if (self.hasOrderValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderValue] hash];
  }
  if (self.hasIsAvgPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.isAvgPrice] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TradingTarget_Builder()
@property (strong) TradingTarget* result;
@end

@implementation TradingTarget_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TradingTarget alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TradingTarget_Builder*) clear {
  self.result = [[TradingTarget alloc] init];
  return self;
}
- (TradingTarget_Builder*) clone {
  return [TradingTarget builderWithPrototype:result];
}
- (TradingTarget*) defaultInstance {
  return [TradingTarget defaultInstance];
}
- (TradingTarget*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TradingTarget*) buildPartial {
  TradingTarget* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TradingTarget_Builder*) mergeFrom:(TradingTarget*) other {
  if (other == [TradingTarget defaultInstance]) {
    return self;
  }
  if (other.hasSecurityCode) {
    [self setSecurityCode:other.securityCode];
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasClientname) {
    [self setClientname:other.clientname];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasInitialShare) {
    [self setInitialShare:other.initialShare];
  }
  if (other.hasInitialPrice) {
    [self setInitialPrice:other.initialPrice];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasTtid) {
    [self setTtid:other.ttid];
  }
  if (other.hasInitialValue) {
    [self setInitialValue:other.initialValue];
  }
  if (other.hasDoneShare) {
    [self setDoneShare:other.doneShare];
  }
  if (other.hasDonePrice) {
    [self setDonePrice:other.donePrice];
  }
  if (other.hasDoneValue) {
    [self setDoneValue:other.doneValue];
  }
  if (other.hasNextShare) {
    [self setNextShare:other.nextShare];
  }
  if (other.hasNextPrice) {
    [self setNextPrice:other.nextPrice];
  }
  if (other.hasNextValue) {
    [self setNextValue:other.nextValue];
  }
  if (other.hasOrderShare) {
    [self setOrderShare:other.orderShare];
  }
  if (other.hasOrderPrice) {
    [self setOrderPrice:other.orderPrice];
  }
  if (other.hasOrderValue) {
    [self setOrderValue:other.orderValue];
  }
  if (other.hasIsAvgPrice) {
    [self setIsAvgPrice:other.isAvgPrice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TradingTarget_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TradingTarget_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSecurityCode:[input readString]];
        break;
      }
      case 18: {
        [self setClientcode:[input readString]];
        break;
      }
      case 26: {
        [self setClientname:[input readString]];
        break;
      }
      case 32: {
        [self setSide:[input readInt32]];
        break;
      }
      case 41: {
        [self setInitialShare:[input readDouble]];
        break;
      }
      case 49: {
        [self setInitialPrice:[input readDouble]];
        break;
      }
      case 56: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 64: {
        [self setTtid:[input readInt32]];
        break;
      }
      case 73: {
        [self setInitialValue:[input readDouble]];
        break;
      }
      case 81: {
        [self setDoneShare:[input readDouble]];
        break;
      }
      case 89: {
        [self setDonePrice:[input readDouble]];
        break;
      }
      case 97: {
        [self setDoneValue:[input readDouble]];
        break;
      }
      case 105: {
        [self setNextShare:[input readDouble]];
        break;
      }
      case 113: {
        [self setNextPrice:[input readDouble]];
        break;
      }
      case 121: {
        [self setNextValue:[input readDouble]];
        break;
      }
      case 129: {
        [self setOrderShare:[input readDouble]];
        break;
      }
      case 137: {
        [self setOrderPrice:[input readDouble]];
        break;
      }
      case 145: {
        [self setOrderValue:[input readDouble]];
        break;
      }
      case 152: {
        [self setIsAvgPrice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSecurityCode {
  return result.hasSecurityCode;
}
- (NSString*) securityCode {
  return result.securityCode;
}
- (TradingTarget_Builder*) setSecurityCode:(NSString*) value {
  result.hasSecurityCode = YES;
  result.securityCode = value;
  return self;
}
- (TradingTarget_Builder*) clearSecurityCode {
  result.hasSecurityCode = NO;
  result.securityCode = @"";
  return self;
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (TradingTarget_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (TradingTarget_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasClientname {
  return result.hasClientname;
}
- (NSString*) clientname {
  return result.clientname;
}
- (TradingTarget_Builder*) setClientname:(NSString*) value {
  result.hasClientname = YES;
  result.clientname = value;
  return self;
}
- (TradingTarget_Builder*) clearClientname {
  result.hasClientname = NO;
  result.clientname = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (TradingTarget_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (TradingTarget_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasInitialShare {
  return result.hasInitialShare;
}
- (Float64) initialShare {
  return result.initialShare;
}
- (TradingTarget_Builder*) setInitialShare:(Float64) value {
  result.hasInitialShare = YES;
  result.initialShare = value;
  return self;
}
- (TradingTarget_Builder*) clearInitialShare {
  result.hasInitialShare = NO;
  result.initialShare = 0;
  return self;
}
- (BOOL) hasInitialPrice {
  return result.hasInitialPrice;
}
- (Float64) initialPrice {
  return result.initialPrice;
}
- (TradingTarget_Builder*) setInitialPrice:(Float64) value {
  result.hasInitialPrice = YES;
  result.initialPrice = value;
  return self;
}
- (TradingTarget_Builder*) clearInitialPrice {
  result.hasInitialPrice = NO;
  result.initialPrice = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (TradingTarget_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (TradingTarget_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasTtid {
  return result.hasTtid;
}
- (int32_t) ttid {
  return result.ttid;
}
- (TradingTarget_Builder*) setTtid:(int32_t) value {
  result.hasTtid = YES;
  result.ttid = value;
  return self;
}
- (TradingTarget_Builder*) clearTtid {
  result.hasTtid = NO;
  result.ttid = 0;
  return self;
}
- (BOOL) hasInitialValue {
  return result.hasInitialValue;
}
- (Float64) initialValue {
  return result.initialValue;
}
- (TradingTarget_Builder*) setInitialValue:(Float64) value {
  result.hasInitialValue = YES;
  result.initialValue = value;
  return self;
}
- (TradingTarget_Builder*) clearInitialValue {
  result.hasInitialValue = NO;
  result.initialValue = 0;
  return self;
}
- (BOOL) hasDoneShare {
  return result.hasDoneShare;
}
- (Float64) doneShare {
  return result.doneShare;
}
- (TradingTarget_Builder*) setDoneShare:(Float64) value {
  result.hasDoneShare = YES;
  result.doneShare = value;
  return self;
}
- (TradingTarget_Builder*) clearDoneShare {
  result.hasDoneShare = NO;
  result.doneShare = 0;
  return self;
}
- (BOOL) hasDonePrice {
  return result.hasDonePrice;
}
- (Float64) donePrice {
  return result.donePrice;
}
- (TradingTarget_Builder*) setDonePrice:(Float64) value {
  result.hasDonePrice = YES;
  result.donePrice = value;
  return self;
}
- (TradingTarget_Builder*) clearDonePrice {
  result.hasDonePrice = NO;
  result.donePrice = 0;
  return self;
}
- (BOOL) hasDoneValue {
  return result.hasDoneValue;
}
- (Float64) doneValue {
  return result.doneValue;
}
- (TradingTarget_Builder*) setDoneValue:(Float64) value {
  result.hasDoneValue = YES;
  result.doneValue = value;
  return self;
}
- (TradingTarget_Builder*) clearDoneValue {
  result.hasDoneValue = NO;
  result.doneValue = 0;
  return self;
}
- (BOOL) hasNextShare {
  return result.hasNextShare;
}
- (Float64) nextShare {
  return result.nextShare;
}
- (TradingTarget_Builder*) setNextShare:(Float64) value {
  result.hasNextShare = YES;
  result.nextShare = value;
  return self;
}
- (TradingTarget_Builder*) clearNextShare {
  result.hasNextShare = NO;
  result.nextShare = 0;
  return self;
}
- (BOOL) hasNextPrice {
  return result.hasNextPrice;
}
- (Float64) nextPrice {
  return result.nextPrice;
}
- (TradingTarget_Builder*) setNextPrice:(Float64) value {
  result.hasNextPrice = YES;
  result.nextPrice = value;
  return self;
}
- (TradingTarget_Builder*) clearNextPrice {
  result.hasNextPrice = NO;
  result.nextPrice = 0;
  return self;
}
- (BOOL) hasNextValue {
  return result.hasNextValue;
}
- (Float64) nextValue {
  return result.nextValue;
}
- (TradingTarget_Builder*) setNextValue:(Float64) value {
  result.hasNextValue = YES;
  result.nextValue = value;
  return self;
}
- (TradingTarget_Builder*) clearNextValue {
  result.hasNextValue = NO;
  result.nextValue = 0;
  return self;
}
- (BOOL) hasOrderShare {
  return result.hasOrderShare;
}
- (Float64) orderShare {
  return result.orderShare;
}
- (TradingTarget_Builder*) setOrderShare:(Float64) value {
  result.hasOrderShare = YES;
  result.orderShare = value;
  return self;
}
- (TradingTarget_Builder*) clearOrderShare {
  result.hasOrderShare = NO;
  result.orderShare = 0;
  return self;
}
- (BOOL) hasOrderPrice {
  return result.hasOrderPrice;
}
- (Float64) orderPrice {
  return result.orderPrice;
}
- (TradingTarget_Builder*) setOrderPrice:(Float64) value {
  result.hasOrderPrice = YES;
  result.orderPrice = value;
  return self;
}
- (TradingTarget_Builder*) clearOrderPrice {
  result.hasOrderPrice = NO;
  result.orderPrice = 0;
  return self;
}
- (BOOL) hasOrderValue {
  return result.hasOrderValue;
}
- (Float64) orderValue {
  return result.orderValue;
}
- (TradingTarget_Builder*) setOrderValue:(Float64) value {
  result.hasOrderValue = YES;
  result.orderValue = value;
  return self;
}
- (TradingTarget_Builder*) clearOrderValue {
  result.hasOrderValue = NO;
  result.orderValue = 0;
  return self;
}
- (BOOL) hasIsAvgPrice {
  return result.hasIsAvgPrice;
}
- (int32_t) isAvgPrice {
  return result.isAvgPrice;
}
- (TradingTarget_Builder*) setIsAvgPrice:(int32_t) value {
  result.hasIsAvgPrice = YES;
  result.isAvgPrice = value;
  return self;
}
- (TradingTarget_Builder*) clearIsAvgPrice {
  result.hasIsAvgPrice = NO;
  result.isAvgPrice = 0;
  return self;
}
@end

@interface OrderLifeCycle ()
@property (strong) NSString* time;
@property (strong) NSString* event;
@property (strong) TxOrder* orders;
@end

@implementation OrderLifeCycle

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasEvent {
  return !!hasEvent_;
}
- (void) setHasEvent:(BOOL) value {
  hasEvent_ = !!value;
}
@synthesize event;
- (BOOL) hasOrders {
  return !!hasOrders_;
}
- (void) setHasOrders:(BOOL) value {
  hasOrders_ = !!value;
}
@synthesize orders;
- (id) init {
  if ((self = [super init])) {
    self.time = @"";
    self.event = @"";
    self.orders = [TxOrder defaultInstance];
  }
  return self;
}
static OrderLifeCycle* defaultOrderLifeCycleInstance = nil;
+ (void) initialize {
  if (self == [OrderLifeCycle class]) {
    defaultOrderLifeCycleInstance = [[OrderLifeCycle alloc] init];
  }
}
+ (OrderLifeCycle*) defaultInstance {
  return defaultOrderLifeCycleInstance;
}
- (OrderLifeCycle*) defaultInstance {
  return defaultOrderLifeCycleInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeString:1 value:self.time];
  }
  if (self.hasEvent) {
    [output writeString:2 value:self.event];
  }
  if (self.hasOrders) {
    [output writeMessage:3 value:self.orders];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTime) {
    size += computeStringSize(1, self.time);
  }
  if (self.hasEvent) {
    size += computeStringSize(2, self.event);
  }
  if (self.hasOrders) {
    size += computeMessageSize(3, self.orders);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OrderLifeCycle*) parseFromData:(NSData*) data {
  return (OrderLifeCycle*)[[[OrderLifeCycle builder] mergeFromData:data] build];
}
+ (OrderLifeCycle*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderLifeCycle*)[[[OrderLifeCycle builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OrderLifeCycle*) parseFromInputStream:(NSInputStream*) input {
  return (OrderLifeCycle*)[[[OrderLifeCycle builder] mergeFromInputStream:input] build];
}
+ (OrderLifeCycle*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderLifeCycle*)[[[OrderLifeCycle builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderLifeCycle*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OrderLifeCycle*)[[[OrderLifeCycle builder] mergeFromCodedInputStream:input] build];
}
+ (OrderLifeCycle*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderLifeCycle*)[[[OrderLifeCycle builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderLifeCycle_Builder*) builder {
  return [[OrderLifeCycle_Builder alloc] init];
}
+ (OrderLifeCycle_Builder*) builderWithPrototype:(OrderLifeCycle*) prototype {
  return [[OrderLifeCycle builder] mergeFrom:prototype];
}
- (OrderLifeCycle_Builder*) builder {
  return [OrderLifeCycle builder];
}
- (OrderLifeCycle_Builder*) toBuilder {
  return [OrderLifeCycle builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", self.time];
  }
  if (self.hasEvent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"event", self.event];
  }
  if (self.hasOrders) {
    [output appendFormat:@"%@%@ {\n", indent, @"orders"];
    [self.orders writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OrderLifeCycle class]]) {
    return NO;
  }
  OrderLifeCycle *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || [self.time isEqual:otherMessage.time]) &&
      self.hasEvent == otherMessage.hasEvent &&
      (!self.hasEvent || [self.event isEqual:otherMessage.event]) &&
      self.hasOrders == otherMessage.hasOrders &&
      (!self.hasOrders || [self.orders isEqual:otherMessage.orders]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [self.time hash];
  }
  if (self.hasEvent) {
    hashCode = hashCode * 31 + [self.event hash];
  }
  if (self.hasOrders) {
    hashCode = hashCode * 31 + [self.orders hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OrderLifeCycle_Builder()
@property (strong) OrderLifeCycle* result;
@end

@implementation OrderLifeCycle_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[OrderLifeCycle alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OrderLifeCycle_Builder*) clear {
  self.result = [[OrderLifeCycle alloc] init];
  return self;
}
- (OrderLifeCycle_Builder*) clone {
  return [OrderLifeCycle builderWithPrototype:result];
}
- (OrderLifeCycle*) defaultInstance {
  return [OrderLifeCycle defaultInstance];
}
- (OrderLifeCycle*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OrderLifeCycle*) buildPartial {
  OrderLifeCycle* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (OrderLifeCycle_Builder*) mergeFrom:(OrderLifeCycle*) other {
  if (other == [OrderLifeCycle defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasEvent) {
    [self setEvent:other.event];
  }
  if (other.hasOrders) {
    [self mergeOrders:other.orders];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OrderLifeCycle_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OrderLifeCycle_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTime:[input readString]];
        break;
      }
      case 18: {
        [self setEvent:[input readString]];
        break;
      }
      case 26: {
        TxOrder_Builder* subBuilder = [TxOrder builder];
        if (self.hasOrders) {
          [subBuilder mergeFrom:self.orders];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrders:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (OrderLifeCycle_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (OrderLifeCycle_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasEvent {
  return result.hasEvent;
}
- (NSString*) event {
  return result.event;
}
- (OrderLifeCycle_Builder*) setEvent:(NSString*) value {
  result.hasEvent = YES;
  result.event = value;
  return self;
}
- (OrderLifeCycle_Builder*) clearEvent {
  result.hasEvent = NO;
  result.event = @"";
  return self;
}
- (BOOL) hasOrders {
  return result.hasOrders;
}
- (TxOrder*) orders {
  return result.orders;
}
- (OrderLifeCycle_Builder*) setOrders:(TxOrder*) value {
  result.hasOrders = YES;
  result.orders = value;
  return self;
}
- (OrderLifeCycle_Builder*) setOrdersBuilder:(TxOrder_Builder*) builderForValue {
  return [self setOrders:[builderForValue build]];
}
- (OrderLifeCycle_Builder*) mergeOrders:(TxOrder*) value {
  if (result.hasOrders &&
      result.orders != [TxOrder defaultInstance]) {
    result.orders =
      [[[TxOrder builderWithPrototype:result.orders] mergeFrom:value] buildPartial];
  } else {
    result.orders = value;
  }
  result.hasOrders = YES;
  return self;
}
- (OrderLifeCycle_Builder*) clearOrders {
  result.hasOrders = NO;
  result.orders = [TxOrder defaultInstance];
  return self;
}
@end

@interface TxTrade ()
@property (strong) NSString* tradeId;
@property (strong) NSString* jatsOrderId;
@property (strong) NSString* orderId;
@property (strong) NSString* transactTime;
@property (strong) NSString* clordId;
@property (strong) NSString* contraTrader;
@property (strong) NSString* contraBroker;
@property int32_t price;
@property int32_t cumQty;
@property int32_t side;
@property (strong) NSString* clientId;
@property (strong) NSString* clientName;
@property (strong) NSString* stockcode;
@property (strong) NSString* symbolSfx;
@property (strong) NSString* ownerId;
@property Float64 sequenceNo;
@end

@implementation TxTrade

- (BOOL) hasTradeId {
  return !!hasTradeId_;
}
- (void) setHasTradeId:(BOOL) value {
  hasTradeId_ = !!value;
}
@synthesize tradeId;
- (BOOL) hasJatsOrderId {
  return !!hasJatsOrderId_;
}
- (void) setHasJatsOrderId:(BOOL) value {
  hasJatsOrderId_ = !!value;
}
@synthesize jatsOrderId;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasTransactTime {
  return !!hasTransactTime_;
}
- (void) setHasTransactTime:(BOOL) value {
  hasTransactTime_ = !!value;
}
@synthesize transactTime;
- (BOOL) hasClordId {
  return !!hasClordId_;
}
- (void) setHasClordId:(BOOL) value {
  hasClordId_ = !!value;
}
@synthesize clordId;
- (BOOL) hasContraTrader {
  return !!hasContraTrader_;
}
- (void) setHasContraTrader:(BOOL) value {
  hasContraTrader_ = !!value;
}
@synthesize contraTrader;
- (BOOL) hasContraBroker {
  return !!hasContraBroker_;
}
- (void) setHasContraBroker:(BOOL) value {
  hasContraBroker_ = !!value;
}
@synthesize contraBroker;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasCumQty {
  return !!hasCumQty_;
}
- (void) setHasCumQty:(BOOL) value {
  hasCumQty_ = !!value;
}
@synthesize cumQty;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasClientId {
  return !!hasClientId_;
}
- (void) setHasClientId:(BOOL) value {
  hasClientId_ = !!value;
}
@synthesize clientId;
- (BOOL) hasClientName {
  return !!hasClientName_;
}
- (void) setHasClientName:(BOOL) value {
  hasClientName_ = !!value;
}
@synthesize clientName;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasSymbolSfx {
  return !!hasSymbolSfx_;
}
- (void) setHasSymbolSfx:(BOOL) value {
  hasSymbolSfx_ = !!value;
}
@synthesize symbolSfx;
- (BOOL) hasOwnerId {
  return !!hasOwnerId_;
}
- (void) setHasOwnerId:(BOOL) value {
  hasOwnerId_ = !!value;
}
@synthesize ownerId;
- (BOOL) hasSequenceNo {
  return !!hasSequenceNo_;
}
- (void) setHasSequenceNo:(BOOL) value {
  hasSequenceNo_ = !!value;
}
@synthesize sequenceNo;
- (id) init {
  if ((self = [super init])) {
    self.tradeId = @"";
    self.jatsOrderId = @"";
    self.orderId = @"";
    self.transactTime = @"";
    self.clordId = @"";
    self.contraTrader = @"";
    self.contraBroker = @"";
    self.price = 0;
    self.cumQty = 0;
    self.side = 0;
    self.clientId = @"";
    self.clientName = @"";
    self.stockcode = @"";
    self.symbolSfx = @"";
    self.ownerId = @"";
    self.sequenceNo = 0;
  }
  return self;
}
static TxTrade* defaultTxTradeInstance = nil;
+ (void) initialize {
  if (self == [TxTrade class]) {
    defaultTxTradeInstance = [[TxTrade alloc] init];
  }
}
+ (TxTrade*) defaultInstance {
  return defaultTxTradeInstance;
}
- (TxTrade*) defaultInstance {
  return defaultTxTradeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasJatsOrderId) {
    [output writeString:1 value:self.jatsOrderId];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  if (self.hasTransactTime) {
    [output writeString:3 value:self.transactTime];
  }
  if (self.hasClordId) {
    [output writeString:4 value:self.clordId];
  }
  if (self.hasContraTrader) {
    [output writeString:5 value:self.contraTrader];
  }
  if (self.hasContraBroker) {
    [output writeString:6 value:self.contraBroker];
  }
  if (self.hasPrice) {
    [output writeInt32:7 value:self.price];
  }
  if (self.hasCumQty) {
    [output writeInt32:8 value:self.cumQty];
  }
  if (self.hasSide) {
    [output writeInt32:9 value:self.side];
  }
  if (self.hasClientId) {
    [output writeString:10 value:self.clientId];
  }
  if (self.hasClientName) {
    [output writeString:11 value:self.clientName];
  }
  if (self.hasStockcode) {
    [output writeString:12 value:self.stockcode];
  }
  if (self.hasSymbolSfx) {
    [output writeString:13 value:self.symbolSfx];
  }
  if (self.hasOwnerId) {
    [output writeString:14 value:self.ownerId];
  }
  if (self.hasSequenceNo) {
    [output writeDouble:15 value:self.sequenceNo];
  }
  if (self.hasTradeId) {
    [output writeString:16 value:self.tradeId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasJatsOrderId) {
    size += computeStringSize(1, self.jatsOrderId);
  }
  if (self.hasOrderId) {
    size += computeStringSize(2, self.orderId);
  }
  if (self.hasTransactTime) {
    size += computeStringSize(3, self.transactTime);
  }
  if (self.hasClordId) {
    size += computeStringSize(4, self.clordId);
  }
  if (self.hasContraTrader) {
    size += computeStringSize(5, self.contraTrader);
  }
  if (self.hasContraBroker) {
    size += computeStringSize(6, self.contraBroker);
  }
  if (self.hasPrice) {
    size += computeInt32Size(7, self.price);
  }
  if (self.hasCumQty) {
    size += computeInt32Size(8, self.cumQty);
  }
  if (self.hasSide) {
    size += computeInt32Size(9, self.side);
  }
  if (self.hasClientId) {
    size += computeStringSize(10, self.clientId);
  }
  if (self.hasClientName) {
    size += computeStringSize(11, self.clientName);
  }
  if (self.hasStockcode) {
    size += computeStringSize(12, self.stockcode);
  }
  if (self.hasSymbolSfx) {
    size += computeStringSize(13, self.symbolSfx);
  }
  if (self.hasOwnerId) {
    size += computeStringSize(14, self.ownerId);
  }
  if (self.hasSequenceNo) {
    size += computeDoubleSize(15, self.sequenceNo);
  }
  if (self.hasTradeId) {
    size += computeStringSize(16, self.tradeId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TxTrade*) parseFromData:(NSData*) data {
  return (TxTrade*)[[[TxTrade builder] mergeFromData:data] build];
}
+ (TxTrade*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TxTrade*)[[[TxTrade builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TxTrade*) parseFromInputStream:(NSInputStream*) input {
  return (TxTrade*)[[[TxTrade builder] mergeFromInputStream:input] build];
}
+ (TxTrade*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TxTrade*)[[[TxTrade builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TxTrade*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TxTrade*)[[[TxTrade builder] mergeFromCodedInputStream:input] build];
}
+ (TxTrade*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TxTrade*)[[[TxTrade builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TxTrade_Builder*) builder {
  return [[TxTrade_Builder alloc] init];
}
+ (TxTrade_Builder*) builderWithPrototype:(TxTrade*) prototype {
  return [[TxTrade builder] mergeFrom:prototype];
}
- (TxTrade_Builder*) builder {
  return [TxTrade builder];
}
- (TxTrade_Builder*) toBuilder {
  return [TxTrade builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasJatsOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jatsOrderId", self.jatsOrderId];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasTransactTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transactTime", self.transactTime];
  }
  if (self.hasClordId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clordId", self.clordId];
  }
  if (self.hasContraTrader) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contraTrader", self.contraTrader];
  }
  if (self.hasContraBroker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contraBroker", self.contraBroker];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasCumQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cumQty", [NSNumber numberWithInt:self.cumQty]];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasClientId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientId", self.clientId];
  }
  if (self.hasClientName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientName", self.clientName];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasSymbolSfx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"symbolSfx", self.symbolSfx];
  }
  if (self.hasOwnerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerId", self.ownerId];
  }
  if (self.hasSequenceNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceNo", [NSNumber numberWithDouble:self.sequenceNo]];
  }
  if (self.hasTradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeId", self.tradeId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TxTrade class]]) {
    return NO;
  }
  TxTrade *otherMessage = other;
  return
      self.hasJatsOrderId == otherMessage.hasJatsOrderId &&
      (!self.hasJatsOrderId || [self.jatsOrderId isEqual:otherMessage.jatsOrderId]) &&
      self.hasOrderId == otherMessage.hasOrderId &&
      (!self.hasOrderId || [self.orderId isEqual:otherMessage.orderId]) &&
      self.hasTransactTime == otherMessage.hasTransactTime &&
      (!self.hasTransactTime || [self.transactTime isEqual:otherMessage.transactTime]) &&
      self.hasClordId == otherMessage.hasClordId &&
      (!self.hasClordId || [self.clordId isEqual:otherMessage.clordId]) &&
      self.hasContraTrader == otherMessage.hasContraTrader &&
      (!self.hasContraTrader || [self.contraTrader isEqual:otherMessage.contraTrader]) &&
      self.hasContraBroker == otherMessage.hasContraBroker &&
      (!self.hasContraBroker || [self.contraBroker isEqual:otherMessage.contraBroker]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasCumQty == otherMessage.hasCumQty &&
      (!self.hasCumQty || self.cumQty == otherMessage.cumQty) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasClientId == otherMessage.hasClientId &&
      (!self.hasClientId || [self.clientId isEqual:otherMessage.clientId]) &&
      self.hasClientName == otherMessage.hasClientName &&
      (!self.hasClientName || [self.clientName isEqual:otherMessage.clientName]) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasSymbolSfx == otherMessage.hasSymbolSfx &&
      (!self.hasSymbolSfx || [self.symbolSfx isEqual:otherMessage.symbolSfx]) &&
      self.hasOwnerId == otherMessage.hasOwnerId &&
      (!self.hasOwnerId || [self.ownerId isEqual:otherMessage.ownerId]) &&
      self.hasSequenceNo == otherMessage.hasSequenceNo &&
      (!self.hasSequenceNo || self.sequenceNo == otherMessage.sequenceNo) &&
      self.hasTradeId == otherMessage.hasTradeId &&
      (!self.hasTradeId || [self.tradeId isEqual:otherMessage.tradeId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasJatsOrderId) {
    hashCode = hashCode * 31 + [self.jatsOrderId hash];
  }
  if (self.hasOrderId) {
    hashCode = hashCode * 31 + [self.orderId hash];
  }
  if (self.hasTransactTime) {
    hashCode = hashCode * 31 + [self.transactTime hash];
  }
  if (self.hasClordId) {
    hashCode = hashCode * 31 + [self.clordId hash];
  }
  if (self.hasContraTrader) {
    hashCode = hashCode * 31 + [self.contraTrader hash];
  }
  if (self.hasContraBroker) {
    hashCode = hashCode * 31 + [self.contraBroker hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasCumQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.cumQty] hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasClientId) {
    hashCode = hashCode * 31 + [self.clientId hash];
  }
  if (self.hasClientName) {
    hashCode = hashCode * 31 + [self.clientName hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasSymbolSfx) {
    hashCode = hashCode * 31 + [self.symbolSfx hash];
  }
  if (self.hasOwnerId) {
    hashCode = hashCode * 31 + [self.ownerId hash];
  }
  if (self.hasSequenceNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.sequenceNo] hash];
  }
  if (self.hasTradeId) {
    hashCode = hashCode * 31 + [self.tradeId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TxTrade_Builder()
@property (strong) TxTrade* result;
@end

@implementation TxTrade_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TxTrade alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TxTrade_Builder*) clear {
  self.result = [[TxTrade alloc] init];
  return self;
}
- (TxTrade_Builder*) clone {
  return [TxTrade builderWithPrototype:result];
}
- (TxTrade*) defaultInstance {
  return [TxTrade defaultInstance];
}
- (TxTrade*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TxTrade*) buildPartial {
  TxTrade* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TxTrade_Builder*) mergeFrom:(TxTrade*) other {
  if (other == [TxTrade defaultInstance]) {
    return self;
  }
  if (other.hasTradeId) {
    [self setTradeId:other.tradeId];
  }
  if (other.hasJatsOrderId) {
    [self setJatsOrderId:other.jatsOrderId];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasTransactTime) {
    [self setTransactTime:other.transactTime];
  }
  if (other.hasClordId) {
    [self setClordId:other.clordId];
  }
  if (other.hasContraTrader) {
    [self setContraTrader:other.contraTrader];
  }
  if (other.hasContraBroker) {
    [self setContraBroker:other.contraBroker];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasCumQty) {
    [self setCumQty:other.cumQty];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasClientId) {
    [self setClientId:other.clientId];
  }
  if (other.hasClientName) {
    [self setClientName:other.clientName];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasSymbolSfx) {
    [self setSymbolSfx:other.symbolSfx];
  }
  if (other.hasOwnerId) {
    [self setOwnerId:other.ownerId];
  }
  if (other.hasSequenceNo) {
    [self setSequenceNo:other.sequenceNo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TxTrade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TxTrade_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setJatsOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
      case 26: {
        [self setTransactTime:[input readString]];
        break;
      }
      case 34: {
        [self setClordId:[input readString]];
        break;
      }
      case 42: {
        [self setContraTrader:[input readString]];
        break;
      }
      case 50: {
        [self setContraBroker:[input readString]];
        break;
      }
      case 56: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 64: {
        [self setCumQty:[input readInt32]];
        break;
      }
      case 72: {
        [self setSide:[input readInt32]];
        break;
      }
      case 82: {
        [self setClientId:[input readString]];
        break;
      }
      case 90: {
        [self setClientName:[input readString]];
        break;
      }
      case 98: {
        [self setStockcode:[input readString]];
        break;
      }
      case 106: {
        [self setSymbolSfx:[input readString]];
        break;
      }
      case 114: {
        [self setOwnerId:[input readString]];
        break;
      }
      case 121: {
        [self setSequenceNo:[input readDouble]];
        break;
      }
      case 130: {
        [self setTradeId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTradeId {
  return result.hasTradeId;
}
- (NSString*) tradeId {
  return result.tradeId;
}
- (TxTrade_Builder*) setTradeId:(NSString*) value {
  result.hasTradeId = YES;
  result.tradeId = value;
  return self;
}
- (TxTrade_Builder*) clearTradeId {
  result.hasTradeId = NO;
  result.tradeId = @"";
  return self;
}
- (BOOL) hasJatsOrderId {
  return result.hasJatsOrderId;
}
- (NSString*) jatsOrderId {
  return result.jatsOrderId;
}
- (TxTrade_Builder*) setJatsOrderId:(NSString*) value {
  result.hasJatsOrderId = YES;
  result.jatsOrderId = value;
  return self;
}
- (TxTrade_Builder*) clearJatsOrderId {
  result.hasJatsOrderId = NO;
  result.jatsOrderId = @"";
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (NSString*) orderId {
  return result.orderId;
}
- (TxTrade_Builder*) setOrderId:(NSString*) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (TxTrade_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = @"";
  return self;
}
- (BOOL) hasTransactTime {
  return result.hasTransactTime;
}
- (NSString*) transactTime {
  return result.transactTime;
}
- (TxTrade_Builder*) setTransactTime:(NSString*) value {
  result.hasTransactTime = YES;
  result.transactTime = value;
  return self;
}
- (TxTrade_Builder*) clearTransactTime {
  result.hasTransactTime = NO;
  result.transactTime = @"";
  return self;
}
- (BOOL) hasClordId {
  return result.hasClordId;
}
- (NSString*) clordId {
  return result.clordId;
}
- (TxTrade_Builder*) setClordId:(NSString*) value {
  result.hasClordId = YES;
  result.clordId = value;
  return self;
}
- (TxTrade_Builder*) clearClordId {
  result.hasClordId = NO;
  result.clordId = @"";
  return self;
}
- (BOOL) hasContraTrader {
  return result.hasContraTrader;
}
- (NSString*) contraTrader {
  return result.contraTrader;
}
- (TxTrade_Builder*) setContraTrader:(NSString*) value {
  result.hasContraTrader = YES;
  result.contraTrader = value;
  return self;
}
- (TxTrade_Builder*) clearContraTrader {
  result.hasContraTrader = NO;
  result.contraTrader = @"";
  return self;
}
- (BOOL) hasContraBroker {
  return result.hasContraBroker;
}
- (NSString*) contraBroker {
  return result.contraBroker;
}
- (TxTrade_Builder*) setContraBroker:(NSString*) value {
  result.hasContraBroker = YES;
  result.contraBroker = value;
  return self;
}
- (TxTrade_Builder*) clearContraBroker {
  result.hasContraBroker = NO;
  result.contraBroker = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (TxTrade_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (TxTrade_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasCumQty {
  return result.hasCumQty;
}
- (int32_t) cumQty {
  return result.cumQty;
}
- (TxTrade_Builder*) setCumQty:(int32_t) value {
  result.hasCumQty = YES;
  result.cumQty = value;
  return self;
}
- (TxTrade_Builder*) clearCumQty {
  result.hasCumQty = NO;
  result.cumQty = 0;
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (TxTrade_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (TxTrade_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasClientId {
  return result.hasClientId;
}
- (NSString*) clientId {
  return result.clientId;
}
- (TxTrade_Builder*) setClientId:(NSString*) value {
  result.hasClientId = YES;
  result.clientId = value;
  return self;
}
- (TxTrade_Builder*) clearClientId {
  result.hasClientId = NO;
  result.clientId = @"";
  return self;
}
- (BOOL) hasClientName {
  return result.hasClientName;
}
- (NSString*) clientName {
  return result.clientName;
}
- (TxTrade_Builder*) setClientName:(NSString*) value {
  result.hasClientName = YES;
  result.clientName = value;
  return self;
}
- (TxTrade_Builder*) clearClientName {
  result.hasClientName = NO;
  result.clientName = @"";
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (TxTrade_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (TxTrade_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasSymbolSfx {
  return result.hasSymbolSfx;
}
- (NSString*) symbolSfx {
  return result.symbolSfx;
}
- (TxTrade_Builder*) setSymbolSfx:(NSString*) value {
  result.hasSymbolSfx = YES;
  result.symbolSfx = value;
  return self;
}
- (TxTrade_Builder*) clearSymbolSfx {
  result.hasSymbolSfx = NO;
  result.symbolSfx = @"";
  return self;
}
- (BOOL) hasOwnerId {
  return result.hasOwnerId;
}
- (NSString*) ownerId {
  return result.ownerId;
}
- (TxTrade_Builder*) setOwnerId:(NSString*) value {
  result.hasOwnerId = YES;
  result.ownerId = value;
  return self;
}
- (TxTrade_Builder*) clearOwnerId {
  result.hasOwnerId = NO;
  result.ownerId = @"";
  return self;
}
- (BOOL) hasSequenceNo {
  return result.hasSequenceNo;
}
- (Float64) sequenceNo {
  return result.sequenceNo;
}
- (TxTrade_Builder*) setSequenceNo:(Float64) value {
  result.hasSequenceNo = YES;
  result.sequenceNo = value;
  return self;
}
- (TxTrade_Builder*) clearSequenceNo {
  result.hasSequenceNo = NO;
  result.sequenceNo = 0;
  return self;
}
@end

@interface TxOrder ()
@property (strong) NSString* jatsOrderId;
@property (strong) NSString* clientCode;
@property (strong) NSString* clientName;
@property (strong) NSString* orderStatus;
@property (strong) NSString* account;
@property (strong) NSString* board;
@property int32_t side;
@property (strong) NSString* securityCode;
@property Float64 orderQty;
@property int32_t price;
@property (strong) NSString* expiredDate;
@property Float64 leavesQty;
@property Float64 cumQty;
@property (strong) NSString* createdTime;
@property (strong) NSString* updatedTime;
@property (strong) NSString* source;
@property (strong) NSString* ownerId;
@property (strong) NSString* orderType;
@property (strong) NSString* gtdDate;
@property (strong) NSString* description;
@property int32_t orderBufferType;
@property int32_t sequenceNo;
@property (strong) NSString* orderId;
@property (strong) NSString* reasonText;
@property (strong) NSString* clientId;
@property (strong) NSString* tradeId;
@property (strong) NSString* counterTrader;
@property (strong) NSString* counterBroker;
@property (strong) NSString* handInst;
@property (strong) NSString* isRenew;
@property (strong) NSString* cparty;
@property (strong) NSString* orderParentId;
@property (strong) NSString* gtcOrderType;
@property (strong) NSString* batchId;
@property (strong) NSString* batchTime;
@property Float64 tradeQty;
@property int32_t tradePrice;
@property (strong) NSString* tradeTime;
@property (strong) NSString* updatedBy;
@property (strong) NSString* futsetdate;
@property int32_t bulkid;
@property Float64 weightAvg;
@property (strong) NSString* origclorid;
@property int32_t broadcastType;
@property (strong) NSString* senderid;
@property (strong) NSString* officername;
@property Float64 totalValue;
@property (strong) NSString* complianceId;
@end

@implementation TxOrder

- (BOOL) hasJatsOrderId {
  return !!hasJatsOrderId_;
}
- (void) setHasJatsOrderId:(BOOL) value {
  hasJatsOrderId_ = !!value;
}
@synthesize jatsOrderId;
- (BOOL) hasClientCode {
  return !!hasClientCode_;
}
- (void) setHasClientCode:(BOOL) value {
  hasClientCode_ = !!value;
}
@synthesize clientCode;
- (BOOL) hasClientName {
  return !!hasClientName_;
}
- (void) setHasClientName:(BOOL) value {
  hasClientName_ = !!value;
}
@synthesize clientName;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) value {
  hasOrderStatus_ = !!value;
}
@synthesize orderStatus;
- (BOOL) hasAccount {
  return !!hasAccount_;
}
- (void) setHasAccount:(BOOL) value {
  hasAccount_ = !!value;
}
@synthesize account;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasSecurityCode {
  return !!hasSecurityCode_;
}
- (void) setHasSecurityCode:(BOOL) value {
  hasSecurityCode_ = !!value;
}
@synthesize securityCode;
- (BOOL) hasOrderQty {
  return !!hasOrderQty_;
}
- (void) setHasOrderQty:(BOOL) value {
  hasOrderQty_ = !!value;
}
@synthesize orderQty;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasExpiredDate {
  return !!hasExpiredDate_;
}
- (void) setHasExpiredDate:(BOOL) value {
  hasExpiredDate_ = !!value;
}
@synthesize expiredDate;
- (BOOL) hasLeavesQty {
  return !!hasLeavesQty_;
}
- (void) setHasLeavesQty:(BOOL) value {
  hasLeavesQty_ = !!value;
}
@synthesize leavesQty;
- (BOOL) hasCumQty {
  return !!hasCumQty_;
}
- (void) setHasCumQty:(BOOL) value {
  hasCumQty_ = !!value;
}
@synthesize cumQty;
- (BOOL) hasCreatedTime {
  return !!hasCreatedTime_;
}
- (void) setHasCreatedTime:(BOOL) value {
  hasCreatedTime_ = !!value;
}
@synthesize createdTime;
- (BOOL) hasUpdatedTime {
  return !!hasUpdatedTime_;
}
- (void) setHasUpdatedTime:(BOOL) value {
  hasUpdatedTime_ = !!value;
}
@synthesize updatedTime;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value {
  hasSource_ = !!value;
}
@synthesize source;
- (BOOL) hasOwnerId {
  return !!hasOwnerId_;
}
- (void) setHasOwnerId:(BOOL) value {
  hasOwnerId_ = !!value;
}
@synthesize ownerId;
- (BOOL) hasOrderType {
  return !!hasOrderType_;
}
- (void) setHasOrderType:(BOOL) value {
  hasOrderType_ = !!value;
}
@synthesize orderType;
- (BOOL) hasGtdDate {
  return !!hasGtdDate_;
}
- (void) setHasGtdDate:(BOOL) value {
  hasGtdDate_ = !!value;
}
@synthesize gtdDate;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasOrderBufferType {
  return !!hasOrderBufferType_;
}
- (void) setHasOrderBufferType:(BOOL) value {
  hasOrderBufferType_ = !!value;
}
@synthesize orderBufferType;
- (BOOL) hasSequenceNo {
  return !!hasSequenceNo_;
}
- (void) setHasSequenceNo:(BOOL) value {
  hasSequenceNo_ = !!value;
}
@synthesize sequenceNo;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasReasonText {
  return !!hasReasonText_;
}
- (void) setHasReasonText:(BOOL) value {
  hasReasonText_ = !!value;
}
@synthesize reasonText;
- (BOOL) hasClientId {
  return !!hasClientId_;
}
- (void) setHasClientId:(BOOL) value {
  hasClientId_ = !!value;
}
@synthesize clientId;
- (BOOL) hasTradeId {
  return !!hasTradeId_;
}
- (void) setHasTradeId:(BOOL) value {
  hasTradeId_ = !!value;
}
@synthesize tradeId;
- (BOOL) hasCounterTrader {
  return !!hasCounterTrader_;
}
- (void) setHasCounterTrader:(BOOL) value {
  hasCounterTrader_ = !!value;
}
@synthesize counterTrader;
- (BOOL) hasCounterBroker {
  return !!hasCounterBroker_;
}
- (void) setHasCounterBroker:(BOOL) value {
  hasCounterBroker_ = !!value;
}
@synthesize counterBroker;
- (BOOL) hasHandInst {
  return !!hasHandInst_;
}
- (void) setHasHandInst:(BOOL) value {
  hasHandInst_ = !!value;
}
@synthesize handInst;
- (BOOL) hasIsRenew {
  return !!hasIsRenew_;
}
- (void) setHasIsRenew:(BOOL) value {
  hasIsRenew_ = !!value;
}
@synthesize isRenew;
- (BOOL) hasCparty {
  return !!hasCparty_;
}
- (void) setHasCparty:(BOOL) value {
  hasCparty_ = !!value;
}
@synthesize cparty;
- (BOOL) hasOrderParentId {
  return !!hasOrderParentId_;
}
- (void) setHasOrderParentId:(BOOL) value {
  hasOrderParentId_ = !!value;
}
@synthesize orderParentId;
- (BOOL) hasGtcOrderType {
  return !!hasGtcOrderType_;
}
- (void) setHasGtcOrderType:(BOOL) value {
  hasGtcOrderType_ = !!value;
}
@synthesize gtcOrderType;
- (BOOL) hasBatchId {
  return !!hasBatchId_;
}
- (void) setHasBatchId:(BOOL) value {
  hasBatchId_ = !!value;
}
@synthesize batchId;
- (BOOL) hasBatchTime {
  return !!hasBatchTime_;
}
- (void) setHasBatchTime:(BOOL) value {
  hasBatchTime_ = !!value;
}
@synthesize batchTime;
- (BOOL) hasTradeQty {
  return !!hasTradeQty_;
}
- (void) setHasTradeQty:(BOOL) value {
  hasTradeQty_ = !!value;
}
@synthesize tradeQty;
- (BOOL) hasTradePrice {
  return !!hasTradePrice_;
}
- (void) setHasTradePrice:(BOOL) value {
  hasTradePrice_ = !!value;
}
@synthesize tradePrice;
- (BOOL) hasTradeTime {
  return !!hasTradeTime_;
}
- (void) setHasTradeTime:(BOOL) value {
  hasTradeTime_ = !!value;
}
@synthesize tradeTime;
- (BOOL) hasUpdatedBy {
  return !!hasUpdatedBy_;
}
- (void) setHasUpdatedBy:(BOOL) value {
  hasUpdatedBy_ = !!value;
}
@synthesize updatedBy;
- (BOOL) hasFutsetdate {
  return !!hasFutsetdate_;
}
- (void) setHasFutsetdate:(BOOL) value {
  hasFutsetdate_ = !!value;
}
@synthesize futsetdate;
- (BOOL) hasBulkid {
  return !!hasBulkid_;
}
- (void) setHasBulkid:(BOOL) value {
  hasBulkid_ = !!value;
}
@synthesize bulkid;
- (BOOL) hasWeightAvg {
  return !!hasWeightAvg_;
}
- (void) setHasWeightAvg:(BOOL) value {
  hasWeightAvg_ = !!value;
}
@synthesize weightAvg;
- (BOOL) hasOrigclorid {
  return !!hasOrigclorid_;
}
- (void) setHasOrigclorid:(BOOL) value {
  hasOrigclorid_ = !!value;
}
@synthesize origclorid;
- (BOOL) hasBroadcastType {
  return !!hasBroadcastType_;
}
- (void) setHasBroadcastType:(BOOL) value {
  hasBroadcastType_ = !!value;
}
@synthesize broadcastType;
- (BOOL) hasSenderid {
  return !!hasSenderid_;
}
- (void) setHasSenderid:(BOOL) value {
  hasSenderid_ = !!value;
}
@synthesize senderid;
- (BOOL) hasOfficername {
  return !!hasOfficername_;
}
- (void) setHasOfficername:(BOOL) value {
  hasOfficername_ = !!value;
}
@synthesize officername;
- (BOOL) hasTotalValue {
  return !!hasTotalValue_;
}
- (void) setHasTotalValue:(BOOL) value {
  hasTotalValue_ = !!value;
}
@synthesize totalValue;
- (BOOL) hasComplianceId {
  return !!hasComplianceId_;
}
- (void) setHasComplianceId:(BOOL) value {
  hasComplianceId_ = !!value;
}
@synthesize complianceId;
- (id) init {
  if ((self = [super init])) {
    self.jatsOrderId = @"";
    self.clientCode = @"";
    self.clientName = @"";
    self.orderStatus = @"";
    self.account = @"";
    self.board = @"";
    self.side = 0;
    self.securityCode = @"";
    self.orderQty = 0;
    self.price = 0;
    self.expiredDate = @"";
    self.leavesQty = 0;
    self.cumQty = 0;
    self.createdTime = @"";
    self.updatedTime = @"";
    self.source = @"";
    self.ownerId = @"";
    self.orderType = @"";
    self.gtdDate = @"";
    self.description = @"";
    self.orderBufferType = 0;
    self.sequenceNo = 0;
    self.orderId = @"";
    self.reasonText = @"";
    self.clientId = @"";
    self.tradeId = @"";
    self.counterTrader = @"";
    self.counterBroker = @"";
    self.handInst = @"";
    self.isRenew = @"";
    self.cparty = @"";
    self.orderParentId = @"";
    self.gtcOrderType = @"";
    self.batchId = @"";
    self.batchTime = @"";
    self.tradeQty = 0;
    self.tradePrice = 0;
    self.tradeTime = @"";
    self.updatedBy = @"";
    self.futsetdate = @"";
    self.bulkid = 0;
    self.weightAvg = 0;
    self.origclorid = @"";
    self.broadcastType = 0;
    self.senderid = @"";
    self.officername = @"";
    self.totalValue = 0;
    self.complianceId = @"";
  }
  return self;
}
static TxOrder* defaultTxOrderInstance = nil;
+ (void) initialize {
  if (self == [TxOrder class]) {
    defaultTxOrderInstance = [[TxOrder alloc] init];
  }
}
+ (TxOrder*) defaultInstance {
  return defaultTxOrderInstance;
}
- (TxOrder*) defaultInstance {
  return defaultTxOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasJatsOrderId) {
    [output writeString:1 value:self.jatsOrderId];
  }
  if (self.hasClientCode) {
    [output writeString:2 value:self.clientCode];
  }
  if (self.hasClientName) {
    [output writeString:3 value:self.clientName];
  }
  if (self.hasOrderStatus) {
    [output writeString:4 value:self.orderStatus];
  }
  if (self.hasAccount) {
    [output writeString:5 value:self.account];
  }
  if (self.hasBoard) {
    [output writeString:6 value:self.board];
  }
  if (self.hasSide) {
    [output writeInt32:7 value:self.side];
  }
  if (self.hasSecurityCode) {
    [output writeString:8 value:self.securityCode];
  }
  if (self.hasOrderQty) {
    [output writeDouble:9 value:self.orderQty];
  }
  if (self.hasPrice) {
    [output writeInt32:10 value:self.price];
  }
  if (self.hasExpiredDate) {
    [output writeString:11 value:self.expiredDate];
  }
  if (self.hasLeavesQty) {
    [output writeDouble:12 value:self.leavesQty];
  }
  if (self.hasCumQty) {
    [output writeDouble:13 value:self.cumQty];
  }
  if (self.hasCreatedTime) {
    [output writeString:14 value:self.createdTime];
  }
  if (self.hasUpdatedTime) {
    [output writeString:15 value:self.updatedTime];
  }
  if (self.hasSource) {
    [output writeString:16 value:self.source];
  }
  if (self.hasOwnerId) {
    [output writeString:17 value:self.ownerId];
  }
  if (self.hasOrderType) {
    [output writeString:18 value:self.orderType];
  }
  if (self.hasGtdDate) {
    [output writeString:19 value:self.gtdDate];
  }
  if (self.hasDescription) {
    [output writeString:20 value:self.description];
  }
  if (self.hasOrderBufferType) {
    [output writeInt32:21 value:self.orderBufferType];
  }
  if (self.hasOrderId) {
    [output writeString:22 value:self.orderId];
  }
  if (self.hasSequenceNo) {
    [output writeInt32:23 value:self.sequenceNo];
  }
  if (self.hasReasonText) {
    [output writeString:24 value:self.reasonText];
  }
  if (self.hasClientId) {
    [output writeString:25 value:self.clientId];
  }
  if (self.hasTradeId) {
    [output writeString:26 value:self.tradeId];
  }
  if (self.hasCounterTrader) {
    [output writeString:27 value:self.counterTrader];
  }
  if (self.hasCounterBroker) {
    [output writeString:28 value:self.counterBroker];
  }
  if (self.hasHandInst) {
    [output writeString:29 value:self.handInst];
  }
  if (self.hasIsRenew) {
    [output writeString:30 value:self.isRenew];
  }
  if (self.hasCparty) {
    [output writeString:31 value:self.cparty];
  }
  if (self.hasOrderParentId) {
    [output writeString:32 value:self.orderParentId];
  }
  if (self.hasGtcOrderType) {
    [output writeString:33 value:self.gtcOrderType];
  }
  if (self.hasBatchId) {
    [output writeString:34 value:self.batchId];
  }
  if (self.hasBatchTime) {
    [output writeString:35 value:self.batchTime];
  }
  if (self.hasTradeQty) {
    [output writeDouble:36 value:self.tradeQty];
  }
  if (self.hasTradePrice) {
    [output writeInt32:37 value:self.tradePrice];
  }
  if (self.hasTradeTime) {
    [output writeString:38 value:self.tradeTime];
  }
  if (self.hasUpdatedBy) {
    [output writeString:39 value:self.updatedBy];
  }
  if (self.hasFutsetdate) {
    [output writeString:40 value:self.futsetdate];
  }
  if (self.hasBulkid) {
    [output writeInt32:41 value:self.bulkid];
  }
  if (self.hasWeightAvg) {
    [output writeDouble:42 value:self.weightAvg];
  }
  if (self.hasOrigclorid) {
    [output writeString:43 value:self.origclorid];
  }
  if (self.hasBroadcastType) {
    [output writeInt32:44 value:self.broadcastType];
  }
  if (self.hasSenderid) {
    [output writeString:45 value:self.senderid];
  }
  if (self.hasOfficername) {
    [output writeString:46 value:self.officername];
  }
  if (self.hasTotalValue) {
    [output writeDouble:47 value:self.totalValue];
  }
  if (self.hasComplianceId) {
    [output writeString:48 value:self.complianceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasJatsOrderId) {
    size += computeStringSize(1, self.jatsOrderId);
  }
  if (self.hasClientCode) {
    size += computeStringSize(2, self.clientCode);
  }
  if (self.hasClientName) {
    size += computeStringSize(3, self.clientName);
  }
  if (self.hasOrderStatus) {
    size += computeStringSize(4, self.orderStatus);
  }
  if (self.hasAccount) {
    size += computeStringSize(5, self.account);
  }
  if (self.hasBoard) {
    size += computeStringSize(6, self.board);
  }
  if (self.hasSide) {
    size += computeInt32Size(7, self.side);
  }
  if (self.hasSecurityCode) {
    size += computeStringSize(8, self.securityCode);
  }
  if (self.hasOrderQty) {
    size += computeDoubleSize(9, self.orderQty);
  }
  if (self.hasPrice) {
    size += computeInt32Size(10, self.price);
  }
  if (self.hasExpiredDate) {
    size += computeStringSize(11, self.expiredDate);
  }
  if (self.hasLeavesQty) {
    size += computeDoubleSize(12, self.leavesQty);
  }
  if (self.hasCumQty) {
    size += computeDoubleSize(13, self.cumQty);
  }
  if (self.hasCreatedTime) {
    size += computeStringSize(14, self.createdTime);
  }
  if (self.hasUpdatedTime) {
    size += computeStringSize(15, self.updatedTime);
  }
  if (self.hasSource) {
    size += computeStringSize(16, self.source);
  }
  if (self.hasOwnerId) {
    size += computeStringSize(17, self.ownerId);
  }
  if (self.hasOrderType) {
    size += computeStringSize(18, self.orderType);
  }
  if (self.hasGtdDate) {
    size += computeStringSize(19, self.gtdDate);
  }
  if (self.hasDescription) {
    size += computeStringSize(20, self.description);
  }
  if (self.hasOrderBufferType) {
    size += computeInt32Size(21, self.orderBufferType);
  }
  if (self.hasOrderId) {
    size += computeStringSize(22, self.orderId);
  }
  if (self.hasSequenceNo) {
    size += computeInt32Size(23, self.sequenceNo);
  }
  if (self.hasReasonText) {
    size += computeStringSize(24, self.reasonText);
  }
  if (self.hasClientId) {
    size += computeStringSize(25, self.clientId);
  }
  if (self.hasTradeId) {
    size += computeStringSize(26, self.tradeId);
  }
  if (self.hasCounterTrader) {
    size += computeStringSize(27, self.counterTrader);
  }
  if (self.hasCounterBroker) {
    size += computeStringSize(28, self.counterBroker);
  }
  if (self.hasHandInst) {
    size += computeStringSize(29, self.handInst);
  }
  if (self.hasIsRenew) {
    size += computeStringSize(30, self.isRenew);
  }
  if (self.hasCparty) {
    size += computeStringSize(31, self.cparty);
  }
  if (self.hasOrderParentId) {
    size += computeStringSize(32, self.orderParentId);
  }
  if (self.hasGtcOrderType) {
    size += computeStringSize(33, self.gtcOrderType);
  }
  if (self.hasBatchId) {
    size += computeStringSize(34, self.batchId);
  }
  if (self.hasBatchTime) {
    size += computeStringSize(35, self.batchTime);
  }
  if (self.hasTradeQty) {
    size += computeDoubleSize(36, self.tradeQty);
  }
  if (self.hasTradePrice) {
    size += computeInt32Size(37, self.tradePrice);
  }
  if (self.hasTradeTime) {
    size += computeStringSize(38, self.tradeTime);
  }
  if (self.hasUpdatedBy) {
    size += computeStringSize(39, self.updatedBy);
  }
  if (self.hasFutsetdate) {
    size += computeStringSize(40, self.futsetdate);
  }
  if (self.hasBulkid) {
    size += computeInt32Size(41, self.bulkid);
  }
  if (self.hasWeightAvg) {
    size += computeDoubleSize(42, self.weightAvg);
  }
  if (self.hasOrigclorid) {
    size += computeStringSize(43, self.origclorid);
  }
  if (self.hasBroadcastType) {
    size += computeInt32Size(44, self.broadcastType);
  }
  if (self.hasSenderid) {
    size += computeStringSize(45, self.senderid);
  }
  if (self.hasOfficername) {
    size += computeStringSize(46, self.officername);
  }
  if (self.hasTotalValue) {
    size += computeDoubleSize(47, self.totalValue);
  }
  if (self.hasComplianceId) {
    size += computeStringSize(48, self.complianceId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TxOrder*) parseFromData:(NSData*) data {
  return (TxOrder*)[[[TxOrder builder] mergeFromData:data] build];
}
+ (TxOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TxOrder*)[[[TxOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TxOrder*) parseFromInputStream:(NSInputStream*) input {
  return (TxOrder*)[[[TxOrder builder] mergeFromInputStream:input] build];
}
+ (TxOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TxOrder*)[[[TxOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TxOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TxOrder*)[[[TxOrder builder] mergeFromCodedInputStream:input] build];
}
+ (TxOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TxOrder*)[[[TxOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TxOrder_Builder*) builder {
  return [[TxOrder_Builder alloc] init];
}
+ (TxOrder_Builder*) builderWithPrototype:(TxOrder*) prototype {
  return [[TxOrder builder] mergeFrom:prototype];
}
- (TxOrder_Builder*) builder {
  return [TxOrder builder];
}
- (TxOrder_Builder*) toBuilder {
  return [TxOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasJatsOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jatsOrderId", self.jatsOrderId];
  }
  if (self.hasClientCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientCode", self.clientCode];
  }
  if (self.hasClientName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientName", self.clientName];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", self.orderStatus];
  }
  if (self.hasAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"account", self.account];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"board", self.board];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasSecurityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityCode", self.securityCode];
  }
  if (self.hasOrderQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderQty", [NSNumber numberWithDouble:self.orderQty]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasExpiredDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiredDate", self.expiredDate];
  }
  if (self.hasLeavesQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leavesQty", [NSNumber numberWithDouble:self.leavesQty]];
  }
  if (self.hasCumQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cumQty", [NSNumber numberWithDouble:self.cumQty]];
  }
  if (self.hasCreatedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdTime", self.createdTime];
  }
  if (self.hasUpdatedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedTime", self.updatedTime];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", self.source];
  }
  if (self.hasOwnerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerId", self.ownerId];
  }
  if (self.hasOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderType", self.orderType];
  }
  if (self.hasGtdDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gtdDate", self.gtdDate];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasOrderBufferType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderBufferType", [NSNumber numberWithInt:self.orderBufferType]];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasSequenceNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceNo", [NSNumber numberWithInt:self.sequenceNo]];
  }
  if (self.hasReasonText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reasonText", self.reasonText];
  }
  if (self.hasClientId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientId", self.clientId];
  }
  if (self.hasTradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeId", self.tradeId];
  }
  if (self.hasCounterTrader) {
    [output appendFormat:@"%@%@: %@\n", indent, @"counterTrader", self.counterTrader];
  }
  if (self.hasCounterBroker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"counterBroker", self.counterBroker];
  }
  if (self.hasHandInst) {
    [output appendFormat:@"%@%@: %@\n", indent, @"handInst", self.handInst];
  }
  if (self.hasIsRenew) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRenew", self.isRenew];
  }
  if (self.hasCparty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cparty", self.cparty];
  }
  if (self.hasOrderParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderParentId", self.orderParentId];
  }
  if (self.hasGtcOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gtcOrderType", self.gtcOrderType];
  }
  if (self.hasBatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"batchId", self.batchId];
  }
  if (self.hasBatchTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"batchTime", self.batchTime];
  }
  if (self.hasTradeQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeQty", [NSNumber numberWithDouble:self.tradeQty]];
  }
  if (self.hasTradePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradePrice", [NSNumber numberWithInt:self.tradePrice]];
  }
  if (self.hasTradeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeTime", self.tradeTime];
  }
  if (self.hasUpdatedBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedBy", self.updatedBy];
  }
  if (self.hasFutsetdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"futsetdate", self.futsetdate];
  }
  if (self.hasBulkid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bulkid", [NSNumber numberWithInt:self.bulkid]];
  }
  if (self.hasWeightAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weightAvg", [NSNumber numberWithDouble:self.weightAvg]];
  }
  if (self.hasOrigclorid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"origclorid", self.origclorid];
  }
  if (self.hasBroadcastType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"broadcastType", [NSNumber numberWithInt:self.broadcastType]];
  }
  if (self.hasSenderid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderid", self.senderid];
  }
  if (self.hasOfficername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"officername", self.officername];
  }
  if (self.hasTotalValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalValue", [NSNumber numberWithDouble:self.totalValue]];
  }
  if (self.hasComplianceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"complianceId", self.complianceId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TxOrder class]]) {
    return NO;
  }
  TxOrder *otherMessage = other;
  return
      self.hasJatsOrderId == otherMessage.hasJatsOrderId &&
      (!self.hasJatsOrderId || [self.jatsOrderId isEqual:otherMessage.jatsOrderId]) &&
      self.hasClientCode == otherMessage.hasClientCode &&
      (!self.hasClientCode || [self.clientCode isEqual:otherMessage.clientCode]) &&
      self.hasClientName == otherMessage.hasClientName &&
      (!self.hasClientName || [self.clientName isEqual:otherMessage.clientName]) &&
      self.hasOrderStatus == otherMessage.hasOrderStatus &&
      (!self.hasOrderStatus || [self.orderStatus isEqual:otherMessage.orderStatus]) &&
      self.hasAccount == otherMessage.hasAccount &&
      (!self.hasAccount || [self.account isEqual:otherMessage.account]) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || [self.board isEqual:otherMessage.board]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasSecurityCode == otherMessage.hasSecurityCode &&
      (!self.hasSecurityCode || [self.securityCode isEqual:otherMessage.securityCode]) &&
      self.hasOrderQty == otherMessage.hasOrderQty &&
      (!self.hasOrderQty || self.orderQty == otherMessage.orderQty) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasExpiredDate == otherMessage.hasExpiredDate &&
      (!self.hasExpiredDate || [self.expiredDate isEqual:otherMessage.expiredDate]) &&
      self.hasLeavesQty == otherMessage.hasLeavesQty &&
      (!self.hasLeavesQty || self.leavesQty == otherMessage.leavesQty) &&
      self.hasCumQty == otherMessage.hasCumQty &&
      (!self.hasCumQty || self.cumQty == otherMessage.cumQty) &&
      self.hasCreatedTime == otherMessage.hasCreatedTime &&
      (!self.hasCreatedTime || [self.createdTime isEqual:otherMessage.createdTime]) &&
      self.hasUpdatedTime == otherMessage.hasUpdatedTime &&
      (!self.hasUpdatedTime || [self.updatedTime isEqual:otherMessage.updatedTime]) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      self.hasOwnerId == otherMessage.hasOwnerId &&
      (!self.hasOwnerId || [self.ownerId isEqual:otherMessage.ownerId]) &&
      self.hasOrderType == otherMessage.hasOrderType &&
      (!self.hasOrderType || [self.orderType isEqual:otherMessage.orderType]) &&
      self.hasGtdDate == otherMessage.hasGtdDate &&
      (!self.hasGtdDate || [self.gtdDate isEqual:otherMessage.gtdDate]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasOrderBufferType == otherMessage.hasOrderBufferType &&
      (!self.hasOrderBufferType || self.orderBufferType == otherMessage.orderBufferType) &&
      self.hasOrderId == otherMessage.hasOrderId &&
      (!self.hasOrderId || [self.orderId isEqual:otherMessage.orderId]) &&
      self.hasSequenceNo == otherMessage.hasSequenceNo &&
      (!self.hasSequenceNo || self.sequenceNo == otherMessage.sequenceNo) &&
      self.hasReasonText == otherMessage.hasReasonText &&
      (!self.hasReasonText || [self.reasonText isEqual:otherMessage.reasonText]) &&
      self.hasClientId == otherMessage.hasClientId &&
      (!self.hasClientId || [self.clientId isEqual:otherMessage.clientId]) &&
      self.hasTradeId == otherMessage.hasTradeId &&
      (!self.hasTradeId || [self.tradeId isEqual:otherMessage.tradeId]) &&
      self.hasCounterTrader == otherMessage.hasCounterTrader &&
      (!self.hasCounterTrader || [self.counterTrader isEqual:otherMessage.counterTrader]) &&
      self.hasCounterBroker == otherMessage.hasCounterBroker &&
      (!self.hasCounterBroker || [self.counterBroker isEqual:otherMessage.counterBroker]) &&
      self.hasHandInst == otherMessage.hasHandInst &&
      (!self.hasHandInst || [self.handInst isEqual:otherMessage.handInst]) &&
      self.hasIsRenew == otherMessage.hasIsRenew &&
      (!self.hasIsRenew || [self.isRenew isEqual:otherMessage.isRenew]) &&
      self.hasCparty == otherMessage.hasCparty &&
      (!self.hasCparty || [self.cparty isEqual:otherMessage.cparty]) &&
      self.hasOrderParentId == otherMessage.hasOrderParentId &&
      (!self.hasOrderParentId || [self.orderParentId isEqual:otherMessage.orderParentId]) &&
      self.hasGtcOrderType == otherMessage.hasGtcOrderType &&
      (!self.hasGtcOrderType || [self.gtcOrderType isEqual:otherMessage.gtcOrderType]) &&
      self.hasBatchId == otherMessage.hasBatchId &&
      (!self.hasBatchId || [self.batchId isEqual:otherMessage.batchId]) &&
      self.hasBatchTime == otherMessage.hasBatchTime &&
      (!self.hasBatchTime || [self.batchTime isEqual:otherMessage.batchTime]) &&
      self.hasTradeQty == otherMessage.hasTradeQty &&
      (!self.hasTradeQty || self.tradeQty == otherMessage.tradeQty) &&
      self.hasTradePrice == otherMessage.hasTradePrice &&
      (!self.hasTradePrice || self.tradePrice == otherMessage.tradePrice) &&
      self.hasTradeTime == otherMessage.hasTradeTime &&
      (!self.hasTradeTime || [self.tradeTime isEqual:otherMessage.tradeTime]) &&
      self.hasUpdatedBy == otherMessage.hasUpdatedBy &&
      (!self.hasUpdatedBy || [self.updatedBy isEqual:otherMessage.updatedBy]) &&
      self.hasFutsetdate == otherMessage.hasFutsetdate &&
      (!self.hasFutsetdate || [self.futsetdate isEqual:otherMessage.futsetdate]) &&
      self.hasBulkid == otherMessage.hasBulkid &&
      (!self.hasBulkid || self.bulkid == otherMessage.bulkid) &&
      self.hasWeightAvg == otherMessage.hasWeightAvg &&
      (!self.hasWeightAvg || self.weightAvg == otherMessage.weightAvg) &&
      self.hasOrigclorid == otherMessage.hasOrigclorid &&
      (!self.hasOrigclorid || [self.origclorid isEqual:otherMessage.origclorid]) &&
      self.hasBroadcastType == otherMessage.hasBroadcastType &&
      (!self.hasBroadcastType || self.broadcastType == otherMessage.broadcastType) &&
      self.hasSenderid == otherMessage.hasSenderid &&
      (!self.hasSenderid || [self.senderid isEqual:otherMessage.senderid]) &&
      self.hasOfficername == otherMessage.hasOfficername &&
      (!self.hasOfficername || [self.officername isEqual:otherMessage.officername]) &&
      self.hasTotalValue == otherMessage.hasTotalValue &&
      (!self.hasTotalValue || self.totalValue == otherMessage.totalValue) &&
      self.hasComplianceId == otherMessage.hasComplianceId &&
      (!self.hasComplianceId || [self.complianceId isEqual:otherMessage.complianceId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasJatsOrderId) {
    hashCode = hashCode * 31 + [self.jatsOrderId hash];
  }
  if (self.hasClientCode) {
    hashCode = hashCode * 31 + [self.clientCode hash];
  }
  if (self.hasClientName) {
    hashCode = hashCode * 31 + [self.clientName hash];
  }
  if (self.hasOrderStatus) {
    hashCode = hashCode * 31 + [self.orderStatus hash];
  }
  if (self.hasAccount) {
    hashCode = hashCode * 31 + [self.account hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + [self.board hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasSecurityCode) {
    hashCode = hashCode * 31 + [self.securityCode hash];
  }
  if (self.hasOrderQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderQty] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasExpiredDate) {
    hashCode = hashCode * 31 + [self.expiredDate hash];
  }
  if (self.hasLeavesQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.leavesQty] hash];
  }
  if (self.hasCumQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.cumQty] hash];
  }
  if (self.hasCreatedTime) {
    hashCode = hashCode * 31 + [self.createdTime hash];
  }
  if (self.hasUpdatedTime) {
    hashCode = hashCode * 31 + [self.updatedTime hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  if (self.hasOwnerId) {
    hashCode = hashCode * 31 + [self.ownerId hash];
  }
  if (self.hasOrderType) {
    hashCode = hashCode * 31 + [self.orderType hash];
  }
  if (self.hasGtdDate) {
    hashCode = hashCode * 31 + [self.gtdDate hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasOrderBufferType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.orderBufferType] hash];
  }
  if (self.hasOrderId) {
    hashCode = hashCode * 31 + [self.orderId hash];
  }
  if (self.hasSequenceNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sequenceNo] hash];
  }
  if (self.hasReasonText) {
    hashCode = hashCode * 31 + [self.reasonText hash];
  }
  if (self.hasClientId) {
    hashCode = hashCode * 31 + [self.clientId hash];
  }
  if (self.hasTradeId) {
    hashCode = hashCode * 31 + [self.tradeId hash];
  }
  if (self.hasCounterTrader) {
    hashCode = hashCode * 31 + [self.counterTrader hash];
  }
  if (self.hasCounterBroker) {
    hashCode = hashCode * 31 + [self.counterBroker hash];
  }
  if (self.hasHandInst) {
    hashCode = hashCode * 31 + [self.handInst hash];
  }
  if (self.hasIsRenew) {
    hashCode = hashCode * 31 + [self.isRenew hash];
  }
  if (self.hasCparty) {
    hashCode = hashCode * 31 + [self.cparty hash];
  }
  if (self.hasOrderParentId) {
    hashCode = hashCode * 31 + [self.orderParentId hash];
  }
  if (self.hasGtcOrderType) {
    hashCode = hashCode * 31 + [self.gtcOrderType hash];
  }
  if (self.hasBatchId) {
    hashCode = hashCode * 31 + [self.batchId hash];
  }
  if (self.hasBatchTime) {
    hashCode = hashCode * 31 + [self.batchTime hash];
  }
  if (self.hasTradeQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tradeQty] hash];
  }
  if (self.hasTradePrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tradePrice] hash];
  }
  if (self.hasTradeTime) {
    hashCode = hashCode * 31 + [self.tradeTime hash];
  }
  if (self.hasUpdatedBy) {
    hashCode = hashCode * 31 + [self.updatedBy hash];
  }
  if (self.hasFutsetdate) {
    hashCode = hashCode * 31 + [self.futsetdate hash];
  }
  if (self.hasBulkid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bulkid] hash];
  }
  if (self.hasWeightAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.weightAvg] hash];
  }
  if (self.hasOrigclorid) {
    hashCode = hashCode * 31 + [self.origclorid hash];
  }
  if (self.hasBroadcastType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.broadcastType] hash];
  }
  if (self.hasSenderid) {
    hashCode = hashCode * 31 + [self.senderid hash];
  }
  if (self.hasOfficername) {
    hashCode = hashCode * 31 + [self.officername hash];
  }
  if (self.hasTotalValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.totalValue] hash];
  }
  if (self.hasComplianceId) {
    hashCode = hashCode * 31 + [self.complianceId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TxOrder_Builder()
@property (strong) TxOrder* result;
@end

@implementation TxOrder_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TxOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TxOrder_Builder*) clear {
  self.result = [[TxOrder alloc] init];
  return self;
}
- (TxOrder_Builder*) clone {
  return [TxOrder builderWithPrototype:result];
}
- (TxOrder*) defaultInstance {
  return [TxOrder defaultInstance];
}
- (TxOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TxOrder*) buildPartial {
  TxOrder* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TxOrder_Builder*) mergeFrom:(TxOrder*) other {
  if (other == [TxOrder defaultInstance]) {
    return self;
  }
  if (other.hasJatsOrderId) {
    [self setJatsOrderId:other.jatsOrderId];
  }
  if (other.hasClientCode) {
    [self setClientCode:other.clientCode];
  }
  if (other.hasClientName) {
    [self setClientName:other.clientName];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasAccount) {
    [self setAccount:other.account];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasSecurityCode) {
    [self setSecurityCode:other.securityCode];
  }
  if (other.hasOrderQty) {
    [self setOrderQty:other.orderQty];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasExpiredDate) {
    [self setExpiredDate:other.expiredDate];
  }
  if (other.hasLeavesQty) {
    [self setLeavesQty:other.leavesQty];
  }
  if (other.hasCumQty) {
    [self setCumQty:other.cumQty];
  }
  if (other.hasCreatedTime) {
    [self setCreatedTime:other.createdTime];
  }
  if (other.hasUpdatedTime) {
    [self setUpdatedTime:other.updatedTime];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.hasOwnerId) {
    [self setOwnerId:other.ownerId];
  }
  if (other.hasOrderType) {
    [self setOrderType:other.orderType];
  }
  if (other.hasGtdDate) {
    [self setGtdDate:other.gtdDate];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasOrderBufferType) {
    [self setOrderBufferType:other.orderBufferType];
  }
  if (other.hasSequenceNo) {
    [self setSequenceNo:other.sequenceNo];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasReasonText) {
    [self setReasonText:other.reasonText];
  }
  if (other.hasClientId) {
    [self setClientId:other.clientId];
  }
  if (other.hasTradeId) {
    [self setTradeId:other.tradeId];
  }
  if (other.hasCounterTrader) {
    [self setCounterTrader:other.counterTrader];
  }
  if (other.hasCounterBroker) {
    [self setCounterBroker:other.counterBroker];
  }
  if (other.hasHandInst) {
    [self setHandInst:other.handInst];
  }
  if (other.hasIsRenew) {
    [self setIsRenew:other.isRenew];
  }
  if (other.hasCparty) {
    [self setCparty:other.cparty];
  }
  if (other.hasOrderParentId) {
    [self setOrderParentId:other.orderParentId];
  }
  if (other.hasGtcOrderType) {
    [self setGtcOrderType:other.gtcOrderType];
  }
  if (other.hasBatchId) {
    [self setBatchId:other.batchId];
  }
  if (other.hasBatchTime) {
    [self setBatchTime:other.batchTime];
  }
  if (other.hasTradeQty) {
    [self setTradeQty:other.tradeQty];
  }
  if (other.hasTradePrice) {
    [self setTradePrice:other.tradePrice];
  }
  if (other.hasTradeTime) {
    [self setTradeTime:other.tradeTime];
  }
  if (other.hasUpdatedBy) {
    [self setUpdatedBy:other.updatedBy];
  }
  if (other.hasFutsetdate) {
    [self setFutsetdate:other.futsetdate];
  }
  if (other.hasBulkid) {
    [self setBulkid:other.bulkid];
  }
  if (other.hasWeightAvg) {
    [self setWeightAvg:other.weightAvg];
  }
  if (other.hasOrigclorid) {
    [self setOrigclorid:other.origclorid];
  }
  if (other.hasBroadcastType) {
    [self setBroadcastType:other.broadcastType];
  }
  if (other.hasSenderid) {
    [self setSenderid:other.senderid];
  }
  if (other.hasOfficername) {
    [self setOfficername:other.officername];
  }
  if (other.hasTotalValue) {
    [self setTotalValue:other.totalValue];
  }
  if (other.hasComplianceId) {
    [self setComplianceId:other.complianceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TxOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TxOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setJatsOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setClientCode:[input readString]];
        break;
      }
      case 26: {
        [self setClientName:[input readString]];
        break;
      }
      case 34: {
        [self setOrderStatus:[input readString]];
        break;
      }
      case 42: {
        [self setAccount:[input readString]];
        break;
      }
      case 50: {
        [self setBoard:[input readString]];
        break;
      }
      case 56: {
        [self setSide:[input readInt32]];
        break;
      }
      case 66: {
        [self setSecurityCode:[input readString]];
        break;
      }
      case 73: {
        [self setOrderQty:[input readDouble]];
        break;
      }
      case 80: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 90: {
        [self setExpiredDate:[input readString]];
        break;
      }
      case 97: {
        [self setLeavesQty:[input readDouble]];
        break;
      }
      case 105: {
        [self setCumQty:[input readDouble]];
        break;
      }
      case 114: {
        [self setCreatedTime:[input readString]];
        break;
      }
      case 122: {
        [self setUpdatedTime:[input readString]];
        break;
      }
      case 130: {
        [self setSource:[input readString]];
        break;
      }
      case 138: {
        [self setOwnerId:[input readString]];
        break;
      }
      case 146: {
        [self setOrderType:[input readString]];
        break;
      }
      case 154: {
        [self setGtdDate:[input readString]];
        break;
      }
      case 162: {
        [self setDescription:[input readString]];
        break;
      }
      case 168: {
        [self setOrderBufferType:[input readInt32]];
        break;
      }
      case 178: {
        [self setOrderId:[input readString]];
        break;
      }
      case 184: {
        [self setSequenceNo:[input readInt32]];
        break;
      }
      case 194: {
        [self setReasonText:[input readString]];
        break;
      }
      case 202: {
        [self setClientId:[input readString]];
        break;
      }
      case 210: {
        [self setTradeId:[input readString]];
        break;
      }
      case 218: {
        [self setCounterTrader:[input readString]];
        break;
      }
      case 226: {
        [self setCounterBroker:[input readString]];
        break;
      }
      case 234: {
        [self setHandInst:[input readString]];
        break;
      }
      case 242: {
        [self setIsRenew:[input readString]];
        break;
      }
      case 250: {
        [self setCparty:[input readString]];
        break;
      }
      case 258: {
        [self setOrderParentId:[input readString]];
        break;
      }
      case 266: {
        [self setGtcOrderType:[input readString]];
        break;
      }
      case 274: {
        [self setBatchId:[input readString]];
        break;
      }
      case 282: {
        [self setBatchTime:[input readString]];
        break;
      }
      case 289: {
        [self setTradeQty:[input readDouble]];
        break;
      }
      case 296: {
        [self setTradePrice:[input readInt32]];
        break;
      }
      case 306: {
        [self setTradeTime:[input readString]];
        break;
      }
      case 314: {
        [self setUpdatedBy:[input readString]];
        break;
      }
      case 322: {
        [self setFutsetdate:[input readString]];
        break;
      }
      case 328: {
        [self setBulkid:[input readInt32]];
        break;
      }
      case 337: {
        [self setWeightAvg:[input readDouble]];
        break;
      }
      case 346: {
        [self setOrigclorid:[input readString]];
        break;
      }
      case 352: {
        [self setBroadcastType:[input readInt32]];
        break;
      }
      case 362: {
        [self setSenderid:[input readString]];
        break;
      }
      case 370: {
        [self setOfficername:[input readString]];
        break;
      }
      case 377: {
        [self setTotalValue:[input readDouble]];
        break;
      }
      case 386: {
        [self setComplianceId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasJatsOrderId {
  return result.hasJatsOrderId;
}
- (NSString*) jatsOrderId {
  return result.jatsOrderId;
}
- (TxOrder_Builder*) setJatsOrderId:(NSString*) value {
  result.hasJatsOrderId = YES;
  result.jatsOrderId = value;
  return self;
}
- (TxOrder_Builder*) clearJatsOrderId {
  result.hasJatsOrderId = NO;
  result.jatsOrderId = @"";
  return self;
}
- (BOOL) hasClientCode {
  return result.hasClientCode;
}
- (NSString*) clientCode {
  return result.clientCode;
}
- (TxOrder_Builder*) setClientCode:(NSString*) value {
  result.hasClientCode = YES;
  result.clientCode = value;
  return self;
}
- (TxOrder_Builder*) clearClientCode {
  result.hasClientCode = NO;
  result.clientCode = @"";
  return self;
}
- (BOOL) hasClientName {
  return result.hasClientName;
}
- (NSString*) clientName {
  return result.clientName;
}
- (TxOrder_Builder*) setClientName:(NSString*) value {
  result.hasClientName = YES;
  result.clientName = value;
  return self;
}
- (TxOrder_Builder*) clearClientName {
  result.hasClientName = NO;
  result.clientName = @"";
  return self;
}
- (BOOL) hasOrderStatus {
  return result.hasOrderStatus;
}
- (NSString*) orderStatus {
  return result.orderStatus;
}
- (TxOrder_Builder*) setOrderStatus:(NSString*) value {
  result.hasOrderStatus = YES;
  result.orderStatus = value;
  return self;
}
- (TxOrder_Builder*) clearOrderStatus {
  result.hasOrderStatus = NO;
  result.orderStatus = @"";
  return self;
}
- (BOOL) hasAccount {
  return result.hasAccount;
}
- (NSString*) account {
  return result.account;
}
- (TxOrder_Builder*) setAccount:(NSString*) value {
  result.hasAccount = YES;
  result.account = value;
  return self;
}
- (TxOrder_Builder*) clearAccount {
  result.hasAccount = NO;
  result.account = @"";
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (NSString*) board {
  return result.board;
}
- (TxOrder_Builder*) setBoard:(NSString*) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (TxOrder_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (TxOrder_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (TxOrder_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasSecurityCode {
  return result.hasSecurityCode;
}
- (NSString*) securityCode {
  return result.securityCode;
}
- (TxOrder_Builder*) setSecurityCode:(NSString*) value {
  result.hasSecurityCode = YES;
  result.securityCode = value;
  return self;
}
- (TxOrder_Builder*) clearSecurityCode {
  result.hasSecurityCode = NO;
  result.securityCode = @"";
  return self;
}
- (BOOL) hasOrderQty {
  return result.hasOrderQty;
}
- (Float64) orderQty {
  return result.orderQty;
}
- (TxOrder_Builder*) setOrderQty:(Float64) value {
  result.hasOrderQty = YES;
  result.orderQty = value;
  return self;
}
- (TxOrder_Builder*) clearOrderQty {
  result.hasOrderQty = NO;
  result.orderQty = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (TxOrder_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (TxOrder_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasExpiredDate {
  return result.hasExpiredDate;
}
- (NSString*) expiredDate {
  return result.expiredDate;
}
- (TxOrder_Builder*) setExpiredDate:(NSString*) value {
  result.hasExpiredDate = YES;
  result.expiredDate = value;
  return self;
}
- (TxOrder_Builder*) clearExpiredDate {
  result.hasExpiredDate = NO;
  result.expiredDate = @"";
  return self;
}
- (BOOL) hasLeavesQty {
  return result.hasLeavesQty;
}
- (Float64) leavesQty {
  return result.leavesQty;
}
- (TxOrder_Builder*) setLeavesQty:(Float64) value {
  result.hasLeavesQty = YES;
  result.leavesQty = value;
  return self;
}
- (TxOrder_Builder*) clearLeavesQty {
  result.hasLeavesQty = NO;
  result.leavesQty = 0;
  return self;
}
- (BOOL) hasCumQty {
  return result.hasCumQty;
}
- (Float64) cumQty {
  return result.cumQty;
}
- (TxOrder_Builder*) setCumQty:(Float64) value {
  result.hasCumQty = YES;
  result.cumQty = value;
  return self;
}
- (TxOrder_Builder*) clearCumQty {
  result.hasCumQty = NO;
  result.cumQty = 0;
  return self;
}
- (BOOL) hasCreatedTime {
  return result.hasCreatedTime;
}
- (NSString*) createdTime {
  return result.createdTime;
}
- (TxOrder_Builder*) setCreatedTime:(NSString*) value {
  result.hasCreatedTime = YES;
  result.createdTime = value;
  return self;
}
- (TxOrder_Builder*) clearCreatedTime {
  result.hasCreatedTime = NO;
  result.createdTime = @"";
  return self;
}
- (BOOL) hasUpdatedTime {
  return result.hasUpdatedTime;
}
- (NSString*) updatedTime {
  return result.updatedTime;
}
- (TxOrder_Builder*) setUpdatedTime:(NSString*) value {
  result.hasUpdatedTime = YES;
  result.updatedTime = value;
  return self;
}
- (TxOrder_Builder*) clearUpdatedTime {
  result.hasUpdatedTime = NO;
  result.updatedTime = @"";
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (NSString*) source {
  return result.source;
}
- (TxOrder_Builder*) setSource:(NSString*) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (TxOrder_Builder*) clearSource {
  result.hasSource = NO;
  result.source = @"";
  return self;
}
- (BOOL) hasOwnerId {
  return result.hasOwnerId;
}
- (NSString*) ownerId {
  return result.ownerId;
}
- (TxOrder_Builder*) setOwnerId:(NSString*) value {
  result.hasOwnerId = YES;
  result.ownerId = value;
  return self;
}
- (TxOrder_Builder*) clearOwnerId {
  result.hasOwnerId = NO;
  result.ownerId = @"";
  return self;
}
- (BOOL) hasOrderType {
  return result.hasOrderType;
}
- (NSString*) orderType {
  return result.orderType;
}
- (TxOrder_Builder*) setOrderType:(NSString*) value {
  result.hasOrderType = YES;
  result.orderType = value;
  return self;
}
- (TxOrder_Builder*) clearOrderType {
  result.hasOrderType = NO;
  result.orderType = @"";
  return self;
}
- (BOOL) hasGtdDate {
  return result.hasGtdDate;
}
- (NSString*) gtdDate {
  return result.gtdDate;
}
- (TxOrder_Builder*) setGtdDate:(NSString*) value {
  result.hasGtdDate = YES;
  result.gtdDate = value;
  return self;
}
- (TxOrder_Builder*) clearGtdDate {
  result.hasGtdDate = NO;
  result.gtdDate = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (TxOrder_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (TxOrder_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasOrderBufferType {
  return result.hasOrderBufferType;
}
- (int32_t) orderBufferType {
  return result.orderBufferType;
}
- (TxOrder_Builder*) setOrderBufferType:(int32_t) value {
  result.hasOrderBufferType = YES;
  result.orderBufferType = value;
  return self;
}
- (TxOrder_Builder*) clearOrderBufferType {
  result.hasOrderBufferType = NO;
  result.orderBufferType = 0;
  return self;
}
- (BOOL) hasSequenceNo {
  return result.hasSequenceNo;
}
- (int32_t) sequenceNo {
  return result.sequenceNo;
}
- (TxOrder_Builder*) setSequenceNo:(int32_t) value {
  result.hasSequenceNo = YES;
  result.sequenceNo = value;
  return self;
}
- (TxOrder_Builder*) clearSequenceNo {
  result.hasSequenceNo = NO;
  result.sequenceNo = 0;
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (NSString*) orderId {
  return result.orderId;
}
- (TxOrder_Builder*) setOrderId:(NSString*) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (TxOrder_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = @"";
  return self;
}
- (BOOL) hasReasonText {
  return result.hasReasonText;
}
- (NSString*) reasonText {
  return result.reasonText;
}
- (TxOrder_Builder*) setReasonText:(NSString*) value {
  result.hasReasonText = YES;
  result.reasonText = value;
  return self;
}
- (TxOrder_Builder*) clearReasonText {
  result.hasReasonText = NO;
  result.reasonText = @"";
  return self;
}
- (BOOL) hasClientId {
  return result.hasClientId;
}
- (NSString*) clientId {
  return result.clientId;
}
- (TxOrder_Builder*) setClientId:(NSString*) value {
  result.hasClientId = YES;
  result.clientId = value;
  return self;
}
- (TxOrder_Builder*) clearClientId {
  result.hasClientId = NO;
  result.clientId = @"";
  return self;
}
- (BOOL) hasTradeId {
  return result.hasTradeId;
}
- (NSString*) tradeId {
  return result.tradeId;
}
- (TxOrder_Builder*) setTradeId:(NSString*) value {
  result.hasTradeId = YES;
  result.tradeId = value;
  return self;
}
- (TxOrder_Builder*) clearTradeId {
  result.hasTradeId = NO;
  result.tradeId = @"";
  return self;
}
- (BOOL) hasCounterTrader {
  return result.hasCounterTrader;
}
- (NSString*) counterTrader {
  return result.counterTrader;
}
- (TxOrder_Builder*) setCounterTrader:(NSString*) value {
  result.hasCounterTrader = YES;
  result.counterTrader = value;
  return self;
}
- (TxOrder_Builder*) clearCounterTrader {
  result.hasCounterTrader = NO;
  result.counterTrader = @"";
  return self;
}
- (BOOL) hasCounterBroker {
  return result.hasCounterBroker;
}
- (NSString*) counterBroker {
  return result.counterBroker;
}
- (TxOrder_Builder*) setCounterBroker:(NSString*) value {
  result.hasCounterBroker = YES;
  result.counterBroker = value;
  return self;
}
- (TxOrder_Builder*) clearCounterBroker {
  result.hasCounterBroker = NO;
  result.counterBroker = @"";
  return self;
}
- (BOOL) hasHandInst {
  return result.hasHandInst;
}
- (NSString*) handInst {
  return result.handInst;
}
- (TxOrder_Builder*) setHandInst:(NSString*) value {
  result.hasHandInst = YES;
  result.handInst = value;
  return self;
}
- (TxOrder_Builder*) clearHandInst {
  result.hasHandInst = NO;
  result.handInst = @"";
  return self;
}
- (BOOL) hasIsRenew {
  return result.hasIsRenew;
}
- (NSString*) isRenew {
  return result.isRenew;
}
- (TxOrder_Builder*) setIsRenew:(NSString*) value {
  result.hasIsRenew = YES;
  result.isRenew = value;
  return self;
}
- (TxOrder_Builder*) clearIsRenew {
  result.hasIsRenew = NO;
  result.isRenew = @"";
  return self;
}
- (BOOL) hasCparty {
  return result.hasCparty;
}
- (NSString*) cparty {
  return result.cparty;
}
- (TxOrder_Builder*) setCparty:(NSString*) value {
  result.hasCparty = YES;
  result.cparty = value;
  return self;
}
- (TxOrder_Builder*) clearCparty {
  result.hasCparty = NO;
  result.cparty = @"";
  return self;
}
- (BOOL) hasOrderParentId {
  return result.hasOrderParentId;
}
- (NSString*) orderParentId {
  return result.orderParentId;
}
- (TxOrder_Builder*) setOrderParentId:(NSString*) value {
  result.hasOrderParentId = YES;
  result.orderParentId = value;
  return self;
}
- (TxOrder_Builder*) clearOrderParentId {
  result.hasOrderParentId = NO;
  result.orderParentId = @"";
  return self;
}
- (BOOL) hasGtcOrderType {
  return result.hasGtcOrderType;
}
- (NSString*) gtcOrderType {
  return result.gtcOrderType;
}
- (TxOrder_Builder*) setGtcOrderType:(NSString*) value {
  result.hasGtcOrderType = YES;
  result.gtcOrderType = value;
  return self;
}
- (TxOrder_Builder*) clearGtcOrderType {
  result.hasGtcOrderType = NO;
  result.gtcOrderType = @"";
  return self;
}
- (BOOL) hasBatchId {
  return result.hasBatchId;
}
- (NSString*) batchId {
  return result.batchId;
}
- (TxOrder_Builder*) setBatchId:(NSString*) value {
  result.hasBatchId = YES;
  result.batchId = value;
  return self;
}
- (TxOrder_Builder*) clearBatchId {
  result.hasBatchId = NO;
  result.batchId = @"";
  return self;
}
- (BOOL) hasBatchTime {
  return result.hasBatchTime;
}
- (NSString*) batchTime {
  return result.batchTime;
}
- (TxOrder_Builder*) setBatchTime:(NSString*) value {
  result.hasBatchTime = YES;
  result.batchTime = value;
  return self;
}
- (TxOrder_Builder*) clearBatchTime {
  result.hasBatchTime = NO;
  result.batchTime = @"";
  return self;
}
- (BOOL) hasTradeQty {
  return result.hasTradeQty;
}
- (Float64) tradeQty {
  return result.tradeQty;
}
- (TxOrder_Builder*) setTradeQty:(Float64) value {
  result.hasTradeQty = YES;
  result.tradeQty = value;
  return self;
}
- (TxOrder_Builder*) clearTradeQty {
  result.hasTradeQty = NO;
  result.tradeQty = 0;
  return self;
}
- (BOOL) hasTradePrice {
  return result.hasTradePrice;
}
- (int32_t) tradePrice {
  return result.tradePrice;
}
- (TxOrder_Builder*) setTradePrice:(int32_t) value {
  result.hasTradePrice = YES;
  result.tradePrice = value;
  return self;
}
- (TxOrder_Builder*) clearTradePrice {
  result.hasTradePrice = NO;
  result.tradePrice = 0;
  return self;
}
- (BOOL) hasTradeTime {
  return result.hasTradeTime;
}
- (NSString*) tradeTime {
  return result.tradeTime;
}
- (TxOrder_Builder*) setTradeTime:(NSString*) value {
  result.hasTradeTime = YES;
  result.tradeTime = value;
  return self;
}
- (TxOrder_Builder*) clearTradeTime {
  result.hasTradeTime = NO;
  result.tradeTime = @"";
  return self;
}
- (BOOL) hasUpdatedBy {
  return result.hasUpdatedBy;
}
- (NSString*) updatedBy {
  return result.updatedBy;
}
- (TxOrder_Builder*) setUpdatedBy:(NSString*) value {
  result.hasUpdatedBy = YES;
  result.updatedBy = value;
  return self;
}
- (TxOrder_Builder*) clearUpdatedBy {
  result.hasUpdatedBy = NO;
  result.updatedBy = @"";
  return self;
}
- (BOOL) hasFutsetdate {
  return result.hasFutsetdate;
}
- (NSString*) futsetdate {
  return result.futsetdate;
}
- (TxOrder_Builder*) setFutsetdate:(NSString*) value {
  result.hasFutsetdate = YES;
  result.futsetdate = value;
  return self;
}
- (TxOrder_Builder*) clearFutsetdate {
  result.hasFutsetdate = NO;
  result.futsetdate = @"";
  return self;
}
- (BOOL) hasBulkid {
  return result.hasBulkid;
}
- (int32_t) bulkid {
  return result.bulkid;
}
- (TxOrder_Builder*) setBulkid:(int32_t) value {
  result.hasBulkid = YES;
  result.bulkid = value;
  return self;
}
- (TxOrder_Builder*) clearBulkid {
  result.hasBulkid = NO;
  result.bulkid = 0;
  return self;
}
- (BOOL) hasWeightAvg {
  return result.hasWeightAvg;
}
- (Float64) weightAvg {
  return result.weightAvg;
}
- (TxOrder_Builder*) setWeightAvg:(Float64) value {
  result.hasWeightAvg = YES;
  result.weightAvg = value;
  return self;
}
- (TxOrder_Builder*) clearWeightAvg {
  result.hasWeightAvg = NO;
  result.weightAvg = 0;
  return self;
}
- (BOOL) hasOrigclorid {
  return result.hasOrigclorid;
}
- (NSString*) origclorid {
  return result.origclorid;
}
- (TxOrder_Builder*) setOrigclorid:(NSString*) value {
  result.hasOrigclorid = YES;
  result.origclorid = value;
  return self;
}
- (TxOrder_Builder*) clearOrigclorid {
  result.hasOrigclorid = NO;
  result.origclorid = @"";
  return self;
}
- (BOOL) hasBroadcastType {
  return result.hasBroadcastType;
}
- (int32_t) broadcastType {
  return result.broadcastType;
}
- (TxOrder_Builder*) setBroadcastType:(int32_t) value {
  result.hasBroadcastType = YES;
  result.broadcastType = value;
  return self;
}
- (TxOrder_Builder*) clearBroadcastType {
  result.hasBroadcastType = NO;
  result.broadcastType = 0;
  return self;
}
- (BOOL) hasSenderid {
  return result.hasSenderid;
}
- (NSString*) senderid {
  return result.senderid;
}
- (TxOrder_Builder*) setSenderid:(NSString*) value {
  result.hasSenderid = YES;
  result.senderid = value;
  return self;
}
- (TxOrder_Builder*) clearSenderid {
  result.hasSenderid = NO;
  result.senderid = @"";
  return self;
}
- (BOOL) hasOfficername {
  return result.hasOfficername;
}
- (NSString*) officername {
  return result.officername;
}
- (TxOrder_Builder*) setOfficername:(NSString*) value {
  result.hasOfficername = YES;
  result.officername = value;
  return self;
}
- (TxOrder_Builder*) clearOfficername {
  result.hasOfficername = NO;
  result.officername = @"";
  return self;
}
- (BOOL) hasTotalValue {
  return result.hasTotalValue;
}
- (Float64) totalValue {
  return result.totalValue;
}
- (TxOrder_Builder*) setTotalValue:(Float64) value {
  result.hasTotalValue = YES;
  result.totalValue = value;
  return self;
}
- (TxOrder_Builder*) clearTotalValue {
  result.hasTotalValue = NO;
  result.totalValue = 0;
  return self;
}
- (BOOL) hasComplianceId {
  return result.hasComplianceId;
}
- (NSString*) complianceId {
  return result.complianceId;
}
- (TxOrder_Builder*) setComplianceId:(NSString*) value {
  result.hasComplianceId = YES;
  result.complianceId = value;
  return self;
}
- (TxOrder_Builder*) clearComplianceId {
  result.hasComplianceId = NO;
  result.complianceId = @"";
  return self;
}
@end

@interface TradeDetail ()
@property (strong) NSString* time;
@property (strong) NSString* tradeNo;
@property (strong) NSString* jatsId;
@property int32_t price;
@property int32_t qty;
@end

@implementation TradeDetail

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasTradeNo {
  return !!hasTradeNo_;
}
- (void) setHasTradeNo:(BOOL) value {
  hasTradeNo_ = !!value;
}
@synthesize tradeNo;
- (BOOL) hasJatsId {
  return !!hasJatsId_;
}
- (void) setHasJatsId:(BOOL) value {
  hasJatsId_ = !!value;
}
@synthesize jatsId;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasQty {
  return !!hasQty_;
}
- (void) setHasQty:(BOOL) value {
  hasQty_ = !!value;
}
@synthesize qty;
- (id) init {
  if ((self = [super init])) {
    self.time = @"";
    self.tradeNo = @"";
    self.jatsId = @"";
    self.price = 0;
    self.qty = 0;
  }
  return self;
}
static TradeDetail* defaultTradeDetailInstance = nil;
+ (void) initialize {
  if (self == [TradeDetail class]) {
    defaultTradeDetailInstance = [[TradeDetail alloc] init];
  }
}
+ (TradeDetail*) defaultInstance {
  return defaultTradeDetailInstance;
}
- (TradeDetail*) defaultInstance {
  return defaultTradeDetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTradeNo) {
    [output writeString:1 value:self.tradeNo];
  }
  if (self.hasJatsId) {
    [output writeString:2 value:self.jatsId];
  }
  if (self.hasPrice) {
    [output writeInt32:3 value:self.price];
  }
  if (self.hasQty) {
    [output writeInt32:4 value:self.qty];
  }
  if (self.hasTime) {
    [output writeString:5 value:self.time];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTradeNo) {
    size += computeStringSize(1, self.tradeNo);
  }
  if (self.hasJatsId) {
    size += computeStringSize(2, self.jatsId);
  }
  if (self.hasPrice) {
    size += computeInt32Size(3, self.price);
  }
  if (self.hasQty) {
    size += computeInt32Size(4, self.qty);
  }
  if (self.hasTime) {
    size += computeStringSize(5, self.time);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TradeDetail*) parseFromData:(NSData*) data {
  return (TradeDetail*)[[[TradeDetail builder] mergeFromData:data] build];
}
+ (TradeDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradeDetail*)[[[TradeDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TradeDetail*) parseFromInputStream:(NSInputStream*) input {
  return (TradeDetail*)[[[TradeDetail builder] mergeFromInputStream:input] build];
}
+ (TradeDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradeDetail*)[[[TradeDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TradeDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TradeDetail*)[[[TradeDetail builder] mergeFromCodedInputStream:input] build];
}
+ (TradeDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TradeDetail*)[[[TradeDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TradeDetail_Builder*) builder {
  return [[TradeDetail_Builder alloc] init];
}
+ (TradeDetail_Builder*) builderWithPrototype:(TradeDetail*) prototype {
  return [[TradeDetail builder] mergeFrom:prototype];
}
- (TradeDetail_Builder*) builder {
  return [TradeDetail builder];
}
- (TradeDetail_Builder*) toBuilder {
  return [TradeDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTradeNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeNo", self.tradeNo];
  }
  if (self.hasJatsId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jatsId", self.jatsId];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInt:self.price]];
  }
  if (self.hasQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qty", [NSNumber numberWithInt:self.qty]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", self.time];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TradeDetail class]]) {
    return NO;
  }
  TradeDetail *otherMessage = other;
  return
      self.hasTradeNo == otherMessage.hasTradeNo &&
      (!self.hasTradeNo || [self.tradeNo isEqual:otherMessage.tradeNo]) &&
      self.hasJatsId == otherMessage.hasJatsId &&
      (!self.hasJatsId || [self.jatsId isEqual:otherMessage.jatsId]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasQty == otherMessage.hasQty &&
      (!self.hasQty || self.qty == otherMessage.qty) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || [self.time isEqual:otherMessage.time]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTradeNo) {
    hashCode = hashCode * 31 + [self.tradeNo hash];
  }
  if (self.hasJatsId) {
    hashCode = hashCode * 31 + [self.jatsId hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.price] hash];
  }
  if (self.hasQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.qty] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [self.time hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TradeDetail_Builder()
@property (strong) TradeDetail* result;
@end

@implementation TradeDetail_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TradeDetail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TradeDetail_Builder*) clear {
  self.result = [[TradeDetail alloc] init];
  return self;
}
- (TradeDetail_Builder*) clone {
  return [TradeDetail builderWithPrototype:result];
}
- (TradeDetail*) defaultInstance {
  return [TradeDetail defaultInstance];
}
- (TradeDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TradeDetail*) buildPartial {
  TradeDetail* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TradeDetail_Builder*) mergeFrom:(TradeDetail*) other {
  if (other == [TradeDetail defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasTradeNo) {
    [self setTradeNo:other.tradeNo];
  }
  if (other.hasJatsId) {
    [self setJatsId:other.jatsId];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasQty) {
    [self setQty:other.qty];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TradeDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TradeDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTradeNo:[input readString]];
        break;
      }
      case 18: {
        [self setJatsId:[input readString]];
        break;
      }
      case 24: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 32: {
        [self setQty:[input readInt32]];
        break;
      }
      case 42: {
        [self setTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (TradeDetail_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (TradeDetail_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasTradeNo {
  return result.hasTradeNo;
}
- (NSString*) tradeNo {
  return result.tradeNo;
}
- (TradeDetail_Builder*) setTradeNo:(NSString*) value {
  result.hasTradeNo = YES;
  result.tradeNo = value;
  return self;
}
- (TradeDetail_Builder*) clearTradeNo {
  result.hasTradeNo = NO;
  result.tradeNo = @"";
  return self;
}
- (BOOL) hasJatsId {
  return result.hasJatsId;
}
- (NSString*) jatsId {
  return result.jatsId;
}
- (TradeDetail_Builder*) setJatsId:(NSString*) value {
  result.hasJatsId = YES;
  result.jatsId = value;
  return self;
}
- (TradeDetail_Builder*) clearJatsId {
  result.hasJatsId = NO;
  result.jatsId = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (TradeDetail_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (TradeDetail_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasQty {
  return result.hasQty;
}
- (int32_t) qty {
  return result.qty;
}
- (TradeDetail_Builder*) setQty:(int32_t) value {
  result.hasQty = YES;
  result.qty = value;
  return self;
}
- (TradeDetail_Builder*) clearQty {
  result.hasQty = NO;
  result.qty = 0;
  return self;
}
@end

@interface AccountInfo ()
@property (strong) NSString* clientcode;
@property (strong) NSString* name;
@property (strong) NSString* address;
@property (strong) NSString* city;
@property (strong) NSString* zipcode;
@property (strong) NSString* province;
@property (strong) NSString* phone;
@property (strong) NSString* fax;
@property (strong) NSString* mobilePhone;
@property (strong) NSString* sid;
@property (strong) NSString* subRek;
@property (strong) NSString* rdiAccountName;
@property (strong) NSString* rdiAccountNo;
@property (strong) NSString* bankAccount;
@property (strong) NSString* bankAccountNo;
@end

@implementation AccountInfo

- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) value {
  hasCity_ = !!value;
}
@synthesize city;
- (BOOL) hasZipcode {
  return !!hasZipcode_;
}
- (void) setHasZipcode:(BOOL) value {
  hasZipcode_ = !!value;
}
@synthesize zipcode;
- (BOOL) hasProvince {
  return !!hasProvince_;
}
- (void) setHasProvince:(BOOL) value {
  hasProvince_ = !!value;
}
@synthesize province;
- (BOOL) hasPhone {
  return !!hasPhone_;
}
- (void) setHasPhone:(BOOL) value {
  hasPhone_ = !!value;
}
@synthesize phone;
- (BOOL) hasFax {
  return !!hasFax_;
}
- (void) setHasFax:(BOOL) value {
  hasFax_ = !!value;
}
@synthesize fax;
- (BOOL) hasMobilePhone {
  return !!hasMobilePhone_;
}
- (void) setHasMobilePhone:(BOOL) value {
  hasMobilePhone_ = !!value;
}
@synthesize mobilePhone;
- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) value {
  hasSid_ = !!value;
}
@synthesize sid;
- (BOOL) hasSubRek {
  return !!hasSubRek_;
}
- (void) setHasSubRek:(BOOL) value {
  hasSubRek_ = !!value;
}
@synthesize subRek;
- (BOOL) hasRdiAccountName {
  return !!hasRdiAccountName_;
}
- (void) setHasRdiAccountName:(BOOL) value {
  hasRdiAccountName_ = !!value;
}
@synthesize rdiAccountName;
- (BOOL) hasRdiAccountNo {
  return !!hasRdiAccountNo_;
}
- (void) setHasRdiAccountNo:(BOOL) value {
  hasRdiAccountNo_ = !!value;
}
@synthesize rdiAccountNo;
- (BOOL) hasBankAccount {
  return !!hasBankAccount_;
}
- (void) setHasBankAccount:(BOOL) value {
  hasBankAccount_ = !!value;
}
@synthesize bankAccount;
- (BOOL) hasBankAccountNo {
  return !!hasBankAccountNo_;
}
- (void) setHasBankAccountNo:(BOOL) value {
  hasBankAccountNo_ = !!value;
}
@synthesize bankAccountNo;
- (id) init {
  if ((self = [super init])) {
    self.clientcode = @"";
    self.name = @"";
    self.address = @"";
    self.city = @"";
    self.zipcode = @"";
    self.province = @"";
    self.phone = @"";
    self.fax = @"";
    self.mobilePhone = @"";
    self.sid = @"";
    self.subRek = @"";
    self.rdiAccountName = @"";
    self.rdiAccountNo = @"";
    self.bankAccount = @"";
    self.bankAccountNo = @"";
  }
  return self;
}
static AccountInfo* defaultAccountInfoInstance = nil;
+ (void) initialize {
  if (self == [AccountInfo class]) {
    defaultAccountInfoInstance = [[AccountInfo alloc] init];
  }
}
+ (AccountInfo*) defaultInstance {
  return defaultAccountInfoInstance;
}
- (AccountInfo*) defaultInstance {
  return defaultAccountInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAddress) {
    [output writeString:2 value:self.address];
  }
  if (self.hasCity) {
    [output writeString:3 value:self.city];
  }
  if (self.hasZipcode) {
    [output writeString:4 value:self.zipcode];
  }
  if (self.hasProvince) {
    [output writeString:5 value:self.province];
  }
  if (self.hasPhone) {
    [output writeString:6 value:self.phone];
  }
  if (self.hasFax) {
    [output writeString:7 value:self.fax];
  }
  if (self.hasMobilePhone) {
    [output writeString:8 value:self.mobilePhone];
  }
  if (self.hasSid) {
    [output writeString:9 value:self.sid];
  }
  if (self.hasSubRek) {
    [output writeString:10 value:self.subRek];
  }
  if (self.hasRdiAccountName) {
    [output writeString:11 value:self.rdiAccountName];
  }
  if (self.hasRdiAccountNo) {
    [output writeString:12 value:self.rdiAccountNo];
  }
  if (self.hasBankAccount) {
    [output writeString:13 value:self.bankAccount];
  }
  if (self.hasBankAccountNo) {
    [output writeString:14 value:self.bankAccountNo];
  }
  if (self.hasClientcode) {
    [output writeString:15 value:self.clientcode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasAddress) {
    size += computeStringSize(2, self.address);
  }
  if (self.hasCity) {
    size += computeStringSize(3, self.city);
  }
  if (self.hasZipcode) {
    size += computeStringSize(4, self.zipcode);
  }
  if (self.hasProvince) {
    size += computeStringSize(5, self.province);
  }
  if (self.hasPhone) {
    size += computeStringSize(6, self.phone);
  }
  if (self.hasFax) {
    size += computeStringSize(7, self.fax);
  }
  if (self.hasMobilePhone) {
    size += computeStringSize(8, self.mobilePhone);
  }
  if (self.hasSid) {
    size += computeStringSize(9, self.sid);
  }
  if (self.hasSubRek) {
    size += computeStringSize(10, self.subRek);
  }
  if (self.hasRdiAccountName) {
    size += computeStringSize(11, self.rdiAccountName);
  }
  if (self.hasRdiAccountNo) {
    size += computeStringSize(12, self.rdiAccountNo);
  }
  if (self.hasBankAccount) {
    size += computeStringSize(13, self.bankAccount);
  }
  if (self.hasBankAccountNo) {
    size += computeStringSize(14, self.bankAccountNo);
  }
  if (self.hasClientcode) {
    size += computeStringSize(15, self.clientcode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AccountInfo*) parseFromData:(NSData*) data {
  return (AccountInfo*)[[[AccountInfo builder] mergeFromData:data] build];
}
+ (AccountInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AccountInfo*)[[[AccountInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AccountInfo*) parseFromInputStream:(NSInputStream*) input {
  return (AccountInfo*)[[[AccountInfo builder] mergeFromInputStream:input] build];
}
+ (AccountInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AccountInfo*)[[[AccountInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AccountInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AccountInfo*)[[[AccountInfo builder] mergeFromCodedInputStream:input] build];
}
+ (AccountInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AccountInfo*)[[[AccountInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AccountInfo_Builder*) builder {
  return [[AccountInfo_Builder alloc] init];
}
+ (AccountInfo_Builder*) builderWithPrototype:(AccountInfo*) prototype {
  return [[AccountInfo builder] mergeFrom:prototype];
}
- (AccountInfo_Builder*) builder {
  return [AccountInfo builder];
}
- (AccountInfo_Builder*) toBuilder {
  return [AccountInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"city", self.city];
  }
  if (self.hasZipcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zipcode", self.zipcode];
  }
  if (self.hasProvince) {
    [output appendFormat:@"%@%@: %@\n", indent, @"province", self.province];
  }
  if (self.hasPhone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phone", self.phone];
  }
  if (self.hasFax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fax", self.fax];
  }
  if (self.hasMobilePhone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobilePhone", self.mobilePhone];
  }
  if (self.hasSid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sid", self.sid];
  }
  if (self.hasSubRek) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subRek", self.subRek];
  }
  if (self.hasRdiAccountName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rdiAccountName", self.rdiAccountName];
  }
  if (self.hasRdiAccountNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rdiAccountNo", self.rdiAccountNo];
  }
  if (self.hasBankAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAccount", self.bankAccount];
  }
  if (self.hasBankAccountNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAccountNo", self.bankAccountNo];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AccountInfo class]]) {
    return NO;
  }
  AccountInfo *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasCity == otherMessage.hasCity &&
      (!self.hasCity || [self.city isEqual:otherMessage.city]) &&
      self.hasZipcode == otherMessage.hasZipcode &&
      (!self.hasZipcode || [self.zipcode isEqual:otherMessage.zipcode]) &&
      self.hasProvince == otherMessage.hasProvince &&
      (!self.hasProvince || [self.province isEqual:otherMessage.province]) &&
      self.hasPhone == otherMessage.hasPhone &&
      (!self.hasPhone || [self.phone isEqual:otherMessage.phone]) &&
      self.hasFax == otherMessage.hasFax &&
      (!self.hasFax || [self.fax isEqual:otherMessage.fax]) &&
      self.hasMobilePhone == otherMessage.hasMobilePhone &&
      (!self.hasMobilePhone || [self.mobilePhone isEqual:otherMessage.mobilePhone]) &&
      self.hasSid == otherMessage.hasSid &&
      (!self.hasSid || [self.sid isEqual:otherMessage.sid]) &&
      self.hasSubRek == otherMessage.hasSubRek &&
      (!self.hasSubRek || [self.subRek isEqual:otherMessage.subRek]) &&
      self.hasRdiAccountName == otherMessage.hasRdiAccountName &&
      (!self.hasRdiAccountName || [self.rdiAccountName isEqual:otherMessage.rdiAccountName]) &&
      self.hasRdiAccountNo == otherMessage.hasRdiAccountNo &&
      (!self.hasRdiAccountNo || [self.rdiAccountNo isEqual:otherMessage.rdiAccountNo]) &&
      self.hasBankAccount == otherMessage.hasBankAccount &&
      (!self.hasBankAccount || [self.bankAccount isEqual:otherMessage.bankAccount]) &&
      self.hasBankAccountNo == otherMessage.hasBankAccountNo &&
      (!self.hasBankAccountNo || [self.bankAccountNo isEqual:otherMessage.bankAccountNo]) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasCity) {
    hashCode = hashCode * 31 + [self.city hash];
  }
  if (self.hasZipcode) {
    hashCode = hashCode * 31 + [self.zipcode hash];
  }
  if (self.hasProvince) {
    hashCode = hashCode * 31 + [self.province hash];
  }
  if (self.hasPhone) {
    hashCode = hashCode * 31 + [self.phone hash];
  }
  if (self.hasFax) {
    hashCode = hashCode * 31 + [self.fax hash];
  }
  if (self.hasMobilePhone) {
    hashCode = hashCode * 31 + [self.mobilePhone hash];
  }
  if (self.hasSid) {
    hashCode = hashCode * 31 + [self.sid hash];
  }
  if (self.hasSubRek) {
    hashCode = hashCode * 31 + [self.subRek hash];
  }
  if (self.hasRdiAccountName) {
    hashCode = hashCode * 31 + [self.rdiAccountName hash];
  }
  if (self.hasRdiAccountNo) {
    hashCode = hashCode * 31 + [self.rdiAccountNo hash];
  }
  if (self.hasBankAccount) {
    hashCode = hashCode * 31 + [self.bankAccount hash];
  }
  if (self.hasBankAccountNo) {
    hashCode = hashCode * 31 + [self.bankAccountNo hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AccountInfo_Builder()
@property (strong) AccountInfo* result;
@end

@implementation AccountInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[AccountInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AccountInfo_Builder*) clear {
  self.result = [[AccountInfo alloc] init];
  return self;
}
- (AccountInfo_Builder*) clone {
  return [AccountInfo builderWithPrototype:result];
}
- (AccountInfo*) defaultInstance {
  return [AccountInfo defaultInstance];
}
- (AccountInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AccountInfo*) buildPartial {
  AccountInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (AccountInfo_Builder*) mergeFrom:(AccountInfo*) other {
  if (other == [AccountInfo defaultInstance]) {
    return self;
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasZipcode) {
    [self setZipcode:other.zipcode];
  }
  if (other.hasProvince) {
    [self setProvince:other.province];
  }
  if (other.hasPhone) {
    [self setPhone:other.phone];
  }
  if (other.hasFax) {
    [self setFax:other.fax];
  }
  if (other.hasMobilePhone) {
    [self setMobilePhone:other.mobilePhone];
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasSubRek) {
    [self setSubRek:other.subRek];
  }
  if (other.hasRdiAccountName) {
    [self setRdiAccountName:other.rdiAccountName];
  }
  if (other.hasRdiAccountNo) {
    [self setRdiAccountNo:other.rdiAccountNo];
  }
  if (other.hasBankAccount) {
    [self setBankAccount:other.bankAccount];
  }
  if (other.hasBankAccountNo) {
    [self setBankAccountNo:other.bankAccountNo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AccountInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AccountInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setAddress:[input readString]];
        break;
      }
      case 26: {
        [self setCity:[input readString]];
        break;
      }
      case 34: {
        [self setZipcode:[input readString]];
        break;
      }
      case 42: {
        [self setProvince:[input readString]];
        break;
      }
      case 50: {
        [self setPhone:[input readString]];
        break;
      }
      case 58: {
        [self setFax:[input readString]];
        break;
      }
      case 66: {
        [self setMobilePhone:[input readString]];
        break;
      }
      case 74: {
        [self setSid:[input readString]];
        break;
      }
      case 82: {
        [self setSubRek:[input readString]];
        break;
      }
      case 90: {
        [self setRdiAccountName:[input readString]];
        break;
      }
      case 98: {
        [self setRdiAccountNo:[input readString]];
        break;
      }
      case 106: {
        [self setBankAccount:[input readString]];
        break;
      }
      case 114: {
        [self setBankAccountNo:[input readString]];
        break;
      }
      case 122: {
        [self setClientcode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (AccountInfo_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (AccountInfo_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (AccountInfo_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (AccountInfo_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSString*) address {
  return result.address;
}
- (AccountInfo_Builder*) setAddress:(NSString*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (AccountInfo_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = @"";
  return self;
}
- (BOOL) hasCity {
  return result.hasCity;
}
- (NSString*) city {
  return result.city;
}
- (AccountInfo_Builder*) setCity:(NSString*) value {
  result.hasCity = YES;
  result.city = value;
  return self;
}
- (AccountInfo_Builder*) clearCity {
  result.hasCity = NO;
  result.city = @"";
  return self;
}
- (BOOL) hasZipcode {
  return result.hasZipcode;
}
- (NSString*) zipcode {
  return result.zipcode;
}
- (AccountInfo_Builder*) setZipcode:(NSString*) value {
  result.hasZipcode = YES;
  result.zipcode = value;
  return self;
}
- (AccountInfo_Builder*) clearZipcode {
  result.hasZipcode = NO;
  result.zipcode = @"";
  return self;
}
- (BOOL) hasProvince {
  return result.hasProvince;
}
- (NSString*) province {
  return result.province;
}
- (AccountInfo_Builder*) setProvince:(NSString*) value {
  result.hasProvince = YES;
  result.province = value;
  return self;
}
- (AccountInfo_Builder*) clearProvince {
  result.hasProvince = NO;
  result.province = @"";
  return self;
}
- (BOOL) hasPhone {
  return result.hasPhone;
}
- (NSString*) phone {
  return result.phone;
}
- (AccountInfo_Builder*) setPhone:(NSString*) value {
  result.hasPhone = YES;
  result.phone = value;
  return self;
}
- (AccountInfo_Builder*) clearPhone {
  result.hasPhone = NO;
  result.phone = @"";
  return self;
}
- (BOOL) hasFax {
  return result.hasFax;
}
- (NSString*) fax {
  return result.fax;
}
- (AccountInfo_Builder*) setFax:(NSString*) value {
  result.hasFax = YES;
  result.fax = value;
  return self;
}
- (AccountInfo_Builder*) clearFax {
  result.hasFax = NO;
  result.fax = @"";
  return self;
}
- (BOOL) hasMobilePhone {
  return result.hasMobilePhone;
}
- (NSString*) mobilePhone {
  return result.mobilePhone;
}
- (AccountInfo_Builder*) setMobilePhone:(NSString*) value {
  result.hasMobilePhone = YES;
  result.mobilePhone = value;
  return self;
}
- (AccountInfo_Builder*) clearMobilePhone {
  result.hasMobilePhone = NO;
  result.mobilePhone = @"";
  return self;
}
- (BOOL) hasSid {
  return result.hasSid;
}
- (NSString*) sid {
  return result.sid;
}
- (AccountInfo_Builder*) setSid:(NSString*) value {
  result.hasSid = YES;
  result.sid = value;
  return self;
}
- (AccountInfo_Builder*) clearSid {
  result.hasSid = NO;
  result.sid = @"";
  return self;
}
- (BOOL) hasSubRek {
  return result.hasSubRek;
}
- (NSString*) subRek {
  return result.subRek;
}
- (AccountInfo_Builder*) setSubRek:(NSString*) value {
  result.hasSubRek = YES;
  result.subRek = value;
  return self;
}
- (AccountInfo_Builder*) clearSubRek {
  result.hasSubRek = NO;
  result.subRek = @"";
  return self;
}
- (BOOL) hasRdiAccountName {
  return result.hasRdiAccountName;
}
- (NSString*) rdiAccountName {
  return result.rdiAccountName;
}
- (AccountInfo_Builder*) setRdiAccountName:(NSString*) value {
  result.hasRdiAccountName = YES;
  result.rdiAccountName = value;
  return self;
}
- (AccountInfo_Builder*) clearRdiAccountName {
  result.hasRdiAccountName = NO;
  result.rdiAccountName = @"";
  return self;
}
- (BOOL) hasRdiAccountNo {
  return result.hasRdiAccountNo;
}
- (NSString*) rdiAccountNo {
  return result.rdiAccountNo;
}
- (AccountInfo_Builder*) setRdiAccountNo:(NSString*) value {
  result.hasRdiAccountNo = YES;
  result.rdiAccountNo = value;
  return self;
}
- (AccountInfo_Builder*) clearRdiAccountNo {
  result.hasRdiAccountNo = NO;
  result.rdiAccountNo = @"";
  return self;
}
- (BOOL) hasBankAccount {
  return result.hasBankAccount;
}
- (NSString*) bankAccount {
  return result.bankAccount;
}
- (AccountInfo_Builder*) setBankAccount:(NSString*) value {
  result.hasBankAccount = YES;
  result.bankAccount = value;
  return self;
}
- (AccountInfo_Builder*) clearBankAccount {
  result.hasBankAccount = NO;
  result.bankAccount = @"";
  return self;
}
- (BOOL) hasBankAccountNo {
  return result.hasBankAccountNo;
}
- (NSString*) bankAccountNo {
  return result.bankAccountNo;
}
- (AccountInfo_Builder*) setBankAccountNo:(NSString*) value {
  result.hasBankAccountNo = YES;
  result.bankAccountNo = value;
  return self;
}
- (AccountInfo_Builder*) clearBankAccountNo {
  result.hasBankAccountNo = NO;
  result.bankAccountNo = @"";
  return self;
}
@end

@interface BuyingPower ()
@property Float64 buyingPower;
@property Float64 outstandingBov;
@property (strong) NSString* riskControl;
@property Float64 loanBalance;
@property (strong) NSString* clientRating;
@property int32_t clientTypeCode;
@property Float64 tradingLimit;
@property Float64 loanRatio;
@property Float64 marketValue;
@property Float64 modifiedMarketValue;
@property Float64 modifiedLoanRatio;
@property Float64 buyTradeValue;
@property Float64 sellTradeValue;
@property (strong) NSString* privilleges;
@property Float64 orderPower;
@property int32_t automaticShortsell;
@property (strong) NSString* userType;
@end

@implementation BuyingPower

- (BOOL) hasBuyingPower {
  return !!hasBuyingPower_;
}
- (void) setHasBuyingPower:(BOOL) value {
  hasBuyingPower_ = !!value;
}
@synthesize buyingPower;
- (BOOL) hasOutstandingBov {
  return !!hasOutstandingBov_;
}
- (void) setHasOutstandingBov:(BOOL) value {
  hasOutstandingBov_ = !!value;
}
@synthesize outstandingBov;
- (BOOL) hasRiskControl {
  return !!hasRiskControl_;
}
- (void) setHasRiskControl:(BOOL) value {
  hasRiskControl_ = !!value;
}
@synthesize riskControl;
- (BOOL) hasLoanBalance {
  return !!hasLoanBalance_;
}
- (void) setHasLoanBalance:(BOOL) value {
  hasLoanBalance_ = !!value;
}
@synthesize loanBalance;
- (BOOL) hasClientRating {
  return !!hasClientRating_;
}
- (void) setHasClientRating:(BOOL) value {
  hasClientRating_ = !!value;
}
@synthesize clientRating;
- (BOOL) hasClientTypeCode {
  return !!hasClientTypeCode_;
}
- (void) setHasClientTypeCode:(BOOL) value {
  hasClientTypeCode_ = !!value;
}
@synthesize clientTypeCode;
- (BOOL) hasTradingLimit {
  return !!hasTradingLimit_;
}
- (void) setHasTradingLimit:(BOOL) value {
  hasTradingLimit_ = !!value;
}
@synthesize tradingLimit;
- (BOOL) hasLoanRatio {
  return !!hasLoanRatio_;
}
- (void) setHasLoanRatio:(BOOL) value {
  hasLoanRatio_ = !!value;
}
@synthesize loanRatio;
- (BOOL) hasMarketValue {
  return !!hasMarketValue_;
}
- (void) setHasMarketValue:(BOOL) value {
  hasMarketValue_ = !!value;
}
@synthesize marketValue;
- (BOOL) hasModifiedMarketValue {
  return !!hasModifiedMarketValue_;
}
- (void) setHasModifiedMarketValue:(BOOL) value {
  hasModifiedMarketValue_ = !!value;
}
@synthesize modifiedMarketValue;
- (BOOL) hasModifiedLoanRatio {
  return !!hasModifiedLoanRatio_;
}
- (void) setHasModifiedLoanRatio:(BOOL) value {
  hasModifiedLoanRatio_ = !!value;
}
@synthesize modifiedLoanRatio;
- (BOOL) hasBuyTradeValue {
  return !!hasBuyTradeValue_;
}
- (void) setHasBuyTradeValue:(BOOL) value {
  hasBuyTradeValue_ = !!value;
}
@synthesize buyTradeValue;
- (BOOL) hasSellTradeValue {
  return !!hasSellTradeValue_;
}
- (void) setHasSellTradeValue:(BOOL) value {
  hasSellTradeValue_ = !!value;
}
@synthesize sellTradeValue;
- (BOOL) hasPrivilleges {
  return !!hasPrivilleges_;
}
- (void) setHasPrivilleges:(BOOL) value {
  hasPrivilleges_ = !!value;
}
@synthesize privilleges;
- (BOOL) hasOrderPower {
  return !!hasOrderPower_;
}
- (void) setHasOrderPower:(BOOL) value {
  hasOrderPower_ = !!value;
}
@synthesize orderPower;
- (BOOL) hasAutomaticShortsell {
  return !!hasAutomaticShortsell_;
}
- (void) setHasAutomaticShortsell:(BOOL) value {
  hasAutomaticShortsell_ = !!value;
}
@synthesize automaticShortsell;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) value {
  hasUserType_ = !!value;
}
@synthesize userType;
- (id) init {
  if ((self = [super init])) {
    self.buyingPower = 0;
    self.outstandingBov = 0;
    self.riskControl = @"";
    self.loanBalance = 0;
    self.clientRating = @"";
    self.clientTypeCode = 0;
    self.tradingLimit = 0;
    self.loanRatio = 0;
    self.marketValue = 0;
    self.modifiedMarketValue = 0;
    self.modifiedLoanRatio = 0;
    self.buyTradeValue = 0;
    self.sellTradeValue = 0;
    self.privilleges = @"";
    self.orderPower = 0;
    self.automaticShortsell = 0;
    self.userType = @"";
  }
  return self;
}
static BuyingPower* defaultBuyingPowerInstance = nil;
+ (void) initialize {
  if (self == [BuyingPower class]) {
    defaultBuyingPowerInstance = [[BuyingPower alloc] init];
  }
}
+ (BuyingPower*) defaultInstance {
  return defaultBuyingPowerInstance;
}
- (BuyingPower*) defaultInstance {
  return defaultBuyingPowerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBuyingPower) {
    [output writeDouble:1 value:self.buyingPower];
  }
  if (self.hasOutstandingBov) {
    [output writeDouble:2 value:self.outstandingBov];
  }
  if (self.hasRiskControl) {
    [output writeString:3 value:self.riskControl];
  }
  if (self.hasLoanBalance) {
    [output writeDouble:4 value:self.loanBalance];
  }
  if (self.hasClientRating) {
    [output writeString:5 value:self.clientRating];
  }
  if (self.hasClientTypeCode) {
    [output writeInt32:6 value:self.clientTypeCode];
  }
  if (self.hasTradingLimit) {
    [output writeDouble:7 value:self.tradingLimit];
  }
  if (self.hasLoanRatio) {
    [output writeDouble:8 value:self.loanRatio];
  }
  if (self.hasMarketValue) {
    [output writeDouble:9 value:self.marketValue];
  }
  if (self.hasModifiedMarketValue) {
    [output writeDouble:10 value:self.modifiedMarketValue];
  }
  if (self.hasModifiedLoanRatio) {
    [output writeDouble:11 value:self.modifiedLoanRatio];
  }
  if (self.hasBuyTradeValue) {
    [output writeDouble:12 value:self.buyTradeValue];
  }
  if (self.hasSellTradeValue) {
    [output writeDouble:13 value:self.sellTradeValue];
  }
  if (self.hasPrivilleges) {
    [output writeString:14 value:self.privilleges];
  }
  if (self.hasOrderPower) {
    [output writeDouble:15 value:self.orderPower];
  }
  if (self.hasAutomaticShortsell) {
    [output writeInt32:16 value:self.automaticShortsell];
  }
  if (self.hasUserType) {
    [output writeString:17 value:self.userType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBuyingPower) {
    size += computeDoubleSize(1, self.buyingPower);
  }
  if (self.hasOutstandingBov) {
    size += computeDoubleSize(2, self.outstandingBov);
  }
  if (self.hasRiskControl) {
    size += computeStringSize(3, self.riskControl);
  }
  if (self.hasLoanBalance) {
    size += computeDoubleSize(4, self.loanBalance);
  }
  if (self.hasClientRating) {
    size += computeStringSize(5, self.clientRating);
  }
  if (self.hasClientTypeCode) {
    size += computeInt32Size(6, self.clientTypeCode);
  }
  if (self.hasTradingLimit) {
    size += computeDoubleSize(7, self.tradingLimit);
  }
  if (self.hasLoanRatio) {
    size += computeDoubleSize(8, self.loanRatio);
  }
  if (self.hasMarketValue) {
    size += computeDoubleSize(9, self.marketValue);
  }
  if (self.hasModifiedMarketValue) {
    size += computeDoubleSize(10, self.modifiedMarketValue);
  }
  if (self.hasModifiedLoanRatio) {
    size += computeDoubleSize(11, self.modifiedLoanRatio);
  }
  if (self.hasBuyTradeValue) {
    size += computeDoubleSize(12, self.buyTradeValue);
  }
  if (self.hasSellTradeValue) {
    size += computeDoubleSize(13, self.sellTradeValue);
  }
  if (self.hasPrivilleges) {
    size += computeStringSize(14, self.privilleges);
  }
  if (self.hasOrderPower) {
    size += computeDoubleSize(15, self.orderPower);
  }
  if (self.hasAutomaticShortsell) {
    size += computeInt32Size(16, self.automaticShortsell);
  }
  if (self.hasUserType) {
    size += computeStringSize(17, self.userType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BuyingPower*) parseFromData:(NSData*) data {
  return (BuyingPower*)[[[BuyingPower builder] mergeFromData:data] build];
}
+ (BuyingPower*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BuyingPower*)[[[BuyingPower builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BuyingPower*) parseFromInputStream:(NSInputStream*) input {
  return (BuyingPower*)[[[BuyingPower builder] mergeFromInputStream:input] build];
}
+ (BuyingPower*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BuyingPower*)[[[BuyingPower builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BuyingPower*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BuyingPower*)[[[BuyingPower builder] mergeFromCodedInputStream:input] build];
}
+ (BuyingPower*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BuyingPower*)[[[BuyingPower builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BuyingPower_Builder*) builder {
  return [[BuyingPower_Builder alloc] init];
}
+ (BuyingPower_Builder*) builderWithPrototype:(BuyingPower*) prototype {
  return [[BuyingPower builder] mergeFrom:prototype];
}
- (BuyingPower_Builder*) builder {
  return [BuyingPower builder];
}
- (BuyingPower_Builder*) toBuilder {
  return [BuyingPower builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasBuyingPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyingPower", [NSNumber numberWithDouble:self.buyingPower]];
  }
  if (self.hasOutstandingBov) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outstandingBov", [NSNumber numberWithDouble:self.outstandingBov]];
  }
  if (self.hasRiskControl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"riskControl", self.riskControl];
  }
  if (self.hasLoanBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loanBalance", [NSNumber numberWithDouble:self.loanBalance]];
  }
  if (self.hasClientRating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientRating", self.clientRating];
  }
  if (self.hasClientTypeCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientTypeCode", [NSNumber numberWithInt:self.clientTypeCode]];
  }
  if (self.hasTradingLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradingLimit", [NSNumber numberWithDouble:self.tradingLimit]];
  }
  if (self.hasLoanRatio) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loanRatio", [NSNumber numberWithDouble:self.loanRatio]];
  }
  if (self.hasMarketValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketValue", [NSNumber numberWithDouble:self.marketValue]];
  }
  if (self.hasModifiedMarketValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedMarketValue", [NSNumber numberWithDouble:self.modifiedMarketValue]];
  }
  if (self.hasModifiedLoanRatio) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedLoanRatio", [NSNumber numberWithDouble:self.modifiedLoanRatio]];
  }
  if (self.hasBuyTradeValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buyTradeValue", [NSNumber numberWithDouble:self.buyTradeValue]];
  }
  if (self.hasSellTradeValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellTradeValue", [NSNumber numberWithDouble:self.sellTradeValue]];
  }
  if (self.hasPrivilleges) {
    [output appendFormat:@"%@%@: %@\n", indent, @"privilleges", self.privilleges];
  }
  if (self.hasOrderPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderPower", [NSNumber numberWithDouble:self.orderPower]];
  }
  if (self.hasAutomaticShortsell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"automaticShortsell", [NSNumber numberWithInt:self.automaticShortsell]];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", self.userType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BuyingPower class]]) {
    return NO;
  }
  BuyingPower *otherMessage = other;
  return
      self.hasBuyingPower == otherMessage.hasBuyingPower &&
      (!self.hasBuyingPower || self.buyingPower == otherMessage.buyingPower) &&
      self.hasOutstandingBov == otherMessage.hasOutstandingBov &&
      (!self.hasOutstandingBov || self.outstandingBov == otherMessage.outstandingBov) &&
      self.hasRiskControl == otherMessage.hasRiskControl &&
      (!self.hasRiskControl || [self.riskControl isEqual:otherMessage.riskControl]) &&
      self.hasLoanBalance == otherMessage.hasLoanBalance &&
      (!self.hasLoanBalance || self.loanBalance == otherMessage.loanBalance) &&
      self.hasClientRating == otherMessage.hasClientRating &&
      (!self.hasClientRating || [self.clientRating isEqual:otherMessage.clientRating]) &&
      self.hasClientTypeCode == otherMessage.hasClientTypeCode &&
      (!self.hasClientTypeCode || self.clientTypeCode == otherMessage.clientTypeCode) &&
      self.hasTradingLimit == otherMessage.hasTradingLimit &&
      (!self.hasTradingLimit || self.tradingLimit == otherMessage.tradingLimit) &&
      self.hasLoanRatio == otherMessage.hasLoanRatio &&
      (!self.hasLoanRatio || self.loanRatio == otherMessage.loanRatio) &&
      self.hasMarketValue == otherMessage.hasMarketValue &&
      (!self.hasMarketValue || self.marketValue == otherMessage.marketValue) &&
      self.hasModifiedMarketValue == otherMessage.hasModifiedMarketValue &&
      (!self.hasModifiedMarketValue || self.modifiedMarketValue == otherMessage.modifiedMarketValue) &&
      self.hasModifiedLoanRatio == otherMessage.hasModifiedLoanRatio &&
      (!self.hasModifiedLoanRatio || self.modifiedLoanRatio == otherMessage.modifiedLoanRatio) &&
      self.hasBuyTradeValue == otherMessage.hasBuyTradeValue &&
      (!self.hasBuyTradeValue || self.buyTradeValue == otherMessage.buyTradeValue) &&
      self.hasSellTradeValue == otherMessage.hasSellTradeValue &&
      (!self.hasSellTradeValue || self.sellTradeValue == otherMessage.sellTradeValue) &&
      self.hasPrivilleges == otherMessage.hasPrivilleges &&
      (!self.hasPrivilleges || [self.privilleges isEqual:otherMessage.privilleges]) &&
      self.hasOrderPower == otherMessage.hasOrderPower &&
      (!self.hasOrderPower || self.orderPower == otherMessage.orderPower) &&
      self.hasAutomaticShortsell == otherMessage.hasAutomaticShortsell &&
      (!self.hasAutomaticShortsell || self.automaticShortsell == otherMessage.automaticShortsell) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || [self.userType isEqual:otherMessage.userType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasBuyingPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.buyingPower] hash];
  }
  if (self.hasOutstandingBov) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.outstandingBov] hash];
  }
  if (self.hasRiskControl) {
    hashCode = hashCode * 31 + [self.riskControl hash];
  }
  if (self.hasLoanBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.loanBalance] hash];
  }
  if (self.hasClientRating) {
    hashCode = hashCode * 31 + [self.clientRating hash];
  }
  if (self.hasClientTypeCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientTypeCode] hash];
  }
  if (self.hasTradingLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tradingLimit] hash];
  }
  if (self.hasLoanRatio) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.loanRatio] hash];
  }
  if (self.hasMarketValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.marketValue] hash];
  }
  if (self.hasModifiedMarketValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.modifiedMarketValue] hash];
  }
  if (self.hasModifiedLoanRatio) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.modifiedLoanRatio] hash];
  }
  if (self.hasBuyTradeValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.buyTradeValue] hash];
  }
  if (self.hasSellTradeValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.sellTradeValue] hash];
  }
  if (self.hasPrivilleges) {
    hashCode = hashCode * 31 + [self.privilleges hash];
  }
  if (self.hasOrderPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.orderPower] hash];
  }
  if (self.hasAutomaticShortsell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.automaticShortsell] hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [self.userType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BuyingPower_Builder()
@property (strong) BuyingPower* result;
@end

@implementation BuyingPower_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BuyingPower alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BuyingPower_Builder*) clear {
  self.result = [[BuyingPower alloc] init];
  return self;
}
- (BuyingPower_Builder*) clone {
  return [BuyingPower builderWithPrototype:result];
}
- (BuyingPower*) defaultInstance {
  return [BuyingPower defaultInstance];
}
- (BuyingPower*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BuyingPower*) buildPartial {
  BuyingPower* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BuyingPower_Builder*) mergeFrom:(BuyingPower*) other {
  if (other == [BuyingPower defaultInstance]) {
    return self;
  }
  if (other.hasBuyingPower) {
    [self setBuyingPower:other.buyingPower];
  }
  if (other.hasOutstandingBov) {
    [self setOutstandingBov:other.outstandingBov];
  }
  if (other.hasRiskControl) {
    [self setRiskControl:other.riskControl];
  }
  if (other.hasLoanBalance) {
    [self setLoanBalance:other.loanBalance];
  }
  if (other.hasClientRating) {
    [self setClientRating:other.clientRating];
  }
  if (other.hasClientTypeCode) {
    [self setClientTypeCode:other.clientTypeCode];
  }
  if (other.hasTradingLimit) {
    [self setTradingLimit:other.tradingLimit];
  }
  if (other.hasLoanRatio) {
    [self setLoanRatio:other.loanRatio];
  }
  if (other.hasMarketValue) {
    [self setMarketValue:other.marketValue];
  }
  if (other.hasModifiedMarketValue) {
    [self setModifiedMarketValue:other.modifiedMarketValue];
  }
  if (other.hasModifiedLoanRatio) {
    [self setModifiedLoanRatio:other.modifiedLoanRatio];
  }
  if (other.hasBuyTradeValue) {
    [self setBuyTradeValue:other.buyTradeValue];
  }
  if (other.hasSellTradeValue) {
    [self setSellTradeValue:other.sellTradeValue];
  }
  if (other.hasPrivilleges) {
    [self setPrivilleges:other.privilleges];
  }
  if (other.hasOrderPower) {
    [self setOrderPower:other.orderPower];
  }
  if (other.hasAutomaticShortsell) {
    [self setAutomaticShortsell:other.automaticShortsell];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BuyingPower_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BuyingPower_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setBuyingPower:[input readDouble]];
        break;
      }
      case 17: {
        [self setOutstandingBov:[input readDouble]];
        break;
      }
      case 26: {
        [self setRiskControl:[input readString]];
        break;
      }
      case 33: {
        [self setLoanBalance:[input readDouble]];
        break;
      }
      case 42: {
        [self setClientRating:[input readString]];
        break;
      }
      case 48: {
        [self setClientTypeCode:[input readInt32]];
        break;
      }
      case 57: {
        [self setTradingLimit:[input readDouble]];
        break;
      }
      case 65: {
        [self setLoanRatio:[input readDouble]];
        break;
      }
      case 73: {
        [self setMarketValue:[input readDouble]];
        break;
      }
      case 81: {
        [self setModifiedMarketValue:[input readDouble]];
        break;
      }
      case 89: {
        [self setModifiedLoanRatio:[input readDouble]];
        break;
      }
      case 97: {
        [self setBuyTradeValue:[input readDouble]];
        break;
      }
      case 105: {
        [self setSellTradeValue:[input readDouble]];
        break;
      }
      case 114: {
        [self setPrivilleges:[input readString]];
        break;
      }
      case 121: {
        [self setOrderPower:[input readDouble]];
        break;
      }
      case 128: {
        [self setAutomaticShortsell:[input readInt32]];
        break;
      }
      case 138: {
        [self setUserType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBuyingPower {
  return result.hasBuyingPower;
}
- (Float64) buyingPower {
  return result.buyingPower;
}
- (BuyingPower_Builder*) setBuyingPower:(Float64) value {
  result.hasBuyingPower = YES;
  result.buyingPower = value;
  return self;
}
- (BuyingPower_Builder*) clearBuyingPower {
  result.hasBuyingPower = NO;
  result.buyingPower = 0;
  return self;
}
- (BOOL) hasOutstandingBov {
  return result.hasOutstandingBov;
}
- (Float64) outstandingBov {
  return result.outstandingBov;
}
- (BuyingPower_Builder*) setOutstandingBov:(Float64) value {
  result.hasOutstandingBov = YES;
  result.outstandingBov = value;
  return self;
}
- (BuyingPower_Builder*) clearOutstandingBov {
  result.hasOutstandingBov = NO;
  result.outstandingBov = 0;
  return self;
}
- (BOOL) hasRiskControl {
  return result.hasRiskControl;
}
- (NSString*) riskControl {
  return result.riskControl;
}
- (BuyingPower_Builder*) setRiskControl:(NSString*) value {
  result.hasRiskControl = YES;
  result.riskControl = value;
  return self;
}
- (BuyingPower_Builder*) clearRiskControl {
  result.hasRiskControl = NO;
  result.riskControl = @"";
  return self;
}
- (BOOL) hasLoanBalance {
  return result.hasLoanBalance;
}
- (Float64) loanBalance {
  return result.loanBalance;
}
- (BuyingPower_Builder*) setLoanBalance:(Float64) value {
  result.hasLoanBalance = YES;
  result.loanBalance = value;
  return self;
}
- (BuyingPower_Builder*) clearLoanBalance {
  result.hasLoanBalance = NO;
  result.loanBalance = 0;
  return self;
}
- (BOOL) hasClientRating {
  return result.hasClientRating;
}
- (NSString*) clientRating {
  return result.clientRating;
}
- (BuyingPower_Builder*) setClientRating:(NSString*) value {
  result.hasClientRating = YES;
  result.clientRating = value;
  return self;
}
- (BuyingPower_Builder*) clearClientRating {
  result.hasClientRating = NO;
  result.clientRating = @"";
  return self;
}
- (BOOL) hasClientTypeCode {
  return result.hasClientTypeCode;
}
- (int32_t) clientTypeCode {
  return result.clientTypeCode;
}
- (BuyingPower_Builder*) setClientTypeCode:(int32_t) value {
  result.hasClientTypeCode = YES;
  result.clientTypeCode = value;
  return self;
}
- (BuyingPower_Builder*) clearClientTypeCode {
  result.hasClientTypeCode = NO;
  result.clientTypeCode = 0;
  return self;
}
- (BOOL) hasTradingLimit {
  return result.hasTradingLimit;
}
- (Float64) tradingLimit {
  return result.tradingLimit;
}
- (BuyingPower_Builder*) setTradingLimit:(Float64) value {
  result.hasTradingLimit = YES;
  result.tradingLimit = value;
  return self;
}
- (BuyingPower_Builder*) clearTradingLimit {
  result.hasTradingLimit = NO;
  result.tradingLimit = 0;
  return self;
}
- (BOOL) hasLoanRatio {
  return result.hasLoanRatio;
}
- (Float64) loanRatio {
  return result.loanRatio;
}
- (BuyingPower_Builder*) setLoanRatio:(Float64) value {
  result.hasLoanRatio = YES;
  result.loanRatio = value;
  return self;
}
- (BuyingPower_Builder*) clearLoanRatio {
  result.hasLoanRatio = NO;
  result.loanRatio = 0;
  return self;
}
- (BOOL) hasMarketValue {
  return result.hasMarketValue;
}
- (Float64) marketValue {
  return result.marketValue;
}
- (BuyingPower_Builder*) setMarketValue:(Float64) value {
  result.hasMarketValue = YES;
  result.marketValue = value;
  return self;
}
- (BuyingPower_Builder*) clearMarketValue {
  result.hasMarketValue = NO;
  result.marketValue = 0;
  return self;
}
- (BOOL) hasModifiedMarketValue {
  return result.hasModifiedMarketValue;
}
- (Float64) modifiedMarketValue {
  return result.modifiedMarketValue;
}
- (BuyingPower_Builder*) setModifiedMarketValue:(Float64) value {
  result.hasModifiedMarketValue = YES;
  result.modifiedMarketValue = value;
  return self;
}
- (BuyingPower_Builder*) clearModifiedMarketValue {
  result.hasModifiedMarketValue = NO;
  result.modifiedMarketValue = 0;
  return self;
}
- (BOOL) hasModifiedLoanRatio {
  return result.hasModifiedLoanRatio;
}
- (Float64) modifiedLoanRatio {
  return result.modifiedLoanRatio;
}
- (BuyingPower_Builder*) setModifiedLoanRatio:(Float64) value {
  result.hasModifiedLoanRatio = YES;
  result.modifiedLoanRatio = value;
  return self;
}
- (BuyingPower_Builder*) clearModifiedLoanRatio {
  result.hasModifiedLoanRatio = NO;
  result.modifiedLoanRatio = 0;
  return self;
}
- (BOOL) hasBuyTradeValue {
  return result.hasBuyTradeValue;
}
- (Float64) buyTradeValue {
  return result.buyTradeValue;
}
- (BuyingPower_Builder*) setBuyTradeValue:(Float64) value {
  result.hasBuyTradeValue = YES;
  result.buyTradeValue = value;
  return self;
}
- (BuyingPower_Builder*) clearBuyTradeValue {
  result.hasBuyTradeValue = NO;
  result.buyTradeValue = 0;
  return self;
}
- (BOOL) hasSellTradeValue {
  return result.hasSellTradeValue;
}
- (Float64) sellTradeValue {
  return result.sellTradeValue;
}
- (BuyingPower_Builder*) setSellTradeValue:(Float64) value {
  result.hasSellTradeValue = YES;
  result.sellTradeValue = value;
  return self;
}
- (BuyingPower_Builder*) clearSellTradeValue {
  result.hasSellTradeValue = NO;
  result.sellTradeValue = 0;
  return self;
}
- (BOOL) hasPrivilleges {
  return result.hasPrivilleges;
}
- (NSString*) privilleges {
  return result.privilleges;
}
- (BuyingPower_Builder*) setPrivilleges:(NSString*) value {
  result.hasPrivilleges = YES;
  result.privilleges = value;
  return self;
}
- (BuyingPower_Builder*) clearPrivilleges {
  result.hasPrivilleges = NO;
  result.privilleges = @"";
  return self;
}
- (BOOL) hasOrderPower {
  return result.hasOrderPower;
}
- (Float64) orderPower {
  return result.orderPower;
}
- (BuyingPower_Builder*) setOrderPower:(Float64) value {
  result.hasOrderPower = YES;
  result.orderPower = value;
  return self;
}
- (BuyingPower_Builder*) clearOrderPower {
  result.hasOrderPower = NO;
  result.orderPower = 0;
  return self;
}
- (BOOL) hasAutomaticShortsell {
  return result.hasAutomaticShortsell;
}
- (int32_t) automaticShortsell {
  return result.automaticShortsell;
}
- (BuyingPower_Builder*) setAutomaticShortsell:(int32_t) value {
  result.hasAutomaticShortsell = YES;
  result.automaticShortsell = value;
  return self;
}
- (BuyingPower_Builder*) clearAutomaticShortsell {
  result.hasAutomaticShortsell = NO;
  result.automaticShortsell = 0;
  return self;
}
- (BOOL) hasUserType {
  return result.hasUserType;
}
- (NSString*) userType {
  return result.userType;
}
- (BuyingPower_Builder*) setUserType:(NSString*) value {
  result.hasUserType = YES;
  result.userType = value;
  return self;
}
- (BuyingPower_Builder*) clearUserType {
  result.hasUserType = NO;
  result.userType = @"";
  return self;
}
@end

@interface MarginAlert ()
@property (strong) NSString* code;
@property (strong) NSString* name;
@property int32_t ratio;
@property int32_t days;
@property (strong) NSString* status;
@end

@implementation MarginAlert

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasRatio {
  return !!hasRatio_;
}
- (void) setHasRatio:(BOOL) value {
  hasRatio_ = !!value;
}
@synthesize ratio;
- (BOOL) hasDays {
  return !!hasDays_;
}
- (void) setHasDays:(BOOL) value {
  hasDays_ = !!value;
}
@synthesize days;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.name = @"";
    self.ratio = 0;
    self.days = 0;
    self.status = @"";
  }
  return self;
}
static MarginAlert* defaultMarginAlertInstance = nil;
+ (void) initialize {
  if (self == [MarginAlert class]) {
    defaultMarginAlertInstance = [[MarginAlert alloc] init];
  }
}
+ (MarginAlert*) defaultInstance {
  return defaultMarginAlertInstance;
}
- (MarginAlert*) defaultInstance {
  return defaultMarginAlertInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasRatio) {
    [output writeInt32:2 value:self.ratio];
  }
  if (self.hasDays) {
    [output writeInt32:3 value:self.days];
  }
  if (self.hasStatus) {
    [output writeString:4 value:self.status];
  }
  if (self.hasCode) {
    [output writeString:5 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasRatio) {
    size += computeInt32Size(2, self.ratio);
  }
  if (self.hasDays) {
    size += computeInt32Size(3, self.days);
  }
  if (self.hasStatus) {
    size += computeStringSize(4, self.status);
  }
  if (self.hasCode) {
    size += computeStringSize(5, self.code);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MarginAlert*) parseFromData:(NSData*) data {
  return (MarginAlert*)[[[MarginAlert builder] mergeFromData:data] build];
}
+ (MarginAlert*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarginAlert*)[[[MarginAlert builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MarginAlert*) parseFromInputStream:(NSInputStream*) input {
  return (MarginAlert*)[[[MarginAlert builder] mergeFromInputStream:input] build];
}
+ (MarginAlert*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarginAlert*)[[[MarginAlert builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarginAlert*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MarginAlert*)[[[MarginAlert builder] mergeFromCodedInputStream:input] build];
}
+ (MarginAlert*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarginAlert*)[[[MarginAlert builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarginAlert_Builder*) builder {
  return [[MarginAlert_Builder alloc] init];
}
+ (MarginAlert_Builder*) builderWithPrototype:(MarginAlert*) prototype {
  return [[MarginAlert builder] mergeFrom:prototype];
}
- (MarginAlert_Builder*) builder {
  return [MarginAlert builder];
}
- (MarginAlert_Builder*) toBuilder {
  return [MarginAlert builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasRatio) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratio", [NSNumber numberWithInt:self.ratio]];
  }
  if (self.hasDays) {
    [output appendFormat:@"%@%@: %@\n", indent, @"days", [NSNumber numberWithInt:self.days]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MarginAlert class]]) {
    return NO;
  }
  MarginAlert *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasRatio == otherMessage.hasRatio &&
      (!self.hasRatio || self.ratio == otherMessage.ratio) &&
      self.hasDays == otherMessage.hasDays &&
      (!self.hasDays || self.days == otherMessage.days) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasRatio) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.ratio] hash];
  }
  if (self.hasDays) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.days] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MarginAlert_Builder()
@property (strong) MarginAlert* result;
@end

@implementation MarginAlert_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MarginAlert alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MarginAlert_Builder*) clear {
  self.result = [[MarginAlert alloc] init];
  return self;
}
- (MarginAlert_Builder*) clone {
  return [MarginAlert builderWithPrototype:result];
}
- (MarginAlert*) defaultInstance {
  return [MarginAlert defaultInstance];
}
- (MarginAlert*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MarginAlert*) buildPartial {
  MarginAlert* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MarginAlert_Builder*) mergeFrom:(MarginAlert*) other {
  if (other == [MarginAlert defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasRatio) {
    [self setRatio:other.ratio];
  }
  if (other.hasDays) {
    [self setDays:other.days];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MarginAlert_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MarginAlert_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setRatio:[input readInt32]];
        break;
      }
      case 24: {
        [self setDays:[input readInt32]];
        break;
      }
      case 34: {
        [self setStatus:[input readString]];
        break;
      }
      case 42: {
        [self setCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (MarginAlert_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (MarginAlert_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MarginAlert_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MarginAlert_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasRatio {
  return result.hasRatio;
}
- (int32_t) ratio {
  return result.ratio;
}
- (MarginAlert_Builder*) setRatio:(int32_t) value {
  result.hasRatio = YES;
  result.ratio = value;
  return self;
}
- (MarginAlert_Builder*) clearRatio {
  result.hasRatio = NO;
  result.ratio = 0;
  return self;
}
- (BOOL) hasDays {
  return result.hasDays;
}
- (int32_t) days {
  return result.days;
}
- (MarginAlert_Builder*) setDays:(int32_t) value {
  result.hasDays = YES;
  result.days = value;
  return self;
}
- (MarginAlert_Builder*) clearDays {
  result.hasDays = NO;
  result.days = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (NSString*) status {
  return result.status;
}
- (MarginAlert_Builder*) setStatus:(NSString*) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (MarginAlert_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = @"";
  return self;
}
@end

@interface CashMutation ()
@property (strong) NSString* name;
@property (strong) NSString* address;
@property (strong) NSString* ciptadanaAccount;
@property (strong) NSString* bankAccount;
@property (strong) NSString* bankName;
@property (strong) NSString* bankBranch;
@property (strong) NSString* bankNo;
@property (strong) NSString* sendcashStatus;
@end

@implementation CashMutation

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasCiptadanaAccount {
  return !!hasCiptadanaAccount_;
}
- (void) setHasCiptadanaAccount:(BOOL) value {
  hasCiptadanaAccount_ = !!value;
}
@synthesize ciptadanaAccount;
- (BOOL) hasBankAccount {
  return !!hasBankAccount_;
}
- (void) setHasBankAccount:(BOOL) value {
  hasBankAccount_ = !!value;
}
@synthesize bankAccount;
- (BOOL) hasBankName {
  return !!hasBankName_;
}
- (void) setHasBankName:(BOOL) value {
  hasBankName_ = !!value;
}
@synthesize bankName;
- (BOOL) hasBankBranch {
  return !!hasBankBranch_;
}
- (void) setHasBankBranch:(BOOL) value {
  hasBankBranch_ = !!value;
}
@synthesize bankBranch;
- (BOOL) hasBankNo {
  return !!hasBankNo_;
}
- (void) setHasBankNo:(BOOL) value {
  hasBankNo_ = !!value;
}
@synthesize bankNo;
- (BOOL) hasSendcashStatus {
  return !!hasSendcashStatus_;
}
- (void) setHasSendcashStatus:(BOOL) value {
  hasSendcashStatus_ = !!value;
}
@synthesize sendcashStatus;
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.address = @"";
    self.ciptadanaAccount = @"";
    self.bankAccount = @"";
    self.bankName = @"";
    self.bankBranch = @"";
    self.bankNo = @"";
    self.sendcashStatus = @"";
  }
  return self;
}
static CashMutation* defaultCashMutationInstance = nil;
+ (void) initialize {
  if (self == [CashMutation class]) {
    defaultCashMutationInstance = [[CashMutation alloc] init];
  }
}
+ (CashMutation*) defaultInstance {
  return defaultCashMutationInstance;
}
- (CashMutation*) defaultInstance {
  return defaultCashMutationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAddress) {
    [output writeString:2 value:self.address];
  }
  if (self.hasCiptadanaAccount) {
    [output writeString:3 value:self.ciptadanaAccount];
  }
  if (self.hasBankAccount) {
    [output writeString:4 value:self.bankAccount];
  }
  if (self.hasBankName) {
    [output writeString:5 value:self.bankName];
  }
  if (self.hasBankBranch) {
    [output writeString:6 value:self.bankBranch];
  }
  if (self.hasBankNo) {
    [output writeString:7 value:self.bankNo];
  }
  if (self.hasSendcashStatus) {
    [output writeString:8 value:self.sendcashStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasAddress) {
    size += computeStringSize(2, self.address);
  }
  if (self.hasCiptadanaAccount) {
    size += computeStringSize(3, self.ciptadanaAccount);
  }
  if (self.hasBankAccount) {
    size += computeStringSize(4, self.bankAccount);
  }
  if (self.hasBankName) {
    size += computeStringSize(5, self.bankName);
  }
  if (self.hasBankBranch) {
    size += computeStringSize(6, self.bankBranch);
  }
  if (self.hasBankNo) {
    size += computeStringSize(7, self.bankNo);
  }
  if (self.hasSendcashStatus) {
    size += computeStringSize(8, self.sendcashStatus);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CashMutation*) parseFromData:(NSData*) data {
  return (CashMutation*)[[[CashMutation builder] mergeFromData:data] build];
}
+ (CashMutation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashMutation*)[[[CashMutation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CashMutation*) parseFromInputStream:(NSInputStream*) input {
  return (CashMutation*)[[[CashMutation builder] mergeFromInputStream:input] build];
}
+ (CashMutation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashMutation*)[[[CashMutation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CashMutation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CashMutation*)[[[CashMutation builder] mergeFromCodedInputStream:input] build];
}
+ (CashMutation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashMutation*)[[[CashMutation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CashMutation_Builder*) builder {
  return [[CashMutation_Builder alloc] init];
}
+ (CashMutation_Builder*) builderWithPrototype:(CashMutation*) prototype {
  return [[CashMutation builder] mergeFrom:prototype];
}
- (CashMutation_Builder*) builder {
  return [CashMutation builder];
}
- (CashMutation_Builder*) toBuilder {
  return [CashMutation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasCiptadanaAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciptadanaAccount", self.ciptadanaAccount];
  }
  if (self.hasBankAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAccount", self.bankAccount];
  }
  if (self.hasBankName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankName", self.bankName];
  }
  if (self.hasBankBranch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankBranch", self.bankBranch];
  }
  if (self.hasBankNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankNo", self.bankNo];
  }
  if (self.hasSendcashStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendcashStatus", self.sendcashStatus];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CashMutation class]]) {
    return NO;
  }
  CashMutation *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasCiptadanaAccount == otherMessage.hasCiptadanaAccount &&
      (!self.hasCiptadanaAccount || [self.ciptadanaAccount isEqual:otherMessage.ciptadanaAccount]) &&
      self.hasBankAccount == otherMessage.hasBankAccount &&
      (!self.hasBankAccount || [self.bankAccount isEqual:otherMessage.bankAccount]) &&
      self.hasBankName == otherMessage.hasBankName &&
      (!self.hasBankName || [self.bankName isEqual:otherMessage.bankName]) &&
      self.hasBankBranch == otherMessage.hasBankBranch &&
      (!self.hasBankBranch || [self.bankBranch isEqual:otherMessage.bankBranch]) &&
      self.hasBankNo == otherMessage.hasBankNo &&
      (!self.hasBankNo || [self.bankNo isEqual:otherMessage.bankNo]) &&
      self.hasSendcashStatus == otherMessage.hasSendcashStatus &&
      (!self.hasSendcashStatus || [self.sendcashStatus isEqual:otherMessage.sendcashStatus]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasCiptadanaAccount) {
    hashCode = hashCode * 31 + [self.ciptadanaAccount hash];
  }
  if (self.hasBankAccount) {
    hashCode = hashCode * 31 + [self.bankAccount hash];
  }
  if (self.hasBankName) {
    hashCode = hashCode * 31 + [self.bankName hash];
  }
  if (self.hasBankBranch) {
    hashCode = hashCode * 31 + [self.bankBranch hash];
  }
  if (self.hasBankNo) {
    hashCode = hashCode * 31 + [self.bankNo hash];
  }
  if (self.hasSendcashStatus) {
    hashCode = hashCode * 31 + [self.sendcashStatus hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CashMutation_Builder()
@property (strong) CashMutation* result;
@end

@implementation CashMutation_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CashMutation alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CashMutation_Builder*) clear {
  self.result = [[CashMutation alloc] init];
  return self;
}
- (CashMutation_Builder*) clone {
  return [CashMutation builderWithPrototype:result];
}
- (CashMutation*) defaultInstance {
  return [CashMutation defaultInstance];
}
- (CashMutation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CashMutation*) buildPartial {
  CashMutation* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CashMutation_Builder*) mergeFrom:(CashMutation*) other {
  if (other == [CashMutation defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasCiptadanaAccount) {
    [self setCiptadanaAccount:other.ciptadanaAccount];
  }
  if (other.hasBankAccount) {
    [self setBankAccount:other.bankAccount];
  }
  if (other.hasBankName) {
    [self setBankName:other.bankName];
  }
  if (other.hasBankBranch) {
    [self setBankBranch:other.bankBranch];
  }
  if (other.hasBankNo) {
    [self setBankNo:other.bankNo];
  }
  if (other.hasSendcashStatus) {
    [self setSendcashStatus:other.sendcashStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CashMutation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CashMutation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setAddress:[input readString]];
        break;
      }
      case 26: {
        [self setCiptadanaAccount:[input readString]];
        break;
      }
      case 34: {
        [self setBankAccount:[input readString]];
        break;
      }
      case 42: {
        [self setBankName:[input readString]];
        break;
      }
      case 50: {
        [self setBankBranch:[input readString]];
        break;
      }
      case 58: {
        [self setBankNo:[input readString]];
        break;
      }
      case 66: {
        [self setSendcashStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CashMutation_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CashMutation_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSString*) address {
  return result.address;
}
- (CashMutation_Builder*) setAddress:(NSString*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (CashMutation_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = @"";
  return self;
}
- (BOOL) hasCiptadanaAccount {
  return result.hasCiptadanaAccount;
}
- (NSString*) ciptadanaAccount {
  return result.ciptadanaAccount;
}
- (CashMutation_Builder*) setCiptadanaAccount:(NSString*) value {
  result.hasCiptadanaAccount = YES;
  result.ciptadanaAccount = value;
  return self;
}
- (CashMutation_Builder*) clearCiptadanaAccount {
  result.hasCiptadanaAccount = NO;
  result.ciptadanaAccount = @"";
  return self;
}
- (BOOL) hasBankAccount {
  return result.hasBankAccount;
}
- (NSString*) bankAccount {
  return result.bankAccount;
}
- (CashMutation_Builder*) setBankAccount:(NSString*) value {
  result.hasBankAccount = YES;
  result.bankAccount = value;
  return self;
}
- (CashMutation_Builder*) clearBankAccount {
  result.hasBankAccount = NO;
  result.bankAccount = @"";
  return self;
}
- (BOOL) hasBankName {
  return result.hasBankName;
}
- (NSString*) bankName {
  return result.bankName;
}
- (CashMutation_Builder*) setBankName:(NSString*) value {
  result.hasBankName = YES;
  result.bankName = value;
  return self;
}
- (CashMutation_Builder*) clearBankName {
  result.hasBankName = NO;
  result.bankName = @"";
  return self;
}
- (BOOL) hasBankBranch {
  return result.hasBankBranch;
}
- (NSString*) bankBranch {
  return result.bankBranch;
}
- (CashMutation_Builder*) setBankBranch:(NSString*) value {
  result.hasBankBranch = YES;
  result.bankBranch = value;
  return self;
}
- (CashMutation_Builder*) clearBankBranch {
  result.hasBankBranch = NO;
  result.bankBranch = @"";
  return self;
}
- (BOOL) hasBankNo {
  return result.hasBankNo;
}
- (NSString*) bankNo {
  return result.bankNo;
}
- (CashMutation_Builder*) setBankNo:(NSString*) value {
  result.hasBankNo = YES;
  result.bankNo = value;
  return self;
}
- (CashMutation_Builder*) clearBankNo {
  result.hasBankNo = NO;
  result.bankNo = @"";
  return self;
}
- (BOOL) hasSendcashStatus {
  return result.hasSendcashStatus;
}
- (NSString*) sendcashStatus {
  return result.sendcashStatus;
}
- (CashMutation_Builder*) setSendcashStatus:(NSString*) value {
  result.hasSendcashStatus = YES;
  result.sendcashStatus = value;
  return self;
}
- (CashMutation_Builder*) clearSendcashStatus {
  result.hasSendcashStatus = NO;
  result.sendcashStatus = @"";
  return self;
}
@end

@interface SubmitOrder ()
@property (strong) NSString* typeCode;
@property (strong) NSString* username;
@property (strong) NSString* userType;
@property (strong) NSString* appSource;
@property (strong) NSString* sendingTime;
@property (strong) NSString* account;
@property (strong) NSString* handInst;
@property (strong) NSString* securitycode;
@property (strong) NSString* board;
@property (strong) NSString* side;
@property (strong) NSString* orderQty;
@property (strong) NSString* price;
@property (strong) NSString* timeInForce;
@property (strong) NSString* expireDate;
@property (strong) NSString* complianceId;
@property (strong) NSString* clientcode;
@property (strong) NSString* settlementDate;
@property (strong) NSString* jatsId;
@property (strong) NSString* origClordid;
@property (strong) NSString* textNegoDeal;
@property (strong) NSString* origGtc;
@end

@implementation SubmitOrder

- (BOOL) hasTypeCode {
  return !!hasTypeCode_;
}
- (void) setHasTypeCode:(BOOL) value {
  hasTypeCode_ = !!value;
}
@synthesize typeCode;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) value {
  hasUserType_ = !!value;
}
@synthesize userType;
- (BOOL) hasAppSource {
  return !!hasAppSource_;
}
- (void) setHasAppSource:(BOOL) value {
  hasAppSource_ = !!value;
}
@synthesize appSource;
- (BOOL) hasSendingTime {
  return !!hasSendingTime_;
}
- (void) setHasSendingTime:(BOOL) value {
  hasSendingTime_ = !!value;
}
@synthesize sendingTime;
- (BOOL) hasAccount {
  return !!hasAccount_;
}
- (void) setHasAccount:(BOOL) value {
  hasAccount_ = !!value;
}
@synthesize account;
- (BOOL) hasHandInst {
  return !!hasHandInst_;
}
- (void) setHasHandInst:(BOOL) value {
  hasHandInst_ = !!value;
}
@synthesize handInst;
- (BOOL) hasSecuritycode {
  return !!hasSecuritycode_;
}
- (void) setHasSecuritycode:(BOOL) value {
  hasSecuritycode_ = !!value;
}
@synthesize securitycode;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value {
  hasBoard_ = !!value;
}
@synthesize board;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasOrderQty {
  return !!hasOrderQty_;
}
- (void) setHasOrderQty:(BOOL) value {
  hasOrderQty_ = !!value;
}
@synthesize orderQty;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasTimeInForce {
  return !!hasTimeInForce_;
}
- (void) setHasTimeInForce:(BOOL) value {
  hasTimeInForce_ = !!value;
}
@synthesize timeInForce;
- (BOOL) hasExpireDate {
  return !!hasExpireDate_;
}
- (void) setHasExpireDate:(BOOL) value {
  hasExpireDate_ = !!value;
}
@synthesize expireDate;
- (BOOL) hasComplianceId {
  return !!hasComplianceId_;
}
- (void) setHasComplianceId:(BOOL) value {
  hasComplianceId_ = !!value;
}
@synthesize complianceId;
- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasSettlementDate {
  return !!hasSettlementDate_;
}
- (void) setHasSettlementDate:(BOOL) value {
  hasSettlementDate_ = !!value;
}
@synthesize settlementDate;
- (BOOL) hasJatsId {
  return !!hasJatsId_;
}
- (void) setHasJatsId:(BOOL) value {
  hasJatsId_ = !!value;
}
@synthesize jatsId;
- (BOOL) hasOrigClordid {
  return !!hasOrigClordid_;
}
- (void) setHasOrigClordid:(BOOL) value {
  hasOrigClordid_ = !!value;
}
@synthesize origClordid;
- (BOOL) hasTextNegoDeal {
  return !!hasTextNegoDeal_;
}
- (void) setHasTextNegoDeal:(BOOL) value {
  hasTextNegoDeal_ = !!value;
}
@synthesize textNegoDeal;
- (BOOL) hasOrigGtc {
  return !!hasOrigGtc_;
}
- (void) setHasOrigGtc:(BOOL) value {
  hasOrigGtc_ = !!value;
}
@synthesize origGtc;
- (id) init {
  if ((self = [super init])) {
    self.typeCode = @"";
    self.username = @"";
    self.userType = @"";
    self.appSource = @"";
    self.sendingTime = @"";
    self.account = @"";
    self.handInst = @"";
    self.securitycode = @"";
    self.board = @"";
    self.side = @"";
    self.orderQty = @"";
    self.price = @"";
    self.timeInForce = @"";
    self.expireDate = @"";
    self.complianceId = @"";
    self.clientcode = @"";
    self.settlementDate = @"";
    self.jatsId = @"";
    self.origClordid = @"";
    self.textNegoDeal = @"";
    self.origGtc = @"";
  }
  return self;
}
static SubmitOrder* defaultSubmitOrderInstance = nil;
+ (void) initialize {
  if (self == [SubmitOrder class]) {
    defaultSubmitOrderInstance = [[SubmitOrder alloc] init];
  }
}
+ (SubmitOrder*) defaultInstance {
  return defaultSubmitOrderInstance;
}
- (SubmitOrder*) defaultInstance {
  return defaultSubmitOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTypeCode) {
    [output writeString:1 value:self.typeCode];
  }
  if (self.hasUsername) {
    [output writeString:2 value:self.username];
  }
  if (self.hasUserType) {
    [output writeString:3 value:self.userType];
  }
  if (self.hasAppSource) {
    [output writeString:4 value:self.appSource];
  }
  if (self.hasSendingTime) {
    [output writeString:5 value:self.sendingTime];
  }
  if (self.hasAccount) {
    [output writeString:6 value:self.account];
  }
  if (self.hasHandInst) {
    [output writeString:7 value:self.handInst];
  }
  if (self.hasSecuritycode) {
    [output writeString:8 value:self.securitycode];
  }
  if (self.hasBoard) {
    [output writeString:9 value:self.board];
  }
  if (self.hasSide) {
    [output writeString:10 value:self.side];
  }
  if (self.hasOrderQty) {
    [output writeString:11 value:self.orderQty];
  }
  if (self.hasPrice) {
    [output writeString:12 value:self.price];
  }
  if (self.hasTimeInForce) {
    [output writeString:13 value:self.timeInForce];
  }
  if (self.hasExpireDate) {
    [output writeString:14 value:self.expireDate];
  }
  if (self.hasComplianceId) {
    [output writeString:15 value:self.complianceId];
  }
  if (self.hasClientcode) {
    [output writeString:16 value:self.clientcode];
  }
  if (self.hasSettlementDate) {
    [output writeString:17 value:self.settlementDate];
  }
  if (self.hasJatsId) {
    [output writeString:18 value:self.jatsId];
  }
  if (self.hasOrigClordid) {
    [output writeString:19 value:self.origClordid];
  }
  if (self.hasTextNegoDeal) {
    [output writeString:20 value:self.textNegoDeal];
  }
  if (self.hasOrigGtc) {
    [output writeString:21 value:self.origGtc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTypeCode) {
    size += computeStringSize(1, self.typeCode);
  }
  if (self.hasUsername) {
    size += computeStringSize(2, self.username);
  }
  if (self.hasUserType) {
    size += computeStringSize(3, self.userType);
  }
  if (self.hasAppSource) {
    size += computeStringSize(4, self.appSource);
  }
  if (self.hasSendingTime) {
    size += computeStringSize(5, self.sendingTime);
  }
  if (self.hasAccount) {
    size += computeStringSize(6, self.account);
  }
  if (self.hasHandInst) {
    size += computeStringSize(7, self.handInst);
  }
  if (self.hasSecuritycode) {
    size += computeStringSize(8, self.securitycode);
  }
  if (self.hasBoard) {
    size += computeStringSize(9, self.board);
  }
  if (self.hasSide) {
    size += computeStringSize(10, self.side);
  }
  if (self.hasOrderQty) {
    size += computeStringSize(11, self.orderQty);
  }
  if (self.hasPrice) {
    size += computeStringSize(12, self.price);
  }
  if (self.hasTimeInForce) {
    size += computeStringSize(13, self.timeInForce);
  }
  if (self.hasExpireDate) {
    size += computeStringSize(14, self.expireDate);
  }
  if (self.hasComplianceId) {
    size += computeStringSize(15, self.complianceId);
  }
  if (self.hasClientcode) {
    size += computeStringSize(16, self.clientcode);
  }
  if (self.hasSettlementDate) {
    size += computeStringSize(17, self.settlementDate);
  }
  if (self.hasJatsId) {
    size += computeStringSize(18, self.jatsId);
  }
  if (self.hasOrigClordid) {
    size += computeStringSize(19, self.origClordid);
  }
  if (self.hasTextNegoDeal) {
    size += computeStringSize(20, self.textNegoDeal);
  }
  if (self.hasOrigGtc) {
    size += computeStringSize(21, self.origGtc);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SubmitOrder*) parseFromData:(NSData*) data {
  return (SubmitOrder*)[[[SubmitOrder builder] mergeFromData:data] build];
}
+ (SubmitOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SubmitOrder*)[[[SubmitOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SubmitOrder*) parseFromInputStream:(NSInputStream*) input {
  return (SubmitOrder*)[[[SubmitOrder builder] mergeFromInputStream:input] build];
}
+ (SubmitOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SubmitOrder*)[[[SubmitOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SubmitOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SubmitOrder*)[[[SubmitOrder builder] mergeFromCodedInputStream:input] build];
}
+ (SubmitOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SubmitOrder*)[[[SubmitOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SubmitOrder_Builder*) builder {
  return [[SubmitOrder_Builder alloc] init];
}
+ (SubmitOrder_Builder*) builderWithPrototype:(SubmitOrder*) prototype {
  return [[SubmitOrder builder] mergeFrom:prototype];
}
- (SubmitOrder_Builder*) builder {
  return [SubmitOrder builder];
}
- (SubmitOrder_Builder*) toBuilder {
  return [SubmitOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTypeCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeCode", self.typeCode];
  }
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", self.userType];
  }
  if (self.hasAppSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appSource", self.appSource];
  }
  if (self.hasSendingTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendingTime", self.sendingTime];
  }
  if (self.hasAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"account", self.account];
  }
  if (self.hasHandInst) {
    [output appendFormat:@"%@%@: %@\n", indent, @"handInst", self.handInst];
  }
  if (self.hasSecuritycode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securitycode", self.securitycode];
  }
  if (self.hasBoard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"board", self.board];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", self.side];
  }
  if (self.hasOrderQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderQty", self.orderQty];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", self.price];
  }
  if (self.hasTimeInForce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeInForce", self.timeInForce];
  }
  if (self.hasExpireDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expireDate", self.expireDate];
  }
  if (self.hasComplianceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"complianceId", self.complianceId];
  }
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasSettlementDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"settlementDate", self.settlementDate];
  }
  if (self.hasJatsId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jatsId", self.jatsId];
  }
  if (self.hasOrigClordid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"origClordid", self.origClordid];
  }
  if (self.hasTextNegoDeal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textNegoDeal", self.textNegoDeal];
  }
  if (self.hasOrigGtc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"origGtc", self.origGtc];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SubmitOrder class]]) {
    return NO;
  }
  SubmitOrder *otherMessage = other;
  return
      self.hasTypeCode == otherMessage.hasTypeCode &&
      (!self.hasTypeCode || [self.typeCode isEqual:otherMessage.typeCode]) &&
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || [self.userType isEqual:otherMessage.userType]) &&
      self.hasAppSource == otherMessage.hasAppSource &&
      (!self.hasAppSource || [self.appSource isEqual:otherMessage.appSource]) &&
      self.hasSendingTime == otherMessage.hasSendingTime &&
      (!self.hasSendingTime || [self.sendingTime isEqual:otherMessage.sendingTime]) &&
      self.hasAccount == otherMessage.hasAccount &&
      (!self.hasAccount || [self.account isEqual:otherMessage.account]) &&
      self.hasHandInst == otherMessage.hasHandInst &&
      (!self.hasHandInst || [self.handInst isEqual:otherMessage.handInst]) &&
      self.hasSecuritycode == otherMessage.hasSecuritycode &&
      (!self.hasSecuritycode || [self.securitycode isEqual:otherMessage.securitycode]) &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || [self.board isEqual:otherMessage.board]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || [self.side isEqual:otherMessage.side]) &&
      self.hasOrderQty == otherMessage.hasOrderQty &&
      (!self.hasOrderQty || [self.orderQty isEqual:otherMessage.orderQty]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || [self.price isEqual:otherMessage.price]) &&
      self.hasTimeInForce == otherMessage.hasTimeInForce &&
      (!self.hasTimeInForce || [self.timeInForce isEqual:otherMessage.timeInForce]) &&
      self.hasExpireDate == otherMessage.hasExpireDate &&
      (!self.hasExpireDate || [self.expireDate isEqual:otherMessage.expireDate]) &&
      self.hasComplianceId == otherMessage.hasComplianceId &&
      (!self.hasComplianceId || [self.complianceId isEqual:otherMessage.complianceId]) &&
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasSettlementDate == otherMessage.hasSettlementDate &&
      (!self.hasSettlementDate || [self.settlementDate isEqual:otherMessage.settlementDate]) &&
      self.hasJatsId == otherMessage.hasJatsId &&
      (!self.hasJatsId || [self.jatsId isEqual:otherMessage.jatsId]) &&
      self.hasOrigClordid == otherMessage.hasOrigClordid &&
      (!self.hasOrigClordid || [self.origClordid isEqual:otherMessage.origClordid]) &&
      self.hasTextNegoDeal == otherMessage.hasTextNegoDeal &&
      (!self.hasTextNegoDeal || [self.textNegoDeal isEqual:otherMessage.textNegoDeal]) &&
      self.hasOrigGtc == otherMessage.hasOrigGtc &&
      (!self.hasOrigGtc || [self.origGtc isEqual:otherMessage.origGtc]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTypeCode) {
    hashCode = hashCode * 31 + [self.typeCode hash];
  }
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [self.userType hash];
  }
  if (self.hasAppSource) {
    hashCode = hashCode * 31 + [self.appSource hash];
  }
  if (self.hasSendingTime) {
    hashCode = hashCode * 31 + [self.sendingTime hash];
  }
  if (self.hasAccount) {
    hashCode = hashCode * 31 + [self.account hash];
  }
  if (self.hasHandInst) {
    hashCode = hashCode * 31 + [self.handInst hash];
  }
  if (self.hasSecuritycode) {
    hashCode = hashCode * 31 + [self.securitycode hash];
  }
  if (self.hasBoard) {
    hashCode = hashCode * 31 + [self.board hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [self.side hash];
  }
  if (self.hasOrderQty) {
    hashCode = hashCode * 31 + [self.orderQty hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [self.price hash];
  }
  if (self.hasTimeInForce) {
    hashCode = hashCode * 31 + [self.timeInForce hash];
  }
  if (self.hasExpireDate) {
    hashCode = hashCode * 31 + [self.expireDate hash];
  }
  if (self.hasComplianceId) {
    hashCode = hashCode * 31 + [self.complianceId hash];
  }
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasSettlementDate) {
    hashCode = hashCode * 31 + [self.settlementDate hash];
  }
  if (self.hasJatsId) {
    hashCode = hashCode * 31 + [self.jatsId hash];
  }
  if (self.hasOrigClordid) {
    hashCode = hashCode * 31 + [self.origClordid hash];
  }
  if (self.hasTextNegoDeal) {
    hashCode = hashCode * 31 + [self.textNegoDeal hash];
  }
  if (self.hasOrigGtc) {
    hashCode = hashCode * 31 + [self.origGtc hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SubmitOrder_Builder()
@property (strong) SubmitOrder* result;
@end

@implementation SubmitOrder_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SubmitOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SubmitOrder_Builder*) clear {
  self.result = [[SubmitOrder alloc] init];
  return self;
}
- (SubmitOrder_Builder*) clone {
  return [SubmitOrder builderWithPrototype:result];
}
- (SubmitOrder*) defaultInstance {
  return [SubmitOrder defaultInstance];
}
- (SubmitOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SubmitOrder*) buildPartial {
  SubmitOrder* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SubmitOrder_Builder*) mergeFrom:(SubmitOrder*) other {
  if (other == [SubmitOrder defaultInstance]) {
    return self;
  }
  if (other.hasTypeCode) {
    [self setTypeCode:other.typeCode];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasAppSource) {
    [self setAppSource:other.appSource];
  }
  if (other.hasSendingTime) {
    [self setSendingTime:other.sendingTime];
  }
  if (other.hasAccount) {
    [self setAccount:other.account];
  }
  if (other.hasHandInst) {
    [self setHandInst:other.handInst];
  }
  if (other.hasSecuritycode) {
    [self setSecuritycode:other.securitycode];
  }
  if (other.hasBoard) {
    [self setBoard:other.board];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasOrderQty) {
    [self setOrderQty:other.orderQty];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasTimeInForce) {
    [self setTimeInForce:other.timeInForce];
  }
  if (other.hasExpireDate) {
    [self setExpireDate:other.expireDate];
  }
  if (other.hasComplianceId) {
    [self setComplianceId:other.complianceId];
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasSettlementDate) {
    [self setSettlementDate:other.settlementDate];
  }
  if (other.hasJatsId) {
    [self setJatsId:other.jatsId];
  }
  if (other.hasOrigClordid) {
    [self setOrigClordid:other.origClordid];
  }
  if (other.hasTextNegoDeal) {
    [self setTextNegoDeal:other.textNegoDeal];
  }
  if (other.hasOrigGtc) {
    [self setOrigGtc:other.origGtc];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SubmitOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SubmitOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTypeCode:[input readString]];
        break;
      }
      case 18: {
        [self setUsername:[input readString]];
        break;
      }
      case 26: {
        [self setUserType:[input readString]];
        break;
      }
      case 34: {
        [self setAppSource:[input readString]];
        break;
      }
      case 42: {
        [self setSendingTime:[input readString]];
        break;
      }
      case 50: {
        [self setAccount:[input readString]];
        break;
      }
      case 58: {
        [self setHandInst:[input readString]];
        break;
      }
      case 66: {
        [self setSecuritycode:[input readString]];
        break;
      }
      case 74: {
        [self setBoard:[input readString]];
        break;
      }
      case 82: {
        [self setSide:[input readString]];
        break;
      }
      case 90: {
        [self setOrderQty:[input readString]];
        break;
      }
      case 98: {
        [self setPrice:[input readString]];
        break;
      }
      case 106: {
        [self setTimeInForce:[input readString]];
        break;
      }
      case 114: {
        [self setExpireDate:[input readString]];
        break;
      }
      case 122: {
        [self setComplianceId:[input readString]];
        break;
      }
      case 130: {
        [self setClientcode:[input readString]];
        break;
      }
      case 138: {
        [self setSettlementDate:[input readString]];
        break;
      }
      case 146: {
        [self setJatsId:[input readString]];
        break;
      }
      case 154: {
        [self setOrigClordid:[input readString]];
        break;
      }
      case 162: {
        [self setTextNegoDeal:[input readString]];
        break;
      }
      case 170: {
        [self setOrigGtc:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTypeCode {
  return result.hasTypeCode;
}
- (NSString*) typeCode {
  return result.typeCode;
}
- (SubmitOrder_Builder*) setTypeCode:(NSString*) value {
  result.hasTypeCode = YES;
  result.typeCode = value;
  return self;
}
- (SubmitOrder_Builder*) clearTypeCode {
  result.hasTypeCode = NO;
  result.typeCode = @"";
  return self;
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (SubmitOrder_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (SubmitOrder_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasUserType {
  return result.hasUserType;
}
- (NSString*) userType {
  return result.userType;
}
- (SubmitOrder_Builder*) setUserType:(NSString*) value {
  result.hasUserType = YES;
  result.userType = value;
  return self;
}
- (SubmitOrder_Builder*) clearUserType {
  result.hasUserType = NO;
  result.userType = @"";
  return self;
}
- (BOOL) hasAppSource {
  return result.hasAppSource;
}
- (NSString*) appSource {
  return result.appSource;
}
- (SubmitOrder_Builder*) setAppSource:(NSString*) value {
  result.hasAppSource = YES;
  result.appSource = value;
  return self;
}
- (SubmitOrder_Builder*) clearAppSource {
  result.hasAppSource = NO;
  result.appSource = @"";
  return self;
}
- (BOOL) hasSendingTime {
  return result.hasSendingTime;
}
- (NSString*) sendingTime {
  return result.sendingTime;
}
- (SubmitOrder_Builder*) setSendingTime:(NSString*) value {
  result.hasSendingTime = YES;
  result.sendingTime = value;
  return self;
}
- (SubmitOrder_Builder*) clearSendingTime {
  result.hasSendingTime = NO;
  result.sendingTime = @"";
  return self;
}
- (BOOL) hasAccount {
  return result.hasAccount;
}
- (NSString*) account {
  return result.account;
}
- (SubmitOrder_Builder*) setAccount:(NSString*) value {
  result.hasAccount = YES;
  result.account = value;
  return self;
}
- (SubmitOrder_Builder*) clearAccount {
  result.hasAccount = NO;
  result.account = @"";
  return self;
}
- (BOOL) hasHandInst {
  return result.hasHandInst;
}
- (NSString*) handInst {
  return result.handInst;
}
- (SubmitOrder_Builder*) setHandInst:(NSString*) value {
  result.hasHandInst = YES;
  result.handInst = value;
  return self;
}
- (SubmitOrder_Builder*) clearHandInst {
  result.hasHandInst = NO;
  result.handInst = @"";
  return self;
}
- (BOOL) hasSecuritycode {
  return result.hasSecuritycode;
}
- (NSString*) securitycode {
  return result.securitycode;
}
- (SubmitOrder_Builder*) setSecuritycode:(NSString*) value {
  result.hasSecuritycode = YES;
  result.securitycode = value;
  return self;
}
- (SubmitOrder_Builder*) clearSecuritycode {
  result.hasSecuritycode = NO;
  result.securitycode = @"";
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (NSString*) board {
  return result.board;
}
- (SubmitOrder_Builder*) setBoard:(NSString*) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (SubmitOrder_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (NSString*) side {
  return result.side;
}
- (SubmitOrder_Builder*) setSide:(NSString*) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (SubmitOrder_Builder*) clearSide {
  result.hasSide = NO;
  result.side = @"";
  return self;
}
- (BOOL) hasOrderQty {
  return result.hasOrderQty;
}
- (NSString*) orderQty {
  return result.orderQty;
}
- (SubmitOrder_Builder*) setOrderQty:(NSString*) value {
  result.hasOrderQty = YES;
  result.orderQty = value;
  return self;
}
- (SubmitOrder_Builder*) clearOrderQty {
  result.hasOrderQty = NO;
  result.orderQty = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (SubmitOrder_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (SubmitOrder_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (BOOL) hasTimeInForce {
  return result.hasTimeInForce;
}
- (NSString*) timeInForce {
  return result.timeInForce;
}
- (SubmitOrder_Builder*) setTimeInForce:(NSString*) value {
  result.hasTimeInForce = YES;
  result.timeInForce = value;
  return self;
}
- (SubmitOrder_Builder*) clearTimeInForce {
  result.hasTimeInForce = NO;
  result.timeInForce = @"";
  return self;
}
- (BOOL) hasExpireDate {
  return result.hasExpireDate;
}
- (NSString*) expireDate {
  return result.expireDate;
}
- (SubmitOrder_Builder*) setExpireDate:(NSString*) value {
  result.hasExpireDate = YES;
  result.expireDate = value;
  return self;
}
- (SubmitOrder_Builder*) clearExpireDate {
  result.hasExpireDate = NO;
  result.expireDate = @"";
  return self;
}
- (BOOL) hasComplianceId {
  return result.hasComplianceId;
}
- (NSString*) complianceId {
  return result.complianceId;
}
- (SubmitOrder_Builder*) setComplianceId:(NSString*) value {
  result.hasComplianceId = YES;
  result.complianceId = value;
  return self;
}
- (SubmitOrder_Builder*) clearComplianceId {
  result.hasComplianceId = NO;
  result.complianceId = @"";
  return self;
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (SubmitOrder_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (SubmitOrder_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasSettlementDate {
  return result.hasSettlementDate;
}
- (NSString*) settlementDate {
  return result.settlementDate;
}
- (SubmitOrder_Builder*) setSettlementDate:(NSString*) value {
  result.hasSettlementDate = YES;
  result.settlementDate = value;
  return self;
}
- (SubmitOrder_Builder*) clearSettlementDate {
  result.hasSettlementDate = NO;
  result.settlementDate = @"";
  return self;
}
- (BOOL) hasJatsId {
  return result.hasJatsId;
}
- (NSString*) jatsId {
  return result.jatsId;
}
- (SubmitOrder_Builder*) setJatsId:(NSString*) value {
  result.hasJatsId = YES;
  result.jatsId = value;
  return self;
}
- (SubmitOrder_Builder*) clearJatsId {
  result.hasJatsId = NO;
  result.jatsId = @"";
  return self;
}
- (BOOL) hasOrigClordid {
  return result.hasOrigClordid;
}
- (NSString*) origClordid {
  return result.origClordid;
}
- (SubmitOrder_Builder*) setOrigClordid:(NSString*) value {
  result.hasOrigClordid = YES;
  result.origClordid = value;
  return self;
}
- (SubmitOrder_Builder*) clearOrigClordid {
  result.hasOrigClordid = NO;
  result.origClordid = @"";
  return self;
}
- (BOOL) hasTextNegoDeal {
  return result.hasTextNegoDeal;
}
- (NSString*) textNegoDeal {
  return result.textNegoDeal;
}
- (SubmitOrder_Builder*) setTextNegoDeal:(NSString*) value {
  result.hasTextNegoDeal = YES;
  result.textNegoDeal = value;
  return self;
}
- (SubmitOrder_Builder*) clearTextNegoDeal {
  result.hasTextNegoDeal = NO;
  result.textNegoDeal = @"";
  return self;
}
- (BOOL) hasOrigGtc {
  return result.hasOrigGtc;
}
- (NSString*) origGtc {
  return result.origGtc;
}
- (SubmitOrder_Builder*) setOrigGtc:(NSString*) value {
  result.hasOrigGtc = YES;
  result.origGtc = value;
  return self;
}
- (SubmitOrder_Builder*) clearOrigGtc {
  result.hasOrigGtc = NO;
  result.origGtc = @"";
  return self;
}
@end

@interface GroupOrder ()
@property (strong) NSString* groupId;
@property (strong) NSString* groupCode;
@property (strong) NSString* groupName;
@property (strong) NSString* typeCode;
@property (strong) NSString* side;
@property int32_t totalClien;
@property (strong) NSString* lastupdated;
@property (strong) NSString* securityCode;
@end

@implementation GroupOrder

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value {
  hasGroupId_ = !!value;
}
@synthesize groupId;
- (BOOL) hasGroupCode {
  return !!hasGroupCode_;
}
- (void) setHasGroupCode:(BOOL) value {
  hasGroupCode_ = !!value;
}
@synthesize groupCode;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) value {
  hasGroupName_ = !!value;
}
@synthesize groupName;
- (BOOL) hasTypeCode {
  return !!hasTypeCode_;
}
- (void) setHasTypeCode:(BOOL) value {
  hasTypeCode_ = !!value;
}
@synthesize typeCode;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasTotalClien {
  return !!hasTotalClien_;
}
- (void) setHasTotalClien:(BOOL) value {
  hasTotalClien_ = !!value;
}
@synthesize totalClien;
- (BOOL) hasLastupdated {
  return !!hasLastupdated_;
}
- (void) setHasLastupdated:(BOOL) value {
  hasLastupdated_ = !!value;
}
@synthesize lastupdated;
- (BOOL) hasSecurityCode {
  return !!hasSecurityCode_;
}
- (void) setHasSecurityCode:(BOOL) value {
  hasSecurityCode_ = !!value;
}
@synthesize securityCode;
- (id) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.groupCode = @"";
    self.groupName = @"";
    self.typeCode = @"";
    self.side = @"";
    self.totalClien = 0;
    self.lastupdated = @"";
    self.securityCode = @"";
  }
  return self;
}
static GroupOrder* defaultGroupOrderInstance = nil;
+ (void) initialize {
  if (self == [GroupOrder class]) {
    defaultGroupOrderInstance = [[GroupOrder alloc] init];
  }
}
+ (GroupOrder*) defaultInstance {
  return defaultGroupOrderInstance;
}
- (GroupOrder*) defaultInstance {
  return defaultGroupOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasGroupCode) {
    [output writeString:2 value:self.groupCode];
  }
  if (self.hasGroupName) {
    [output writeString:3 value:self.groupName];
  }
  if (self.hasTypeCode) {
    [output writeString:4 value:self.typeCode];
  }
  if (self.hasSide) {
    [output writeString:5 value:self.side];
  }
  if (self.hasTotalClien) {
    [output writeInt32:6 value:self.totalClien];
  }
  if (self.hasLastupdated) {
    [output writeString:7 value:self.lastupdated];
  }
  if (self.hasSecurityCode) {
    [output writeString:8 value:self.securityCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGroupId) {
    size += computeStringSize(1, self.groupId);
  }
  if (self.hasGroupCode) {
    size += computeStringSize(2, self.groupCode);
  }
  if (self.hasGroupName) {
    size += computeStringSize(3, self.groupName);
  }
  if (self.hasTypeCode) {
    size += computeStringSize(4, self.typeCode);
  }
  if (self.hasSide) {
    size += computeStringSize(5, self.side);
  }
  if (self.hasTotalClien) {
    size += computeInt32Size(6, self.totalClien);
  }
  if (self.hasLastupdated) {
    size += computeStringSize(7, self.lastupdated);
  }
  if (self.hasSecurityCode) {
    size += computeStringSize(8, self.securityCode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GroupOrder*) parseFromData:(NSData*) data {
  return (GroupOrder*)[[[GroupOrder builder] mergeFromData:data] build];
}
+ (GroupOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GroupOrder*)[[[GroupOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GroupOrder*) parseFromInputStream:(NSInputStream*) input {
  return (GroupOrder*)[[[GroupOrder builder] mergeFromInputStream:input] build];
}
+ (GroupOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GroupOrder*)[[[GroupOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GroupOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GroupOrder*)[[[GroupOrder builder] mergeFromCodedInputStream:input] build];
}
+ (GroupOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GroupOrder*)[[[GroupOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GroupOrder_Builder*) builder {
  return [[GroupOrder_Builder alloc] init];
}
+ (GroupOrder_Builder*) builderWithPrototype:(GroupOrder*) prototype {
  return [[GroupOrder builder] mergeFrom:prototype];
}
- (GroupOrder_Builder*) builder {
  return [GroupOrder builder];
}
- (GroupOrder_Builder*) toBuilder {
  return [GroupOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasGroupCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupCode", self.groupCode];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasTypeCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeCode", self.typeCode];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", self.side];
  }
  if (self.hasTotalClien) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalClien", [NSNumber numberWithInt:self.totalClien]];
  }
  if (self.hasLastupdated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastupdated", self.lastupdated];
  }
  if (self.hasSecurityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityCode", self.securityCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GroupOrder class]]) {
    return NO;
  }
  GroupOrder *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasGroupCode == otherMessage.hasGroupCode &&
      (!self.hasGroupCode || [self.groupCode isEqual:otherMessage.groupCode]) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasTypeCode == otherMessage.hasTypeCode &&
      (!self.hasTypeCode || [self.typeCode isEqual:otherMessage.typeCode]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || [self.side isEqual:otherMessage.side]) &&
      self.hasTotalClien == otherMessage.hasTotalClien &&
      (!self.hasTotalClien || self.totalClien == otherMessage.totalClien) &&
      self.hasLastupdated == otherMessage.hasLastupdated &&
      (!self.hasLastupdated || [self.lastupdated isEqual:otherMessage.lastupdated]) &&
      self.hasSecurityCode == otherMessage.hasSecurityCode &&
      (!self.hasSecurityCode || [self.securityCode isEqual:otherMessage.securityCode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasGroupCode) {
    hashCode = hashCode * 31 + [self.groupCode hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasTypeCode) {
    hashCode = hashCode * 31 + [self.typeCode hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [self.side hash];
  }
  if (self.hasTotalClien) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.totalClien] hash];
  }
  if (self.hasLastupdated) {
    hashCode = hashCode * 31 + [self.lastupdated hash];
  }
  if (self.hasSecurityCode) {
    hashCode = hashCode * 31 + [self.securityCode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GroupOrder_Builder()
@property (strong) GroupOrder* result;
@end

@implementation GroupOrder_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[GroupOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GroupOrder_Builder*) clear {
  self.result = [[GroupOrder alloc] init];
  return self;
}
- (GroupOrder_Builder*) clone {
  return [GroupOrder builderWithPrototype:result];
}
- (GroupOrder*) defaultInstance {
  return [GroupOrder defaultInstance];
}
- (GroupOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GroupOrder*) buildPartial {
  GroupOrder* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (GroupOrder_Builder*) mergeFrom:(GroupOrder*) other {
  if (other == [GroupOrder defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupCode) {
    [self setGroupCode:other.groupCode];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasTypeCode) {
    [self setTypeCode:other.typeCode];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasTotalClien) {
    [self setTotalClien:other.totalClien];
  }
  if (other.hasLastupdated) {
    [self setLastupdated:other.lastupdated];
  }
  if (other.hasSecurityCode) {
    [self setSecurityCode:other.securityCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GroupOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GroupOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 18: {
        [self setGroupCode:[input readString]];
        break;
      }
      case 26: {
        [self setGroupName:[input readString]];
        break;
      }
      case 34: {
        [self setTypeCode:[input readString]];
        break;
      }
      case 42: {
        [self setSide:[input readString]];
        break;
      }
      case 48: {
        [self setTotalClien:[input readInt32]];
        break;
      }
      case 58: {
        [self setLastupdated:[input readString]];
        break;
      }
      case 66: {
        [self setSecurityCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (NSString*) groupId {
  return result.groupId;
}
- (GroupOrder_Builder*) setGroupId:(NSString*) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (GroupOrder_Builder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = @"";
  return self;
}
- (BOOL) hasGroupCode {
  return result.hasGroupCode;
}
- (NSString*) groupCode {
  return result.groupCode;
}
- (GroupOrder_Builder*) setGroupCode:(NSString*) value {
  result.hasGroupCode = YES;
  result.groupCode = value;
  return self;
}
- (GroupOrder_Builder*) clearGroupCode {
  result.hasGroupCode = NO;
  result.groupCode = @"";
  return self;
}
- (BOOL) hasGroupName {
  return result.hasGroupName;
}
- (NSString*) groupName {
  return result.groupName;
}
- (GroupOrder_Builder*) setGroupName:(NSString*) value {
  result.hasGroupName = YES;
  result.groupName = value;
  return self;
}
- (GroupOrder_Builder*) clearGroupName {
  result.hasGroupName = NO;
  result.groupName = @"";
  return self;
}
- (BOOL) hasTypeCode {
  return result.hasTypeCode;
}
- (NSString*) typeCode {
  return result.typeCode;
}
- (GroupOrder_Builder*) setTypeCode:(NSString*) value {
  result.hasTypeCode = YES;
  result.typeCode = value;
  return self;
}
- (GroupOrder_Builder*) clearTypeCode {
  result.hasTypeCode = NO;
  result.typeCode = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (NSString*) side {
  return result.side;
}
- (GroupOrder_Builder*) setSide:(NSString*) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (GroupOrder_Builder*) clearSide {
  result.hasSide = NO;
  result.side = @"";
  return self;
}
- (BOOL) hasTotalClien {
  return result.hasTotalClien;
}
- (int32_t) totalClien {
  return result.totalClien;
}
- (GroupOrder_Builder*) setTotalClien:(int32_t) value {
  result.hasTotalClien = YES;
  result.totalClien = value;
  return self;
}
- (GroupOrder_Builder*) clearTotalClien {
  result.hasTotalClien = NO;
  result.totalClien = 0;
  return self;
}
- (BOOL) hasLastupdated {
  return result.hasLastupdated;
}
- (NSString*) lastupdated {
  return result.lastupdated;
}
- (GroupOrder_Builder*) setLastupdated:(NSString*) value {
  result.hasLastupdated = YES;
  result.lastupdated = value;
  return self;
}
- (GroupOrder_Builder*) clearLastupdated {
  result.hasLastupdated = NO;
  result.lastupdated = @"";
  return self;
}
- (BOOL) hasSecurityCode {
  return result.hasSecurityCode;
}
- (NSString*) securityCode {
  return result.securityCode;
}
- (GroupOrder_Builder*) setSecurityCode:(NSString*) value {
  result.hasSecurityCode = YES;
  result.securityCode = value;
  return self;
}
- (GroupOrder_Builder*) clearSecurityCode {
  result.hasSecurityCode = NO;
  result.securityCode = @"";
  return self;
}
@end

@interface GroupOrderDetail ()
@property (strong) NSString* clientcode;
@property (strong) NSString* clientname;
@property (strong) NSString* privileges;
@property (strong) NSString* sid;
@property (strong) NSString* foreigner;
@property Float64 lots;
@property Float64 remaining;
@property Float64 lotsPct;
@property Float64 tradinglimit;
@property Float64 remainingBulk;
@property Float64 totalBulk;
@end

@implementation GroupOrderDetail

- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasClientname {
  return !!hasClientname_;
}
- (void) setHasClientname:(BOOL) value {
  hasClientname_ = !!value;
}
@synthesize clientname;
- (BOOL) hasPrivileges {
  return !!hasPrivileges_;
}
- (void) setHasPrivileges:(BOOL) value {
  hasPrivileges_ = !!value;
}
@synthesize privileges;
- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) value {
  hasSid_ = !!value;
}
@synthesize sid;
- (BOOL) hasForeigner {
  return !!hasForeigner_;
}
- (void) setHasForeigner:(BOOL) value {
  hasForeigner_ = !!value;
}
@synthesize foreigner;
- (BOOL) hasLots {
  return !!hasLots_;
}
- (void) setHasLots:(BOOL) value {
  hasLots_ = !!value;
}
@synthesize lots;
- (BOOL) hasRemaining {
  return !!hasRemaining_;
}
- (void) setHasRemaining:(BOOL) value {
  hasRemaining_ = !!value;
}
@synthesize remaining;
- (BOOL) hasLotsPct {
  return !!hasLotsPct_;
}
- (void) setHasLotsPct:(BOOL) value {
  hasLotsPct_ = !!value;
}
@synthesize lotsPct;
- (BOOL) hasTradinglimit {
  return !!hasTradinglimit_;
}
- (void) setHasTradinglimit:(BOOL) value {
  hasTradinglimit_ = !!value;
}
@synthesize tradinglimit;
- (BOOL) hasRemainingBulk {
  return !!hasRemainingBulk_;
}
- (void) setHasRemainingBulk:(BOOL) value {
  hasRemainingBulk_ = !!value;
}
@synthesize remainingBulk;
- (BOOL) hasTotalBulk {
  return !!hasTotalBulk_;
}
- (void) setHasTotalBulk:(BOOL) value {
  hasTotalBulk_ = !!value;
}
@synthesize totalBulk;
- (id) init {
  if ((self = [super init])) {
    self.clientcode = @"";
    self.clientname = @"";
    self.privileges = @"";
    self.sid = @"";
    self.foreigner = @"";
    self.lots = 0;
    self.remaining = 0;
    self.lotsPct = 0;
    self.tradinglimit = 0;
    self.remainingBulk = 0;
    self.totalBulk = 0;
  }
  return self;
}
static GroupOrderDetail* defaultGroupOrderDetailInstance = nil;
+ (void) initialize {
  if (self == [GroupOrderDetail class]) {
    defaultGroupOrderDetailInstance = [[GroupOrderDetail alloc] init];
  }
}
+ (GroupOrderDetail*) defaultInstance {
  return defaultGroupOrderDetailInstance;
}
- (GroupOrderDetail*) defaultInstance {
  return defaultGroupOrderDetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClientcode) {
    [output writeString:1 value:self.clientcode];
  }
  if (self.hasClientname) {
    [output writeString:2 value:self.clientname];
  }
  if (self.hasPrivileges) {
    [output writeString:3 value:self.privileges];
  }
  if (self.hasSid) {
    [output writeString:4 value:self.sid];
  }
  if (self.hasForeigner) {
    [output writeString:5 value:self.foreigner];
  }
  if (self.hasLots) {
    [output writeDouble:6 value:self.lots];
  }
  if (self.hasRemaining) {
    [output writeDouble:7 value:self.remaining];
  }
  if (self.hasLotsPct) {
    [output writeDouble:8 value:self.lotsPct];
  }
  if (self.hasTradinglimit) {
    [output writeDouble:9 value:self.tradinglimit];
  }
  if (self.hasRemainingBulk) {
    [output writeDouble:10 value:self.remainingBulk];
  }
  if (self.hasTotalBulk) {
    [output writeDouble:11 value:self.totalBulk];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasClientcode) {
    size += computeStringSize(1, self.clientcode);
  }
  if (self.hasClientname) {
    size += computeStringSize(2, self.clientname);
  }
  if (self.hasPrivileges) {
    size += computeStringSize(3, self.privileges);
  }
  if (self.hasSid) {
    size += computeStringSize(4, self.sid);
  }
  if (self.hasForeigner) {
    size += computeStringSize(5, self.foreigner);
  }
  if (self.hasLots) {
    size += computeDoubleSize(6, self.lots);
  }
  if (self.hasRemaining) {
    size += computeDoubleSize(7, self.remaining);
  }
  if (self.hasLotsPct) {
    size += computeDoubleSize(8, self.lotsPct);
  }
  if (self.hasTradinglimit) {
    size += computeDoubleSize(9, self.tradinglimit);
  }
  if (self.hasRemainingBulk) {
    size += computeDoubleSize(10, self.remainingBulk);
  }
  if (self.hasTotalBulk) {
    size += computeDoubleSize(11, self.totalBulk);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GroupOrderDetail*) parseFromData:(NSData*) data {
  return (GroupOrderDetail*)[[[GroupOrderDetail builder] mergeFromData:data] build];
}
+ (GroupOrderDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GroupOrderDetail*)[[[GroupOrderDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GroupOrderDetail*) parseFromInputStream:(NSInputStream*) input {
  return (GroupOrderDetail*)[[[GroupOrderDetail builder] mergeFromInputStream:input] build];
}
+ (GroupOrderDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GroupOrderDetail*)[[[GroupOrderDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GroupOrderDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GroupOrderDetail*)[[[GroupOrderDetail builder] mergeFromCodedInputStream:input] build];
}
+ (GroupOrderDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GroupOrderDetail*)[[[GroupOrderDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GroupOrderDetail_Builder*) builder {
  return [[GroupOrderDetail_Builder alloc] init];
}
+ (GroupOrderDetail_Builder*) builderWithPrototype:(GroupOrderDetail*) prototype {
  return [[GroupOrderDetail builder] mergeFrom:prototype];
}
- (GroupOrderDetail_Builder*) builder {
  return [GroupOrderDetail builder];
}
- (GroupOrderDetail_Builder*) toBuilder {
  return [GroupOrderDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasClientname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientname", self.clientname];
  }
  if (self.hasPrivileges) {
    [output appendFormat:@"%@%@: %@\n", indent, @"privileges", self.privileges];
  }
  if (self.hasSid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sid", self.sid];
  }
  if (self.hasForeigner) {
    [output appendFormat:@"%@%@: %@\n", indent, @"foreigner", self.foreigner];
  }
  if (self.hasLots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lots", [NSNumber numberWithDouble:self.lots]];
  }
  if (self.hasRemaining) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remaining", [NSNumber numberWithDouble:self.remaining]];
  }
  if (self.hasLotsPct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lotsPct", [NSNumber numberWithDouble:self.lotsPct]];
  }
  if (self.hasTradinglimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradinglimit", [NSNumber numberWithDouble:self.tradinglimit]];
  }
  if (self.hasRemainingBulk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remainingBulk", [NSNumber numberWithDouble:self.remainingBulk]];
  }
  if (self.hasTotalBulk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalBulk", [NSNumber numberWithDouble:self.totalBulk]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GroupOrderDetail class]]) {
    return NO;
  }
  GroupOrderDetail *otherMessage = other;
  return
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasClientname == otherMessage.hasClientname &&
      (!self.hasClientname || [self.clientname isEqual:otherMessage.clientname]) &&
      self.hasPrivileges == otherMessage.hasPrivileges &&
      (!self.hasPrivileges || [self.privileges isEqual:otherMessage.privileges]) &&
      self.hasSid == otherMessage.hasSid &&
      (!self.hasSid || [self.sid isEqual:otherMessage.sid]) &&
      self.hasForeigner == otherMessage.hasForeigner &&
      (!self.hasForeigner || [self.foreigner isEqual:otherMessage.foreigner]) &&
      self.hasLots == otherMessage.hasLots &&
      (!self.hasLots || self.lots == otherMessage.lots) &&
      self.hasRemaining == otherMessage.hasRemaining &&
      (!self.hasRemaining || self.remaining == otherMessage.remaining) &&
      self.hasLotsPct == otherMessage.hasLotsPct &&
      (!self.hasLotsPct || self.lotsPct == otherMessage.lotsPct) &&
      self.hasTradinglimit == otherMessage.hasTradinglimit &&
      (!self.hasTradinglimit || self.tradinglimit == otherMessage.tradinglimit) &&
      self.hasRemainingBulk == otherMessage.hasRemainingBulk &&
      (!self.hasRemainingBulk || self.remainingBulk == otherMessage.remainingBulk) &&
      self.hasTotalBulk == otherMessage.hasTotalBulk &&
      (!self.hasTotalBulk || self.totalBulk == otherMessage.totalBulk) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasClientname) {
    hashCode = hashCode * 31 + [self.clientname hash];
  }
  if (self.hasPrivileges) {
    hashCode = hashCode * 31 + [self.privileges hash];
  }
  if (self.hasSid) {
    hashCode = hashCode * 31 + [self.sid hash];
  }
  if (self.hasForeigner) {
    hashCode = hashCode * 31 + [self.foreigner hash];
  }
  if (self.hasLots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lots] hash];
  }
  if (self.hasRemaining) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.remaining] hash];
  }
  if (self.hasLotsPct) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lotsPct] hash];
  }
  if (self.hasTradinglimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tradinglimit] hash];
  }
  if (self.hasRemainingBulk) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.remainingBulk] hash];
  }
  if (self.hasTotalBulk) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.totalBulk] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GroupOrderDetail_Builder()
@property (strong) GroupOrderDetail* result;
@end

@implementation GroupOrderDetail_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[GroupOrderDetail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GroupOrderDetail_Builder*) clear {
  self.result = [[GroupOrderDetail alloc] init];
  return self;
}
- (GroupOrderDetail_Builder*) clone {
  return [GroupOrderDetail builderWithPrototype:result];
}
- (GroupOrderDetail*) defaultInstance {
  return [GroupOrderDetail defaultInstance];
}
- (GroupOrderDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GroupOrderDetail*) buildPartial {
  GroupOrderDetail* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (GroupOrderDetail_Builder*) mergeFrom:(GroupOrderDetail*) other {
  if (other == [GroupOrderDetail defaultInstance]) {
    return self;
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasClientname) {
    [self setClientname:other.clientname];
  }
  if (other.hasPrivileges) {
    [self setPrivileges:other.privileges];
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasForeigner) {
    [self setForeigner:other.foreigner];
  }
  if (other.hasLots) {
    [self setLots:other.lots];
  }
  if (other.hasRemaining) {
    [self setRemaining:other.remaining];
  }
  if (other.hasLotsPct) {
    [self setLotsPct:other.lotsPct];
  }
  if (other.hasTradinglimit) {
    [self setTradinglimit:other.tradinglimit];
  }
  if (other.hasRemainingBulk) {
    [self setRemainingBulk:other.remainingBulk];
  }
  if (other.hasTotalBulk) {
    [self setTotalBulk:other.totalBulk];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GroupOrderDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GroupOrderDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClientcode:[input readString]];
        break;
      }
      case 18: {
        [self setClientname:[input readString]];
        break;
      }
      case 26: {
        [self setPrivileges:[input readString]];
        break;
      }
      case 34: {
        [self setSid:[input readString]];
        break;
      }
      case 42: {
        [self setForeigner:[input readString]];
        break;
      }
      case 49: {
        [self setLots:[input readDouble]];
        break;
      }
      case 57: {
        [self setRemaining:[input readDouble]];
        break;
      }
      case 65: {
        [self setLotsPct:[input readDouble]];
        break;
      }
      case 73: {
        [self setTradinglimit:[input readDouble]];
        break;
      }
      case 81: {
        [self setRemainingBulk:[input readDouble]];
        break;
      }
      case 89: {
        [self setTotalBulk:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (GroupOrderDetail_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasClientname {
  return result.hasClientname;
}
- (NSString*) clientname {
  return result.clientname;
}
- (GroupOrderDetail_Builder*) setClientname:(NSString*) value {
  result.hasClientname = YES;
  result.clientname = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearClientname {
  result.hasClientname = NO;
  result.clientname = @"";
  return self;
}
- (BOOL) hasPrivileges {
  return result.hasPrivileges;
}
- (NSString*) privileges {
  return result.privileges;
}
- (GroupOrderDetail_Builder*) setPrivileges:(NSString*) value {
  result.hasPrivileges = YES;
  result.privileges = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearPrivileges {
  result.hasPrivileges = NO;
  result.privileges = @"";
  return self;
}
- (BOOL) hasSid {
  return result.hasSid;
}
- (NSString*) sid {
  return result.sid;
}
- (GroupOrderDetail_Builder*) setSid:(NSString*) value {
  result.hasSid = YES;
  result.sid = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearSid {
  result.hasSid = NO;
  result.sid = @"";
  return self;
}
- (BOOL) hasForeigner {
  return result.hasForeigner;
}
- (NSString*) foreigner {
  return result.foreigner;
}
- (GroupOrderDetail_Builder*) setForeigner:(NSString*) value {
  result.hasForeigner = YES;
  result.foreigner = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearForeigner {
  result.hasForeigner = NO;
  result.foreigner = @"";
  return self;
}
- (BOOL) hasLots {
  return result.hasLots;
}
- (Float64) lots {
  return result.lots;
}
- (GroupOrderDetail_Builder*) setLots:(Float64) value {
  result.hasLots = YES;
  result.lots = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearLots {
  result.hasLots = NO;
  result.lots = 0;
  return self;
}
- (BOOL) hasRemaining {
  return result.hasRemaining;
}
- (Float64) remaining {
  return result.remaining;
}
- (GroupOrderDetail_Builder*) setRemaining:(Float64) value {
  result.hasRemaining = YES;
  result.remaining = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearRemaining {
  result.hasRemaining = NO;
  result.remaining = 0;
  return self;
}
- (BOOL) hasLotsPct {
  return result.hasLotsPct;
}
- (Float64) lotsPct {
  return result.lotsPct;
}
- (GroupOrderDetail_Builder*) setLotsPct:(Float64) value {
  result.hasLotsPct = YES;
  result.lotsPct = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearLotsPct {
  result.hasLotsPct = NO;
  result.lotsPct = 0;
  return self;
}
- (BOOL) hasTradinglimit {
  return result.hasTradinglimit;
}
- (Float64) tradinglimit {
  return result.tradinglimit;
}
- (GroupOrderDetail_Builder*) setTradinglimit:(Float64) value {
  result.hasTradinglimit = YES;
  result.tradinglimit = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearTradinglimit {
  result.hasTradinglimit = NO;
  result.tradinglimit = 0;
  return self;
}
- (BOOL) hasRemainingBulk {
  return result.hasRemainingBulk;
}
- (Float64) remainingBulk {
  return result.remainingBulk;
}
- (GroupOrderDetail_Builder*) setRemainingBulk:(Float64) value {
  result.hasRemainingBulk = YES;
  result.remainingBulk = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearRemainingBulk {
  result.hasRemainingBulk = NO;
  result.remainingBulk = 0;
  return self;
}
- (BOOL) hasTotalBulk {
  return result.hasTotalBulk;
}
- (Float64) totalBulk {
  return result.totalBulk;
}
- (GroupOrderDetail_Builder*) setTotalBulk:(Float64) value {
  result.hasTotalBulk = YES;
  result.totalBulk = value;
  return self;
}
- (GroupOrderDetail_Builder*) clearTotalBulk {
  result.hasTotalBulk = NO;
  result.totalBulk = 0;
  return self;
}
@end

@interface ClientOverdue ()
@property (strong) NSString* clientcode;
@property (strong) NSString* clientname;
@property (strong) NSString* duedate;
@property (strong) NSString* subaccount;
@property (strong) NSString* amount;
@end

@implementation ClientOverdue

- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasClientname {
  return !!hasClientname_;
}
- (void) setHasClientname:(BOOL) value {
  hasClientname_ = !!value;
}
@synthesize clientname;
- (BOOL) hasDuedate {
  return !!hasDuedate_;
}
- (void) setHasDuedate:(BOOL) value {
  hasDuedate_ = !!value;
}
@synthesize duedate;
- (BOOL) hasSubaccount {
  return !!hasSubaccount_;
}
- (void) setHasSubaccount:(BOOL) value {
  hasSubaccount_ = !!value;
}
@synthesize subaccount;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) value {
  hasAmount_ = !!value;
}
@synthesize amount;
- (id) init {
  if ((self = [super init])) {
    self.clientcode = @"";
    self.clientname = @"";
    self.duedate = @"";
    self.subaccount = @"";
    self.amount = @"";
  }
  return self;
}
static ClientOverdue* defaultClientOverdueInstance = nil;
+ (void) initialize {
  if (self == [ClientOverdue class]) {
    defaultClientOverdueInstance = [[ClientOverdue alloc] init];
  }
}
+ (ClientOverdue*) defaultInstance {
  return defaultClientOverdueInstance;
}
- (ClientOverdue*) defaultInstance {
  return defaultClientOverdueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClientcode) {
    [output writeString:1 value:self.clientcode];
  }
  if (self.hasClientname) {
    [output writeString:2 value:self.clientname];
  }
  if (self.hasDuedate) {
    [output writeString:3 value:self.duedate];
  }
  if (self.hasSubaccount) {
    [output writeString:4 value:self.subaccount];
  }
  if (self.hasAmount) {
    [output writeString:5 value:self.amount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasClientcode) {
    size += computeStringSize(1, self.clientcode);
  }
  if (self.hasClientname) {
    size += computeStringSize(2, self.clientname);
  }
  if (self.hasDuedate) {
    size += computeStringSize(3, self.duedate);
  }
  if (self.hasSubaccount) {
    size += computeStringSize(4, self.subaccount);
  }
  if (self.hasAmount) {
    size += computeStringSize(5, self.amount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ClientOverdue*) parseFromData:(NSData*) data {
  return (ClientOverdue*)[[[ClientOverdue builder] mergeFromData:data] build];
}
+ (ClientOverdue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientOverdue*)[[[ClientOverdue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientOverdue*) parseFromInputStream:(NSInputStream*) input {
  return (ClientOverdue*)[[[ClientOverdue builder] mergeFromInputStream:input] build];
}
+ (ClientOverdue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientOverdue*)[[[ClientOverdue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientOverdue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientOverdue*)[[[ClientOverdue builder] mergeFromCodedInputStream:input] build];
}
+ (ClientOverdue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientOverdue*)[[[ClientOverdue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientOverdue_Builder*) builder {
  return [[ClientOverdue_Builder alloc] init];
}
+ (ClientOverdue_Builder*) builderWithPrototype:(ClientOverdue*) prototype {
  return [[ClientOverdue builder] mergeFrom:prototype];
}
- (ClientOverdue_Builder*) builder {
  return [ClientOverdue builder];
}
- (ClientOverdue_Builder*) toBuilder {
  return [ClientOverdue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasClientname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientname", self.clientname];
  }
  if (self.hasDuedate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duedate", self.duedate];
  }
  if (self.hasSubaccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subaccount", self.subaccount];
  }
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", self.amount];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientOverdue class]]) {
    return NO;
  }
  ClientOverdue *otherMessage = other;
  return
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasClientname == otherMessage.hasClientname &&
      (!self.hasClientname || [self.clientname isEqual:otherMessage.clientname]) &&
      self.hasDuedate == otherMessage.hasDuedate &&
      (!self.hasDuedate || [self.duedate isEqual:otherMessage.duedate]) &&
      self.hasSubaccount == otherMessage.hasSubaccount &&
      (!self.hasSubaccount || [self.subaccount isEqual:otherMessage.subaccount]) &&
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || [self.amount isEqual:otherMessage.amount]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasClientname) {
    hashCode = hashCode * 31 + [self.clientname hash];
  }
  if (self.hasDuedate) {
    hashCode = hashCode * 31 + [self.duedate hash];
  }
  if (self.hasSubaccount) {
    hashCode = hashCode * 31 + [self.subaccount hash];
  }
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [self.amount hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientOverdue_Builder()
@property (strong) ClientOverdue* result;
@end

@implementation ClientOverdue_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientOverdue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientOverdue_Builder*) clear {
  self.result = [[ClientOverdue alloc] init];
  return self;
}
- (ClientOverdue_Builder*) clone {
  return [ClientOverdue builderWithPrototype:result];
}
- (ClientOverdue*) defaultInstance {
  return [ClientOverdue defaultInstance];
}
- (ClientOverdue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientOverdue*) buildPartial {
  ClientOverdue* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientOverdue_Builder*) mergeFrom:(ClientOverdue*) other {
  if (other == [ClientOverdue defaultInstance]) {
    return self;
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasClientname) {
    [self setClientname:other.clientname];
  }
  if (other.hasDuedate) {
    [self setDuedate:other.duedate];
  }
  if (other.hasSubaccount) {
    [self setSubaccount:other.subaccount];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientOverdue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientOverdue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClientcode:[input readString]];
        break;
      }
      case 18: {
        [self setClientname:[input readString]];
        break;
      }
      case 26: {
        [self setDuedate:[input readString]];
        break;
      }
      case 34: {
        [self setSubaccount:[input readString]];
        break;
      }
      case 42: {
        [self setAmount:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (ClientOverdue_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (ClientOverdue_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasClientname {
  return result.hasClientname;
}
- (NSString*) clientname {
  return result.clientname;
}
- (ClientOverdue_Builder*) setClientname:(NSString*) value {
  result.hasClientname = YES;
  result.clientname = value;
  return self;
}
- (ClientOverdue_Builder*) clearClientname {
  result.hasClientname = NO;
  result.clientname = @"";
  return self;
}
- (BOOL) hasDuedate {
  return result.hasDuedate;
}
- (NSString*) duedate {
  return result.duedate;
}
- (ClientOverdue_Builder*) setDuedate:(NSString*) value {
  result.hasDuedate = YES;
  result.duedate = value;
  return self;
}
- (ClientOverdue_Builder*) clearDuedate {
  result.hasDuedate = NO;
  result.duedate = @"";
  return self;
}
- (BOOL) hasSubaccount {
  return result.hasSubaccount;
}
- (NSString*) subaccount {
  return result.subaccount;
}
- (ClientOverdue_Builder*) setSubaccount:(NSString*) value {
  result.hasSubaccount = YES;
  result.subaccount = value;
  return self;
}
- (ClientOverdue_Builder*) clearSubaccount {
  result.hasSubaccount = NO;
  result.subaccount = @"";
  return self;
}
- (BOOL) hasAmount {
  return result.hasAmount;
}
- (NSString*) amount {
  return result.amount;
}
- (ClientOverdue_Builder*) setAmount:(NSString*) value {
  result.hasAmount = YES;
  result.amount = value;
  return self;
}
- (ClientOverdue_Builder*) clearAmount {
  result.hasAmount = NO;
  result.amount = @"";
  return self;
}
@end

@interface PotonganPajak ()
@property (strong) NSString* trxDate;
@property (strong) NSString* securitycode;
@property Float64 qty;
@property Float64 price;
@property Float64 val;
@property Float64 pph;
@property (strong) NSString* period;
@property (strong) NSString* clientname;
@property int32_t side;
@property Float64 commission;
@property Float64 minCommission;
@property (strong) NSString* branch;
@end

@implementation PotonganPajak

- (BOOL) hasTrxDate {
  return !!hasTrxDate_;
}
- (void) setHasTrxDate:(BOOL) value {
  hasTrxDate_ = !!value;
}
@synthesize trxDate;
- (BOOL) hasSecuritycode {
  return !!hasSecuritycode_;
}
- (void) setHasSecuritycode:(BOOL) value {
  hasSecuritycode_ = !!value;
}
@synthesize securitycode;
- (BOOL) hasQty {
  return !!hasQty_;
}
- (void) setHasQty:(BOOL) value {
  hasQty_ = !!value;
}
@synthesize qty;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasVal {
  return !!hasVal_;
}
- (void) setHasVal:(BOOL) value {
  hasVal_ = !!value;
}
@synthesize val;
- (BOOL) hasPph {
  return !!hasPph_;
}
- (void) setHasPph:(BOOL) value {
  hasPph_ = !!value;
}
@synthesize pph;
- (BOOL) hasPeriod {
  return !!hasPeriod_;
}
- (void) setHasPeriod:(BOOL) value {
  hasPeriod_ = !!value;
}
@synthesize period;
- (BOOL) hasClientname {
  return !!hasClientname_;
}
- (void) setHasClientname:(BOOL) value {
  hasClientname_ = !!value;
}
@synthesize clientname;
- (BOOL) hasSide {
  return !!hasSide_;
}
- (void) setHasSide:(BOOL) value {
  hasSide_ = !!value;
}
@synthesize side;
- (BOOL) hasCommission {
  return !!hasCommission_;
}
- (void) setHasCommission:(BOOL) value {
  hasCommission_ = !!value;
}
@synthesize commission;
- (BOOL) hasMinCommission {
  return !!hasMinCommission_;
}
- (void) setHasMinCommission:(BOOL) value {
  hasMinCommission_ = !!value;
}
@synthesize minCommission;
- (BOOL) hasBranch {
  return !!hasBranch_;
}
- (void) setHasBranch:(BOOL) value {
  hasBranch_ = !!value;
}
@synthesize branch;
- (id) init {
  if ((self = [super init])) {
    self.trxDate = @"";
    self.securitycode = @"";
    self.qty = 0;
    self.price = 0;
    self.val = 0;
    self.pph = 0;
    self.period = @"";
    self.clientname = @"";
    self.side = 0;
    self.commission = 0;
    self.minCommission = 0;
    self.branch = @"";
  }
  return self;
}
static PotonganPajak* defaultPotonganPajakInstance = nil;
+ (void) initialize {
  if (self == [PotonganPajak class]) {
    defaultPotonganPajakInstance = [[PotonganPajak alloc] init];
  }
}
+ (PotonganPajak*) defaultInstance {
  return defaultPotonganPajakInstance;
}
- (PotonganPajak*) defaultInstance {
  return defaultPotonganPajakInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTrxDate) {
    [output writeString:1 value:self.trxDate];
  }
  if (self.hasSecuritycode) {
    [output writeString:2 value:self.securitycode];
  }
  if (self.hasQty) {
    [output writeDouble:3 value:self.qty];
  }
  if (self.hasPrice) {
    [output writeDouble:4 value:self.price];
  }
  if (self.hasVal) {
    [output writeDouble:5 value:self.val];
  }
  if (self.hasPph) {
    [output writeDouble:6 value:self.pph];
  }
  if (self.hasPeriod) {
    [output writeString:7 value:self.period];
  }
  if (self.hasClientname) {
    [output writeString:8 value:self.clientname];
  }
  if (self.hasSide) {
    [output writeInt32:9 value:self.side];
  }
  if (self.hasCommission) {
    [output writeDouble:10 value:self.commission];
  }
  if (self.hasMinCommission) {
    [output writeDouble:11 value:self.minCommission];
  }
  if (self.hasBranch) {
    [output writeString:12 value:self.branch];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTrxDate) {
    size += computeStringSize(1, self.trxDate);
  }
  if (self.hasSecuritycode) {
    size += computeStringSize(2, self.securitycode);
  }
  if (self.hasQty) {
    size += computeDoubleSize(3, self.qty);
  }
  if (self.hasPrice) {
    size += computeDoubleSize(4, self.price);
  }
  if (self.hasVal) {
    size += computeDoubleSize(5, self.val);
  }
  if (self.hasPph) {
    size += computeDoubleSize(6, self.pph);
  }
  if (self.hasPeriod) {
    size += computeStringSize(7, self.period);
  }
  if (self.hasClientname) {
    size += computeStringSize(8, self.clientname);
  }
  if (self.hasSide) {
    size += computeInt32Size(9, self.side);
  }
  if (self.hasCommission) {
    size += computeDoubleSize(10, self.commission);
  }
  if (self.hasMinCommission) {
    size += computeDoubleSize(11, self.minCommission);
  }
  if (self.hasBranch) {
    size += computeStringSize(12, self.branch);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PotonganPajak*) parseFromData:(NSData*) data {
  return (PotonganPajak*)[[[PotonganPajak builder] mergeFromData:data] build];
}
+ (PotonganPajak*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PotonganPajak*)[[[PotonganPajak builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PotonganPajak*) parseFromInputStream:(NSInputStream*) input {
  return (PotonganPajak*)[[[PotonganPajak builder] mergeFromInputStream:input] build];
}
+ (PotonganPajak*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PotonganPajak*)[[[PotonganPajak builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PotonganPajak*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PotonganPajak*)[[[PotonganPajak builder] mergeFromCodedInputStream:input] build];
}
+ (PotonganPajak*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PotonganPajak*)[[[PotonganPajak builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PotonganPajak_Builder*) builder {
  return [[PotonganPajak_Builder alloc] init];
}
+ (PotonganPajak_Builder*) builderWithPrototype:(PotonganPajak*) prototype {
  return [[PotonganPajak builder] mergeFrom:prototype];
}
- (PotonganPajak_Builder*) builder {
  return [PotonganPajak builder];
}
- (PotonganPajak_Builder*) toBuilder {
  return [PotonganPajak builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasTrxDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"trxDate", self.trxDate];
  }
  if (self.hasSecuritycode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securitycode", self.securitycode];
  }
  if (self.hasQty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qty", [NSNumber numberWithDouble:self.qty]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithDouble:self.price]];
  }
  if (self.hasVal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"val", [NSNumber numberWithDouble:self.val]];
  }
  if (self.hasPph) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pph", [NSNumber numberWithDouble:self.pph]];
  }
  if (self.hasPeriod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"period", self.period];
  }
  if (self.hasClientname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientname", self.clientname];
  }
  if (self.hasSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"side", [NSNumber numberWithInt:self.side]];
  }
  if (self.hasCommission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commission", [NSNumber numberWithDouble:self.commission]];
  }
  if (self.hasMinCommission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minCommission", [NSNumber numberWithDouble:self.minCommission]];
  }
  if (self.hasBranch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"branch", self.branch];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PotonganPajak class]]) {
    return NO;
  }
  PotonganPajak *otherMessage = other;
  return
      self.hasTrxDate == otherMessage.hasTrxDate &&
      (!self.hasTrxDate || [self.trxDate isEqual:otherMessage.trxDate]) &&
      self.hasSecuritycode == otherMessage.hasSecuritycode &&
      (!self.hasSecuritycode || [self.securitycode isEqual:otherMessage.securitycode]) &&
      self.hasQty == otherMessage.hasQty &&
      (!self.hasQty || self.qty == otherMessage.qty) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasVal == otherMessage.hasVal &&
      (!self.hasVal || self.val == otherMessage.val) &&
      self.hasPph == otherMessage.hasPph &&
      (!self.hasPph || self.pph == otherMessage.pph) &&
      self.hasPeriod == otherMessage.hasPeriod &&
      (!self.hasPeriod || [self.period isEqual:otherMessage.period]) &&
      self.hasClientname == otherMessage.hasClientname &&
      (!self.hasClientname || [self.clientname isEqual:otherMessage.clientname]) &&
      self.hasSide == otherMessage.hasSide &&
      (!self.hasSide || self.side == otherMessage.side) &&
      self.hasCommission == otherMessage.hasCommission &&
      (!self.hasCommission || self.commission == otherMessage.commission) &&
      self.hasMinCommission == otherMessage.hasMinCommission &&
      (!self.hasMinCommission || self.minCommission == otherMessage.minCommission) &&
      self.hasBranch == otherMessage.hasBranch &&
      (!self.hasBranch || [self.branch isEqual:otherMessage.branch]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasTrxDate) {
    hashCode = hashCode * 31 + [self.trxDate hash];
  }
  if (self.hasSecuritycode) {
    hashCode = hashCode * 31 + [self.securitycode hash];
  }
  if (self.hasQty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.qty] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.price] hash];
  }
  if (self.hasVal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.val] hash];
  }
  if (self.hasPph) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.pph] hash];
  }
  if (self.hasPeriod) {
    hashCode = hashCode * 31 + [self.period hash];
  }
  if (self.hasClientname) {
    hashCode = hashCode * 31 + [self.clientname hash];
  }
  if (self.hasSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.side] hash];
  }
  if (self.hasCommission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.commission] hash];
  }
  if (self.hasMinCommission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.minCommission] hash];
  }
  if (self.hasBranch) {
    hashCode = hashCode * 31 + [self.branch hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PotonganPajak_Builder()
@property (strong) PotonganPajak* result;
@end

@implementation PotonganPajak_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PotonganPajak alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PotonganPajak_Builder*) clear {
  self.result = [[PotonganPajak alloc] init];
  return self;
}
- (PotonganPajak_Builder*) clone {
  return [PotonganPajak builderWithPrototype:result];
}
- (PotonganPajak*) defaultInstance {
  return [PotonganPajak defaultInstance];
}
- (PotonganPajak*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PotonganPajak*) buildPartial {
  PotonganPajak* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PotonganPajak_Builder*) mergeFrom:(PotonganPajak*) other {
  if (other == [PotonganPajak defaultInstance]) {
    return self;
  }
  if (other.hasTrxDate) {
    [self setTrxDate:other.trxDate];
  }
  if (other.hasSecuritycode) {
    [self setSecuritycode:other.securitycode];
  }
  if (other.hasQty) {
    [self setQty:other.qty];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasVal) {
    [self setVal:other.val];
  }
  if (other.hasPph) {
    [self setPph:other.pph];
  }
  if (other.hasPeriod) {
    [self setPeriod:other.period];
  }
  if (other.hasClientname) {
    [self setClientname:other.clientname];
  }
  if (other.hasSide) {
    [self setSide:other.side];
  }
  if (other.hasCommission) {
    [self setCommission:other.commission];
  }
  if (other.hasMinCommission) {
    [self setMinCommission:other.minCommission];
  }
  if (other.hasBranch) {
    [self setBranch:other.branch];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PotonganPajak_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PotonganPajak_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTrxDate:[input readString]];
        break;
      }
      case 18: {
        [self setSecuritycode:[input readString]];
        break;
      }
      case 25: {
        [self setQty:[input readDouble]];
        break;
      }
      case 33: {
        [self setPrice:[input readDouble]];
        break;
      }
      case 41: {
        [self setVal:[input readDouble]];
        break;
      }
      case 49: {
        [self setPph:[input readDouble]];
        break;
      }
      case 58: {
        [self setPeriod:[input readString]];
        break;
      }
      case 66: {
        [self setClientname:[input readString]];
        break;
      }
      case 72: {
        [self setSide:[input readInt32]];
        break;
      }
      case 81: {
        [self setCommission:[input readDouble]];
        break;
      }
      case 89: {
        [self setMinCommission:[input readDouble]];
        break;
      }
      case 98: {
        [self setBranch:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTrxDate {
  return result.hasTrxDate;
}
- (NSString*) trxDate {
  return result.trxDate;
}
- (PotonganPajak_Builder*) setTrxDate:(NSString*) value {
  result.hasTrxDate = YES;
  result.trxDate = value;
  return self;
}
- (PotonganPajak_Builder*) clearTrxDate {
  result.hasTrxDate = NO;
  result.trxDate = @"";
  return self;
}
- (BOOL) hasSecuritycode {
  return result.hasSecuritycode;
}
- (NSString*) securitycode {
  return result.securitycode;
}
- (PotonganPajak_Builder*) setSecuritycode:(NSString*) value {
  result.hasSecuritycode = YES;
  result.securitycode = value;
  return self;
}
- (PotonganPajak_Builder*) clearSecuritycode {
  result.hasSecuritycode = NO;
  result.securitycode = @"";
  return self;
}
- (BOOL) hasQty {
  return result.hasQty;
}
- (Float64) qty {
  return result.qty;
}
- (PotonganPajak_Builder*) setQty:(Float64) value {
  result.hasQty = YES;
  result.qty = value;
  return self;
}
- (PotonganPajak_Builder*) clearQty {
  result.hasQty = NO;
  result.qty = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (Float64) price {
  return result.price;
}
- (PotonganPajak_Builder*) setPrice:(Float64) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (PotonganPajak_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasVal {
  return result.hasVal;
}
- (Float64) val {
  return result.val;
}
- (PotonganPajak_Builder*) setVal:(Float64) value {
  result.hasVal = YES;
  result.val = value;
  return self;
}
- (PotonganPajak_Builder*) clearVal {
  result.hasVal = NO;
  result.val = 0;
  return self;
}
- (BOOL) hasPph {
  return result.hasPph;
}
- (Float64) pph {
  return result.pph;
}
- (PotonganPajak_Builder*) setPph:(Float64) value {
  result.hasPph = YES;
  result.pph = value;
  return self;
}
- (PotonganPajak_Builder*) clearPph {
  result.hasPph = NO;
  result.pph = 0;
  return self;
}
- (BOOL) hasPeriod {
  return result.hasPeriod;
}
- (NSString*) period {
  return result.period;
}
- (PotonganPajak_Builder*) setPeriod:(NSString*) value {
  result.hasPeriod = YES;
  result.period = value;
  return self;
}
- (PotonganPajak_Builder*) clearPeriod {
  result.hasPeriod = NO;
  result.period = @"";
  return self;
}
- (BOOL) hasClientname {
  return result.hasClientname;
}
- (NSString*) clientname {
  return result.clientname;
}
- (PotonganPajak_Builder*) setClientname:(NSString*) value {
  result.hasClientname = YES;
  result.clientname = value;
  return self;
}
- (PotonganPajak_Builder*) clearClientname {
  result.hasClientname = NO;
  result.clientname = @"";
  return self;
}
- (BOOL) hasSide {
  return result.hasSide;
}
- (int32_t) side {
  return result.side;
}
- (PotonganPajak_Builder*) setSide:(int32_t) value {
  result.hasSide = YES;
  result.side = value;
  return self;
}
- (PotonganPajak_Builder*) clearSide {
  result.hasSide = NO;
  result.side = 0;
  return self;
}
- (BOOL) hasCommission {
  return result.hasCommission;
}
- (Float64) commission {
  return result.commission;
}
- (PotonganPajak_Builder*) setCommission:(Float64) value {
  result.hasCommission = YES;
  result.commission = value;
  return self;
}
- (PotonganPajak_Builder*) clearCommission {
  result.hasCommission = NO;
  result.commission = 0;
  return self;
}
- (BOOL) hasMinCommission {
  return result.hasMinCommission;
}
- (Float64) minCommission {
  return result.minCommission;
}
- (PotonganPajak_Builder*) setMinCommission:(Float64) value {
  result.hasMinCommission = YES;
  result.minCommission = value;
  return self;
}
- (PotonganPajak_Builder*) clearMinCommission {
  result.hasMinCommission = NO;
  result.minCommission = 0;
  return self;
}
- (BOOL) hasBranch {
  return result.hasBranch;
}
- (NSString*) branch {
  return result.branch;
}
- (PotonganPajak_Builder*) setBranch:(NSString*) value {
  result.hasBranch = YES;
  result.branch = value;
  return self;
}
- (PotonganPajak_Builder*) clearBranch {
  result.hasBranch = NO;
  result.branch = @"";
  return self;
}
@end

@interface UnregularStocklist ()
@property (strong) NSString* clientcode;
@property (strong) NSString* stockcode;
@property (strong) NSString* message;
@end

@implementation UnregularStocklist

- (BOOL) hasClientcode {
  return !!hasClientcode_;
}
- (void) setHasClientcode:(BOOL) value {
  hasClientcode_ = !!value;
}
@synthesize clientcode;
- (BOOL) hasStockcode {
  return !!hasStockcode_;
}
- (void) setHasStockcode:(BOOL) value {
  hasStockcode_ = !!value;
}
@synthesize stockcode;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value {
  hasMessage_ = !!value;
}
@synthesize message;
- (id) init {
  if ((self = [super init])) {
    self.clientcode = @"";
    self.stockcode = @"";
    self.message = @"";
  }
  return self;
}
static UnregularStocklist* defaultUnregularStocklistInstance = nil;
+ (void) initialize {
  if (self == [UnregularStocklist class]) {
    defaultUnregularStocklistInstance = [[UnregularStocklist alloc] init];
  }
}
+ (UnregularStocklist*) defaultInstance {
  return defaultUnregularStocklistInstance;
}
- (UnregularStocklist*) defaultInstance {
  return defaultUnregularStocklistInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClientcode) {
    [output writeString:1 value:self.clientcode];
  }
  if (self.hasStockcode) {
    [output writeString:2 value:self.stockcode];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasClientcode) {
    size += computeStringSize(1, self.clientcode);
  }
  if (self.hasStockcode) {
    size += computeStringSize(2, self.stockcode);
  }
  if (self.hasMessage) {
    size += computeStringSize(3, self.message);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UnregularStocklist*) parseFromData:(NSData*) data {
  return (UnregularStocklist*)[[[UnregularStocklist builder] mergeFromData:data] build];
}
+ (UnregularStocklist*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnregularStocklist*)[[[UnregularStocklist builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnregularStocklist*) parseFromInputStream:(NSInputStream*) input {
  return (UnregularStocklist*)[[[UnregularStocklist builder] mergeFromInputStream:input] build];
}
+ (UnregularStocklist*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnregularStocklist*)[[[UnregularStocklist builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnregularStocklist*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnregularStocklist*)[[[UnregularStocklist builder] mergeFromCodedInputStream:input] build];
}
+ (UnregularStocklist*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnregularStocklist*)[[[UnregularStocklist builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnregularStocklist_Builder*) builder {
  return [[UnregularStocklist_Builder alloc] init];
}
+ (UnregularStocklist_Builder*) builderWithPrototype:(UnregularStocklist*) prototype {
  return [[UnregularStocklist builder] mergeFrom:prototype];
}
- (UnregularStocklist_Builder*) builder {
  return [UnregularStocklist builder];
}
- (UnregularStocklist_Builder*) toBuilder {
  return [UnregularStocklist builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientcode", self.clientcode];
  }
  if (self.hasStockcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockcode", self.stockcode];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UnregularStocklist class]]) {
    return NO;
  }
  UnregularStocklist *otherMessage = other;
  return
      self.hasClientcode == otherMessage.hasClientcode &&
      (!self.hasClientcode || [self.clientcode isEqual:otherMessage.clientcode]) &&
      self.hasStockcode == otherMessage.hasStockcode &&
      (!self.hasStockcode || [self.stockcode isEqual:otherMessage.stockcode]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasClientcode) {
    hashCode = hashCode * 31 + [self.clientcode hash];
  }
  if (self.hasStockcode) {
    hashCode = hashCode * 31 + [self.stockcode hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UnregularStocklist_Builder()
@property (strong) UnregularStocklist* result;
@end

@implementation UnregularStocklist_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UnregularStocklist alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UnregularStocklist_Builder*) clear {
  self.result = [[UnregularStocklist alloc] init];
  return self;
}
- (UnregularStocklist_Builder*) clone {
  return [UnregularStocklist builderWithPrototype:result];
}
- (UnregularStocklist*) defaultInstance {
  return [UnregularStocklist defaultInstance];
}
- (UnregularStocklist*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnregularStocklist*) buildPartial {
  UnregularStocklist* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UnregularStocklist_Builder*) mergeFrom:(UnregularStocklist*) other {
  if (other == [UnregularStocklist defaultInstance]) {
    return self;
  }
  if (other.hasClientcode) {
    [self setClientcode:other.clientcode];
  }
  if (other.hasStockcode) {
    [self setStockcode:other.stockcode];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnregularStocklist_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnregularStocklist_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClientcode:[input readString]];
        break;
      }
      case 18: {
        [self setStockcode:[input readString]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClientcode {
  return result.hasClientcode;
}
- (NSString*) clientcode {
  return result.clientcode;
}
- (UnregularStocklist_Builder*) setClientcode:(NSString*) value {
  result.hasClientcode = YES;
  result.clientcode = value;
  return self;
}
- (UnregularStocklist_Builder*) clearClientcode {
  result.hasClientcode = NO;
  result.clientcode = @"";
  return self;
}
- (BOOL) hasStockcode {
  return result.hasStockcode;
}
- (NSString*) stockcode {
  return result.stockcode;
}
- (UnregularStocklist_Builder*) setStockcode:(NSString*) value {
  result.hasStockcode = YES;
  result.stockcode = value;
  return self;
}
- (UnregularStocklist_Builder*) clearStockcode {
  result.hasStockcode = NO;
  result.stockcode = @"";
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (UnregularStocklist_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (UnregularStocklist_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
@end

@interface CashWithdraw ()
@property (strong) NSString* id;
@property Float32 currentCash;
@property (strong) NSString* transferTo;
@property Float32 amount;
@property (strong) NSString* tradingPin;
@property (strong) NSString* type;
@property (strong) NSString* statusAgrement;
@property (strong) NSString* reqDate;
@property (strong) NSString* reqStatus;
@end

@implementation CashWithdraw

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasCurrentCash {
  return !!hasCurrentCash_;
}
- (void) setHasCurrentCash:(BOOL) value {
  hasCurrentCash_ = !!value;
}
@synthesize currentCash;
- (BOOL) hasTransferTo {
  return !!hasTransferTo_;
}
- (void) setHasTransferTo:(BOOL) value {
  hasTransferTo_ = !!value;
}
@synthesize transferTo;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) value {
  hasAmount_ = !!value;
}
@synthesize amount;
- (BOOL) hasTradingPin {
  return !!hasTradingPin_;
}
- (void) setHasTradingPin:(BOOL) value {
  hasTradingPin_ = !!value;
}
@synthesize tradingPin;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasStatusAgrement {
  return !!hasStatusAgrement_;
}
- (void) setHasStatusAgrement:(BOOL) value {
  hasStatusAgrement_ = !!value;
}
@synthesize statusAgrement;
- (BOOL) hasReqDate {
  return !!hasReqDate_;
}
- (void) setHasReqDate:(BOOL) value {
  hasReqDate_ = !!value;
}
@synthesize reqDate;
- (BOOL) hasReqStatus {
  return !!hasReqStatus_;
}
- (void) setHasReqStatus:(BOOL) value {
  hasReqStatus_ = !!value;
}
@synthesize reqStatus;
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.currentCash = 0;
    self.transferTo = @"";
    self.amount = 0;
    self.tradingPin = @"";
    self.type = @"";
    self.statusAgrement = @"";
    self.reqDate = @"";
    self.reqStatus = @"";
  }
  return self;
}
static CashWithdraw* defaultCashWithdrawInstance = nil;
+ (void) initialize {
  if (self == [CashWithdraw class]) {
    defaultCashWithdrawInstance = [[CashWithdraw alloc] init];
  }
}
+ (CashWithdraw*) defaultInstance {
  return defaultCashWithdrawInstance;
}
- (CashWithdraw*) defaultInstance {
  return defaultCashWithdrawInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasCurrentCash) {
    [output writeFloat:2 value:self.currentCash];
  }
  if (self.hasTransferTo) {
    [output writeString:3 value:self.transferTo];
  }
  if (self.hasAmount) {
    [output writeFloat:4 value:self.amount];
  }
  if (self.hasTradingPin) {
    [output writeString:5 value:self.tradingPin];
  }
  if (self.hasType) {
    [output writeString:6 value:self.type];
  }
  if (self.hasStatusAgrement) {
    [output writeString:7 value:self.statusAgrement];
  }
  if (self.hasReqDate) {
    [output writeString:8 value:self.reqDate];
  }
  if (self.hasReqStatus) {
    [output writeString:9 value:self.reqStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasCurrentCash) {
    size += computeFloatSize(2, self.currentCash);
  }
  if (self.hasTransferTo) {
    size += computeStringSize(3, self.transferTo);
  }
  if (self.hasAmount) {
    size += computeFloatSize(4, self.amount);
  }
  if (self.hasTradingPin) {
    size += computeStringSize(5, self.tradingPin);
  }
  if (self.hasType) {
    size += computeStringSize(6, self.type);
  }
  if (self.hasStatusAgrement) {
    size += computeStringSize(7, self.statusAgrement);
  }
  if (self.hasReqDate) {
    size += computeStringSize(8, self.reqDate);
  }
  if (self.hasReqStatus) {
    size += computeStringSize(9, self.reqStatus);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CashWithdraw*) parseFromData:(NSData*) data {
  return (CashWithdraw*)[[[CashWithdraw builder] mergeFromData:data] build];
}
+ (CashWithdraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashWithdraw*)[[[CashWithdraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CashWithdraw*) parseFromInputStream:(NSInputStream*) input {
  return (CashWithdraw*)[[[CashWithdraw builder] mergeFromInputStream:input] build];
}
+ (CashWithdraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashWithdraw*)[[[CashWithdraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CashWithdraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CashWithdraw*)[[[CashWithdraw builder] mergeFromCodedInputStream:input] build];
}
+ (CashWithdraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CashWithdraw*)[[[CashWithdraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CashWithdraw_Builder*) builder {
  return [[CashWithdraw_Builder alloc] init];
}
+ (CashWithdraw_Builder*) builderWithPrototype:(CashWithdraw*) prototype {
  return [[CashWithdraw builder] mergeFrom:prototype];
}
- (CashWithdraw_Builder*) builder {
  return [CashWithdraw builder];
}
- (CashWithdraw_Builder*) toBuilder {
  return [CashWithdraw builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasCurrentCash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentCash", [NSNumber numberWithFloat:self.currentCash]];
  }
  if (self.hasTransferTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transferTo", self.transferTo];
  }
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", [NSNumber numberWithFloat:self.amount]];
  }
  if (self.hasTradingPin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradingPin", self.tradingPin];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasStatusAgrement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusAgrement", self.statusAgrement];
  }
  if (self.hasReqDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqDate", self.reqDate];
  }
  if (self.hasReqStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqStatus", self.reqStatus];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CashWithdraw class]]) {
    return NO;
  }
  CashWithdraw *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasCurrentCash == otherMessage.hasCurrentCash &&
      (!self.hasCurrentCash || self.currentCash == otherMessage.currentCash) &&
      self.hasTransferTo == otherMessage.hasTransferTo &&
      (!self.hasTransferTo || [self.transferTo isEqual:otherMessage.transferTo]) &&
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || self.amount == otherMessage.amount) &&
      self.hasTradingPin == otherMessage.hasTradingPin &&
      (!self.hasTradingPin || [self.tradingPin isEqual:otherMessage.tradingPin]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasStatusAgrement == otherMessage.hasStatusAgrement &&
      (!self.hasStatusAgrement || [self.statusAgrement isEqual:otherMessage.statusAgrement]) &&
      self.hasReqDate == otherMessage.hasReqDate &&
      (!self.hasReqDate || [self.reqDate isEqual:otherMessage.reqDate]) &&
      self.hasReqStatus == otherMessage.hasReqStatus &&
      (!self.hasReqStatus || [self.reqStatus isEqual:otherMessage.reqStatus]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasCurrentCash) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.currentCash] hash];
  }
  if (self.hasTransferTo) {
    hashCode = hashCode * 31 + [self.transferTo hash];
  }
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.amount] hash];
  }
  if (self.hasTradingPin) {
    hashCode = hashCode * 31 + [self.tradingPin hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasStatusAgrement) {
    hashCode = hashCode * 31 + [self.statusAgrement hash];
  }
  if (self.hasReqDate) {
    hashCode = hashCode * 31 + [self.reqDate hash];
  }
  if (self.hasReqStatus) {
    hashCode = hashCode * 31 + [self.reqStatus hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CashWithdraw_Builder()
@property (strong) CashWithdraw* result;
@end

@implementation CashWithdraw_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CashWithdraw alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CashWithdraw_Builder*) clear {
  self.result = [[CashWithdraw alloc] init];
  return self;
}
- (CashWithdraw_Builder*) clone {
  return [CashWithdraw builderWithPrototype:result];
}
- (CashWithdraw*) defaultInstance {
  return [CashWithdraw defaultInstance];
}
- (CashWithdraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CashWithdraw*) buildPartial {
  CashWithdraw* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CashWithdraw_Builder*) mergeFrom:(CashWithdraw*) other {
  if (other == [CashWithdraw defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCurrentCash) {
    [self setCurrentCash:other.currentCash];
  }
  if (other.hasTransferTo) {
    [self setTransferTo:other.transferTo];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  if (other.hasTradingPin) {
    [self setTradingPin:other.tradingPin];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasStatusAgrement) {
    [self setStatusAgrement:other.statusAgrement];
  }
  if (other.hasReqDate) {
    [self setReqDate:other.reqDate];
  }
  if (other.hasReqStatus) {
    [self setReqStatus:other.reqStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CashWithdraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CashWithdraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 21: {
        [self setCurrentCash:[input readFloat]];
        break;
      }
      case 26: {
        [self setTransferTo:[input readString]];
        break;
      }
      case 37: {
        [self setAmount:[input readFloat]];
        break;
      }
      case 42: {
        [self setTradingPin:[input readString]];
        break;
      }
      case 50: {
        [self setType:[input readString]];
        break;
      }
      case 58: {
        [self setStatusAgrement:[input readString]];
        break;
      }
      case 66: {
        [self setReqDate:[input readString]];
        break;
      }
      case 74: {
        [self setReqStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (CashWithdraw_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CashWithdraw_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasCurrentCash {
  return result.hasCurrentCash;
}
- (Float32) currentCash {
  return result.currentCash;
}
- (CashWithdraw_Builder*) setCurrentCash:(Float32) value {
  result.hasCurrentCash = YES;
  result.currentCash = value;
  return self;
}
- (CashWithdraw_Builder*) clearCurrentCash {
  result.hasCurrentCash = NO;
  result.currentCash = 0;
  return self;
}
- (BOOL) hasTransferTo {
  return result.hasTransferTo;
}
- (NSString*) transferTo {
  return result.transferTo;
}
- (CashWithdraw_Builder*) setTransferTo:(NSString*) value {
  result.hasTransferTo = YES;
  result.transferTo = value;
  return self;
}
- (CashWithdraw_Builder*) clearTransferTo {
  result.hasTransferTo = NO;
  result.transferTo = @"";
  return self;
}
- (BOOL) hasAmount {
  return result.hasAmount;
}
- (Float32) amount {
  return result.amount;
}
- (CashWithdraw_Builder*) setAmount:(Float32) value {
  result.hasAmount = YES;
  result.amount = value;
  return self;
}
- (CashWithdraw_Builder*) clearAmount {
  result.hasAmount = NO;
  result.amount = 0;
  return self;
}
- (BOOL) hasTradingPin {
  return result.hasTradingPin;
}
- (NSString*) tradingPin {
  return result.tradingPin;
}
- (CashWithdraw_Builder*) setTradingPin:(NSString*) value {
  result.hasTradingPin = YES;
  result.tradingPin = value;
  return self;
}
- (CashWithdraw_Builder*) clearTradingPin {
  result.hasTradingPin = NO;
  result.tradingPin = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (CashWithdraw_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (CashWithdraw_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasStatusAgrement {
  return result.hasStatusAgrement;
}
- (NSString*) statusAgrement {
  return result.statusAgrement;
}
- (CashWithdraw_Builder*) setStatusAgrement:(NSString*) value {
  result.hasStatusAgrement = YES;
  result.statusAgrement = value;
  return self;
}
- (CashWithdraw_Builder*) clearStatusAgrement {
  result.hasStatusAgrement = NO;
  result.statusAgrement = @"";
  return self;
}
- (BOOL) hasReqDate {
  return result.hasReqDate;
}
- (NSString*) reqDate {
  return result.reqDate;
}
- (CashWithdraw_Builder*) setReqDate:(NSString*) value {
  result.hasReqDate = YES;
  result.reqDate = value;
  return self;
}
- (CashWithdraw_Builder*) clearReqDate {
  result.hasReqDate = NO;
  result.reqDate = @"";
  return self;
}
- (BOOL) hasReqStatus {
  return result.hasReqStatus;
}
- (NSString*) reqStatus {
  return result.reqStatus;
}
- (CashWithdraw_Builder*) setReqStatus:(NSString*) value {
  result.hasReqStatus = YES;
  result.reqStatus = value;
  return self;
}
- (CashWithdraw_Builder*) clearReqStatus {
  result.hasReqStatus = NO;
  result.reqStatus = @"";
  return self;
}
@end

